
ACCU_P23_FreeRTOS_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000216f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b4  08021888  08021888  00031888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022b3c  08022b3c  000402f4  2**0
                  CONTENTS
  4 .ARM          00000008  08022b3c  08022b3c  00032b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022b44  08022b44  000402f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022b44  08022b44  00032b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022b48  08022b48  00032b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  08022b4c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000402f4  2**0
                  CONTENTS
 10 .bss          00009ed8  200002f4  200002f4  000402f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a1cc  2000a1cc  000402f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000402f4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00040324  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003ab66  00000000  00000000  00040367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008672  00000000  00000000  0007aecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a90  00000000  00000000  00083540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000020e9  00000000  00000000  00085fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e583  00000000  00000000  000880b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003c1cf  00000000  00000000  000b663c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e8a19  00000000  00000000  000f280b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000c834  00000000  00000000  001db224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000097  00000000  00000000  001e7a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f4 	.word	0x200002f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0802186c 	.word	0x0802186c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f8 	.word	0x200002f8
 80001cc:	0802186c 	.word	0x0802186c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <CAN_Handler_Init>:
//uint8_t IVT_Baud_CONFIG[8] = {0x3A,0x02,0x00,0x00,0x00,0x00,0x00,0x00};


void CAN_Handler_Init(CAN_Handler *can_handler, CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *RxHeader,
			          CAN_TxHeaderTypeDef *TxHeader, uint8_t *RxData, uint8_t *TxData, uint32_t *canMailbox, uint32_t can_fifo)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
	can_handler->hcan 		= hcan;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	601a      	str	r2, [r3, #0]
	can_handler->RxHeader 	= RxHeader;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	605a      	str	r2, [r3, #4]
	can_handler->TxHeader 	= TxHeader;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	609a      	str	r2, [r3, #8]
	can_handler->RxData 	= RxData;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	60da      	str	r2, [r3, #12]
	can_handler->TxData 	= TxData;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	69fa      	ldr	r2, [r7, #28]
 800101a:	611a      	str	r2, [r3, #16]
	can_handler->canMailbox = canMailbox;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6a3a      	ldr	r2, [r7, #32]
 8001020:	615a      	str	r2, [r3, #20]
	can_handler->canFIFO	= can_fifo;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001026:	619a      	str	r2, [r3, #24]
	can_handler->canRx_errors = 0x00;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
	can_handler->canTx_errors = 0x00;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <IVT_CAN_Rx>:



/* Receive data from TSAC bus : IVT & More */
void IVT_CAN_Rx(Ivt *ivt)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	switch(ivt->can_handler->RxHeader->StdId)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f2a3 5321 	subw	r3, r3, #1313	; 0x521
 8001054:	2b07      	cmp	r3, #7
 8001056:	f200 8135 	bhi.w	80012c4 <IVT_CAN_Rx+0x284>
 800105a:	a201      	add	r2, pc, #4	; (adr r2, 8001060 <IVT_CAN_Rx+0x20>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	08001081 	.word	0x08001081
 8001064:	080010fd 	.word	0x080010fd
 8001068:	08001179 	.word	0x08001179
 800106c:	080012c5 	.word	0x080012c5
 8001070:	080012c5 	.word	0x080012c5
 8001074:	080012c5 	.word	0x080012c5
 8001078:	080011f5 	.word	0x080011f5
 800107c:	0800125d 	.word	0x0800125d
	{
	case IVT_I:
		ivt->current = 0.001 * (float)(ivt->can_handler->RxData[2] << 24 | ivt->can_handler->RxData[3] << 16 | ivt->can_handler->RxData[4] << 8 | ivt->can_handler->RxData[5]);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	3302      	adds	r3, #2
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	061a      	lsls	r2, r3, #24
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	3303      	adds	r3, #3
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	041b      	lsls	r3, r3, #16
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	3304      	adds	r3, #4
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	4313      	orrs	r3, r2
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	6812      	ldr	r2, [r2, #0]
 80010ac:	68d2      	ldr	r2, [r2, #12]
 80010ae:	3205      	adds	r2, #5
 80010b0:	7812      	ldrb	r2, [r2, #0]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010bc:	ee17 0a90 	vmov	r0, s15
 80010c0:	f7ff fa42 	bl	8000548 <__aeabi_f2d>
 80010c4:	a383      	add	r3, pc, #524	; (adr r3, 80012d4 <IVT_CAN_Rx+0x294>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	f7ff fa95 	bl	80005f8 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff fd87 	bl	8000be8 <__aeabi_d2f>
 80010da:	4602      	mov	r2, r0
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	60da      	str	r2, [r3, #12]
		ivt->IVT_I_Time = xTaskGetTickCount() - ivt->IVT_I_Time_Previous;
 80010e0:	f018 fedc 	bl	8019e9c <xTaskGetTickCount>
 80010e4:	4602      	mov	r2, r0
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	1ad2      	subs	r2, r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
		ivt->IVT_I_Time_Previous = xTaskGetTickCount();
 80010f0:	f018 fed4 	bl	8019e9c <xTaskGetTickCount>
 80010f4:	4602      	mov	r2, r0
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 80010fa:	e0e4      	b.n	80012c6 <IVT_CAN_Rx+0x286>

	case IVT_U1:
		ivt->voltage_vs = 0.001 * (float)(ivt->can_handler->RxData[2] << 24 | ivt->can_handler->RxData[3] << 16 | ivt->can_handler->RxData[4] << 8 | ivt->can_handler->RxData[5]);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	3302      	adds	r3, #2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	061a      	lsls	r2, r3, #24
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	3303      	adds	r3, #3
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	041b      	lsls	r3, r3, #16
 8001114:	431a      	orrs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	3304      	adds	r3, #4
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	4313      	orrs	r3, r2
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	68d2      	ldr	r2, [r2, #12]
 800112a:	3205      	adds	r2, #5
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	4313      	orrs	r3, r2
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001138:	ee17 0a90 	vmov	r0, s15
 800113c:	f7ff fa04 	bl	8000548 <__aeabi_f2d>
 8001140:	a364      	add	r3, pc, #400	; (adr r3, 80012d4 <IVT_CAN_Rx+0x294>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa57 	bl	80005f8 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fd49 	bl	8000be8 <__aeabi_d2f>
 8001156:	4602      	mov	r2, r0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	611a      	str	r2, [r3, #16]
		ivt->IVT_U1_Time = xTaskGetTickCount() - ivt->IVT_U1_Time_Previous;
 800115c:	f018 fe9e 	bl	8019e9c <xTaskGetTickCount>
 8001160:	4602      	mov	r2, r0
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001166:	1ad2      	subs	r2, r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	631a      	str	r2, [r3, #48]	; 0x30
		ivt->IVT_U1_Time_Previous = xTaskGetTickCount();
 800116c:	f018 fe96 	bl	8019e9c <xTaskGetTickCount>
 8001170:	4602      	mov	r2, r0
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001176:	e0a6      	b.n	80012c6 <IVT_CAN_Rx+0x286>

	case IVT_U2:
		ivt->voltage_U2 = 0.001 * (float)(ivt->can_handler->RxData[2] << 24 | ivt->can_handler->RxData[3] << 16 | ivt->can_handler->RxData[4] << 8 | ivt->can_handler->RxData[5]);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	3302      	adds	r3, #2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	061a      	lsls	r2, r3, #24
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	3303      	adds	r3, #3
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	041b      	lsls	r3, r3, #16
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	3304      	adds	r3, #4
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	4313      	orrs	r3, r2
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	68d2      	ldr	r2, [r2, #12]
 80011a6:	3205      	adds	r2, #5
 80011a8:	7812      	ldrb	r2, [r2, #0]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b4:	ee17 0a90 	vmov	r0, s15
 80011b8:	f7ff f9c6 	bl	8000548 <__aeabi_f2d>
 80011bc:	a345      	add	r3, pc, #276	; (adr r3, 80012d4 <IVT_CAN_Rx+0x294>)
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	f7ff fa19 	bl	80005f8 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f7ff fd0b 	bl	8000be8 <__aeabi_d2f>
 80011d2:	4602      	mov	r2, r0
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	61da      	str	r2, [r3, #28]
		ivt->IVT_U2_Time = xTaskGetTickCount() - ivt->IVT_U2_Time_Previous;
 80011d8:	f018 fe60 	bl	8019e9c <xTaskGetTickCount>
 80011dc:	4602      	mov	r2, r0
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e2:	1ad2      	subs	r2, r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	639a      	str	r2, [r3, #56]	; 0x38
		ivt->IVT_U2_Time_Previous = xTaskGetTickCount();
 80011e8:	f018 fe58 	bl	8019e9c <xTaskGetTickCount>
 80011ec:	4602      	mov	r2, r0
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80011f2:	e068      	b.n	80012c6 <IVT_CAN_Rx+0x286>

	case IVT_AH:
		ivt->Ah_consumed = (float)(ivt->can_handler->RxData[5] | (ivt->can_handler->RxData[4] << 8) | (ivt->can_handler->RxData[3] << 16) | (ivt->can_handler->RxData[2] << 24)) / 3600;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	3305      	adds	r3, #5
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	3304      	adds	r3, #4
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	3303      	adds	r3, #3
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	041b      	lsls	r3, r3, #16
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	3302      	adds	r3, #2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	061b      	lsls	r3, r3, #24
 8001228:	4313      	orrs	r3, r2
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001232:	eddf 6a27 	vldr	s13, [pc, #156]	; 80012d0 <IVT_CAN_Rx+0x290>
 8001236:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	edc3 7a06 	vstr	s15, [r3, #24]
		ivt->IVT_AH_Time = xTaskGetTickCount() - ivt->IVT_AH_Time_Previous;
 8001240:	f018 fe2c 	bl	8019e9c <xTaskGetTickCount>
 8001244:	4602      	mov	r2, r0
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	1ad2      	subs	r2, r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	649a      	str	r2, [r3, #72]	; 0x48
		ivt->IVT_AH_Time_Previous = xTaskGetTickCount();
 8001250:	f018 fe24 	bl	8019e9c <xTaskGetTickCount>
 8001254:	4602      	mov	r2, r0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	64da      	str	r2, [r3, #76]	; 0x4c
		break;
 800125a:	e034      	b.n	80012c6 <IVT_CAN_Rx+0x286>

	case IVT_WH:
		ivt->Wh_consumed = (float)(ivt->can_handler->RxData[5] | (ivt->can_handler->RxData[4] << 8) | (ivt->can_handler->RxData[3] << 16) | (ivt->can_handler->RxData[2] << 24));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	3305      	adds	r3, #5
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	3304      	adds	r3, #4
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	3303      	adds	r3, #3
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	041b      	lsls	r3, r3, #16
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	3302      	adds	r3, #2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	061b      	lsls	r3, r3, #24
 8001290:	4313      	orrs	r3, r2
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129e:	ee17 3a90 	vmov	r3, s15
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	829a      	strh	r2, [r3, #20]
		ivt->IVT_WH_Time = xTaskGetTickCount() - ivt->IVT_WH_Time_Previous;
 80012a8:	f018 fdf8 	bl	8019e9c <xTaskGetTickCount>
 80012ac:	4602      	mov	r2, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b2:	1ad2      	subs	r2, r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	651a      	str	r2, [r3, #80]	; 0x50
		ivt->IVT_WH_Time_Previous = xTaskGetTickCount();
 80012b8:	f018 fdf0 	bl	8019e9c <xTaskGetTickCount>
 80012bc:	4602      	mov	r2, r0
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	655a      	str	r2, [r3, #84]	; 0x54
		break;
 80012c2:	e000      	b.n	80012c6 <IVT_CAN_Rx+0x286>

	default:
		break;
 80012c4:	bf00      	nop
	}
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	45610000 	.word	0x45610000
 80012d4:	d2f1a9fc 	.word	0xd2f1a9fc
 80012d8:	3f50624d 	.word	0x3f50624d

080012dc <Elcon_CAN_Tx>:


HAL_StatusTypeDef Elcon_CAN_Tx(Elcon *elcon, BMS_info *bmsInfo)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
	if(bmsInfo->charge_flag)
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d010      	beq.n	8001312 <Elcon_CAN_Tx+0x36>
	{
		elcon->target_voltage = 600;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4a54      	ldr	r2, [pc, #336]	; (8001444 <Elcon_CAN_Tx+0x168>)
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
		elcon->target_current = bmsInfo->target_charge_current;
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	edc3 7a08 	vstr	s15, [r3, #32]
		elcon->N_target_charge_state = 0;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001310:	e00b      	b.n	800132a <Elcon_CAN_Tx+0x4e>
	}
	else
	{
		elcon->target_current = 0;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
		elcon->target_voltage = 0;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
		elcon->N_target_charge_state = 1;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}

	/* Current limiter */
	if(elcon->target_current > CHARGE_CURR_THRESHOLD)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001330:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133c:	dd03      	ble.n	8001346 <Elcon_CAN_Tx+0x6a>
		elcon->target_current = CHARGE_CURR_THRESHOLD;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001344:	621a      	str	r2, [r3, #32]

	/* Voltage limiter */
	if(elcon->target_voltage > 600)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800134c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001448 <Elcon_CAN_Tx+0x16c>
 8001350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	dd02      	ble.n	8001360 <Elcon_CAN_Tx+0x84>
		elcon->target_voltage = 600;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4a39      	ldr	r2, [pc, #228]	; (8001444 <Elcon_CAN_Tx+0x168>)
 800135e:	625a      	str	r2, [r3, #36]	; 0x24


	elcon->tx_data[0] = (uint16_t)(elcon->target_voltage * 10) >> 8;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001366:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001372:	ee17 3a90 	vmov	r3, s15
 8001376:	b29b      	uxth	r3, r3
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	b2da      	uxtb	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	731a      	strb	r2, [r3, #12]
	elcon->tx_data[1] = (uint8_t)(elcon->target_voltage * 10);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001388:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800138c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001394:	edc7 7a01 	vstr	s15, [r7, #4]
 8001398:	793b      	ldrb	r3, [r7, #4]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	735a      	strb	r2, [r3, #13]
	elcon->tx_data[2] = (uint8_t)(elcon->target_current * 10) >> 8;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80013a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80013b6:	793b      	ldrb	r3, [r7, #4]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	121b      	asrs	r3, r3, #8
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	739a      	strb	r2, [r3, #14]
	elcon->tx_data[3] = (uint8_t)(elcon->target_current * 10);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	edd3 7a08 	vldr	s15, [r3, #32]
 80013c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80013d8:	793b      	ldrb	r3, [r7, #4]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	73da      	strb	r2, [r3, #15]
	elcon->tx_data[4] = elcon->N_target_charge_state;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013e6:	461a      	mov	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	741a      	strb	r2, [r3, #16]

	elcon->can_handler->TxHeader->DLC 				 = 8;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2208      	movs	r2, #8
 80013f4:	611a      	str	r2, [r3, #16]
	elcon->can_handler->TxHeader->ExtId 			 = 0x1806E5F4;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a13      	ldr	r2, [pc, #76]	; (800144c <Elcon_CAN_Tx+0x170>)
 80013fe:	605a      	str	r2, [r3, #4]
	elcon->can_handler->TxHeader->IDE 		    	 = CAN_ID_EXT;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2204      	movs	r2, #4
 8001408:	609a      	str	r2, [r3, #8]
	elcon->can_handler->TxHeader->RTR 			     = CAN_RTR_DATA;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
	elcon->can_handler->TxHeader->TransmitGlobalTime = DISABLE;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2200      	movs	r2, #0
 800141c:	751a      	strb	r2, [r3, #20]

	return HAL_CAN_AddTxMessage(elcon->can_handler->hcan, elcon->can_handler->TxHeader, elcon->tx_data, elcon->can_handler->canMailbox);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6899      	ldr	r1, [r3, #8]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f103 020c 	add.w	r2, r3, #12
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f00b fa67 	bl	800c908 <HAL_CAN_AddTxMessage>
 800143a:	4603      	mov	r3, r0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	44160000 	.word	0x44160000
 8001448:	44160000 	.word	0x44160000
 800144c:	1806e5f4 	.word	0x1806e5f4

08001450 <Elcon_CAN_Rx>:



void Elcon_CAN_Rx(Elcon *elcon)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	elcon->connected		    = true;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	711a      	strb	r2, [r3, #4]
	elcon->last_msg_received    = xTaskGetTickCount();
 800145e:	f018 fd1d 	bl	8019e9c <xTaskGetTickCount>
 8001462:	4602      	mov	r2, r0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	609a      	str	r2, [r3, #8]
	elcon->output_voltage 		= 0.1 * (float)(elcon->can_handler->RxData[0] << 8 | elcon->can_handler->RxData[1]);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	68d2      	ldr	r2, [r2, #12]
 8001478:	3201      	adds	r2, #1
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	4313      	orrs	r3, r2
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001486:	ee17 0a90 	vmov	r0, s15
 800148a:	f7ff f85d 	bl	8000548 <__aeabi_f2d>
 800148e:	a34e      	add	r3, pc, #312	; (adr r3, 80015c8 <Elcon_CAN_Rx+0x178>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7ff f8b0 	bl	80005f8 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fba2 	bl	8000be8 <__aeabi_d2f>
 80014a4:	4602      	mov	r2, r0
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	619a      	str	r2, [r3, #24]
	elcon->output_current 		= 0.1 * (float)(elcon->can_handler->RxData[2] << 8 | elcon->can_handler->RxData[3]);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	3302      	adds	r3, #2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	68d2      	ldr	r2, [r2, #12]
 80014bc:	3203      	adds	r2, #3
 80014be:	7812      	ldrb	r2, [r2, #0]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ca:	ee17 0a90 	vmov	r0, s15
 80014ce:	f7ff f83b 	bl	8000548 <__aeabi_f2d>
 80014d2:	a33d      	add	r3, pc, #244	; (adr r3, 80015c8 <Elcon_CAN_Rx+0x178>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	f7ff f88e 	bl	80005f8 <__aeabi_dmul>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff fb80 	bl	8000be8 <__aeabi_d2f>
 80014e8:	4602      	mov	r2, r0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	61da      	str	r2, [r3, #28]

	elcon->hw_fail 				= (elcon->can_handler->RxData[4] >> 0) & 0x01;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	3304      	adds	r3, #4
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	b2d9      	uxtb	r1, r3
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8001504:	f361 0300 	bfi	r3, r1, #0, #1
 8001508:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
	elcon->charger_over_temp 	= (elcon->can_handler->RxData[4] >> 1) & 0x01;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	3304      	adds	r3, #4
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	085b      	lsrs	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	b2d9      	uxtb	r1, r3
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8001526:	f361 0341 	bfi	r3, r1, #1, #1
 800152a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
	elcon->ac_input_error 		= (elcon->can_handler->RxData[4] >> 2) & 0x01;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	3304      	adds	r3, #4
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	b2d9      	uxtb	r1, r3
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8001548:	f361 0382 	bfi	r3, r1, #2, #1
 800154c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
	elcon->N_charge_state 		= (elcon->can_handler->RxData[4] >> 3) & 0x01;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	3304      	adds	r3, #4
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	08db      	lsrs	r3, r3, #3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	b2d9      	uxtb	r1, r3
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 800156a:	f361 03c3 	bfi	r3, r1, #3, #1
 800156e:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
	elcon->can_error			= (elcon->can_handler->RxData[4] >> 4) & 0x01;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	3304      	adds	r3, #4
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	b2d9      	uxtb	r1, r3
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 800158c:	f361 1304 	bfi	r3, r1, #4, #1
 8001590:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

	for (uint8_t i = 0; i < 5; ++i)
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e00d      	b.n	80015b6 <Elcon_CAN_Rx+0x166>
		elcon->rx_data[i] = elcon->can_handler->RxData[i];
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	441a      	add	r2, r3
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	7811      	ldrb	r1, [r2, #0]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	460a      	mov	r2, r1
 80015ae:	745a      	strb	r2, [r3, #17]
	for (uint8_t i = 0; i < 5; ++i)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	3301      	adds	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d9ee      	bls.n	800159a <Elcon_CAN_Rx+0x14a>
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	9999999a 	.word	0x9999999a
 80015cc:	3fb99999 	.word	0x3fb99999

080015d0 <Elcon_stop_charging>:



HAL_StatusTypeDef Elcon_stop_charging(Elcon* elcon, BMS_info* bmsInfo)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]

	bmsInfo->charge_flag = 0;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	return Elcon_CAN_Tx(elcon, bmsInfo);
 80015e2:	6839      	ldr	r1, [r7, #0]
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fe79 	bl	80012dc <Elcon_CAN_Tx>
 80015ea:	4603      	mov	r3, r0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <Charger_CAN_Tx>:



HAL_StatusTypeDef Charger_CAN_Tx(BMS_info* bmsInfo, CAN_Handler* canHandle)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
	uint16_t max_cell_voltage = (uint16_t)(bmsInfo->max_voltage_cell.value * 10000);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	edd3 7a03 	vldr	s15, [r3, #12]
 8001604:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80016cc <Charger_CAN_Tx+0xd8>
 8001608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001610:	ee17 3a90 	vmov	r3, s15
 8001614:	83fb      	strh	r3, [r7, #30]
	uint16_t min_cell_voltage = (uint16_t)(bmsInfo->min_voltage_cell.value * 10000);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	edd3 7a01 	vldr	s15, [r3, #4]
 800161c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80016cc <Charger_CAN_Tx+0xd8>
 8001620:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001628:	ee17 3a90 	vmov	r3, s15
 800162c:	83bb      	strh	r3, [r7, #28]
	uint8_t  max_cell_temp    = (uint8_t)(bmsInfo->max_temp_cell.value * 2);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001634:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800163c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001640:	793b      	ldrb	r3, [r7, #4]
 8001642:	76fb      	strb	r3, [r7, #27]
	uint8_t  min_cell_temp    = (uint8_t)(bmsInfo->min_temp_cell.value * 2);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800164a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800164e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001652:	edc7 7a01 	vstr	s15, [r7, #4]
 8001656:	793b      	ldrb	r3, [r7, #4]
 8001658:	76bb      	strb	r3, [r7, #26]


	uint8_t tx_data[6];
	tx_data[0] = max_cell_voltage >> 8;
 800165a:	8bfb      	ldrh	r3, [r7, #30]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	b29b      	uxth	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	753b      	strb	r3, [r7, #20]
	tx_data[1] = max_cell_voltage;
 8001664:	8bfb      	ldrh	r3, [r7, #30]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	757b      	strb	r3, [r7, #21]
	tx_data[2] = min_cell_voltage >> 8;
 800166a:	8bbb      	ldrh	r3, [r7, #28]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	b29b      	uxth	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	75bb      	strb	r3, [r7, #22]
	tx_data[3] = min_cell_voltage;
 8001674:	8bbb      	ldrh	r3, [r7, #28]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	75fb      	strb	r3, [r7, #23]
	tx_data[4] = max_cell_temp;
 800167a:	7efb      	ldrb	r3, [r7, #27]
 800167c:	763b      	strb	r3, [r7, #24]
	tx_data[5] = min_cell_temp;
 800167e:	7ebb      	ldrb	r3, [r7, #26]
 8001680:	767b      	strb	r3, [r7, #25]

	canHandle->TxHeader->DLC 				= sizeof(tx_data);
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2206      	movs	r2, #6
 8001688:	611a      	str	r2, [r3, #16]
	canHandle->TxHeader->StdId 			 	= 0x700;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001692:	601a      	str	r2, [r3, #0]
	canHandle->TxHeader->IDE 		    	= CAN_ID_STD;
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
	canHandle->TxHeader->RTR 			    = CAN_RTR_DATA;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
	canHandle->TxHeader->TransmitGlobalTime = DISABLE;
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2200      	movs	r2, #0
 80016aa:	751a      	strb	r2, [r3, #20]

	return HAL_CAN_AddTxMessage(canHandle->hcan, canHandle->TxHeader, tx_data, canHandle->canMailbox);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	6899      	ldr	r1, [r3, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f107 0214 	add.w	r2, r7, #20
 80016bc:	f00b f924 	bl	800c908 <HAL_CAN_AddTxMessage>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	461c4000 	.word	0x461c4000

080016d0 <TSAC_CAN_Rx>:



void TSAC_CAN_Rx(CAN_Handler *can_handler, Elcon *elcon, Ivt *ivt, BMS_info *bmsInfo)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	603b      	str	r3, [r7, #0]
	  if((can_handler->RxHeader->IDE == CAN_ID_EXT) && (can_handler->RxHeader->ExtId == 0x18FF50E5))
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d109      	bne.n	80016fc <TSAC_CAN_Rx+0x2c>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4a17      	ldr	r2, [pc, #92]	; (800174c <TSAC_CAN_Rx+0x7c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d103      	bne.n	80016fc <TSAC_CAN_Rx+0x2c>
	  {
		  Elcon_CAN_Rx(elcon);
 80016f4:	68b8      	ldr	r0, [r7, #8]
 80016f6:	f7ff feab 	bl	8001450 <Elcon_CAN_Rx>
 80016fa:	e022      	b.n	8001742 <TSAC_CAN_Rx+0x72>
	  }
	  else if((can_handler->RxHeader->IDE == CAN_ID_EXT) && (can_handler->RxHeader->ExtId == CHARGER_ID))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b04      	cmp	r3, #4
 8001704:	d114      	bne.n	8001730 <TSAC_CAN_Rx+0x60>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a10      	ldr	r2, [pc, #64]	; (8001750 <TSAC_CAN_Rx+0x80>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d10e      	bne.n	8001730 <TSAC_CAN_Rx+0x60>
	  {
		  if(can_handler->RxData[0] == 1)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d104      	bne.n	8001726 <TSAC_CAN_Rx+0x56>
			  elcon->spare_button_state = 1;
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		  if(can_handler->RxData[0] == 1)
 8001724:	e00d      	b.n	8001742 <TSAC_CAN_Rx+0x72>
		  else
			  elcon->spare_button_state = 0;
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		  if(can_handler->RxData[0] == 1)
 800172e:	e008      	b.n	8001742 <TSAC_CAN_Rx+0x72>
	  }
	  else if (can_handler->RxHeader->IDE == CAN_ID_STD)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <TSAC_CAN_Rx+0x72>
		  IVT_CAN_Rx(ivt);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fc80 	bl	8001040 <IVT_CAN_Rx>
}
 8001740:	e7ff      	b.n	8001742 <TSAC_CAN_Rx+0x72>
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	18ff50e5 	.word	0x18ff50e5
 8001750:	18fffff5 	.word	0x18fffff5

08001754 <TSAC_Energy_CAN_Tx>:


HAL_StatusTypeDef TSAC_Energy_CAN_Tx(BMS_info* bmsInfo, Ivt* ivt, CAN_Handler *can_handler)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
	uint8_t  data[8];
	uint16_t total_voltage_vs = (uint16_t)(ivt->voltage_vs * 100);
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	edd3 7a04 	vldr	s15, [r3, #16]
 8001766:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001810 <TSAC_Energy_CAN_Tx+0xbc>
 800176a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001772:	ee17 3a90 	vmov	r3, s15
 8001776:	83fb      	strh	r3, [r7, #30]
	int16_t  accu_current     =  (int16_t)(ivt->current   * 100);
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	edd3 7a03 	vldr	s15, [r3, #12]
 800177e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001810 <TSAC_Energy_CAN_Tx+0xbc>
 8001782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800178a:	ee17 3a90 	vmov	r3, s15
 800178e:	83bb      	strh	r3, [r7, #28]
	int16_t  energy_consumed  =  (int16_t)(ivt->Wh_consumed);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	8a9b      	ldrh	r3, [r3, #20]
 8001794:	837b      	strh	r3, [r7, #26]
	int16_t  ah_consumed      = (int16_t)(ivt->Ah_consumed * 1000);
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	edd3 7a06 	vldr	s15, [r3, #24]
 800179c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001814 <TSAC_Energy_CAN_Tx+0xc0>
 80017a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a8:	ee17 3a90 	vmov	r3, s15
 80017ac:	833b      	strh	r3, [r7, #24]

	data[0] = total_voltage_vs >> 8;
 80017ae:	8bfb      	ldrh	r3, [r7, #30]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	743b      	strb	r3, [r7, #16]
	data[1] = total_voltage_vs;
 80017b8:	8bfb      	ldrh	r3, [r7, #30]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	747b      	strb	r3, [r7, #17]
	data[2] = accu_current >> 8;
 80017be:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017c2:	121b      	asrs	r3, r3, #8
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	74bb      	strb	r3, [r7, #18]
	data[3] = accu_current;
 80017ca:	8bbb      	ldrh	r3, [r7, #28]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	74fb      	strb	r3, [r7, #19]
	data[4] = energy_consumed >> 8;
 80017d0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80017d4:	121b      	asrs	r3, r3, #8
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	753b      	strb	r3, [r7, #20]
	data[5] = energy_consumed;
 80017dc:	8b7b      	ldrh	r3, [r7, #26]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	757b      	strb	r3, [r7, #21]
	data[6] = ah_consumed >> 8;
 80017e2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017e6:	121b      	asrs	r3, r3, #8
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	75bb      	strb	r3, [r7, #22]
	data[7] = ah_consumed;
 80017ee:	8b3b      	ldrh	r3, [r7, #24]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	75fb      	strb	r3, [r7, #23]

	return CAN_Tx(can_handler, 0x301, sizeof(data), data);
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	2208      	movs	r2, #8
 80017fa:	f240 3101 	movw	r1, #769	; 0x301
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f9b6 	bl	8001b70 <CAN_Tx>
 8001804:	4603      	mov	r3, r0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	42c80000 	.word	0x42c80000
 8001814:	447a0000 	.word	0x447a0000

08001818 <Cell_Temp_CAN_Tx>:


HAL_StatusTypeDef Cell_Temp_CAN_Tx(BMS_info* bmsInfo, CAN_Handler *can_handler)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
	uint8_t data[5];
	data[0] = (uint8_t)(bmsInfo->max_temp_cell.value  * 2); // Maximum temperature that can be measured is 90 deg C
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001828:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800182c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001830:	edc7 7a01 	vstr	s15, [r7, #4]
 8001834:	793b      	ldrb	r3, [r7, #4]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	743b      	strb	r3, [r7, #16]
	data[1] = (uint8_t)(bmsInfo->max_temp_cell.pos);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001840:	747b      	strb	r3, [r7, #17]
	data[2] = (uint8_t)(bmsInfo->min_temp_cell.value * 2);  // Maximum temperature that can be measured is 0  deg C
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001848:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800184c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001850:	edc7 7a01 	vstr	s15, [r7, #4]
 8001854:	793b      	ldrb	r3, [r7, #4]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	74bb      	strb	r3, [r7, #18]
	data[3] = (uint8_t)(bmsInfo->min_temp_cell.pos);        // Maximum temperature that can be measured is 0  deg C
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001860:	74fb      	strb	r3, [r7, #19]
	data[4] = (uint8_t)(bmsInfo->avg_cell_temp      * 2);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001868:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800186c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001870:	edc7 7a01 	vstr	s15, [r7, #4]
 8001874:	793b      	ldrb	r3, [r7, #4]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	753b      	strb	r3, [r7, #20]

	return CAN_Tx(can_handler, 0x303, sizeof(data), data);
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	2205      	movs	r2, #5
 8001880:	f240 3103 	movw	r1, #771	; 0x303
 8001884:	68b8      	ldr	r0, [r7, #8]
 8001886:	f000 f973 	bl	8001b70 <CAN_Tx>
 800188a:	4603      	mov	r3, r0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <TSAC_Status_CAN_Tx>:


HAL_StatusTypeDef TSAC_Status_CAN_Tx(BMS_info* bmsInfo, Accu_info* accuInfo, Imd* imd)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
	uint8_t data[7];
	uint8_t max_humidity     = (uint8_t)(bmsInfo->max_humidity.value);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018aa:	edc7 7a00 	vstr	s15, [r7]
 80018ae:	783b      	ldrb	r3, [r7, #0]
 80018b0:	77fb      	strb	r3, [r7, #31]
	uint8_t max_humidity_pos = 			 bmsInfo->max_humidity.pos;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80018b8:	77bb      	strb	r3, [r7, #30]

	/* Finds greatest humidity percentage from all sensors */
	if (accuInfo->HVroom_humidity > max_humidity)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	7d1b      	ldrb	r3, [r3, #20]
 80018be:	7ffa      	ldrb	r2, [r7, #31]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d204      	bcs.n	80018ce <TSAC_Status_CAN_Tx+0x3a>
	{
		max_humidity     = accuInfo->HVroom_humidity;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	7d1b      	ldrb	r3, [r3, #20]
 80018c8:	77fb      	strb	r3, [r7, #31]
		max_humidity_pos = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	77bb      	strb	r3, [r7, #30]
	}

	data[0] = ((accuInfo->precharge_done  & 0x01) << 7) |
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80018d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	01db      	lsls	r3, r3, #7
 80018dc:	b25a      	sxtb	r2, r3
			  ((accuInfo->ams_error       & 0x01) << 6) |
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	7b5b      	ldrb	r3, [r3, #13]
 80018e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	019b      	lsls	r3, r3, #6
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f0:	b25b      	sxtb	r3, r3
	data[0] = ((accuInfo->precharge_done  & 0x01) << 7) |
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b25a      	sxtb	r2, r3
			  ((accuInfo->imd_error       & 0x01) << 5) |
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	7b5b      	ldrb	r3, [r3, #13]
 80018fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	015b      	lsls	r3, r3, #5
 8001902:	b25b      	sxtb	r3, r3
 8001904:	f003 0320 	and.w	r3, r3, #32
 8001908:	b25b      	sxtb	r3, r3
			  ((accuInfo->ams_error       & 0x01) << 6) |
 800190a:	4313      	orrs	r3, r2
 800190c:	b25a      	sxtb	r2, r3
			  ((accuInfo->AIR_P_Supp      & 0x01) << 4) |
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	7b5b      	ldrb	r3, [r3, #13]
 8001912:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	b25b      	sxtb	r3, r3
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	b25b      	sxtb	r3, r3
			  ((accuInfo->imd_error       & 0x01) << 5) |
 8001922:	4313      	orrs	r3, r2
 8001924:	b25a      	sxtb	r2, r3
			  ((accuInfo->AIR_P_State     & 0x01) << 3) |
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	7b5b      	ldrb	r3, [r3, #13]
 800192a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	b25b      	sxtb	r3, r3
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	b25b      	sxtb	r3, r3
			  ((accuInfo->AIR_P_Supp      & 0x01) << 4) |
 800193a:	4313      	orrs	r3, r2
 800193c:	b25a      	sxtb	r2, r3
			  ((accuInfo->AIR_M_Supp      & 0x01) << 2) |
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	7b5b      	ldrb	r3, [r3, #13]
 8001942:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001946:	b2db      	uxtb	r3, r3
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	b25b      	sxtb	r3, r3
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	b25b      	sxtb	r3, r3
			  ((accuInfo->AIR_P_State     & 0x01) << 3) |
 8001952:	4313      	orrs	r3, r2
 8001954:	b25a      	sxtb	r2, r3
			  ((accuInfo->AIR_M_State     & 0x01) << 1) |
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	7b5b      	ldrb	r3, [r3, #13]
 800195a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	b25b      	sxtb	r3, r3
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	b25b      	sxtb	r3, r3
			  ((accuInfo->AIR_M_Supp      & 0x01) << 2) |
 800196a:	4313      	orrs	r3, r2
 800196c:	b25a      	sxtb	r2, r3
			  ((accuInfo->over60V_dclink  & 0x01) << 0);
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	7b5b      	ldrb	r3, [r3, #13]
 8001972:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	b25b      	sxtb	r3, r3
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	b25b      	sxtb	r3, r3
			  ((accuInfo->AIR_M_State     & 0x01) << 1) |
 8001980:	4313      	orrs	r3, r2
 8001982:	b25b      	sxtb	r3, r3
 8001984:	b2db      	uxtb	r3, r3
	data[0] = ((accuInfo->precharge_done  & 0x01) << 7) |
 8001986:	753b      	strb	r3, [r7, #20]

	data[1] = ((accuInfo->ts_active      & 0x01) << 0) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800198e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001992:	b2db      	uxtb	r3, r3
 8001994:	b25b      	sxtb	r3, r3
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	b25a      	sxtb	r2, r3
			  ((accuInfo->vicor_overtemp & 0x01) << 1);
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	7b5b      	ldrb	r3, [r3, #13]
 80019a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	b25b      	sxtb	r3, r3
	data[1] = ((accuInfo->ts_active      & 0x01) << 0) |
 80019b0:	4313      	orrs	r3, r2
 80019b2:	b25b      	sxtb	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	757b      	strb	r3, [r7, #21]

	data[2] = (uint8_t)(accuInfo->dc_dc_temp * 2);
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80019be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c6:	edc7 7a00 	vstr	s15, [r7]
 80019ca:	783b      	ldrb	r3, [r7, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	75bb      	strb	r3, [r7, #22]
	data[3] = max_humidity;
 80019d0:	7ffb      	ldrb	r3, [r7, #31]
 80019d2:	75fb      	strb	r3, [r7, #23]
	data[4] = max_humidity_pos;
 80019d4:	7fbb      	ldrb	r3, [r7, #30]
 80019d6:	763b      	strb	r3, [r7, #24]
	data[5] = imd->insulation_kOhm >> 8;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	8a9b      	ldrh	r3, [r3, #20]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	b29b      	uxth	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	767b      	strb	r3, [r7, #25]
	data[6] = imd->insulation_kOhm;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	8a9b      	ldrh	r3, [r3, #20]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	76bb      	strb	r3, [r7, #26]

	return CAN_Tx(accuInfo->can_handler, 0x304, sizeof(data), data);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	6858      	ldr	r0, [r3, #4]
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2207      	movs	r2, #7
 80019f6:	f44f 7141 	mov.w	r1, #772	; 0x304
 80019fa:	f000 f8b9 	bl	8001b70 <CAN_Tx>
 80019fe:	4603      	mov	r3, r0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <Cell_Voltage_CAN_Tx>:



HAL_StatusTypeDef Cell_Voltage_CAN_Tx(BMS_info* bmsInfo, CAN_Handler *can_handler)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
	uint8_t data[8];
	uint16_t max_cell_voltage = (uint16_t)(bmsInfo->max_voltage_cell.value * 10000);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a18:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001a98 <Cell_Voltage_CAN_Tx+0x90>
 8001a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a24:	ee17 3a90 	vmov	r3, s15
 8001a28:	82fb      	strh	r3, [r7, #22]
	uint16_t min_cell_voltage = (uint16_t)(bmsInfo->min_voltage_cell.value * 10000);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a30:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001a98 <Cell_Voltage_CAN_Tx+0x90>
 8001a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a3c:	ee17 3a90 	vmov	r3, s15
 8001a40:	82bb      	strh	r3, [r7, #20]

	data[0] = max_cell_voltage >> 8;
 8001a42:	8afb      	ldrh	r3, [r7, #22]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	733b      	strb	r3, [r7, #12]
	data[1] = max_cell_voltage;
 8001a4c:	8afb      	ldrh	r3, [r7, #22]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	737b      	strb	r3, [r7, #13]
	data[2] = bmsInfo->max_voltage_cell.pos;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7c1b      	ldrb	r3, [r3, #16]
 8001a56:	73bb      	strb	r3, [r7, #14]
	data[3] = min_cell_voltage >> 8;
 8001a58:	8abb      	ldrh	r3, [r7, #20]
 8001a5a:	0a1b      	lsrs	r3, r3, #8
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	73fb      	strb	r3, [r7, #15]
	data[4] = min_cell_voltage;
 8001a62:	8abb      	ldrh	r3, [r7, #20]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	743b      	strb	r3, [r7, #16]
	data[5] = bmsInfo->min_voltage_cell.pos;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7a1b      	ldrb	r3, [r3, #8]
 8001a6c:	747b      	strb	r3, [r7, #17]
	data[6] = bmsInfo->min_SoC;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8001a74:	74bb      	strb	r3, [r7, #18]
	data[7] = bmsInfo->max_SoC;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
 8001a7c:	74fb      	strb	r3, [r7, #19]

	return CAN_Tx(can_handler, 0x302, sizeof(data), data);
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	2208      	movs	r2, #8
 8001a84:	f240 3102 	movw	r1, #770	; 0x302
 8001a88:	6838      	ldr	r0, [r7, #0]
 8001a8a:	f000 f871 	bl	8001b70 <CAN_Tx>
 8001a8e:	4603      	mov	r3, r0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	461c4000 	.word	0x461c4000

08001a9c <Error_Msg_CAN_Tx>:



HAL_StatusTypeDef Error_Msg_CAN_Tx(Accu_info *accuInfo, BMS_info* bmsInfo, CAN_Handler *can_handler)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
	uint8_t data[5];
	uint8_t position_of_error = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	75fb      	strb	r3, [r7, #23]

	if (bmsInfo->state == BMS_OK && accuInfo->state == TSAC_OK)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d106      	bne.n	8001ac4 <Error_Msg_CAN_Tx+0x28>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <Error_Msg_CAN_Tx+0x28>
		position_of_error = 0xFF;
 8001abe:	23ff      	movs	r3, #255	; 0xff
 8001ac0:	75fb      	strb	r3, [r7, #23]
 8001ac2:	e038      	b.n	8001b36 <Error_Msg_CAN_Tx+0x9a>

	else if (bmsInfo->state == UNDERVOLTAGE)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d103      	bne.n	8001ad6 <Error_Msg_CAN_Tx+0x3a>
		position_of_error = bmsInfo->min_voltage_cell.pos;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	7a1b      	ldrb	r3, [r3, #8]
 8001ad2:	75fb      	strb	r3, [r7, #23]
 8001ad4:	e02f      	b.n	8001b36 <Error_Msg_CAN_Tx+0x9a>

	else if (bmsInfo->state == OVERVOLTAGE)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d103      	bne.n	8001ae8 <Error_Msg_CAN_Tx+0x4c>
		position_of_error = bmsInfo->max_voltage_cell.pos;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	7c1b      	ldrb	r3, [r3, #16]
 8001ae4:	75fb      	strb	r3, [r7, #23]
 8001ae6:	e026      	b.n	8001b36 <Error_Msg_CAN_Tx+0x9a>

	else if (bmsInfo->state == OVERTEMP)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d104      	bne.n	8001afc <Error_Msg_CAN_Tx+0x60>
		position_of_error = bmsInfo->max_temp_cell.pos;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001af8:	75fb      	strb	r3, [r7, #23]
 8001afa:	e01c      	b.n	8001b36 <Error_Msg_CAN_Tx+0x9a>

	else if (bmsInfo->state == UNDERTEMP)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d104      	bne.n	8001b10 <Error_Msg_CAN_Tx+0x74>
		position_of_error = bmsInfo->min_temp_cell.pos;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b0c:	75fb      	strb	r3, [r7, #23]
 8001b0e:	e012      	b.n	8001b36 <Error_Msg_CAN_Tx+0x9a>

	else if (bmsInfo->state == COMMUNICATION_ERROR)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d104      	bne.n	8001b24 <Error_Msg_CAN_Tx+0x88>
		position_of_error = bmsInfo->comm_error_id;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b20:	75fb      	strb	r3, [r7, #23]
 8001b22:	e008      	b.n	8001b36 <Error_Msg_CAN_Tx+0x9a>

	else if (bmsInfo->state == SLAVE_ERROR)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b2a:	2b09      	cmp	r3, #9
 8001b2c:	d103      	bne.n	8001b36 <Error_Msg_CAN_Tx+0x9a>
		position_of_error = bmsInfo->slave_error_id;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b34:	75fb      	strb	r3, [r7, #23]

	data[0] = (uint8_t)(bmsInfo->state);
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b3c:	743b      	strb	r3, [r7, #16]
	data[1] = (uint8_t)(bmsInfo->last_error);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b44:	747b      	strb	r3, [r7, #17]
	data[2] = (uint8_t)(accuInfo->state);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	74bb      	strb	r3, [r7, #18]
	data[3] = (uint8_t)(accuInfo->last_error);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	785b      	ldrb	r3, [r3, #1]
 8001b50:	74fb      	strb	r3, [r7, #19]
	data[4] = position_of_error;
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	753b      	strb	r3, [r7, #20]

	return CAN_Tx(can_handler, 0x300, sizeof(data), data);
 8001b56:	f107 0310 	add.w	r3, r7, #16
 8001b5a:	2205      	movs	r2, #5
 8001b5c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f805 	bl	8001b70 <CAN_Tx>
 8001b66:	4603      	mov	r3, r0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <CAN_Tx>:


HAL_StatusTypeDef CAN_Tx(CAN_Handler *can_handler, uint32_t id, uint8_t dlc, uint8_t *data)
{
 8001b70:	b5b0      	push	{r4, r5, r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	71fb      	strb	r3, [r7, #7]
	can_handler->TxHeader->StdId = id;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	601a      	str	r2, [r3, #0]
	can_handler->TxHeader->DLC  = dlc;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	79fa      	ldrb	r2, [r7, #7]
 8001b8e:	611a      	str	r2, [r3, #16]
	can_handler->TxHeader->IDE  = CAN_ID_STD;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
	can_handler->TxHeader->RTR  = CAN_RTR_DATA;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]

	if(HAL_CAN_AddTxMessage(can_handler->hcan, can_handler->TxHeader, data, can_handler->canMailbox) != HAL_OK){
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6899      	ldr	r1, [r3, #8]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	f00a feab 	bl	800c908 <HAL_CAN_AddTxMessage>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d017      	beq.n	8001be8 <CAN_Tx+0x78>
		can_handler->can_error_time = xTaskGetTickCount();
 8001bb8:	f018 f970 	bl	8019e9c <xTaskGetTickCount>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24
		can_handler->canTx_errors += 1;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	621a      	str	r2, [r3, #32]
		Error_Handler_CAN(can_handler->can_error_time, can_handler->current);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	461c      	mov	r4, r3
 8001bd4:	4615      	mov	r5, r2
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4620      	mov	r0, r4
 8001bde:	4629      	mov	r1, r5
 8001be0:	f000 f835 	bl	8001c4e <Error_Handler_CAN>
		return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <CAN_Tx+0x7a>
	}

	return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bdb0      	pop	{r4, r5, r7, pc}

08001bf2 <CAN_Rx>:


HAL_StatusTypeDef CAN_Rx(CAN_Handler *can_handler, uint32_t canFIFO)
{
 8001bf2:	b5b0      	push	{r4, r5, r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_GetRxMessage(can_handler->hcan, canFIFO, can_handler->RxHeader, can_handler->RxData) != HAL_OK){
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	6839      	ldr	r1, [r7, #0]
 8001c0a:	f00a ff58 	bl	800cabe <HAL_CAN_GetRxMessage>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d017      	beq.n	8001c44 <CAN_Rx+0x52>
		can_handler->can_error_time = xTaskGetTickCount();
 8001c14:	f018 f942 	bl	8019e9c <xTaskGetTickCount>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
		can_handler->canRx_errors += 1;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	61da      	str	r2, [r3, #28]
		Error_Handler_CAN(can_handler->can_error_time, can_handler->current);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	461c      	mov	r4, r3
 8001c30:	4615      	mov	r5, r2
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	461a      	mov	r2, r3
 8001c38:	4620      	mov	r0, r4
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	f000 f807 	bl	8001c4e <Error_Handler_CAN>
		return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <CAN_Rx+0x54>
	}

	return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bdb0      	pop	{r4, r5, r7, pc}

08001c4e <Error_Handler_CAN>:


void Error_Handler_CAN(uint64_t x, TickType_t current)
{
 8001c4e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
	while(current < x + 250)
 8001c5c:	e002      	b.n	8001c64 <Error_Handler_CAN+0x16>
		current = xTaskGetTickCount();
 8001c5e:	f018 f91d 	bl	8019e9c <xTaskGetTickCount>
 8001c62:	6078      	str	r0, [r7, #4]
	while(current < x + 250)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	4698      	mov	r8, r3
 8001c6a:	4691      	mov	r9, r2
 8001c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c70:	f112 04fa 	adds.w	r4, r2, #250	; 0xfa
 8001c74:	f143 0500 	adc.w	r5, r3, #0
 8001c78:	45a0      	cmp	r8, r4
 8001c7a:	eb79 0305 	sbcs.w	r3, r9, r5
 8001c7e:	d3ee      	bcc.n	8001c5e <Error_Handler_CAN+0x10>
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c8c:	0000      	movs	r0, r0
	...

08001c90 <read_P23_messages>:


/* Logging data on primaryCAN: BrakePressure, APPS, TS_OFF indicator & more */
void read_P23_messages(CAN_Handler *can_handler, P23_status *P23_status)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
	switch(can_handler->RxHeader->StdId)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f240 4203 	movw	r2, #1027	; 0x403
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	f000 80e3 	beq.w	8001e70 <read_P23_messages+0x1e0>
 8001caa:	f240 4203 	movw	r2, #1027	; 0x403
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	f200 81ac 	bhi.w	800200c <read_P23_messages+0x37c>
 8001cb4:	f240 1281 	movw	r2, #385	; 0x181
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	f000 8115 	beq.w	8001ee8 <read_P23_messages+0x258>
 8001cbe:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001cc2:	f240 81a3 	bls.w	800200c <read_P23_messages+0x37c>
 8001cc6:	f5b3 7f45 	cmp.w	r3, #788	; 0x314
 8001cca:	f080 819f 	bcs.w	800200c <read_P23_messages+0x37c>
 8001cce:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 8001cd2:	f240 819b 	bls.w	800200c <read_P23_messages+0x37c>
 8001cd6:	f2a3 3305 	subw	r3, r3, #773	; 0x305
 8001cda:	2b0e      	cmp	r3, #14
 8001cdc:	f200 8196 	bhi.w	800200c <read_P23_messages+0x37c>
 8001ce0:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <read_P23_messages+0x58>)
 8001ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce6:	bf00      	nop
 8001ce8:	08001d25 	.word	0x08001d25
 8001cec:	08001d9d 	.word	0x08001d9d
 8001cf0:	08001df7 	.word	0x08001df7
 8001cf4:	08001e49 	.word	0x08001e49
 8001cf8:	0800200d 	.word	0x0800200d
 8001cfc:	0800200d 	.word	0x0800200d
 8001d00:	0800200d 	.word	0x0800200d
 8001d04:	0800200d 	.word	0x0800200d
 8001d08:	0800200d 	.word	0x0800200d
 8001d0c:	0800200d 	.word	0x0800200d
 8001d10:	0800200d 	.word	0x0800200d
 8001d14:	0800200d 	.word	0x0800200d
 8001d18:	08001f35 	.word	0x08001f35
 8001d1c:	08001fd7 	.word	0x08001fd7
 8001d20:	08001e65 	.word	0x08001e65
	{
		case 0x305:
			P23_status->hall_fl = (can_handler->RxData[0] << 8) | can_handler->RxData[1];
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	021b      	lsls	r3, r3, #8
 8001d2c:	b21a      	sxth	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	3301      	adds	r3, #1
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	b21b      	sxth	r3, r3
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	831a      	strh	r2, [r3, #24]
			P23_status->hall_fr = (can_handler->RxData[2] << 8) | can_handler->RxData[3];
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	3302      	adds	r3, #2
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	3303      	adds	r3, #3
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b21b      	sxth	r3, r3
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b21a      	sxth	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	835a      	strh	r2, [r3, #26]
			P23_status->hall_rl = (can_handler->RxData[4] << 8) | can_handler->RxData[5];
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	3304      	adds	r3, #4
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	b21a      	sxth	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	3305      	adds	r3, #5
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	839a      	strh	r2, [r3, #28]
			P23_status->hall_rr = (can_handler->RxData[6] << 8) | can_handler->RxData[7];
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	3306      	adds	r3, #6
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	3307      	adds	r3, #7
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b21b      	sxth	r3, r3
 8001d92:	4313      	orrs	r3, r2
 8001d94:	b21a      	sxth	r2, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	83da      	strh	r2, [r3, #30]
		break;
 8001d9a:	e13a      	b.n	8002012 <read_P23_messages+0x382>

		case(0x306):
			P23_status->actual_torque    = (int16_t)((can_handler->RxData[0] << 8)|can_handler->RxData[1]);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	b21a      	sxth	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	3301      	adds	r3, #1
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b21b      	sxth	r3, r3
 8001db0:	4313      	orrs	r3, r2
 8001db2:	b21a      	sxth	r2, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	801a      	strh	r2, [r3, #0]
			P23_status->requested_torque = (int16_t)((can_handler->RxData[2] << 8)|can_handler->RxData[3]);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	b21a      	sxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	3303      	adds	r3, #3
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	805a      	strh	r2, [r3, #2]
			P23_status->motor_rpm        = (int16_t)((can_handler->RxData[4] << 8)|can_handler->RxData[5]);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	b21a      	sxth	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	3305      	adds	r3, #5
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	4313      	orrs	r3, r2
 8001dee:	b21a      	sxth	r2, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	809a      	strh	r2, [r3, #4]
			break;
 8001df4:	e10d      	b.n	8002012 <read_P23_messages+0x382>

		case(0x307):
			P23_status->bspd_status = (can_handler->RxData[0] >> 3) & 0x01;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	719a      	strb	r2, [r3, #6]
			P23_status->ts_off      = (can_handler->RxData[0] >> 6) & 0x01;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	71da      	strb	r2, [r3, #7]
			P23_status->apps1       = (can_handler->RxData[1]);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	785a      	ldrb	r2, [r3, #1]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	731a      	strb	r2, [r3, #12]
			P23_status->apps2       = (can_handler->RxData[2]);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	789a      	ldrb	r2, [r3, #2]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	735a      	strb	r2, [r3, #13]
			P23_status->brf	        =  can_handler->RxData[4];
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	791a      	ldrb	r2, [r3, #4]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	739a      	strb	r2, [r3, #14]
			P23_status->brr	        =  can_handler->RxData[5];
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	795a      	ldrb	r2, [r3, #5]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	73da      	strb	r2, [r3, #15]
			break;
 8001e46:	e0e4      	b.n	8002012 <read_P23_messages+0x382>

		case(0x308):
			P23_status->rtd_done = can_handler->RxData[0] & 0x02;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	721a      	strb	r2, [r3, #8]
			P23_status->vcu_sd_flags = can_handler->RxData[1];
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	785a      	ldrb	r2, [r3, #1]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	755a      	strb	r2, [r3, #21]
			break;
 8001e62:	e0d6      	b.n	8002012 <read_P23_messages+0x382>

		case(0x313):
			P23_status->power_limiter = can_handler->RxData[0];
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	72da      	strb	r2, [r3, #11]
			break;
 8001e6e:	e0d0      	b.n	8002012 <read_P23_messages+0x382>

		case(0x403):
			if(can_handler->RxData[0] != 0x00)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <read_P23_messages+0x1f2>
				P23_status->vcu_alive = 1;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	725a      	strb	r2, [r3, #9]
 8001e80:	e002      	b.n	8001e88 <read_P23_messages+0x1f8>
			else
				P23_status->vcu_alive = 0;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2200      	movs	r2, #0
 8001e86:	725a      	strb	r2, [r3, #9]

			if(can_handler->RxData[1] != 0x00)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <read_P23_messages+0x20c>
				P23_status->accu_alive = 1;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2201      	movs	r2, #1
 8001e98:	729a      	strb	r2, [r3, #10]
 8001e9a:	e002      	b.n	8001ea2 <read_P23_messages+0x212>
			else
				P23_status->accu_alive = 0;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	729a      	strb	r2, [r3, #10]


		    P23_status->tsal_impl_air_m    = (can_handler->RxData[2] >> 0) & 0b1111;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	741a      	strb	r2, [r3, #16]
		    P23_status->tsal_impl_air_p    = (can_handler->RxData[2] >> 4) & 0b1111;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	3302      	adds	r3, #2
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	745a      	strb	r2, [r3, #17]
		    P23_status->tsal_impl_accu     = (can_handler->RxData[3] >> 0) & 0b1111;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	3303      	adds	r3, #3
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	749a      	strb	r2, [r3, #18]
		    P23_status->tsal_impl_pc_state = (can_handler->RxData[3] >> 4) & 0b1111;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	3303      	adds	r3, #3
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	74da      	strb	r2, [r3, #19]

			break;
 8001ee6:	e094      	b.n	8002012 <read_P23_messages+0x382>

		case 0x181:
			if (can_handler->RxData[0] == 0x27)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b27      	cmp	r3, #39	; 0x27
 8001ef0:	d105      	bne.n	8001efe <read_P23_messages+0x26e>
				P23_status->vcu_flags = can_handler->RxData[1];
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	785a      	ldrb	r2, [r3, #1]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	751a      	strb	r2, [r3, #20]
			else if (can_handler->RxData[0] == 0x40)
			{
				P23_status->inv_enabled          =  can_handler->RxData[1]       & 0x01;
				P23_status->inv_curr_lim_reached = (can_handler->RxData[4] >> 5) & 0x01;
			}
			break;
 8001efc:	e088      	b.n	8002010 <read_P23_messages+0x380>
			else if (can_handler->RxData[0] == 0x40)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b40      	cmp	r3, #64	; 0x40
 8001f06:	f040 8083 	bne.w	8002010 <read_P23_messages+0x380>
				P23_status->inv_enabled          =  can_handler->RxData[1]       & 0x01;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	759a      	strb	r2, [r3, #22]
				P23_status->inv_curr_lim_reached = (can_handler->RxData[4] >> 5) & 0x01;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	3304      	adds	r3, #4
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	75da      	strb	r2, [r3, #23]
			break;
 8001f32:	e06d      	b.n	8002010 <read_P23_messages+0x380>

		case 0x311:
			P23_status->lv_max_cell_voltage = ((can_handler->RxData[0] << 8) | can_handler->RxData[1]) / 10000.0;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	68d2      	ldr	r2, [r2, #12]
 8001f40:	3201      	adds	r2, #1
 8001f42:	7812      	ldrb	r2, [r2, #0]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe faec 	bl	8000524 <__aeabi_i2d>
 8001f4c:	a335      	add	r3, pc, #212	; (adr r3, 8002024 <read_P23_messages+0x394>)
 8001f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f52:	f7fe fc7b 	bl	800084c <__aeabi_ddiv>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f7fe fe43 	bl	8000be8 <__aeabi_d2f>
 8001f62:	4602      	mov	r2, r0
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
			P23_status->lv_min_cell_voltage = ((can_handler->RxData[2] << 8) | can_handler->RxData[3]) / 10000.0;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68d2      	ldr	r2, [r2, #12]
 8001f76:	3203      	adds	r2, #3
 8001f78:	7812      	ldrb	r2, [r2, #0]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fad1 	bl	8000524 <__aeabi_i2d>
 8001f82:	a328      	add	r3, pc, #160	; (adr r3, 8002024 <read_P23_messages+0x394>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fc60 	bl	800084c <__aeabi_ddiv>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fe28 	bl	8000be8 <__aeabi_d2f>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
			P23_status->tdk1_current = ((can_handler->RxData[6] << 8) | can_handler->RxData[7]) / 1000.0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	3306      	adds	r3, #6
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68d2      	ldr	r2, [r2, #12]
 8001fac:	3207      	adds	r2, #7
 8001fae:	7812      	ldrb	r2, [r2, #0]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fab6 	bl	8000524 <__aeabi_i2d>
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	4b18      	ldr	r3, [pc, #96]	; (8002020 <read_P23_messages+0x390>)
 8001fbe:	f7fe fc45 	bl	800084c <__aeabi_ddiv>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f7fe fe0d 	bl	8000be8 <__aeabi_d2f>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001fd4:	e01d      	b.n	8002012 <read_P23_messages+0x382>

		case 0x312:
			P23_status->tdk2_current = ((can_handler->RxData[0] << 8) | can_handler->RxData[1]) / 1000.0;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68d2      	ldr	r2, [r2, #12]
 8001fe2:	3201      	adds	r2, #1
 8001fe4:	7812      	ldrb	r2, [r2, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fa9b 	bl	8000524 <__aeabi_i2d>
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <read_P23_messages+0x390>)
 8001ff4:	f7fe fc2a 	bl	800084c <__aeabi_ddiv>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7fe fdf2 	bl	8000be8 <__aeabi_d2f>
 8002004:	4602      	mov	r2, r0
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800200a:	e002      	b.n	8002012 <read_P23_messages+0x382>

		default:
			break;
 800200c:	bf00      	nop
 800200e:	e000      	b.n	8002012 <read_P23_messages+0x382>
			break;
 8002010:	bf00      	nop
	}
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	f3af 8000 	nop.w
 8002020:	408f4000 	.word	0x408f4000
 8002024:	00000000 	.word	0x00000000
 8002028:	40c38800 	.word	0x40c38800

0800202c <Accu_Struct_Init>:
					  uint16_t      AIR_P_State_3V_pin,
					  GPIO_TypeDef *AIR_P_Driver,
					  uint16_t      AIR_P_Driver_pin,
					  GPIO_TypeDef *LED,
					  uint16_t      LED_pin)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	807b      	strh	r3, [r7, #2]
	accuInfo->state 	 = TSAC_OK;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
	accuInfo->last_error = TSAC_OK;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	705a      	strb	r2, [r3, #1]

	accuInfo->can_handler = can_handler;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < 5; i++)
 800204c:	2300      	movs	r3, #0
 800204e:	75fb      	strb	r3, [r7, #23]
 8002050:	e007      	b.n	8002062 <Accu_Struct_Init+0x36>
		accuInfo->tx_data[i] = 0x00;           // Data sent from the ACCU board to the Primary CANbus
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	2200      	movs	r2, #0
 800205a:	721a      	strb	r2, [r3, #8]
	for(uint8_t i = 0; i < 5; i++)
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	3301      	adds	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
 8002062:	7dfb      	ldrb	r3, [r7, #23]
 8002064:	2b04      	cmp	r3, #4
 8002066:	d9f4      	bls.n	8002052 <Accu_Struct_Init+0x26>

	/* General Accumulator info */
	accuInfo->precharge_done = 0x0;
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800206e:	f36f 03c3 	bfc	r3, #3, #1
 8002072:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	accuInfo->ams_error  	  = 0x0;
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	7b53      	ldrb	r3, [r2, #13]
 800207a:	f36f 0300 	bfc	r3, #0, #1
 800207e:	7353      	strb	r3, [r2, #13]
	accuInfo->imd_error  	  = 0x0;
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	7b53      	ldrb	r3, [r2, #13]
 8002084:	f36f 0341 	bfc	r3, #1, #1
 8002088:	7353      	strb	r3, [r2, #13]
	accuInfo->AIR_P_Supp      = 0x0;
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	7b53      	ldrb	r3, [r2, #13]
 800208e:	f36f 0382 	bfc	r3, #2, #1
 8002092:	7353      	strb	r3, [r2, #13]
	accuInfo->AIR_M_Supp 	  = 0x0;
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	7b53      	ldrb	r3, [r2, #13]
 8002098:	f36f 03c3 	bfc	r3, #3, #1
 800209c:	7353      	strb	r3, [r2, #13]
	accuInfo->AIR_P_State 	  = 0x0;
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	7b53      	ldrb	r3, [r2, #13]
 80020a2:	f36f 1304 	bfc	r3, #4, #1
 80020a6:	7353      	strb	r3, [r2, #13]
	accuInfo->AIR_M_State     = 0x0;
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	7b53      	ldrb	r3, [r2, #13]
 80020ac:	f36f 1345 	bfc	r3, #5, #1
 80020b0:	7353      	strb	r3, [r2, #13]
	accuInfo->over60V_dclink  = 0x0;
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	7b53      	ldrb	r3, [r2, #13]
 80020b6:	f36f 1386 	bfc	r3, #6, #1
 80020ba:	7353      	strb	r3, [r2, #13]
	accuInfo->vicor_overtemp  = 0x0;
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	7b53      	ldrb	r3, [r2, #13]
 80020c0:	f36f 13c7 	bfc	r3, #7, #1
 80020c4:	7353      	strb	r3, [r2, #13]

	accuInfo->dc_dc_temp = 0x0;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]

	accuInfo->HVroom_humidity = 0x0;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	751a      	strb	r2, [r3, #20]

	accuInfo->precharge_voltage = 0;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
	accuInfo->precharge_time    = 0;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
	accuInfo->AIR_M_closed_time = 0;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	621a      	str	r2, [r3, #32]
	accuInfo->AIR_P_State_Int   = 0;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	accuInfo->precharge_actual_state = 0;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	accuInfo->precharge_relay_error = false;
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80020fe:	f36f 0300 	bfc	r3, #0, #1
 8002102:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

	/* Initialization of all the GPIOs */
	accuInfo->IMD_ok 			= IMD_ok;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	; 0x28
	accuInfo->IMD_ok_Pin 		= IMD_ok_Pin;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	859a      	strh	r2, [r3, #44]	; 0x2c
	accuInfo->PC_Indicator 		= PC_Indicator;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a3a      	ldr	r2, [r7, #32]
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
	accuInfo->PC_Indicator_Pin 	= PC_Indicator_Pin;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800211c:	869a      	strh	r2, [r3, #52]	; 0x34
	accuInfo->VS_OVER60V	   	= VS_OVER60;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002122:	639a      	str	r2, [r3, #56]	; 0x38
	accuInfo->VS_OVER60V_Pin  	= VS_OVER60_Pin;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002128:	879a      	strh	r2, [r3, #60]	; 0x3c
	accuInfo->AIR_M_Supp_3V  	= AIR_M_Supp_3V;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800212e:	641a      	str	r2, [r3, #64]	; 0x40
	accuInfo->AIR_P_Supp_3V  	= AIR_P_Supp_3V;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002134:	649a      	str	r2, [r3, #72]	; 0x48
	accuInfo->AIR_M_State_3V	= AIR_M_State_3V;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800213a:	651a      	str	r2, [r3, #80]	; 0x50
	accuInfo->AIR_P_State_3V 	= AIR_P_State_3V;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002140:	659a      	str	r2, [r3, #88]	; 0x58
	accuInfo->AIR_P_Driver   	= AIR_P_Driver;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002146:	661a      	str	r2, [r3, #96]	; 0x60
	accuInfo->LED   		 	= LED;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800214c:	669a      	str	r2, [r3, #104]	; 0x68

	accuInfo->AIR_M_Supp_3V_pin  = AIR_M_Supp_3V_pin;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002152:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	accuInfo->AIR_P_Supp_3V_pin  = AIR_P_Supp_3V_pin;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800215a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	accuInfo->AIR_M_State_3V_pin = AIR_M_State_3V_pin;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8002164:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	accuInfo->AIR_P_State_3V_pin = AIR_P_State_3V_pin;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800216e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	accuInfo->AIR_P_Driver_pin   = AIR_P_Driver_pin;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002178:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	accuInfo->LED_pin   		 = LED_pin;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002182:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
}
 8002186:	bf00      	nop
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <IVT_Struct_Init>:



/* Isabelle IVT information */
void IVT_Struct_Init(Ivt* ivt, CAN_Handler *can_handler)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
	ivt->can_handler = can_handler;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	601a      	str	r2, [r3, #0]

	for(uint8_t i = 0; i < 8; ++i)
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	e007      	b.n	80021b8 <IVT_Struct_Init+0x26>
		ivt->rx_data[i] = 0x00;
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	2200      	movs	r2, #0
 80021b0:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 0; i < 8; ++i)
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	3301      	adds	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	2b07      	cmp	r3, #7
 80021bc:	d9f4      	bls.n	80021a8 <IVT_Struct_Init+0x16>

	ivt->current 		 = 0;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
	ivt->voltage_vs 	 = 0;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
	ivt->Wh_consumed = 0;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	829a      	strh	r2, [r3, #20]
	ivt->Ah_consumed     = 0;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
	ivt->voltage_U2		 = 0;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	61da      	str	r2, [r3, #28]

	ivt->IVT_I_Time  = 0;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	629a      	str	r2, [r3, #40]	; 0x28
	ivt->IVT_I_Time_Previous = xTaskGetTickCount();
 80021ea:	f017 fe57 	bl	8019e9c <xTaskGetTickCount>
 80021ee:	4602      	mov	r2, r0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	62da      	str	r2, [r3, #44]	; 0x2c
	ivt->IVT_U1_Time = 0;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	631a      	str	r2, [r3, #48]	; 0x30
	ivt->IVT_U1_Time_Previous = xTaskGetTickCount();
 80021fa:	f017 fe4f 	bl	8019e9c <xTaskGetTickCount>
 80021fe:	4602      	mov	r2, r0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	635a      	str	r2, [r3, #52]	; 0x34
	ivt->IVT_U2_Time = 0;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
	ivt->IVT_U2_Time_Previous = xTaskGetTickCount();
 800220a:	f017 fe47 	bl	8019e9c <xTaskGetTickCount>
 800220e:	4602      	mov	r2, r0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	63da      	str	r2, [r3, #60]	; 0x3c
	ivt->IVT_U3_Time = 0;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
	ivt->IVT_U3_Time_Previous = xTaskGetTickCount();
 800221a:	f017 fe3f 	bl	8019e9c <xTaskGetTickCount>
 800221e:	4602      	mov	r2, r0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	645a      	str	r2, [r3, #68]	; 0x44
	ivt->IVT_AH_Time = 0;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	649a      	str	r2, [r3, #72]	; 0x48
	ivt->IVT_AH_Time_Previous = xTaskGetTickCount();
 800222a:	f017 fe37 	bl	8019e9c <xTaskGetTickCount>
 800222e:	4602      	mov	r2, r0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	64da      	str	r2, [r3, #76]	; 0x4c
	ivt->IVT_WH_Time = 0;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	651a      	str	r2, [r3, #80]	; 0x50
	ivt->IVT_WH_Time_Previous = xTaskGetTickCount();
 800223a:	f017 fe2f 	bl	8019e9c <xTaskGetTickCount>
 800223e:	4602      	mov	r2, r0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <Elcon_Struct_Init>:



/* ELCON functionalities */
void Elcon_Struct_Init(Elcon *elcon, CAN_Handler *can_handler)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
	elcon->can_handler 		 = can_handler;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	601a      	str	r2, [r3, #0]
	elcon->connected   		 = false;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	711a      	strb	r2, [r3, #4]
	elcon->last_msg_received = 0;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]

	for(uint8_t i = 0; i < 5; ++i)
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e00c      	b.n	8002288 <Elcon_Struct_Init+0x3c>
	{
		elcon->tx_data[i] = 0x00;       // Data sent to ELCON with CANbus (ID: 0x1806E5F4)
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	2200      	movs	r2, #0
 8002276:	731a      	strb	r2, [r3, #12]
		elcon->rx_data[i] = 0x00;		// Data received from ELCON with CANbus (ID: 0x18FF50E5)
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	2200      	movs	r2, #0
 8002280:	745a      	strb	r2, [r3, #17]
	for(uint8_t i = 0; i < 5; ++i)
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	3301      	adds	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	2b04      	cmp	r3, #4
 800228c:	d9ef      	bls.n	800226e <Elcon_Struct_Init+0x22>
	}

	elcon->output_voltage 	   = 0;	    // Voltage and current that ELCON outputs
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	619a      	str	r2, [r3, #24]
	elcon->output_current 	   = 0;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	61da      	str	r2, [r3, #28]

	elcon->target_current 	   = 0;	    // Voltage and current to set the charger
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	621a      	str	r2, [r3, #32]
	elcon->target_voltage 	   = 0;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24

	elcon->N_target_charge_state = 1;	// 0: Charging is ENABLED    1: Charging is DISABLED
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	// Status flags
	elcon->hw_fail           = 0x01;
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
	elcon->charger_over_temp = 0x01;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 80022ca:	f043 0302 	orr.w	r3, r3, #2
 80022ce:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
	elcon->ac_input_error    = 0x01;
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
	elcon->N_charge_state    = 0x01;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
	elcon->can_error         = 0x01;
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 80022f4:	f043 0310 	orr.w	r3, r3, #16
 80022f8:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <update_imd_status>:



void update_imd_status(Imd* imd)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	if (imd->frequency <= 1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	895b      	ldrh	r3, [r3, #10]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d803      	bhi.n	8002320 <update_imd_status+0x18>
		imd->condition = SHORT_CIRCUIT;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	745a      	strb	r2, [r3, #17]
 800231e:	e07e      	b.n	800241e <update_imd_status+0x116>

	else if ((imd->frequency >= 9) && (imd->frequency <= 11))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	895b      	ldrh	r3, [r3, #10]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d907      	bls.n	8002338 <update_imd_status+0x30>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	895b      	ldrh	r3, [r3, #10]
 800232c:	2b0b      	cmp	r3, #11
 800232e:	d803      	bhi.n	8002338 <update_imd_status+0x30>
	{
		imd->condition = NORMAL;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	745a      	strb	r2, [r3, #17]
 8002336:	e072      	b.n	800241e <update_imd_status+0x116>
	}
	else if ((imd->frequency >= 19) && (imd->frequency <= 21))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	895b      	ldrh	r3, [r3, #10]
 800233c:	2b12      	cmp	r3, #18
 800233e:	d907      	bls.n	8002350 <update_imd_status+0x48>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	895b      	ldrh	r3, [r3, #10]
 8002344:	2b15      	cmp	r3, #21
 8002346:	d803      	bhi.n	8002350 <update_imd_status+0x48>
	{
		imd->condition = IMD_UNDERVOLTAGE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	745a      	strb	r2, [r3, #17]
 800234e:	e066      	b.n	800241e <update_imd_status+0x116>
	}
	else if ((imd->frequency >= 29) && (imd->frequency <= 31))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	895b      	ldrh	r3, [r3, #10]
 8002354:	2b1c      	cmp	r3, #28
 8002356:	d947      	bls.n	80023e8 <update_imd_status+0xe0>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	895b      	ldrh	r3, [r3, #10]
 800235c:	2b1f      	cmp	r3, #31
 800235e:	d843      	bhi.n	80023e8 <update_imd_status+0xe0>
	{
		imd->condition = SPEED_START;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2203      	movs	r2, #3
 8002364:	745a      	strb	r2, [r3, #17]

		if ((imd->dutyCycle > 4.9) && (imd->dutyCycle < 10.1))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe f8ec 	bl	8000548 <__aeabi_f2d>
 8002370:	a366      	add	r3, pc, #408	; (adr r3, 800250c <update_imd_status+0x204>)
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	f7fe fbcf 	bl	8000b18 <__aeabi_dcmpgt>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d010      	beq.n	80023a2 <update_imd_status+0x9a>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f8df 	bl	8000548 <__aeabi_f2d>
 800238a:	a362      	add	r3, pc, #392	; (adr r3, 8002514 <update_imd_status+0x20c>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fe fba4 	bl	8000adc <__aeabi_dcmplt>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <update_imd_status+0x9a>
			imd->status = SST_GOOD;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2202      	movs	r2, #2
 800239e:	749a      	strb	r2, [r3, #18]
 80023a0:	e021      	b.n	80023e6 <update_imd_status+0xde>

		else if ((imd->dutyCycle > 89.9) && (imd->dutyCycle < 95.1))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe f8ce 	bl	8000548 <__aeabi_f2d>
 80023ac:	a35b      	add	r3, pc, #364	; (adr r3, 800251c <update_imd_status+0x214>)
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	f7fe fbb1 	bl	8000b18 <__aeabi_dcmpgt>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d010      	beq.n	80023de <update_imd_status+0xd6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe f8c1 	bl	8000548 <__aeabi_f2d>
 80023c6:	a357      	add	r3, pc, #348	; (adr r3, 8002524 <update_imd_status+0x21c>)
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	f7fe fb86 	bl	8000adc <__aeabi_dcmplt>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <update_imd_status+0xd6>
			imd->status = SST_BAD;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2203      	movs	r2, #3
 80023da:	749a      	strb	r2, [r3, #18]
 80023dc:	e003      	b.n	80023e6 <update_imd_status+0xde>

		else
			imd->status = INVALID_DC;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	749a      	strb	r2, [r3, #18]
		if ((imd->dutyCycle > 4.9) && (imd->dutyCycle < 10.1))
 80023e4:	e01b      	b.n	800241e <update_imd_status+0x116>
 80023e6:	e01a      	b.n	800241e <update_imd_status+0x116>
	}
	else if ((imd->frequency >= 39) && (imd->frequency <= 41))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	895b      	ldrh	r3, [r3, #10]
 80023ec:	2b26      	cmp	r3, #38	; 0x26
 80023ee:	d907      	bls.n	8002400 <update_imd_status+0xf8>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	895b      	ldrh	r3, [r3, #10]
 80023f4:	2b29      	cmp	r3, #41	; 0x29
 80023f6:	d803      	bhi.n	8002400 <update_imd_status+0xf8>
	{
		imd->condition = DEVICE_ERROR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2204      	movs	r2, #4
 80023fc:	745a      	strb	r2, [r3, #17]
 80023fe:	e00e      	b.n	800241e <update_imd_status+0x116>
	}
	else if ((imd->frequency >= 49) && (imd->frequency <= 51))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	895b      	ldrh	r3, [r3, #10]
 8002404:	2b30      	cmp	r3, #48	; 0x30
 8002406:	d907      	bls.n	8002418 <update_imd_status+0x110>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	895b      	ldrh	r3, [r3, #10]
 800240c:	2b33      	cmp	r3, #51	; 0x33
 800240e:	d803      	bhi.n	8002418 <update_imd_status+0x110>
	{
		imd->condition = FAULT_EARTH_CONNECTION;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2205      	movs	r2, #5
 8002414:	745a      	strb	r2, [r3, #17]
 8002416:	e002      	b.n	800241e <update_imd_status+0x116>
	}
	else
	{
		imd->condition = UNDEFINED_FREQ;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2206      	movs	r2, #6
 800241c:	745a      	strb	r2, [r3, #17]
	}


	if ((imd->condition == NORMAL) || (imd->condition == IMD_UNDERVOLTAGE))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	7c5b      	ldrb	r3, [r3, #17]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d003      	beq.n	800242e <update_imd_status+0x126>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7c5b      	ldrb	r3, [r3, #17]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d131      	bne.n	8002492 <update_imd_status+0x18a>
	{
		if ((imd->dutyCycle > 5) && (imd->dutyCycle < 95))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	edd3 7a03 	vldr	s15, [r3, #12]
 8002434:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	dd23      	ble.n	800248a <update_imd_status+0x182>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	edd3 7a03 	vldr	s15, [r3, #12]
 8002448:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002500 <update_imd_status+0x1f8>
 800244c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002454:	d519      	bpl.n	800248a <update_imd_status+0x182>
		{
			imd->insulation_kOhm = 90 * 1200 / (imd->dutyCycle - 5) - 1200;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	edd3 7a03 	vldr	s15, [r3, #12]
 800245c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002460:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002464:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002504 <update_imd_status+0x1fc>
 8002468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800246c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002508 <update_imd_status+0x200>
 8002470:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002478:	ee17 3a90 	vmov	r3, s15
 800247c:	b29a      	uxth	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	829a      	strh	r2, [r3, #20]
			imd->status = DC_OK;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	749a      	strb	r2, [r3, #18]
		if ((imd->dutyCycle > 5) && (imd->dutyCycle < 95))
 8002488:	e02d      	b.n	80024e6 <update_imd_status+0x1de>
		}
		else
			imd->status = INVALID_DC;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	749a      	strb	r2, [r3, #18]
		if ((imd->dutyCycle > 5) && (imd->dutyCycle < 95))
 8002490:	e029      	b.n	80024e6 <update_imd_status+0x1de>
	}
	else if ((imd->condition == DEVICE_ERROR) || (imd->condition == FAULT_EARTH_CONNECTION))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7c5b      	ldrb	r3, [r3, #17]
 8002496:	2b04      	cmp	r3, #4
 8002498:	d003      	beq.n	80024a2 <update_imd_status+0x19a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7c5b      	ldrb	r3, [r3, #17]
 800249e:	2b05      	cmp	r3, #5
 80024a0:	d121      	bne.n	80024e6 <update_imd_status+0x1de>
	{
		if ((imd->dutyCycle > 47.4) && (imd->dutyCycle < 52.6))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe f84e 	bl	8000548 <__aeabi_f2d>
 80024ac:	a310      	add	r3, pc, #64	; (adr r3, 80024f0 <update_imd_status+0x1e8>)
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	f7fe fb31 	bl	8000b18 <__aeabi_dcmpgt>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d010      	beq.n	80024de <update_imd_status+0x1d6>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe f841 	bl	8000548 <__aeabi_f2d>
 80024c6:	a30c      	add	r3, pc, #48	; (adr r3, 80024f8 <update_imd_status+0x1f0>)
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	f7fe fb06 	bl	8000adc <__aeabi_dcmplt>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <update_imd_status+0x1d6>
			imd->status = DEVICE_FAULT;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2204      	movs	r2, #4
 80024da:	749a      	strb	r2, [r3, #18]
 80024dc:	e003      	b.n	80024e6 <update_imd_status+0x1de>
		else
			imd->status = INVALID_DC;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	749a      	strb	r2, [r3, #18]
	}
}
 80024e4:	e7ff      	b.n	80024e6 <update_imd_status+0x1de>
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	33333333 	.word	0x33333333
 80024f4:	4047b333 	.word	0x4047b333
 80024f8:	cccccccd 	.word	0xcccccccd
 80024fc:	404a4ccc 	.word	0x404a4ccc
 8002500:	42be0000 	.word	0x42be0000
 8002504:	47d2f000 	.word	0x47d2f000
 8002508:	44960000 	.word	0x44960000
 800250c:	9999999a 	.word	0x9999999a
 8002510:	40139999 	.word	0x40139999
 8002514:	33333333 	.word	0x33333333
 8002518:	40243333 	.word	0x40243333
 800251c:	9999999a 	.word	0x9999999a
 8002520:	40567999 	.word	0x40567999
 8002524:	66666666 	.word	0x66666666
 8002528:	4057c666 	.word	0x4057c666

0800252c <update_BMS_Errors>:



/* Check for AMS Errors if they can happen and update the respective error flags */
void update_BMS_Errors(MCU *master, LTC6811 *slave_array, BMS_info *bmsInfo, Ivt *ivt, Accu_info* accuInfo)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	603b      	str	r3, [r7, #0]
	/* BMS Info updating */
	update_BMS_info_struct(master, slave_array, bmsInfo);
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f001 fd8c 	bl	800405c <update_BMS_info_struct>

	/* Check for what AMS Errors actually happen */
	if (bmsInfo->max_voltage_cell.value < OV_THRESHOLD)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	edd3 7a03 	vldr	s15, [r3, #12]
 800254a:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8002810 <update_BMS_Errors+0x2e4>
 800254e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002556:	d504      	bpl.n	8002562 <update_BMS_Errors+0x36>
		no_overvoltage_time = xTaskGetTickCount();
 8002558:	f017 fca0 	bl	8019e9c <xTaskGetTickCount>
 800255c:	4603      	mov	r3, r0
 800255e:	4aad      	ldr	r2, [pc, #692]	; (8002814 <update_BMS_Errors+0x2e8>)
 8002560:	6013      	str	r3, [r2, #0]

	if (bmsInfo->min_voltage_cell.value > UV_THRESHOLD)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	edd3 7a01 	vldr	s15, [r3, #4]
 8002568:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8002818 <update_BMS_Errors+0x2ec>
 800256c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	dd04      	ble.n	8002580 <update_BMS_Errors+0x54>
		no_undervoltage_time = xTaskGetTickCount();
 8002576:	f017 fc91 	bl	8019e9c <xTaskGetTickCount>
 800257a:	4603      	mov	r3, r0
 800257c:	4aa7      	ldr	r2, [pc, #668]	; (800281c <update_BMS_Errors+0x2f0>)
 800257e:	6013      	str	r3, [r2, #0]

	if (bmsInfo->ov_flag_cell == 0)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7d5b      	ldrb	r3, [r3, #21]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d104      	bne.n	8002592 <update_BMS_Errors+0x66>
		no_overvoltage_flag_time = xTaskGetTickCount();
 8002588:	f017 fc88 	bl	8019e9c <xTaskGetTickCount>
 800258c:	4603      	mov	r3, r0
 800258e:	4aa4      	ldr	r2, [pc, #656]	; (8002820 <update_BMS_Errors+0x2f4>)
 8002590:	6013      	str	r3, [r2, #0]

	if (bmsInfo->uv_flag_cell == 0)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7d1b      	ldrb	r3, [r3, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d104      	bne.n	80025a4 <update_BMS_Errors+0x78>
		no_undervoltage_flag_time = xTaskGetTickCount();
 800259a:	f017 fc7f 	bl	8019e9c <xTaskGetTickCount>
 800259e:	4603      	mov	r3, r0
 80025a0:	4aa0      	ldr	r2, [pc, #640]	; (8002824 <update_BMS_Errors+0x2f8>)
 80025a2:	6013      	str	r3, [r2, #0]

	if (ivt->current < CHARGE_CURR_THRESHOLD)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80025aa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80025ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b6:	d504      	bpl.n	80025c2 <update_BMS_Errors+0x96>
		no_overcurrent_charge_time = xTaskGetTickCount();
 80025b8:	f017 fc70 	bl	8019e9c <xTaskGetTickCount>
 80025bc:	4603      	mov	r3, r0
 80025be:	4a9a      	ldr	r2, [pc, #616]	; (8002828 <update_BMS_Errors+0x2fc>)
 80025c0:	6013      	str	r3, [r2, #0]

	if (ivt->current > DISCHARGE_CURR_THRESHOLD)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80025c8:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800282c <update_BMS_Errors+0x300>
 80025cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d4:	dd04      	ble.n	80025e0 <update_BMS_Errors+0xb4>
		no_overcurrent_discharge_time = xTaskGetTickCount();
 80025d6:	f017 fc61 	bl	8019e9c <xTaskGetTickCount>
 80025da:	4603      	mov	r3, r0
 80025dc:	4a94      	ldr	r2, [pc, #592]	; (8002830 <update_BMS_Errors+0x304>)
 80025de:	6013      	str	r3, [r2, #0]

	if (bmsInfo->max_temp_cell.value < OT_THRESHOLD)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80025e6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8002834 <update_BMS_Errors+0x308>
 80025ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f2:	d504      	bpl.n	80025fe <update_BMS_Errors+0xd2>
		no_overtemperature_time = xTaskGetTickCount();
 80025f4:	f017 fc52 	bl	8019e9c <xTaskGetTickCount>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4a8f      	ldr	r2, [pc, #572]	; (8002838 <update_BMS_Errors+0x30c>)
 80025fc:	6013      	str	r3, [r2, #0]

	if (bmsInfo->min_temp_cell.value > UT_THRESHOLD)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002604:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002610:	dd04      	ble.n	800261c <update_BMS_Errors+0xf0>
		no_undertemperature_time = xTaskGetTickCount();
 8002612:	f017 fc43 	bl	8019e9c <xTaskGetTickCount>
 8002616:	4603      	mov	r3, r0
 8002618:	4a88      	ldr	r2, [pc, #544]	; (800283c <update_BMS_Errors+0x310>)
 800261a:	6013      	str	r3, [r2, #0]

	if (ivt->voltage_vs > 300)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002622:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002840 <update_BMS_Errors+0x314>
 8002626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800262a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262e:	dd04      	ble.n	800263a <update_BMS_Errors+0x10e>
		no_isabelle_voltage_error_time = xTaskGetTickCount();
 8002630:	f017 fc34 	bl	8019e9c <xTaskGetTickCount>
 8002634:	4603      	mov	r3, r0
 8002636:	4a83      	ldr	r2, [pc, #524]	; (8002844 <update_BMS_Errors+0x318>)
 8002638:	6013      	str	r3, [r2, #0]


	if (xTaskGetTickCount() - no_overvoltage_time > VOLTAGE_TIMEOUT_MS)
 800263a:	f017 fc2f 	bl	8019e9c <xTaskGetTickCount>
 800263e:	4602      	mov	r2, r0
 8002640:	4b74      	ldr	r3, [pc, #464]	; (8002814 <update_BMS_Errors+0x2e8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800264a:	d904      	bls.n	8002656 <update_BMS_Errors+0x12a>
		bmsInfo->state = OVERVOLTAGE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8002654:	e008      	b.n	8002668 <update_BMS_Errors+0x13c>
	else if (bmsInfo->state == OVERVOLTAGE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800265c:	2b01      	cmp	r3, #1
 800265e:	d103      	bne.n	8002668 <update_BMS_Errors+0x13c>
			bmsInfo->state = BMS_OK;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if (xTaskGetTickCount() - no_undervoltage_time > VOLTAGE_TIMEOUT_MS)
 8002668:	f017 fc18 	bl	8019e9c <xTaskGetTickCount>
 800266c:	4602      	mov	r2, r0
 800266e:	4b6b      	ldr	r3, [pc, #428]	; (800281c <update_BMS_Errors+0x2f0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8002678:	d904      	bls.n	8002684 <update_BMS_Errors+0x158>
		bmsInfo->state = UNDERVOLTAGE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2202      	movs	r2, #2
 800267e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8002682:	e008      	b.n	8002696 <update_BMS_Errors+0x16a>
	else if (bmsInfo->state == UNDERVOLTAGE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800268a:	2b02      	cmp	r3, #2
 800268c:	d103      	bne.n	8002696 <update_BMS_Errors+0x16a>
			bmsInfo->state = BMS_OK;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if (xTaskGetTickCount() - no_overvoltage_flag_time > VOLTAGE_TIMEOUT_MS)
 8002696:	f017 fc01 	bl	8019e9c <xTaskGetTickCount>
 800269a:	4602      	mov	r2, r0
 800269c:	4b60      	ldr	r3, [pc, #384]	; (8002820 <update_BMS_Errors+0x2f4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80026a6:	d904      	bls.n	80026b2 <update_BMS_Errors+0x186>
		bmsInfo->state = OVERVOLTAGE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80026b0:	e008      	b.n	80026c4 <update_BMS_Errors+0x198>
	else if (bmsInfo->state == OVERVOLTAGE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d103      	bne.n	80026c4 <update_BMS_Errors+0x198>
			bmsInfo->state = BMS_OK;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if (xTaskGetTickCount() - no_undervoltage_flag_time > VOLTAGE_TIMEOUT_MS)
 80026c4:	f017 fbea 	bl	8019e9c <xTaskGetTickCount>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b56      	ldr	r3, [pc, #344]	; (8002824 <update_BMS_Errors+0x2f8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80026d4:	d904      	bls.n	80026e0 <update_BMS_Errors+0x1b4>
		bmsInfo->state = UNDERVOLTAGE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2202      	movs	r2, #2
 80026da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80026de:	e008      	b.n	80026f2 <update_BMS_Errors+0x1c6>
	else if (bmsInfo->state == UNDERVOLTAGE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d103      	bne.n	80026f2 <update_BMS_Errors+0x1c6>
		bmsInfo->state = BMS_OK;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if (xTaskGetTickCount() - no_overtemperature_time > TEMP_TIMEOUT_MS)
 80026f2:	f017 fbd3 	bl	8019e9c <xTaskGetTickCount>
 80026f6:	4602      	mov	r2, r0
 80026f8:	4b4f      	ldr	r3, [pc, #316]	; (8002838 <update_BMS_Errors+0x30c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002702:	d904      	bls.n	800270e <update_BMS_Errors+0x1e2>
		bmsInfo->state = OVERTEMP;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2205      	movs	r2, #5
 8002708:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800270c:	e008      	b.n	8002720 <update_BMS_Errors+0x1f4>
	else if (bmsInfo->state == OVERTEMP)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002714:	2b05      	cmp	r3, #5
 8002716:	d103      	bne.n	8002720 <update_BMS_Errors+0x1f4>
			bmsInfo->state = BMS_OK;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if (xTaskGetTickCount() - no_undertemperature_time > TEMP_TIMEOUT_MS)
 8002720:	f017 fbbc 	bl	8019e9c <xTaskGetTickCount>
 8002724:	4602      	mov	r2, r0
 8002726:	4b45      	ldr	r3, [pc, #276]	; (800283c <update_BMS_Errors+0x310>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002730:	d904      	bls.n	800273c <update_BMS_Errors+0x210>
		bmsInfo->state = UNDERTEMP;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2206      	movs	r2, #6
 8002736:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800273a:	e008      	b.n	800274e <update_BMS_Errors+0x222>
	else if (bmsInfo->state == UNDERTEMP)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002742:	2b06      	cmp	r3, #6
 8002744:	d103      	bne.n	800274e <update_BMS_Errors+0x222>
			bmsInfo->state = BMS_OK;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if (xTaskGetTickCount() - no_overcurrent_charge_time > CURRENT_TIMEOUT_MS)
 800274e:	f017 fba5 	bl	8019e9c <xTaskGetTickCount>
 8002752:	4602      	mov	r2, r0
 8002754:	4b34      	ldr	r3, [pc, #208]	; (8002828 <update_BMS_Errors+0x2fc>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800275e:	d904      	bls.n	800276a <update_BMS_Errors+0x23e>
		bmsInfo->state = OVERCURRENT_CHARGE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2203      	movs	r2, #3
 8002764:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8002768:	e008      	b.n	800277c <update_BMS_Errors+0x250>
	else if (bmsInfo->state == OVERCURRENT_CHARGE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002770:	2b03      	cmp	r3, #3
 8002772:	d103      	bne.n	800277c <update_BMS_Errors+0x250>
			bmsInfo->state = BMS_OK;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if (xTaskGetTickCount() - no_overcurrent_discharge_time > CURRENT_TIMEOUT_MS)
 800277c:	f017 fb8e 	bl	8019e9c <xTaskGetTickCount>
 8002780:	4602      	mov	r2, r0
 8002782:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <update_BMS_Errors+0x304>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800278c:	d904      	bls.n	8002798 <update_BMS_Errors+0x26c>
		bmsInfo->state = OVERCURRENT_DISCHARGE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2204      	movs	r2, #4
 8002792:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8002796:	e008      	b.n	80027aa <update_BMS_Errors+0x27e>
	else if (bmsInfo->state == OVERCURRENT_DISCHARGE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d103      	bne.n	80027aa <update_BMS_Errors+0x27e>
			bmsInfo->state = BMS_OK;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30


	if (bmsInfo->slave_error_id != 0)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d004      	beq.n	80027be <update_BMS_Errors+0x292>
		bmsInfo->state = SLAVE_ERROR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2209      	movs	r2, #9
 80027b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80027bc:	e008      	b.n	80027d0 <update_BMS_Errors+0x2a4>
	else if (bmsInfo->state == SLAVE_ERROR)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027c4:	2b09      	cmp	r3, #9
 80027c6:	d103      	bne.n	80027d0 <update_BMS_Errors+0x2a4>
		bmsInfo->state = BMS_OK;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if (bmsInfo->comm_error_id != 0)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d004      	beq.n	80027e4 <update_BMS_Errors+0x2b8>
		bmsInfo->state = COMMUNICATION_ERROR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2208      	movs	r2, #8
 80027de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80027e2:	e008      	b.n	80027f6 <update_BMS_Errors+0x2ca>
	else if (bmsInfo->state == COMMUNICATION_ERROR)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d103      	bne.n	80027f6 <update_BMS_Errors+0x2ca>
		bmsInfo->state = BMS_OK;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30


	if (xTaskGetTickCount() - ivt->IVT_I_Time_Previous > IVT_TIMEOUT_MS)
 80027f6:	f017 fb51 	bl	8019e9c <xTaskGetTickCount>
 80027fa:	4602      	mov	r2, r0
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2bc8      	cmp	r3, #200	; 0xc8
 8002804:	d920      	bls.n	8002848 <update_BMS_Errors+0x31c>
		bmsInfo->state = ISABELLE_DEAD;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2207      	movs	r2, #7
 800280a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800280e:	e024      	b.n	800285a <update_BMS_Errors+0x32e>
 8002810:	40863d71 	.word	0x40863d71
 8002814:	20000b28 	.word	0x20000b28
 8002818:	40433333 	.word	0x40433333
 800281c:	20000b2c 	.word	0x20000b2c
 8002820:	20000b30 	.word	0x20000b30
 8002824:	20000b34 	.word	0x20000b34
 8002828:	20000b38 	.word	0x20000b38
 800282c:	c32a0000 	.word	0xc32a0000
 8002830:	20000b3c 	.word	0x20000b3c
 8002834:	42700000 	.word	0x42700000
 8002838:	20000b40 	.word	0x20000b40
 800283c:	20000b44 	.word	0x20000b44
 8002840:	43960000 	.word	0x43960000
 8002844:	20000b48 	.word	0x20000b48
	else if (bmsInfo->state == ISABELLE_DEAD)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800284e:	2b07      	cmp	r3, #7
 8002850:	d103      	bne.n	800285a <update_BMS_Errors+0x32e>
		bmsInfo->state = BMS_OK;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if ((xTaskGetTickCount() - no_isabelle_voltage_error_time > VOLTAGE_TIMEOUT_MS) && (accuInfo->AIR_M_State == 1) && (accuInfo->AIR_P_State == 1))
 800285a:	f017 fb1f 	bl	8019e9c <xTaskGetTickCount>
 800285e:	4602      	mov	r2, r0
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <update_BMS_Errors+0x398>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800286a:	d912      	bls.n	8002892 <update_BMS_Errors+0x366>
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	7b5b      	ldrb	r3, [r3, #13]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <update_BMS_Errors+0x366>
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	7b5b      	ldrb	r3, [r3, #13]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <update_BMS_Errors+0x366>
		bmsInfo->state = ISABELLE_NO_VOLTAGE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	220b      	movs	r2, #11
 800288c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8002890:	e008      	b.n	80028a4 <update_BMS_Errors+0x378>
	else if (bmsInfo->state == ISABELLE_NO_VOLTAGE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002898:	2b0b      	cmp	r3, #11
 800289a:	d103      	bne.n	80028a4 <update_BMS_Errors+0x378>
		bmsInfo->state = BMS_OK;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if (bmsInfo->state != BMS_OK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <update_BMS_Errors+0x38e>
		bmsInfo->last_error = bmsInfo->state;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000b48 	.word	0x20000b48

080028c8 <update_TSAC_Errors>:



/* Update TSAC Errors in case of PreCharge failure or */
void update_TSAC_Errors(EventBits_t event_bits, Accu_info* accuInfo)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
	//uint8_t ts_active      = (event_bits & 0x01) >> 0;
	uint8_t air_m_supp     = (event_bits & 0x02) >> 1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
	uint8_t air_m_state    = (event_bits & 0x04) >> 2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	73bb      	strb	r3, [r7, #14]
//	uint8_t air_p_supp     = (event_bits & 0x08) >> 3;
//	uint8_t air_p_state    = (event_bits & 0x10) >> 4;
	uint8_t over_60V	   = (event_bits & 0x20) >> 5;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	095b      	lsrs	r3, r3, #5
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	737b      	strb	r3, [r7, #13]
	//uint8_t pc_done		   = (event_bits & 0x40) >> 6;
	uint8_t pc_relay_error = (event_bits & 0x80) >> 7;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	09db      	lsrs	r3, r3, #7
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	733b      	strb	r3, [r7, #12]

	if(pc_relay_error)
 8002902:	7b3b      	ldrb	r3, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00c      	beq.n	8002922 <update_TSAC_Errors+0x5a>
	{
		accuInfo->precharge_failed = 1;
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800290e:	f043 0310 	orr.w	r3, r3, #16
 8002912:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
		accuInfo->state 	 = PC_RELAY_IMPLAUSIBILITY;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2207      	movs	r2, #7
 800291a:	701a      	strb	r2, [r3, #0]
		accuInfo->last_error = PC_RELAY_IMPLAUSIBILITY;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2207      	movs	r2, #7
 8002920:	705a      	strb	r2, [r3, #1]
	}

	if(air_m_supp && !air_m_state)
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <update_TSAC_Errors+0x72>
 8002928:	7bbb      	ldrb	r3, [r7, #14]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d105      	bne.n	800293a <update_TSAC_Errors+0x72>
	{
		accuInfo->state		 = AIR_M_IMPLAUSIBILITY;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2205      	movs	r2, #5
 8002932:	701a      	strb	r2, [r3, #0]
		accuInfo->last_error = AIR_M_IMPLAUSIBILITY;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2205      	movs	r2, #5
 8002938:	705a      	strb	r2, [r3, #1]
//	{
//		accuInfo->state		 = AIR_P_IMPLAUSIBILITY;
//		accuInfo->last_error = AIR_P_IMPLAUSIBILITY;
//	}

	if(air_m_supp && air_m_state && (!over_60V && !pc_relay_error))
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d015      	beq.n	800296c <update_TSAC_Errors+0xa4>
 8002940:	7bbb      	ldrb	r3, [r7, #14]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d012      	beq.n	800296c <update_TSAC_Errors+0xa4>
 8002946:	7b7b      	ldrb	r3, [r7, #13]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10f      	bne.n	800296c <update_TSAC_Errors+0xa4>
 800294c:	7b3b      	ldrb	r3, [r7, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10c      	bne.n	800296c <update_TSAC_Errors+0xa4>
	{
		accuInfo->precharge_failed = 1;
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8002958:	f043 0310 	orr.w	r3, r3, #16
 800295c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
		accuInfo->state		 = PC_CIRCUIT_ERROR;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2208      	movs	r2, #8
 8002964:	701a      	strb	r2, [r3, #0]
		accuInfo->last_error = PC_CIRCUIT_ERROR;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2208      	movs	r2, #8
 800296a:	705a      	strb	r2, [r3, #1]
	}

	if(accuInfo->state != TSAC_OK)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <update_TSAC_Errors+0xbe>
		xTaskNotify(ACCU_Error_Handle, accuInfo->state, eSetValueWithOverwrite);
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <update_TSAC_Errors+0xc8>)
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	4619      	mov	r1, r3
 800297e:	2300      	movs	r3, #0
 8002980:	2203      	movs	r2, #3
 8002982:	f018 f897 	bl	801aab4 <xTaskGenericNotify>
}
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000a70 	.word	0x20000a70

08002994 <ams_fault>:

/* Indicate AMS Error */
void ams_fault(MCU* master, Accu_info* accuInfo)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
	/* Along with AIR+ error open AMS_Fault */
	HAL_GPIO_WritePin(master->AMS_OK, master->AMS_OKPin, GPIO_PIN_RESET);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6898      	ldr	r0, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	89db      	ldrh	r3, [r3, #14]
 80029a6:	2200      	movs	r2, #0
 80029a8:	4619      	mov	r1, r3
 80029aa:	f00b f9eb 	bl	800dd84 <HAL_GPIO_WritePin>
	accuInfo->ams_error = 1;
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	7b53      	ldrb	r3, [r2, #13]
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	7353      	strb	r3, [r2, #13]
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <USB_Init>:
#include <JsonUsb.h>



void USB_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029c0:	b5b0      	push	{r4, r5, r7, lr}
 80029c2:	b0b4      	sub	sp, #208	; 0xd0
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80029cc:	887b      	ldrh	r3, [r7, #2]
 80029ce:	2201      	movs	r2, #1
 80029d0:	4619      	mov	r1, r3
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f00b f9d6 	bl	800dd84 <HAL_GPIO_WritePin>
	char initial_message[200] = "USB_Connected!!!\n";
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <USB_Init+0x60>)
 80029da:	f107 0408 	add.w	r4, r7, #8
 80029de:	461d      	mov	r5, r3
 80029e0:	6828      	ldr	r0, [r5, #0]
 80029e2:	6869      	ldr	r1, [r5, #4]
 80029e4:	68aa      	ldr	r2, [r5, #8]
 80029e6:	68eb      	ldr	r3, [r5, #12]
 80029e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ea:	8a2b      	ldrh	r3, [r5, #16]
 80029ec:	8023      	strh	r3, [r4, #0]
 80029ee:	f107 031a 	add.w	r3, r7, #26
 80029f2:	22b6      	movs	r2, #182	; 0xb6
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f01b fd93 	bl	801e522 <memset>
	CDC_Transmit_FS((uint8_t*)initial_message, strlen(initial_message));
 80029fc:	f107 0308 	add.w	r3, r7, #8
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fc35 	bl	8000270 <strlen>
 8002a06:	4603      	mov	r3, r0
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	f107 0308 	add.w	r3, r7, #8
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f019 fa39 	bl	801be88 <CDC_Transmit_FS>
}
 8002a16:	bf00      	nop
 8002a18:	37d0      	adds	r7, #208	; 0xd0
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	08021888 	.word	0x08021888

08002a24 <voltages_json>:


// 7msec
USBD_StatusTypeDef voltages_json(LTC6811 *slave_array)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a30:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002a34:	6018      	str	r0, [r3, #0]
	USBD_StatusTypeDef usb_result;

	char  *string 			= NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	cJSON *VoltagesJson 	= NULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

	cJSON *VoltageValueJson = NULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

	float buffer[144];
	int i = 0 ;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
	for (uint8_t slave = 0; slave < SLAVES_NUM; slave++){
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8002a54:	e031      	b.n	8002aba <voltages_json+0x96>
		for(uint8_t cell = 0; cell < CELLS_NUM; cell++){
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
 8002a5c:	e024      	b.n	8002aa8 <voltages_json+0x84>

			buffer[i]  	  = slave_array[slave].voltage[cell];
 8002a5e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8002a62:	22d8      	movs	r2, #216	; 0xd8
 8002a64:	fb02 f303 	mul.w	r3, r2, r3
 8002a68:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002a6c:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	441a      	add	r2, r3
 8002a74:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 8002a78:	3312      	adds	r3, #18
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3304      	adds	r3, #4
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a86:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002a8a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	601a      	str	r2, [r3, #0]
			i++;
 8002a94:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
		for(uint8_t cell = 0; cell < CELLS_NUM; cell++){
 8002a9e:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
 8002aa8:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d9d6      	bls.n	8002a5e <voltages_json+0x3a>
	for (uint8_t slave = 0; slave < SLAVES_NUM; slave++){
 8002ab0:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8002aba:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8002abe:	2b0f      	cmp	r3, #15
 8002ac0:	d9c9      	bls.n	8002a56 <voltages_json+0x32>
		}
	}

	VoltagesJson = cJSON_CreateObject();
 8002ac2:	f006 f89b 	bl	8008bfc <cJSON_CreateObject>
 8002ac6:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (VoltagesJson == NULL)
 8002aca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d034      	beq.n	8002b3c <voltages_json+0x118>
		goto end;
	VoltageValueJson = cJSON_CreateFloatArray(buffer,144);
 8002ad2:	f107 0308 	add.w	r3, r7, #8
 8002ad6:	2190      	movs	r1, #144	; 0x90
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f006 f8fc 	bl	8008cd6 <cJSON_CreateFloatArray>
 8002ade:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
	if (VoltageValueJson == NULL)
 8002ae2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d02a      	beq.n	8002b40 <voltages_json+0x11c>
		goto end;
	cJSON_AddItemToObject(VoltagesJson, "Voltages", VoltageValueJson);
 8002aea:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8002aee:	491a      	ldr	r1, [pc, #104]	; (8002b58 <voltages_json+0x134>)
 8002af0:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8002af4:	f005 ffe8 	bl	8008ac8 <cJSON_AddItemToObject>

	string = cJSON_Print(VoltagesJson);
 8002af8:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8002afc:	f005 fca4 	bl	8008448 <cJSON_Print>
 8002b00:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
	if (string == NULL)
 8002b04:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d104      	bne.n	8002b16 <voltages_json+0xf2>
	{
		cJSON_free(string);
 8002b0c:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8002b10:	f006 f93a 	bl	8008d88 <cJSON_free>
 8002b14:	e015      	b.n	8002b42 <voltages_json+0x11e>
	}
	else{
		usb_result = CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8002b16:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8002b1a:	f7fd fba9 	bl	8000270 <strlen>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	4619      	mov	r1, r3
 8002b24:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8002b28:	f019 f9ae 	bl	801be88 <CDC_Transmit_FS>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		cJSON_free(string);
 8002b32:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8002b36:	f006 f927 	bl	8008d88 <cJSON_free>
 8002b3a:	e002      	b.n	8002b42 <voltages_json+0x11e>
		goto end;
 8002b3c:	bf00      	nop
 8002b3e:	e000      	b.n	8002b42 <voltages_json+0x11e>
		goto end;
 8002b40:	bf00      	nop
	}

	end:
	cJSON_Delete(VoltagesJson);
 8002b42:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8002b46:	f005 f875 	bl	8007c34 <cJSON_Delete>

	return usb_result;
 8002b4a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f507 7718 	add.w	r7, r7, #608	; 0x260
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	0802189c 	.word	0x0802189c

08002b5c <balancing_json>:

USBD_StatusTypeDef balancing_json(LTC6811 *slave_array)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b68:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b6c:	6018      	str	r0, [r3, #0]
	USBD_StatusTypeDef usb_result;

	char  *string 			= NULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	cJSON *BalancesJson 	= NULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

	cJSON *BalanceStateJson = NULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

	int buffer[144];
	int i = 0 ;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
	for (uint8_t slave = 0; slave < SLAVES_NUM; slave++){
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8002b8c:	e02f      	b.n	8002bee <balancing_json+0x92>
		for(uint8_t cell = 0; cell < CELLS_NUM; cell++){
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
 8002b94:	e022      	b.n	8002bdc <balancing_json+0x80>

			buffer[i]  	  = slave_array[slave].dcc[cell];
 8002b96:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8002b9a:	22d8      	movs	r2, #216	; 0xd8
 8002b9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ba0:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002ba4:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	441a      	add	r2, r3
 8002bac:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bbc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002bc0:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8002bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			i++;
 8002bc8:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
		for(uint8_t cell = 0; cell < CELLS_NUM; cell++){
 8002bd2:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
 8002bdc:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d9d8      	bls.n	8002b96 <balancing_json+0x3a>
	for (uint8_t slave = 0; slave < SLAVES_NUM; slave++){
 8002be4:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8002be8:	3301      	adds	r3, #1
 8002bea:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8002bee:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8002bf2:	2b0f      	cmp	r3, #15
 8002bf4:	d9cb      	bls.n	8002b8e <balancing_json+0x32>

		}
	}
	BalancesJson = cJSON_CreateObject();
 8002bf6:	f006 f801 	bl	8008bfc <cJSON_CreateObject>
 8002bfa:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (BalancesJson == NULL)
 8002bfe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d034      	beq.n	8002c70 <balancing_json+0x114>
		goto end;
	BalanceStateJson = cJSON_CreateIntArray(buffer,144);
 8002c06:	f107 0308 	add.w	r3, r7, #8
 8002c0a:	2190      	movs	r1, #144	; 0x90
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f006 f809 	bl	8008c24 <cJSON_CreateIntArray>
 8002c12:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
	if (BalanceStateJson == NULL)
 8002c16:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d02a      	beq.n	8002c74 <balancing_json+0x118>
		goto end;
	cJSON_AddItemToObject(BalancesJson, "Balancing", BalanceStateJson);
 8002c1e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8002c22:	491a      	ldr	r1, [pc, #104]	; (8002c8c <balancing_json+0x130>)
 8002c24:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8002c28:	f005 ff4e 	bl	8008ac8 <cJSON_AddItemToObject>

	string = cJSON_Print(BalancesJson);
 8002c2c:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8002c30:	f005 fc0a 	bl	8008448 <cJSON_Print>
 8002c34:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
	if (string == NULL)
 8002c38:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d104      	bne.n	8002c4a <balancing_json+0xee>
	{
		cJSON_free(string);
 8002c40:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8002c44:	f006 f8a0 	bl	8008d88 <cJSON_free>
 8002c48:	e015      	b.n	8002c76 <balancing_json+0x11a>
	}
	else
	{
		usb_result = CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8002c4a:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8002c4e:	f7fd fb0f 	bl	8000270 <strlen>
 8002c52:	4603      	mov	r3, r0
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	4619      	mov	r1, r3
 8002c58:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8002c5c:	f019 f914 	bl	801be88 <CDC_Transmit_FS>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		cJSON_free(string);
 8002c66:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8002c6a:	f006 f88d 	bl	8008d88 <cJSON_free>
 8002c6e:	e002      	b.n	8002c76 <balancing_json+0x11a>
		goto end;
 8002c70:	bf00      	nop
 8002c72:	e000      	b.n	8002c76 <balancing_json+0x11a>
		goto end;
 8002c74:	bf00      	nop
	}

	end:
	cJSON_Delete(BalancesJson);
 8002c76:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8002c7a:	f004 ffdb 	bl	8007c34 <cJSON_Delete>

	return usb_result;
 8002c7e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	f507 7718 	add.w	r7, r7, #608	; 0x260
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	080218a8 	.word	0x080218a8

08002c90 <temperatures_json>:


//3msec
USBD_StatusTypeDef temperatures_json(LTC6811 *slave_array)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8002c9c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002ca0:	6018      	str	r0, [r3, #0]
	USBD_StatusTypeDef usb_result;

	char  *string 		    	= NULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	cJSON *TemperaturesJson 	= NULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	cJSON *TemperatureValueJson = NULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

	/* Buffer contains 144 temperature positions for the 144 cells, but only some are measured from NTCs
	 * If one is not measured, the value in the array's cell is 0xFF                                    */
	float buffer[144];
	uint8_t i = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
	for (uint8_t slave = 0; slave < SLAVES_NUM; slave++){
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
 8002cc0:	e067      	b.n	8002d92 <temperatures_json+0x102>
		for(uint8_t ntc = 0; ntc < NTCS_NUM; ntc++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f887 3254 	strb.w	r3, [r7, #596]	; 0x254
 8002cc8:	e05a      	b.n	8002d80 <temperatures_json+0xf0>
		{
			if (ntc_to_cell_position[slave][ntc] == 0xFF)
 8002cca:	f897 2255 	ldrb.w	r2, [r7, #597]	; 0x255
 8002cce:	f897 1254 	ldrb.w	r1, [r7, #596]	; 0x254
 8002cd2:	4857      	ldr	r0, [pc, #348]	; (8002e30 <temperatures_json+0x1a0>)
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	4403      	add	r3, r0
 8002cdc:	440b      	add	r3, r1
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2bff      	cmp	r3, #255	; 0xff
 8002ce2:	d119      	bne.n	8002d18 <temperatures_json+0x88>
			{
				buffer[i] = 0xFF;
 8002ce4:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 8002ce8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8002cec:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4a4f      	ldr	r2, [pc, #316]	; (8002e34 <temperatures_json+0x1a4>)
 8002cf6:	601a      	str	r2, [r3, #0]
				//i++;
				continue;
 8002cf8:	e03d      	b.n	8002d76 <temperatures_json+0xe6>
			}

			while (i < ntc_to_cell_position[slave][ntc] - 1)
			{
				buffer[i] = 0xFF;  // No NTC measuring that specific cell
 8002cfa:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 8002cfe:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8002d02:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	4a4a      	ldr	r2, [pc, #296]	; (8002e34 <temperatures_json+0x1a4>)
 8002d0c:	601a      	str	r2, [r3, #0]
				i++;
 8002d0e:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 8002d12:	3301      	adds	r3, #1
 8002d14:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
			while (i < ntc_to_cell_position[slave][ntc] - 1)
 8002d18:	f897 1256 	ldrb.w	r1, [r7, #598]	; 0x256
 8002d1c:	f897 2255 	ldrb.w	r2, [r7, #597]	; 0x255
 8002d20:	f897 0254 	ldrb.w	r0, [r7, #596]	; 0x254
 8002d24:	4c42      	ldr	r4, [pc, #264]	; (8002e30 <temperatures_json+0x1a0>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4423      	add	r3, r4
 8002d2e:	4403      	add	r3, r0
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	4299      	cmp	r1, r3
 8002d36:	dbe0      	blt.n	8002cfa <temperatures_json+0x6a>
			}
			buffer[i] = slave_array[slave].temp[ntc];
 8002d38:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8002d3c:	22d8      	movs	r2, #216	; 0xd8
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8002d46:	f5a2 7215 	sub.w	r2, r2, #596	; 0x254
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	18d1      	adds	r1, r2, r3
 8002d4e:	f897 2254 	ldrb.w	r2, [r7, #596]	; 0x254
 8002d52:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 8002d56:	3222      	adds	r2, #34	; 0x22
 8002d58:	0092      	lsls	r2, r2, #2
 8002d5a:	440a      	add	r2, r1
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8002d62:	f5a1 7114 	sub.w	r1, r1, #592	; 0x250
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	601a      	str	r2, [r3, #0]
			i++;
 8002d6c:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 8002d70:	3301      	adds	r3, #1
 8002d72:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
		for(uint8_t ntc = 0; ntc < NTCS_NUM; ntc++)
 8002d76:	f897 3254 	ldrb.w	r3, [r7, #596]	; 0x254
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	f887 3254 	strb.w	r3, [r7, #596]	; 0x254
 8002d80:	f897 3254 	ldrb.w	r3, [r7, #596]	; 0x254
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d9a0      	bls.n	8002cca <temperatures_json+0x3a>
	for (uint8_t slave = 0; slave < SLAVES_NUM; slave++){
 8002d88:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
 8002d92:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8002d96:	2b0f      	cmp	r3, #15
 8002d98:	d993      	bls.n	8002cc2 <temperatures_json+0x32>

		}
	}

	TemperaturesJson = cJSON_CreateObject();
 8002d9a:	f005 ff2f 	bl	8008bfc <cJSON_CreateObject>
 8002d9e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (TemperaturesJson == NULL)
 8002da2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d034      	beq.n	8002e14 <temperatures_json+0x184>
		goto end;
	TemperatureValueJson = cJSON_CreateFloatArray(buffer,144);
 8002daa:	f107 0308 	add.w	r3, r7, #8
 8002dae:	2190      	movs	r1, #144	; 0x90
 8002db0:	4618      	mov	r0, r3
 8002db2:	f005 ff90 	bl	8008cd6 <cJSON_CreateFloatArray>
 8002db6:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
	if (TemperatureValueJson == NULL)
 8002dba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d02a      	beq.n	8002e18 <temperatures_json+0x188>
		goto end;
	cJSON_AddItemToObject(TemperaturesJson, "Temperatures", TemperatureValueJson);
 8002dc2:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8002dc6:	491c      	ldr	r1, [pc, #112]	; (8002e38 <temperatures_json+0x1a8>)
 8002dc8:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8002dcc:	f005 fe7c 	bl	8008ac8 <cJSON_AddItemToObject>

	string = cJSON_Print(TemperaturesJson);
 8002dd0:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8002dd4:	f005 fb38 	bl	8008448 <cJSON_Print>
 8002dd8:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
	if (string == NULL)
 8002ddc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d104      	bne.n	8002dee <temperatures_json+0x15e>
	{
		cJSON_free(string);
 8002de4:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8002de8:	f005 ffce 	bl	8008d88 <cJSON_free>
 8002dec:	e015      	b.n	8002e1a <temperatures_json+0x18a>
	}
	else{
		usb_result = CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8002dee:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8002df2:	f7fd fa3d 	bl	8000270 <strlen>
 8002df6:	4603      	mov	r3, r0
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8002e00:	f019 f842 	bl	801be88 <CDC_Transmit_FS>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
		cJSON_free(string);
 8002e0a:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8002e0e:	f005 ffbb 	bl	8008d88 <cJSON_free>
 8002e12:	e002      	b.n	8002e1a <temperatures_json+0x18a>
		goto end;
 8002e14:	bf00      	nop
 8002e16:	e000      	b.n	8002e1a <temperatures_json+0x18a>
		goto end;
 8002e18:	bf00      	nop
	}

	end:
	cJSON_Delete(TemperaturesJson);
 8002e1a:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8002e1e:	f004 ff09 	bl	8007c34 <cJSON_Delete>

	return usb_result;
 8002e22:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	f507 7717 	add.w	r7, r7, #604	; 0x25c
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd90      	pop	{r4, r7, pc}
 8002e30:	08022604 	.word	0x08022604
 8002e34:	437f0000 	.word	0x437f0000
 8002e38:	080218b4 	.word	0x080218b4

08002e3c <humidities_json>:

//1msec
USBD_StatusTypeDef humidities_json(LTC6811 *slave_array)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b098      	sub	sp, #96	; 0x60
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
	USBD_StatusTypeDef usb_result;

	char  *string 			= NULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	653b      	str	r3, [r7, #80]	; 0x50
	cJSON *VoltagesJson 	= NULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	64fb      	str	r3, [r7, #76]	; 0x4c

	cJSON *VoltageValueJson = NULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	64bb      	str	r3, [r7, #72]	; 0x48

	float buffer[SLAVES_NUM];
	int i = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	65bb      	str	r3, [r7, #88]	; 0x58
	for (uint8_t slave = 0; slave < SLAVES_NUM; slave++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002e5a:	e016      	b.n	8002e8a <humidities_json+0x4e>
	{
		buffer[i] = slave_array[slave].humidity;
 8002e5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e60:	22d8      	movs	r2, #216	; 0xd8
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	3360      	adds	r3, #96	; 0x60
 8002e74:	443b      	add	r3, r7
 8002e76:	3b58      	subs	r3, #88	; 0x58
 8002e78:	601a      	str	r2, [r3, #0]
		i++;
 8002e7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	65bb      	str	r3, [r7, #88]	; 0x58
	for (uint8_t slave = 0; slave < SLAVES_NUM; slave++)
 8002e80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e84:	3301      	adds	r3, #1
 8002e86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002e8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e8e:	2b0f      	cmp	r3, #15
 8002e90:	d9e4      	bls.n	8002e5c <humidities_json+0x20>
	}

	VoltagesJson = cJSON_CreateObject();
 8002e92:	f005 feb3 	bl	8008bfc <cJSON_CreateObject>
 8002e96:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (VoltagesJson == NULL)
 8002e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d029      	beq.n	8002ef2 <humidities_json+0xb6>
		goto end;
	VoltageValueJson = cJSON_CreateFloatArray(buffer, SLAVES_NUM);
 8002e9e:	f107 0308 	add.w	r3, r7, #8
 8002ea2:	2110      	movs	r1, #16
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f005 ff16 	bl	8008cd6 <cJSON_CreateFloatArray>
 8002eaa:	64b8      	str	r0, [r7, #72]	; 0x48
	if (VoltageValueJson == NULL)
 8002eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d021      	beq.n	8002ef6 <humidities_json+0xba>
		goto end;
	cJSON_AddItemToObject(VoltagesJson, "Humidities", VoltageValueJson);
 8002eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eb4:	4915      	ldr	r1, [pc, #84]	; (8002f0c <humidities_json+0xd0>)
 8002eb6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002eb8:	f005 fe06 	bl	8008ac8 <cJSON_AddItemToObject>

	string = cJSON_Print(VoltagesJson);
 8002ebc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ebe:	f005 fac3 	bl	8008448 <cJSON_Print>
 8002ec2:	6538      	str	r0, [r7, #80]	; 0x50
	if (string == NULL)
 8002ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <humidities_json+0x96>
	{
		cJSON_free(string);
 8002eca:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002ecc:	f005 ff5c 	bl	8008d88 <cJSON_free>
 8002ed0:	e012      	b.n	8002ef8 <humidities_json+0xbc>
	}
	else{
		usb_result = CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8002ed2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002ed4:	f7fd f9cc 	bl	8000270 <strlen>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	4619      	mov	r1, r3
 8002ede:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002ee0:	f018 ffd2 	bl	801be88 <CDC_Transmit_FS>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		cJSON_free(string);
 8002eea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002eec:	f005 ff4c 	bl	8008d88 <cJSON_free>
 8002ef0:	e002      	b.n	8002ef8 <humidities_json+0xbc>
		goto end;
 8002ef2:	bf00      	nop
 8002ef4:	e000      	b.n	8002ef8 <humidities_json+0xbc>
		goto end;
 8002ef6:	bf00      	nop
	}

	end:
	cJSON_Delete(VoltagesJson);
 8002ef8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002efa:	f004 fe9b 	bl	8007c34 <cJSON_Delete>

	return usb_result;
 8002efe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3760      	adds	r7, #96	; 0x60
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	080218c4 	.word	0x080218c4

08002f10 <PECerrors_json>:



USBD_StatusTypeDef PECerrors_json(LTC6811 *slave_array)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b098      	sub	sp, #96	; 0x60
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	USBD_StatusTypeDef usb_result;

	char  *string 			= NULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	653b      	str	r3, [r7, #80]	; 0x50
	cJSON *VoltagesJson 	= NULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	64fb      	str	r3, [r7, #76]	; 0x4c

	cJSON *VoltageValueJson = NULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	64bb      	str	r3, [r7, #72]	; 0x48

	float buffer[SLAVES_NUM];
	int i = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	65bb      	str	r3, [r7, #88]	; 0x58
	for (uint8_t slave = 0; slave < SLAVES_NUM; slave++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002f2e:	e01a      	b.n	8002f66 <PECerrors_json+0x56>
	{
		buffer[i] = slave_array[slave].pec_errors;
 8002f30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f34:	22d8      	movs	r2, #216	; 0xd8
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	895b      	ldrh	r3, [r3, #10]
 8002f40:	ee07 3a90 	vmov	s15, r3
 8002f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	3360      	adds	r3, #96	; 0x60
 8002f4e:	443b      	add	r3, r7
 8002f50:	3b58      	subs	r3, #88	; 0x58
 8002f52:	edc3 7a00 	vstr	s15, [r3]
		i++;
 8002f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f58:	3301      	adds	r3, #1
 8002f5a:	65bb      	str	r3, [r7, #88]	; 0x58
	for (uint8_t slave = 0; slave < SLAVES_NUM; slave++)
 8002f5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f60:	3301      	adds	r3, #1
 8002f62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002f66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f6a:	2b0f      	cmp	r3, #15
 8002f6c:	d9e0      	bls.n	8002f30 <PECerrors_json+0x20>
	}

	VoltagesJson = cJSON_CreateObject();
 8002f6e:	f005 fe45 	bl	8008bfc <cJSON_CreateObject>
 8002f72:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (VoltagesJson == NULL)
 8002f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d029      	beq.n	8002fce <PECerrors_json+0xbe>
		goto end;
	VoltageValueJson = cJSON_CreateFloatArray(buffer, SLAVES_NUM);
 8002f7a:	f107 0308 	add.w	r3, r7, #8
 8002f7e:	2110      	movs	r1, #16
 8002f80:	4618      	mov	r0, r3
 8002f82:	f005 fea8 	bl	8008cd6 <cJSON_CreateFloatArray>
 8002f86:	64b8      	str	r0, [r7, #72]	; 0x48
	if (VoltageValueJson == NULL)
 8002f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d021      	beq.n	8002fd2 <PECerrors_json+0xc2>
		goto end;
	cJSON_AddItemToObject(VoltagesJson, "PEC_Errors", VoltageValueJson);
 8002f8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f90:	4915      	ldr	r1, [pc, #84]	; (8002fe8 <PECerrors_json+0xd8>)
 8002f92:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f94:	f005 fd98 	bl	8008ac8 <cJSON_AddItemToObject>

	string = cJSON_Print(VoltagesJson);
 8002f98:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f9a:	f005 fa55 	bl	8008448 <cJSON_Print>
 8002f9e:	6538      	str	r0, [r7, #80]	; 0x50
	if (string == NULL)
 8002fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <PECerrors_json+0x9e>
	{
		cJSON_free(string);
 8002fa6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002fa8:	f005 feee 	bl	8008d88 <cJSON_free>
 8002fac:	e012      	b.n	8002fd4 <PECerrors_json+0xc4>
	}
	else{
		usb_result = CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8002fae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002fb0:	f7fd f95e 	bl	8000270 <strlen>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	4619      	mov	r1, r3
 8002fba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002fbc:	f018 ff64 	bl	801be88 <CDC_Transmit_FS>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		cJSON_free(string);
 8002fc6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002fc8:	f005 fede 	bl	8008d88 <cJSON_free>
 8002fcc:	e002      	b.n	8002fd4 <PECerrors_json+0xc4>
		goto end;
 8002fce:	bf00      	nop
 8002fd0:	e000      	b.n	8002fd4 <PECerrors_json+0xc4>
		goto end;
 8002fd2:	bf00      	nop
	}

	end:
	cJSON_Delete(VoltagesJson);
 8002fd4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002fd6:	f004 fe2d 	bl	8007c34 <cJSON_Delete>

	return usb_result;
 8002fda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3760      	adds	r7, #96	; 0x60
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	080218d0 	.word	0x080218d0

08002fec <Accu_json>:



USBD_StatusTypeDef Accu_json(Accu_info *accuInfo)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b090      	sub	sp, #64	; 0x40
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	USBD_StatusTypeDef usb_result;

	char *string = NULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	63bb      	str	r3, [r7, #56]	; 0x38
	char AccuNumber[20];
	cJSON *AccuInfoJson = NULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34

	cJSON *AccuValueJson=NULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	633b      	str	r3, [r7, #48]	; 0x30
	cJSON *jsonMessage = cJSON_CreateObject();
 8003000:	f005 fdfc 	bl	8008bfc <cJSON_CreateObject>
 8003004:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (jsonMessage == NULL)
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8208 	beq.w	800341e <Accu_json+0x432>
		goto end;

	AccuInfoJson = cJSON_CreateObject();
 800300e:	f005 fdf5 	bl	8008bfc <cJSON_CreateObject>
 8003012:	6378      	str	r0, [r7, #52]	; 0x34
	if (AccuInfoJson == NULL)
 8003014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8203 	beq.w	8003422 <Accu_json+0x436>
		goto end;

	char AccuValue[10];

	// AMS_ERROR
	sprintf(AccuValue, "%u", accuInfo->ams_error);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7b5b      	ldrb	r3, [r3, #13]
 8003020:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	f107 030c 	add.w	r3, r7, #12
 800302c:	49cf      	ldr	r1, [pc, #828]	; (800336c <Accu_json+0x380>)
 800302e:	4618      	mov	r0, r3
 8003030:	f01b f9e6 	bl	801e400 <siprintf>
	AccuValueJson = cJSON_CreateString(AccuValue);
 8003034:	f107 030c 	add.w	r3, r7, #12
 8003038:	4618      	mov	r0, r3
 800303a:	f005 fda5 	bl	8008b88 <cJSON_CreateString>
 800303e:	6338      	str	r0, [r7, #48]	; 0x30
	if (AccuInfoJson == NULL)
 8003040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 81ef 	beq.w	8003426 <Accu_json+0x43a>
		goto end;

	sprintf(AccuNumber, "Ams_Error");
 8003048:	f107 0318 	add.w	r3, r7, #24
 800304c:	49c8      	ldr	r1, [pc, #800]	; (8003370 <Accu_json+0x384>)
 800304e:	4618      	mov	r0, r3
 8003050:	f01b f9d6 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(AccuInfoJson, AccuNumber, AccuValueJson);
 8003054:	f107 0318 	add.w	r3, r7, #24
 8003058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800305a:	4619      	mov	r1, r3
 800305c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800305e:	f005 fd33 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(AccuValue, 0, sizeof(AccuValue));
 8003062:	f107 030c 	add.w	r3, r7, #12
 8003066:	220a      	movs	r2, #10
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f01b fa59 	bl	801e522 <memset>

	// IMD_ERROR
	sprintf(AccuValue, "%u", accuInfo->imd_error);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	7b5b      	ldrb	r3, [r3, #13]
 8003074:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	49ba      	ldr	r1, [pc, #744]	; (800336c <Accu_json+0x380>)
 8003082:	4618      	mov	r0, r3
 8003084:	f01b f9bc 	bl	801e400 <siprintf>
	AccuValueJson = cJSON_CreateString(AccuValue);
 8003088:	f107 030c 	add.w	r3, r7, #12
 800308c:	4618      	mov	r0, r3
 800308e:	f005 fd7b 	bl	8008b88 <cJSON_CreateString>
 8003092:	6338      	str	r0, [r7, #48]	; 0x30
	if (AccuInfoJson == NULL)
 8003094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 81c7 	beq.w	800342a <Accu_json+0x43e>
		goto end;

	sprintf(AccuNumber, "Imd_Error");
 800309c:	f107 0318 	add.w	r3, r7, #24
 80030a0:	49b4      	ldr	r1, [pc, #720]	; (8003374 <Accu_json+0x388>)
 80030a2:	4618      	mov	r0, r3
 80030a4:	f01b f9ac 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(AccuInfoJson, AccuNumber, AccuValueJson);
 80030a8:	f107 0318 	add.w	r3, r7, #24
 80030ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ae:	4619      	mov	r1, r3
 80030b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030b2:	f005 fd09 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(AccuValue, 0, sizeof(AccuValue));
 80030b6:	f107 030c 	add.w	r3, r7, #12
 80030ba:	220a      	movs	r2, #10
 80030bc:	2100      	movs	r1, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	f01b fa2f 	bl	801e522 <memset>

	// AIR_P_Supp
	sprintf(AccuValue, "%u", accuInfo->AIR_P_Supp);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	7b5b      	ldrb	r3, [r3, #13]
 80030c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	f107 030c 	add.w	r3, r7, #12
 80030d4:	49a5      	ldr	r1, [pc, #660]	; (800336c <Accu_json+0x380>)
 80030d6:	4618      	mov	r0, r3
 80030d8:	f01b f992 	bl	801e400 <siprintf>
	AccuValueJson = cJSON_CreateString(AccuValue);
 80030dc:	f107 030c 	add.w	r3, r7, #12
 80030e0:	4618      	mov	r0, r3
 80030e2:	f005 fd51 	bl	8008b88 <cJSON_CreateString>
 80030e6:	6338      	str	r0, [r7, #48]	; 0x30
	if (AccuInfoJson == NULL)
 80030e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 819f 	beq.w	800342e <Accu_json+0x442>
		goto end;

	sprintf(AccuNumber, "AIR_P_Supp");
 80030f0:	f107 0318 	add.w	r3, r7, #24
 80030f4:	49a0      	ldr	r1, [pc, #640]	; (8003378 <Accu_json+0x38c>)
 80030f6:	4618      	mov	r0, r3
 80030f8:	f01b f982 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(AccuInfoJson, AccuNumber, AccuValueJson);
 80030fc:	f107 0318 	add.w	r3, r7, #24
 8003100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003102:	4619      	mov	r1, r3
 8003104:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003106:	f005 fcdf 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(AccuValue, 0, sizeof(AccuValue));
 800310a:	f107 030c 	add.w	r3, r7, #12
 800310e:	220a      	movs	r2, #10
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f01b fa05 	bl	801e522 <memset>

	// AIR_M_Supp
	sprintf(AccuValue, "%u", accuInfo->AIR_M_Supp);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7b5b      	ldrb	r3, [r3, #13]
 800311c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	f107 030c 	add.w	r3, r7, #12
 8003128:	4990      	ldr	r1, [pc, #576]	; (800336c <Accu_json+0x380>)
 800312a:	4618      	mov	r0, r3
 800312c:	f01b f968 	bl	801e400 <siprintf>
	AccuValueJson = cJSON_CreateString(AccuValue);
 8003130:	f107 030c 	add.w	r3, r7, #12
 8003134:	4618      	mov	r0, r3
 8003136:	f005 fd27 	bl	8008b88 <cJSON_CreateString>
 800313a:	6338      	str	r0, [r7, #48]	; 0x30
	if (AccuInfoJson == NULL)
 800313c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8177 	beq.w	8003432 <Accu_json+0x446>
		goto end;

	sprintf(AccuNumber, "AIR_M_Supp");
 8003144:	f107 0318 	add.w	r3, r7, #24
 8003148:	498c      	ldr	r1, [pc, #560]	; (800337c <Accu_json+0x390>)
 800314a:	4618      	mov	r0, r3
 800314c:	f01b f958 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(AccuInfoJson, AccuNumber, AccuValueJson);
 8003150:	f107 0318 	add.w	r3, r7, #24
 8003154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003156:	4619      	mov	r1, r3
 8003158:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800315a:	f005 fcb5 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(AccuValue, 0, sizeof(AccuValue));
 800315e:	f107 030c 	add.w	r3, r7, #12
 8003162:	220a      	movs	r2, #10
 8003164:	2100      	movs	r1, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f01b f9db 	bl	801e522 <memset>

	// AIR_P_State
	sprintf(AccuValue, "%u", accuInfo->AIR_P_State);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7b5b      	ldrb	r3, [r3, #13]
 8003170:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	f107 030c 	add.w	r3, r7, #12
 800317c:	497b      	ldr	r1, [pc, #492]	; (800336c <Accu_json+0x380>)
 800317e:	4618      	mov	r0, r3
 8003180:	f01b f93e 	bl	801e400 <siprintf>
	AccuValueJson = cJSON_CreateString(AccuValue);
 8003184:	f107 030c 	add.w	r3, r7, #12
 8003188:	4618      	mov	r0, r3
 800318a:	f005 fcfd 	bl	8008b88 <cJSON_CreateString>
 800318e:	6338      	str	r0, [r7, #48]	; 0x30
	if (AccuInfoJson == NULL)
 8003190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 814f 	beq.w	8003436 <Accu_json+0x44a>
		goto end;

	sprintf(AccuNumber, "AIR_P_State");
 8003198:	f107 0318 	add.w	r3, r7, #24
 800319c:	4978      	ldr	r1, [pc, #480]	; (8003380 <Accu_json+0x394>)
 800319e:	4618      	mov	r0, r3
 80031a0:	f01b f92e 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(AccuInfoJson, AccuNumber, AccuValueJson);
 80031a4:	f107 0318 	add.w	r3, r7, #24
 80031a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031aa:	4619      	mov	r1, r3
 80031ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031ae:	f005 fc8b 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(AccuValue, 0, sizeof(AccuValue));
 80031b2:	f107 030c 	add.w	r3, r7, #12
 80031b6:	220a      	movs	r2, #10
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f01b f9b1 	bl	801e522 <memset>

	// AIR_M_State
	sprintf(AccuValue, "%u", accuInfo->AIR_M_State);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7b5b      	ldrb	r3, [r3, #13]
 80031c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	f107 030c 	add.w	r3, r7, #12
 80031d0:	4966      	ldr	r1, [pc, #408]	; (800336c <Accu_json+0x380>)
 80031d2:	4618      	mov	r0, r3
 80031d4:	f01b f914 	bl	801e400 <siprintf>
	AccuValueJson = cJSON_CreateString(AccuValue);
 80031d8:	f107 030c 	add.w	r3, r7, #12
 80031dc:	4618      	mov	r0, r3
 80031de:	f005 fcd3 	bl	8008b88 <cJSON_CreateString>
 80031e2:	6338      	str	r0, [r7, #48]	; 0x30
	if (AccuInfoJson == NULL)
 80031e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8127 	beq.w	800343a <Accu_json+0x44e>
		goto end;

	sprintf(AccuNumber, "AIR_M_State");
 80031ec:	f107 0318 	add.w	r3, r7, #24
 80031f0:	4964      	ldr	r1, [pc, #400]	; (8003384 <Accu_json+0x398>)
 80031f2:	4618      	mov	r0, r3
 80031f4:	f01b f904 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(AccuInfoJson, AccuNumber, AccuValueJson);
 80031f8:	f107 0318 	add.w	r3, r7, #24
 80031fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fe:	4619      	mov	r1, r3
 8003200:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003202:	f005 fc61 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(AccuValue, 0, sizeof(AccuValue));
 8003206:	f107 030c 	add.w	r3, r7, #12
 800320a:	220a      	movs	r2, #10
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f01b f987 	bl	801e522 <memset>

	// over60_dclink
	sprintf(AccuValue, "%u", accuInfo->over60V_dclink);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7b5b      	ldrb	r3, [r3, #13]
 8003218:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	f107 030c 	add.w	r3, r7, #12
 8003224:	4951      	ldr	r1, [pc, #324]	; (800336c <Accu_json+0x380>)
 8003226:	4618      	mov	r0, r3
 8003228:	f01b f8ea 	bl	801e400 <siprintf>
	AccuValueJson = cJSON_CreateString(AccuValue);
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	4618      	mov	r0, r3
 8003232:	f005 fca9 	bl	8008b88 <cJSON_CreateString>
 8003236:	6338      	str	r0, [r7, #48]	; 0x30
	if (AccuInfoJson == NULL)
 8003238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80ff 	beq.w	800343e <Accu_json+0x452>
		goto end;

	sprintf(AccuNumber, "over60_dclink");
 8003240:	f107 0318 	add.w	r3, r7, #24
 8003244:	4950      	ldr	r1, [pc, #320]	; (8003388 <Accu_json+0x39c>)
 8003246:	4618      	mov	r0, r3
 8003248:	f01b f8da 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(AccuInfoJson, AccuNumber, AccuValueJson);
 800324c:	f107 0318 	add.w	r3, r7, #24
 8003250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003252:	4619      	mov	r1, r3
 8003254:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003256:	f005 fc37 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(AccuValue, 0, sizeof(AccuValue));
 800325a:	f107 030c 	add.w	r3, r7, #12
 800325e:	220a      	movs	r2, #10
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f01b f95d 	bl	801e522 <memset>

	// dc_dc_temp
	sprintf(AccuValue, "%0.4f", accuInfo->dc_dc_temp);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	4618      	mov	r0, r3
 800326e:	f7fd f96b 	bl	8000548 <__aeabi_f2d>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	f107 000c 	add.w	r0, r7, #12
 800327a:	4944      	ldr	r1, [pc, #272]	; (800338c <Accu_json+0x3a0>)
 800327c:	f01b f8c0 	bl	801e400 <siprintf>
	AccuValueJson = cJSON_CreateString(AccuValue);
 8003280:	f107 030c 	add.w	r3, r7, #12
 8003284:	4618      	mov	r0, r3
 8003286:	f005 fc7f 	bl	8008b88 <cJSON_CreateString>
 800328a:	6338      	str	r0, [r7, #48]	; 0x30
	if (AccuInfoJson == NULL)
 800328c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 80d7 	beq.w	8003442 <Accu_json+0x456>
		goto end;

	sprintf(AccuNumber, "dc_dc_temp");
 8003294:	f107 0318 	add.w	r3, r7, #24
 8003298:	493d      	ldr	r1, [pc, #244]	; (8003390 <Accu_json+0x3a4>)
 800329a:	4618      	mov	r0, r3
 800329c:	f01b f8b0 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(AccuInfoJson, AccuNumber, AccuValueJson);
 80032a0:	f107 0318 	add.w	r3, r7, #24
 80032a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a6:	4619      	mov	r1, r3
 80032a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032aa:	f005 fc0d 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(AccuValue, 0, sizeof(AccuValue));
 80032ae:	f107 030c 	add.w	r3, r7, #12
 80032b2:	220a      	movs	r2, #10
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f01b f933 	bl	801e522 <memset>

	// HVroom_humidity
	sprintf(AccuValue, "%u", accuInfo->HVroom_humidity);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	7d1b      	ldrb	r3, [r3, #20]
 80032c0:	461a      	mov	r2, r3
 80032c2:	f107 030c 	add.w	r3, r7, #12
 80032c6:	4929      	ldr	r1, [pc, #164]	; (800336c <Accu_json+0x380>)
 80032c8:	4618      	mov	r0, r3
 80032ca:	f01b f899 	bl	801e400 <siprintf>
	AccuValueJson = cJSON_CreateString(AccuValue);
 80032ce:	f107 030c 	add.w	r3, r7, #12
 80032d2:	4618      	mov	r0, r3
 80032d4:	f005 fc58 	bl	8008b88 <cJSON_CreateString>
 80032d8:	6338      	str	r0, [r7, #48]	; 0x30
	if (AccuInfoJson == NULL)
 80032da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80b2 	beq.w	8003446 <Accu_json+0x45a>
		goto end;

	sprintf(AccuNumber, "HVroom_humidity");
 80032e2:	f107 0318 	add.w	r3, r7, #24
 80032e6:	492b      	ldr	r1, [pc, #172]	; (8003394 <Accu_json+0x3a8>)
 80032e8:	4618      	mov	r0, r3
 80032ea:	f01b f889 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(AccuInfoJson, AccuNumber, AccuValueJson);
 80032ee:	f107 0318 	add.w	r3, r7, #24
 80032f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032f4:	4619      	mov	r1, r3
 80032f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032f8:	f005 fbe6 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(AccuValue, 0, sizeof(AccuValue));
 80032fc:	f107 030c 	add.w	r3, r7, #12
 8003300:	220a      	movs	r2, #10
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f01b f90c 	bl	801e522 <memset>

	// precharge_voltage
	sprintf(AccuValue, "%0.4f", accuInfo->precharge_voltage);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd f91a 	bl	8000548 <__aeabi_f2d>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	f107 000c 	add.w	r0, r7, #12
 800331c:	491b      	ldr	r1, [pc, #108]	; (800338c <Accu_json+0x3a0>)
 800331e:	f01b f86f 	bl	801e400 <siprintf>
	AccuValueJson = cJSON_CreateString(AccuValue);
 8003322:	f107 030c 	add.w	r3, r7, #12
 8003326:	4618      	mov	r0, r3
 8003328:	f005 fc2e 	bl	8008b88 <cJSON_CreateString>
 800332c:	6338      	str	r0, [r7, #48]	; 0x30
	if (AccuInfoJson == NULL)
 800332e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 808a 	beq.w	800344a <Accu_json+0x45e>
		goto end;

	sprintf(AccuNumber, "precharge_voltage");
 8003336:	f107 0318 	add.w	r3, r7, #24
 800333a:	4917      	ldr	r1, [pc, #92]	; (8003398 <Accu_json+0x3ac>)
 800333c:	4618      	mov	r0, r3
 800333e:	f01b f85f 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(AccuInfoJson, AccuNumber, AccuValueJson);
 8003342:	f107 0318 	add.w	r3, r7, #24
 8003346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003348:	4619      	mov	r1, r3
 800334a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800334c:	f005 fbbc 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(AccuValue, 0, sizeof(AccuValue));
 8003350:	f107 030c 	add.w	r3, r7, #12
 8003354:	220a      	movs	r2, #10
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f01b f8e2 	bl	801e522 <memset>

	// AIR_P_State_Int
	sprintf(AccuValue, "%u", accuInfo->AIR_P_State_Int);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003364:	461a      	mov	r2, r3
 8003366:	f107 030c 	add.w	r3, r7, #12
 800336a:	e017      	b.n	800339c <Accu_json+0x3b0>
 800336c:	080218dc 	.word	0x080218dc
 8003370:	080218e0 	.word	0x080218e0
 8003374:	080218ec 	.word	0x080218ec
 8003378:	080218f8 	.word	0x080218f8
 800337c:	08021904 	.word	0x08021904
 8003380:	08021910 	.word	0x08021910
 8003384:	0802191c 	.word	0x0802191c
 8003388:	08021928 	.word	0x08021928
 800338c:	08021938 	.word	0x08021938
 8003390:	08021940 	.word	0x08021940
 8003394:	0802194c 	.word	0x0802194c
 8003398:	0802195c 	.word	0x0802195c
 800339c:	4931      	ldr	r1, [pc, #196]	; (8003464 <Accu_json+0x478>)
 800339e:	4618      	mov	r0, r3
 80033a0:	f01b f82e 	bl	801e400 <siprintf>
	AccuValueJson = cJSON_CreateString(AccuValue);
 80033a4:	f107 030c 	add.w	r3, r7, #12
 80033a8:	4618      	mov	r0, r3
 80033aa:	f005 fbed 	bl	8008b88 <cJSON_CreateString>
 80033ae:	6338      	str	r0, [r7, #48]	; 0x30
	if (AccuInfoJson == NULL)
 80033b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d04b      	beq.n	800344e <Accu_json+0x462>
		goto end;

	sprintf(AccuNumber, "AIR_P_State_Int");
 80033b6:	f107 0318 	add.w	r3, r7, #24
 80033ba:	492b      	ldr	r1, [pc, #172]	; (8003468 <Accu_json+0x47c>)
 80033bc:	4618      	mov	r0, r3
 80033be:	f01b f81f 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(AccuInfoJson, AccuNumber, AccuValueJson);
 80033c2:	f107 0318 	add.w	r3, r7, #24
 80033c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c8:	4619      	mov	r1, r3
 80033ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80033cc:	f005 fb7c 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(AccuValue, 0, sizeof(AccuValue));
 80033d0:	f107 030c 	add.w	r3, r7, #12
 80033d4:	220a      	movs	r2, #10
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f01b f8a2 	bl	801e522 <memset>

	cJSON_AddItemToObject(jsonMessage, "AccumulatorInfo", AccuInfoJson);
 80033de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033e0:	4922      	ldr	r1, [pc, #136]	; (800346c <Accu_json+0x480>)
 80033e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033e4:	f005 fb70 	bl	8008ac8 <cJSON_AddItemToObject>
	string = cJSON_Print(jsonMessage);
 80033e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033ea:	f005 f82d 	bl	8008448 <cJSON_Print>
 80033ee:	63b8      	str	r0, [r7, #56]	; 0x38
	if (string == NULL)
 80033f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <Accu_json+0x412>
	{
		cJSON_free(string);
 80033f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80033f8:	f005 fcc6 	bl	8008d88 <cJSON_free>
 80033fc:	e028      	b.n	8003450 <Accu_json+0x464>
	}
	else{
		usb_result = CDC_Transmit_FS((uint8_t*)string, strlen(string));
 80033fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003400:	f7fc ff36 	bl	8000270 <strlen>
 8003404:	4603      	mov	r3, r0
 8003406:	b29b      	uxth	r3, r3
 8003408:	4619      	mov	r1, r3
 800340a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800340c:	f018 fd3c 	bl	801be88 <CDC_Transmit_FS>
 8003410:	4603      	mov	r3, r0
 8003412:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		cJSON_free(string);
 8003416:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003418:	f005 fcb6 	bl	8008d88 <cJSON_free>
 800341c:	e018      	b.n	8003450 <Accu_json+0x464>
		goto end;
 800341e:	bf00      	nop
 8003420:	e016      	b.n	8003450 <Accu_json+0x464>
		goto end;
 8003422:	bf00      	nop
 8003424:	e014      	b.n	8003450 <Accu_json+0x464>
		goto end;
 8003426:	bf00      	nop
 8003428:	e012      	b.n	8003450 <Accu_json+0x464>
		goto end;
 800342a:	bf00      	nop
 800342c:	e010      	b.n	8003450 <Accu_json+0x464>
		goto end;
 800342e:	bf00      	nop
 8003430:	e00e      	b.n	8003450 <Accu_json+0x464>
		goto end;
 8003432:	bf00      	nop
 8003434:	e00c      	b.n	8003450 <Accu_json+0x464>
		goto end;
 8003436:	bf00      	nop
 8003438:	e00a      	b.n	8003450 <Accu_json+0x464>
		goto end;
 800343a:	bf00      	nop
 800343c:	e008      	b.n	8003450 <Accu_json+0x464>
		goto end;
 800343e:	bf00      	nop
 8003440:	e006      	b.n	8003450 <Accu_json+0x464>
		goto end;
 8003442:	bf00      	nop
 8003444:	e004      	b.n	8003450 <Accu_json+0x464>
		goto end;
 8003446:	bf00      	nop
 8003448:	e002      	b.n	8003450 <Accu_json+0x464>
		goto end;
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <Accu_json+0x464>
		goto end;
 800344e:	bf00      	nop
	}

	end:
	cJSON_Delete(jsonMessage);
 8003450:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003452:	f004 fbef 	bl	8007c34 <cJSON_Delete>

	return usb_result;
 8003456:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800345a:	4618      	mov	r0, r3
 800345c:	3740      	adds	r7, #64	; 0x40
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	080218dc 	.word	0x080218dc
 8003468:	08021970 	.word	0x08021970
 800346c:	08021980 	.word	0x08021980

08003470 <Ivt_json>:


// Isabelle
USBD_StatusTypeDef Ivt_json(Ivt *ivt)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b090      	sub	sp, #64	; 0x40
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	USBD_StatusTypeDef usb_result;

	char   IvtNumber[20];
	char  *string 		= NULL;
 8003478:	2300      	movs	r3, #0
 800347a:	63bb      	str	r3, [r7, #56]	; 0x38
	cJSON *IvtInfoJson 	= NULL;
 800347c:	2300      	movs	r3, #0
 800347e:	637b      	str	r3, [r7, #52]	; 0x34

	cJSON *IvtValueJson = NULL;
 8003480:	2300      	movs	r3, #0
 8003482:	633b      	str	r3, [r7, #48]	; 0x30
	cJSON *jsonMessage = cJSON_CreateObject();
 8003484:	f005 fbba 	bl	8008bfc <cJSON_CreateObject>
 8003488:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (jsonMessage == NULL)
 800348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80cb 	beq.w	8003628 <Ivt_json+0x1b8>
		goto end;

	IvtInfoJson = cJSON_CreateObject();
 8003492:	f005 fbb3 	bl	8008bfc <cJSON_CreateObject>
 8003496:	6378      	str	r0, [r7, #52]	; 0x34
	if (IvtInfoJson == NULL)
 8003498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80c6 	beq.w	800362c <Ivt_json+0x1bc>
		goto end;

	char IvtValue[10];

	// Vehicle side voltage
	sprintf(IvtValue, "%0.1f ", ivt->voltage_vs);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fd f84f 	bl	8000548 <__aeabi_f2d>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	f107 000c 	add.w	r0, r7, #12
 80034b2:	4967      	ldr	r1, [pc, #412]	; (8003650 <Ivt_json+0x1e0>)
 80034b4:	f01a ffa4 	bl	801e400 <siprintf>
	IvtValueJson = cJSON_CreateString(IvtValue);
 80034b8:	f107 030c 	add.w	r3, r7, #12
 80034bc:	4618      	mov	r0, r3
 80034be:	f005 fb63 	bl	8008b88 <cJSON_CreateString>
 80034c2:	6338      	str	r0, [r7, #48]	; 0x30
	if (IvtInfoJson == NULL)
 80034c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80b2 	beq.w	8003630 <Ivt_json+0x1c0>
		goto end;

	sprintf(IvtNumber, "V_Side_Voltage");
 80034cc:	f107 0318 	add.w	r3, r7, #24
 80034d0:	4960      	ldr	r1, [pc, #384]	; (8003654 <Ivt_json+0x1e4>)
 80034d2:	4618      	mov	r0, r3
 80034d4:	f01a ff94 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(IvtInfoJson, IvtNumber, IvtValueJson);
 80034d8:	f107 0318 	add.w	r3, r7, #24
 80034dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034de:	4619      	mov	r1, r3
 80034e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034e2:	f005 faf1 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(IvtValue, 0, sizeof(IvtValue));
 80034e6:	f107 030c 	add.w	r3, r7, #12
 80034ea:	220a      	movs	r2, #10
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f01b f817 	bl	801e522 <memset>

	// Total accumulator current
	sprintf(IvtValue, "%0.2f", ivt->current);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd f825 	bl	8000548 <__aeabi_f2d>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	f107 000c 	add.w	r0, r7, #12
 8003506:	4954      	ldr	r1, [pc, #336]	; (8003658 <Ivt_json+0x1e8>)
 8003508:	f01a ff7a 	bl	801e400 <siprintf>
	IvtValueJson = cJSON_CreateString(IvtValue);
 800350c:	f107 030c 	add.w	r3, r7, #12
 8003510:	4618      	mov	r0, r3
 8003512:	f005 fb39 	bl	8008b88 <cJSON_CreateString>
 8003516:	6338      	str	r0, [r7, #48]	; 0x30
	if (IvtInfoJson == NULL)
 8003518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 808a 	beq.w	8003634 <Ivt_json+0x1c4>
		goto end;

	sprintf(IvtNumber, "Current");
 8003520:	f107 0318 	add.w	r3, r7, #24
 8003524:	494d      	ldr	r1, [pc, #308]	; (800365c <Ivt_json+0x1ec>)
 8003526:	4618      	mov	r0, r3
 8003528:	f01a ff6a 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(IvtInfoJson, IvtNumber, IvtValueJson);
 800352c:	f107 0318 	add.w	r3, r7, #24
 8003530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003532:	4619      	mov	r1, r3
 8003534:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003536:	f005 fac7 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(IvtValue, 0, sizeof(IvtValue));
 800353a:	f107 030c 	add.w	r3, r7, #12
 800353e:	220a      	movs	r2, #10
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f01a ffed 	bl	801e522 <memset>

	// Ampere hours consumed
	sprintf(IvtValue, "%0.3f", ivt->Ah_consumed);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fc fffb 	bl	8000548 <__aeabi_f2d>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	f107 000c 	add.w	r0, r7, #12
 800355a:	4941      	ldr	r1, [pc, #260]	; (8003660 <Ivt_json+0x1f0>)
 800355c:	f01a ff50 	bl	801e400 <siprintf>
	IvtValueJson = cJSON_CreateString(IvtValue);
 8003560:	f107 030c 	add.w	r3, r7, #12
 8003564:	4618      	mov	r0, r3
 8003566:	f005 fb0f 	bl	8008b88 <cJSON_CreateString>
 800356a:	6338      	str	r0, [r7, #48]	; 0x30
	if (IvtInfoJson == NULL)
 800356c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356e:	2b00      	cmp	r3, #0
 8003570:	d062      	beq.n	8003638 <Ivt_json+0x1c8>
		goto end;

	sprintf(IvtNumber, "Ah_consumed");
 8003572:	f107 0318 	add.w	r3, r7, #24
 8003576:	493b      	ldr	r1, [pc, #236]	; (8003664 <Ivt_json+0x1f4>)
 8003578:	4618      	mov	r0, r3
 800357a:	f01a ff41 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(IvtInfoJson, IvtNumber, IvtValueJson);
 800357e:	f107 0318 	add.w	r3, r7, #24
 8003582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003584:	4619      	mov	r1, r3
 8003586:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003588:	f005 fa9e 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(IvtValue, 0, sizeof(IvtValue));
 800358c:	f107 030c 	add.w	r3, r7, #12
 8003590:	220a      	movs	r2, #10
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f01a ffc4 	bl	801e522 <memset>

	// Total TSAC energy consumed since the last LVMS power cycling
	sprintf(IvtValue, "%u", ivt->Wh_consumed);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80035a0:	461a      	mov	r2, r3
 80035a2:	f107 030c 	add.w	r3, r7, #12
 80035a6:	4930      	ldr	r1, [pc, #192]	; (8003668 <Ivt_json+0x1f8>)
 80035a8:	4618      	mov	r0, r3
 80035aa:	f01a ff29 	bl	801e400 <siprintf>
	IvtValueJson = cJSON_CreateString(IvtValue);
 80035ae:	f107 030c 	add.w	r3, r7, #12
 80035b2:	4618      	mov	r0, r3
 80035b4:	f005 fae8 	bl	8008b88 <cJSON_CreateString>
 80035b8:	6338      	str	r0, [r7, #48]	; 0x30
	if (IvtInfoJson == NULL)
 80035ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d03d      	beq.n	800363c <Ivt_json+0x1cc>
		goto end;

	sprintf(IvtNumber, "Energy Consumed");
 80035c0:	f107 0318 	add.w	r3, r7, #24
 80035c4:	4929      	ldr	r1, [pc, #164]	; (800366c <Ivt_json+0x1fc>)
 80035c6:	4618      	mov	r0, r3
 80035c8:	f01a ff1a 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(IvtInfoJson, IvtNumber, IvtValueJson);
 80035cc:	f107 0318 	add.w	r3, r7, #24
 80035d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d2:	4619      	mov	r1, r3
 80035d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035d6:	f005 fa77 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(IvtValue, 0, sizeof(IvtValue));
 80035da:	f107 030c 	add.w	r3, r7, #12
 80035de:	220a      	movs	r2, #10
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f01a ff9d 	bl	801e522 <memset>

	cJSON_AddItemToObject(jsonMessage, "Isabelle Info", IvtInfoJson);
 80035e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ea:	4921      	ldr	r1, [pc, #132]	; (8003670 <Ivt_json+0x200>)
 80035ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035ee:	f005 fa6b 	bl	8008ac8 <cJSON_AddItemToObject>
	string = cJSON_Print(jsonMessage);
 80035f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035f4:	f004 ff28 	bl	8008448 <cJSON_Print>
 80035f8:	63b8      	str	r0, [r7, #56]	; 0x38
	if (string == NULL)
 80035fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d103      	bne.n	8003608 <Ivt_json+0x198>
	{
		cJSON_free(string);
 8003600:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003602:	f005 fbc1 	bl	8008d88 <cJSON_free>
 8003606:	e01a      	b.n	800363e <Ivt_json+0x1ce>
	}
	else{
		usb_result = CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8003608:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800360a:	f7fc fe31 	bl	8000270 <strlen>
 800360e:	4603      	mov	r3, r0
 8003610:	b29b      	uxth	r3, r3
 8003612:	4619      	mov	r1, r3
 8003614:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003616:	f018 fc37 	bl	801be88 <CDC_Transmit_FS>
 800361a:	4603      	mov	r3, r0
 800361c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		cJSON_free(string);
 8003620:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003622:	f005 fbb1 	bl	8008d88 <cJSON_free>
 8003626:	e00a      	b.n	800363e <Ivt_json+0x1ce>
		goto end;
 8003628:	bf00      	nop
 800362a:	e008      	b.n	800363e <Ivt_json+0x1ce>
		goto end;
 800362c:	bf00      	nop
 800362e:	e006      	b.n	800363e <Ivt_json+0x1ce>
		goto end;
 8003630:	bf00      	nop
 8003632:	e004      	b.n	800363e <Ivt_json+0x1ce>
		goto end;
 8003634:	bf00      	nop
 8003636:	e002      	b.n	800363e <Ivt_json+0x1ce>
		goto end;
 8003638:	bf00      	nop
 800363a:	e000      	b.n	800363e <Ivt_json+0x1ce>
		goto end;
 800363c:	bf00      	nop
	}

	end:
	cJSON_Delete(jsonMessage);
 800363e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003640:	f004 faf8 	bl	8007c34 <cJSON_Delete>

	return usb_result;
 8003644:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8003648:	4618      	mov	r0, r3
 800364a:	3740      	adds	r7, #64	; 0x40
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	08021990 	.word	0x08021990
 8003654:	08021998 	.word	0x08021998
 8003658:	080219a8 	.word	0x080219a8
 800365c:	080219b0 	.word	0x080219b0
 8003660:	080219b8 	.word	0x080219b8
 8003664:	080219c0 	.word	0x080219c0
 8003668:	080218dc 	.word	0x080218dc
 800366c:	080219cc 	.word	0x080219cc
 8003670:	080219dc 	.word	0x080219dc

08003674 <Elcon_json>:

// Elcon charger
USBD_StatusTypeDef Elcon_json(Elcon *elcon)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b090      	sub	sp, #64	; 0x40
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	USBD_StatusTypeDef usb_result;

	char   ElconNumber[20];
	char  *string 			= NULL;
 800367c:	2300      	movs	r3, #0
 800367e:	63bb      	str	r3, [r7, #56]	; 0x38
	cJSON *ElconInfoJson 	= NULL;
 8003680:	2300      	movs	r3, #0
 8003682:	637b      	str	r3, [r7, #52]	; 0x34
	cJSON *ElconValueJson   = NULL;
 8003684:	2300      	movs	r3, #0
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
	cJSON *jsonMessage = cJSON_CreateObject();
 8003688:	f005 fab8 	bl	8008bfc <cJSON_CreateObject>
 800368c:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (jsonMessage == NULL)
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 81e6 	beq.w	8003a62 <Elcon_json+0x3ee>
		goto end;

	ElconInfoJson = cJSON_CreateObject();
 8003696:	f005 fab1 	bl	8008bfc <cJSON_CreateObject>
 800369a:	6378      	str	r0, [r7, #52]	; 0x34
	if (ElconInfoJson == NULL)
 800369c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 81e1 	beq.w	8003a66 <Elcon_json+0x3f2>
		goto end;

	cJSON_AddItemToObject(jsonMessage, "Elcon Info", ElconInfoJson);
 80036a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a6:	49ce      	ldr	r1, [pc, #824]	; (80039e0 <Elcon_json+0x36c>)
 80036a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036aa:	f005 fa0d 	bl	8008ac8 <cJSON_AddItemToObject>

	char ElconValue[10];

	// Target voltage set from BMS
	sprintf(ElconValue, "%0.1f ", elcon->target_voltage);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fc ff48 	bl	8000548 <__aeabi_f2d>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	f107 000c 	add.w	r0, r7, #12
 80036c0:	49c8      	ldr	r1, [pc, #800]	; (80039e4 <Elcon_json+0x370>)
 80036c2:	f01a fe9d 	bl	801e400 <siprintf>
	ElconValueJson = cJSON_CreateString(ElconValue);
 80036c6:	f107 030c 	add.w	r3, r7, #12
 80036ca:	4618      	mov	r0, r3
 80036cc:	f005 fa5c 	bl	8008b88 <cJSON_CreateString>
 80036d0:	6338      	str	r0, [r7, #48]	; 0x30
	if (ElconInfoJson == NULL)
 80036d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 81c8 	beq.w	8003a6a <Elcon_json+0x3f6>
		goto end;

	sprintf(ElconNumber, "Target_Voltage");
 80036da:	f107 0318 	add.w	r3, r7, #24
 80036de:	49c2      	ldr	r1, [pc, #776]	; (80039e8 <Elcon_json+0x374>)
 80036e0:	4618      	mov	r0, r3
 80036e2:	f01a fe8d 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(ElconInfoJson, ElconNumber, ElconValueJson);
 80036e6:	f107 0318 	add.w	r3, r7, #24
 80036ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ec:	4619      	mov	r1, r3
 80036ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036f0:	f005 f9ea 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(ElconValue, 0, sizeof(ElconValue));
 80036f4:	f107 030c 	add.w	r3, r7, #12
 80036f8:	220a      	movs	r2, #10
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f01a ff10 	bl	801e522 <memset>

	// Actual output Voltage
	sprintf(ElconValue, "%0.1f", elcon->output_voltage);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fc ff1e 	bl	8000548 <__aeabi_f2d>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	f107 000c 	add.w	r0, r7, #12
 8003714:	49b5      	ldr	r1, [pc, #724]	; (80039ec <Elcon_json+0x378>)
 8003716:	f01a fe73 	bl	801e400 <siprintf>
	ElconValueJson = cJSON_CreateString(ElconValue);
 800371a:	f107 030c 	add.w	r3, r7, #12
 800371e:	4618      	mov	r0, r3
 8003720:	f005 fa32 	bl	8008b88 <cJSON_CreateString>
 8003724:	6338      	str	r0, [r7, #48]	; 0x30
	if (ElconInfoJson == NULL)
 8003726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 81a0 	beq.w	8003a6e <Elcon_json+0x3fa>
		goto end;

	sprintf(ElconNumber, "Output_Voltage");
 800372e:	f107 0318 	add.w	r3, r7, #24
 8003732:	49af      	ldr	r1, [pc, #700]	; (80039f0 <Elcon_json+0x37c>)
 8003734:	4618      	mov	r0, r3
 8003736:	f01a fe63 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(ElconInfoJson, ElconNumber, ElconValueJson);
 800373a:	f107 0318 	add.w	r3, r7, #24
 800373e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003740:	4619      	mov	r1, r3
 8003742:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003744:	f005 f9c0 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(ElconValue, 0, sizeof(ElconValue));
 8003748:	f107 030c 	add.w	r3, r7, #12
 800374c:	220a      	movs	r2, #10
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f01a fee6 	bl	801e522 <memset>

	// Target Current set from BMS
	sprintf(ElconValue, "%0.1f", elcon->target_current);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fc fef4 	bl	8000548 <__aeabi_f2d>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	f107 000c 	add.w	r0, r7, #12
 8003768:	49a0      	ldr	r1, [pc, #640]	; (80039ec <Elcon_json+0x378>)
 800376a:	f01a fe49 	bl	801e400 <siprintf>
	ElconValueJson = cJSON_CreateString(ElconValue);
 800376e:	f107 030c 	add.w	r3, r7, #12
 8003772:	4618      	mov	r0, r3
 8003774:	f005 fa08 	bl	8008b88 <cJSON_CreateString>
 8003778:	6338      	str	r0, [r7, #48]	; 0x30
	if (ElconInfoJson == NULL)
 800377a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8178 	beq.w	8003a72 <Elcon_json+0x3fe>
		goto end;

	sprintf(ElconNumber, "Target_Current");
 8003782:	f107 0318 	add.w	r3, r7, #24
 8003786:	499b      	ldr	r1, [pc, #620]	; (80039f4 <Elcon_json+0x380>)
 8003788:	4618      	mov	r0, r3
 800378a:	f01a fe39 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(ElconInfoJson, ElconNumber, ElconValueJson);
 800378e:	f107 0318 	add.w	r3, r7, #24
 8003792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003794:	4619      	mov	r1, r3
 8003796:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003798:	f005 f996 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(ElconValue, 0, sizeof(ElconValue));
 800379c:	f107 030c 	add.w	r3, r7, #12
 80037a0:	220a      	movs	r2, #10
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f01a febc 	bl	801e522 <memset>

	// Actual output Current
	sprintf(ElconValue, "%0.1f", elcon->output_current);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fc feca 	bl	8000548 <__aeabi_f2d>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	f107 000c 	add.w	r0, r7, #12
 80037bc:	498b      	ldr	r1, [pc, #556]	; (80039ec <Elcon_json+0x378>)
 80037be:	f01a fe1f 	bl	801e400 <siprintf>
	ElconValueJson = cJSON_CreateString(ElconValue);
 80037c2:	f107 030c 	add.w	r3, r7, #12
 80037c6:	4618      	mov	r0, r3
 80037c8:	f005 f9de 	bl	8008b88 <cJSON_CreateString>
 80037cc:	6338      	str	r0, [r7, #48]	; 0x30
	if (ElconInfoJson == NULL)
 80037ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8150 	beq.w	8003a76 <Elcon_json+0x402>
		goto end;

	sprintf(ElconNumber, "Output_Current");
 80037d6:	f107 0318 	add.w	r3, r7, #24
 80037da:	4987      	ldr	r1, [pc, #540]	; (80039f8 <Elcon_json+0x384>)
 80037dc:	4618      	mov	r0, r3
 80037de:	f01a fe0f 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(ElconInfoJson, ElconNumber, ElconValueJson);
 80037e2:	f107 0318 	add.w	r3, r7, #24
 80037e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e8:	4619      	mov	r1, r3
 80037ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037ec:	f005 f96c 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(ElconValue, 0, sizeof(ElconValue));
 80037f0:	f107 030c 	add.w	r3, r7, #12
 80037f4:	220a      	movs	r2, #10
 80037f6:	2100      	movs	r1, #0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f01a fe92 	bl	801e522 <memset>

	// Elcon connect status
	sprintf(ElconValue, "%u", elcon->connected);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	791b      	ldrb	r3, [r3, #4]
 8003802:	461a      	mov	r2, r3
 8003804:	f107 030c 	add.w	r3, r7, #12
 8003808:	497c      	ldr	r1, [pc, #496]	; (80039fc <Elcon_json+0x388>)
 800380a:	4618      	mov	r0, r3
 800380c:	f01a fdf8 	bl	801e400 <siprintf>
	ElconValueJson = cJSON_CreateString(ElconValue);
 8003810:	f107 030c 	add.w	r3, r7, #12
 8003814:	4618      	mov	r0, r3
 8003816:	f005 f9b7 	bl	8008b88 <cJSON_CreateString>
 800381a:	6338      	str	r0, [r7, #48]	; 0x30
	if (ElconInfoJson == NULL)
 800381c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 812b 	beq.w	8003a7a <Elcon_json+0x406>
		goto end;

	sprintf(ElconNumber, "Elcon_connected");
 8003824:	f107 0318 	add.w	r3, r7, #24
 8003828:	4975      	ldr	r1, [pc, #468]	; (8003a00 <Elcon_json+0x38c>)
 800382a:	4618      	mov	r0, r3
 800382c:	f01a fde8 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(ElconInfoJson, ElconNumber, ElconValueJson);
 8003830:	f107 0318 	add.w	r3, r7, #24
 8003834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003836:	4619      	mov	r1, r3
 8003838:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800383a:	f005 f945 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(ElconValue, 0, sizeof(ElconValue));
 800383e:	f107 030c 	add.w	r3, r7, #12
 8003842:	220a      	movs	r2, #10
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f01a fe6b 	bl	801e522 <memset>

	// AC input status
	sprintf(ElconValue, "%u", elcon->ac_input_error);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003852:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	f107 030c 	add.w	r3, r7, #12
 800385e:	4967      	ldr	r1, [pc, #412]	; (80039fc <Elcon_json+0x388>)
 8003860:	4618      	mov	r0, r3
 8003862:	f01a fdcd 	bl	801e400 <siprintf>
	ElconValueJson = cJSON_CreateString(ElconValue);
 8003866:	f107 030c 	add.w	r3, r7, #12
 800386a:	4618      	mov	r0, r3
 800386c:	f005 f98c 	bl	8008b88 <cJSON_CreateString>
 8003870:	6338      	str	r0, [r7, #48]	; 0x30
	if (ElconInfoJson == NULL)
 8003872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8102 	beq.w	8003a7e <Elcon_json+0x40a>
		goto end;

	sprintf(ElconNumber, "Elcon_AC_input_OK");
 800387a:	f107 0318 	add.w	r3, r7, #24
 800387e:	4961      	ldr	r1, [pc, #388]	; (8003a04 <Elcon_json+0x390>)
 8003880:	4618      	mov	r0, r3
 8003882:	f01a fdbd 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(ElconInfoJson, ElconNumber, ElconValueJson);
 8003886:	f107 0318 	add.w	r3, r7, #24
 800388a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800388c:	4619      	mov	r1, r3
 800388e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003890:	f005 f91a 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(ElconValue, 0, sizeof(ElconValue));
 8003894:	f107 030c 	add.w	r3, r7, #12
 8003898:	220a      	movs	r2, #10
 800389a:	2100      	movs	r1, #0
 800389c:	4618      	mov	r0, r3
 800389e:	f01a fe40 	bl	801e522 <memset>

	// CAN BUS error indicator
	sprintf(ElconValue, "%u", elcon->can_error);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80038a8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	461a      	mov	r2, r3
 80038b0:	f107 030c 	add.w	r3, r7, #12
 80038b4:	4951      	ldr	r1, [pc, #324]	; (80039fc <Elcon_json+0x388>)
 80038b6:	4618      	mov	r0, r3
 80038b8:	f01a fda2 	bl	801e400 <siprintf>
	ElconValueJson = cJSON_CreateString(ElconValue);
 80038bc:	f107 030c 	add.w	r3, r7, #12
 80038c0:	4618      	mov	r0, r3
 80038c2:	f005 f961 	bl	8008b88 <cJSON_CreateString>
 80038c6:	6338      	str	r0, [r7, #48]	; 0x30
	if (ElconInfoJson == NULL)
 80038c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80d9 	beq.w	8003a82 <Elcon_json+0x40e>
		goto end;

	sprintf(ElconNumber, "CANBUS_Error");
 80038d0:	f107 0318 	add.w	r3, r7, #24
 80038d4:	494c      	ldr	r1, [pc, #304]	; (8003a08 <Elcon_json+0x394>)
 80038d6:	4618      	mov	r0, r3
 80038d8:	f01a fd92 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(ElconInfoJson, ElconNumber, ElconValueJson);
 80038dc:	f107 0318 	add.w	r3, r7, #24
 80038e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e2:	4619      	mov	r1, r3
 80038e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80038e6:	f005 f8ef 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(ElconValue, 0, sizeof(ElconValue));
 80038ea:	f107 030c 	add.w	r3, r7, #12
 80038ee:	220a      	movs	r2, #10
 80038f0:	2100      	movs	r1, #0
 80038f2:	4618      	mov	r0, r3
 80038f4:	f01a fe15 	bl	801e522 <memset>

	// Elcon target charge state
	sprintf(ElconValue, "%u", elcon->N_target_charge_state);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038fe:	461a      	mov	r2, r3
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	493d      	ldr	r1, [pc, #244]	; (80039fc <Elcon_json+0x388>)
 8003906:	4618      	mov	r0, r3
 8003908:	f01a fd7a 	bl	801e400 <siprintf>
	ElconValueJson = cJSON_CreateString(ElconValue);
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	4618      	mov	r0, r3
 8003912:	f005 f939 	bl	8008b88 <cJSON_CreateString>
 8003916:	6338      	str	r0, [r7, #48]	; 0x30
	if (ElconInfoJson == NULL)
 8003918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 80b3 	beq.w	8003a86 <Elcon_json+0x412>
		goto end;

	sprintf(ElconNumber, "Target_charge_state");  // Inverted Logic!!
 8003920:	f107 0318 	add.w	r3, r7, #24
 8003924:	4939      	ldr	r1, [pc, #228]	; (8003a0c <Elcon_json+0x398>)
 8003926:	4618      	mov	r0, r3
 8003928:	f01a fd6a 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(ElconInfoJson, ElconNumber, ElconValueJson);
 800392c:	f107 0318 	add.w	r3, r7, #24
 8003930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003932:	4619      	mov	r1, r3
 8003934:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003936:	f005 f8c7 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(ElconValue, 0, sizeof(ElconValue));
 800393a:	f107 030c 	add.w	r3, r7, #12
 800393e:	220a      	movs	r2, #10
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f01a fded 	bl	801e522 <memset>

	// Elcon actual charge state
	sprintf(ElconValue, "%u", elcon->N_charge_state);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800394e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003952:	b2db      	uxtb	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	4928      	ldr	r1, [pc, #160]	; (80039fc <Elcon_json+0x388>)
 800395c:	4618      	mov	r0, r3
 800395e:	f01a fd4f 	bl	801e400 <siprintf>
	ElconValueJson = cJSON_CreateString(ElconValue);
 8003962:	f107 030c 	add.w	r3, r7, #12
 8003966:	4618      	mov	r0, r3
 8003968:	f005 f90e 	bl	8008b88 <cJSON_CreateString>
 800396c:	6338      	str	r0, [r7, #48]	; 0x30
	if (ElconInfoJson == NULL)
 800396e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 808a 	beq.w	8003a8a <Elcon_json+0x416>
		goto end;

	sprintf(ElconNumber, "Elcon_charge_status");  // Inverted Logic!!
 8003976:	f107 0318 	add.w	r3, r7, #24
 800397a:	4925      	ldr	r1, [pc, #148]	; (8003a10 <Elcon_json+0x39c>)
 800397c:	4618      	mov	r0, r3
 800397e:	f01a fd3f 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(ElconInfoJson, ElconNumber, ElconValueJson);
 8003982:	f107 0318 	add.w	r3, r7, #24
 8003986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003988:	4619      	mov	r1, r3
 800398a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800398c:	f005 f89c 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(ElconValue, 0, sizeof(ElconValue));
 8003990:	f107 030c 	add.w	r3, r7, #12
 8003994:	220a      	movs	r2, #10
 8003996:	2100      	movs	r1, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f01a fdc2 	bl	801e522 <memset>

	// Elcon over temperature flag
	sprintf(ElconValue, "%u", elcon->charger_over_temp);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80039a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	f107 030c 	add.w	r3, r7, #12
 80039b0:	4912      	ldr	r1, [pc, #72]	; (80039fc <Elcon_json+0x388>)
 80039b2:	4618      	mov	r0, r3
 80039b4:	f01a fd24 	bl	801e400 <siprintf>
	ElconValueJson = cJSON_CreateString(ElconValue);
 80039b8:	f107 030c 	add.w	r3, r7, #12
 80039bc:	4618      	mov	r0, r3
 80039be:	f005 f8e3 	bl	8008b88 <cJSON_CreateString>
 80039c2:	6338      	str	r0, [r7, #48]	; 0x30
	if (ElconInfoJson == NULL)
 80039c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d061      	beq.n	8003a8e <Elcon_json+0x41a>
		goto end;

	sprintf(ElconNumber, "Elcon_overtemp");
 80039ca:	f107 0318 	add.w	r3, r7, #24
 80039ce:	4911      	ldr	r1, [pc, #68]	; (8003a14 <Elcon_json+0x3a0>)
 80039d0:	4618      	mov	r0, r3
 80039d2:	f01a fd15 	bl	801e400 <siprintf>
	cJSON_AddItemToObject(ElconInfoJson, ElconNumber, ElconValueJson);
 80039d6:	f107 0318 	add.w	r3, r7, #24
 80039da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039dc:	4619      	mov	r1, r3
 80039de:	e01b      	b.n	8003a18 <Elcon_json+0x3a4>
 80039e0:	080219ec 	.word	0x080219ec
 80039e4:	08021990 	.word	0x08021990
 80039e8:	080219f8 	.word	0x080219f8
 80039ec:	08021a08 	.word	0x08021a08
 80039f0:	08021a10 	.word	0x08021a10
 80039f4:	08021a20 	.word	0x08021a20
 80039f8:	08021a30 	.word	0x08021a30
 80039fc:	080218dc 	.word	0x080218dc
 8003a00:	08021a40 	.word	0x08021a40
 8003a04:	08021a50 	.word	0x08021a50
 8003a08:	08021a64 	.word	0x08021a64
 8003a0c:	08021a74 	.word	0x08021a74
 8003a10:	08021a88 	.word	0x08021a88
 8003a14:	08021a9c 	.word	0x08021a9c
 8003a18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a1a:	f005 f855 	bl	8008ac8 <cJSON_AddItemToObject>
	memset(ElconValue, 0, sizeof(ElconValue));
 8003a1e:	f107 030c 	add.w	r3, r7, #12
 8003a22:	220a      	movs	r2, #10
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f01a fd7b 	bl	801e522 <memset>


	string = cJSON_Print(jsonMessage);
 8003a2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a2e:	f004 fd0b 	bl	8008448 <cJSON_Print>
 8003a32:	63b8      	str	r0, [r7, #56]	; 0x38
	if (string == NULL)
 8003a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d103      	bne.n	8003a42 <Elcon_json+0x3ce>
	{
		cJSON_free(string);
 8003a3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a3c:	f005 f9a4 	bl	8008d88 <cJSON_free>
 8003a40:	e026      	b.n	8003a90 <Elcon_json+0x41c>
	}
	else{
		usb_result = CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8003a42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a44:	f7fc fc14 	bl	8000270 <strlen>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a50:	f018 fa1a 	bl	801be88 <CDC_Transmit_FS>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		cJSON_free(string);
 8003a5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a5c:	f005 f994 	bl	8008d88 <cJSON_free>
 8003a60:	e016      	b.n	8003a90 <Elcon_json+0x41c>
		goto end;
 8003a62:	bf00      	nop
 8003a64:	e014      	b.n	8003a90 <Elcon_json+0x41c>
		goto end;
 8003a66:	bf00      	nop
 8003a68:	e012      	b.n	8003a90 <Elcon_json+0x41c>
		goto end;
 8003a6a:	bf00      	nop
 8003a6c:	e010      	b.n	8003a90 <Elcon_json+0x41c>
		goto end;
 8003a6e:	bf00      	nop
 8003a70:	e00e      	b.n	8003a90 <Elcon_json+0x41c>
		goto end;
 8003a72:	bf00      	nop
 8003a74:	e00c      	b.n	8003a90 <Elcon_json+0x41c>
		goto end;
 8003a76:	bf00      	nop
 8003a78:	e00a      	b.n	8003a90 <Elcon_json+0x41c>
		goto end;
 8003a7a:	bf00      	nop
 8003a7c:	e008      	b.n	8003a90 <Elcon_json+0x41c>
		goto end;
 8003a7e:	bf00      	nop
 8003a80:	e006      	b.n	8003a90 <Elcon_json+0x41c>
		goto end;
 8003a82:	bf00      	nop
 8003a84:	e004      	b.n	8003a90 <Elcon_json+0x41c>
		goto end;
 8003a86:	bf00      	nop
 8003a88:	e002      	b.n	8003a90 <Elcon_json+0x41c>
		goto end;
 8003a8a:	bf00      	nop
 8003a8c:	e000      	b.n	8003a90 <Elcon_json+0x41c>
		goto end;
 8003a8e:	bf00      	nop
	}

	end:
	cJSON_Delete(jsonMessage);
 8003a90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a92:	f004 f8cf 	bl	8007c34 <cJSON_Delete>

	return usb_result;
 8003a96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3740      	adds	r7, #64	; 0x40
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop

08003aa4 <BMS_Init>:

uint32_t test;

BMSstatus_t BMS_Init(MCU *master, LTC6811 *slave_array, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *CS_BMS,  GPIO_TypeDef *AMS_OK,
			      uint16_t CS_pin, uint64_t AMS_OK_pin, BMS_info *bmsInfo, uint8_t refon, uint8_t adcopt)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b090      	sub	sp, #64	; 0x40
 8003aa8:	af06      	add	r7, sp, #24
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
    BMSstatus_t result;

	init_PEC15_Table();
 8003ab2:	f000 fa39 	bl	8003f28 <init_PEC15_Table>
	bms_info_struct_init(bmsInfo);
 8003ab6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003ab8:	f000 f8b4 	bl	8003c24 <bms_info_struct_init>
	mcu_struct_init(master, spiHandle, CS_BMS, AMS_OK, CS_pin , AMS_OK_pin);
 8003abc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ac0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ac4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f8e6 	bl	8003ca0 <mcu_struct_init>
	slave_array_init(slave_array);
 8003ad4:	68b8      	ldr	r0, [r7, #8]
 8003ad6:	f000 f933 	bl	8003d40 <slave_array_init>

	if (!ntc_rh_init(slave_array, NTC_LUT, NTC_voltage, V_REF, NTC_CONST_RESISTOR_KOHM, NTC_LUT_LENGTH))
 8003ada:	23c9      	movs	r3, #201	; 0xc9
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	230a      	movs	r3, #10
 8003ae0:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8003c08 <BMS_Init+0x164>
 8003ae4:	4a49      	ldr	r2, [pc, #292]	; (8003c0c <BMS_Init+0x168>)
 8003ae6:	494a      	ldr	r1, [pc, #296]	; (8003c10 <BMS_Init+0x16c>)
 8003ae8:	68b8      	ldr	r0, [r7, #8]
 8003aea:	f001 fe5d 	bl	80057a8 <ntc_rh_init>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f083 0301 	eor.w	r3, r3, #1
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <BMS_Init+0x5a>
		return NTC_LUT_ERROR;
 8003afa:	2310      	movs	r3, #16
 8003afc:	e080      	b.n	8003c00 <BMS_Init+0x15c>

	uint8_t gpio[5] = {1, 1, 1, 1, 1};                  // No pull-down resistors are activated in the GPIOs
 8003afe:	4a45      	ldr	r2, [pc, #276]	; (8003c14 <BMS_Init+0x170>)
 8003b00:	f107 0320 	add.w	r3, r7, #32
 8003b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b08:	6018      	str	r0, [r3, #0]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	7019      	strb	r1, [r3, #0]
	uint8_t no_dcc[9]  = {0, 0, 0, 0, 0, 0, 0, 0, 0}; 	// No cell is discharging
 8003b0e:	4a42      	ldr	r2, [pc, #264]	; (8003c18 <BMS_Init+0x174>)
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b16:	c303      	stmia	r3!, {r0, r1}
 8003b18:	701a      	strb	r2, [r3, #0]

	write_cfgr(master, slave_array, BC, 0, gpio, refon, adcopt, UV_THRESHOLD, OV_THRESHOLD, no_dcc, 0);  // DYNATH ALVANIA
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	9304      	str	r3, [sp, #16]
 8003b1e:	f107 0314 	add.w	r3, r7, #20
 8003b22:	9303      	str	r3, [sp, #12]
 8003b24:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003b28:	9302      	str	r3, [sp, #8]
 8003b2a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003b2e:	9301      	str	r3, [sp, #4]
 8003b30:	f107 0320 	add.w	r3, r7, #32
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	eddf 0a39 	vldr	s1, [pc, #228]	; 8003c1c <BMS_Init+0x178>
 8003b3a:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8003c20 <BMS_Init+0x17c>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	2200      	movs	r2, #0
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f001 f8b7 	bl	8004cb8 <write_cfgr>

	find_ids_in_bus(master, slave_array);
 8003b4a:	68b9      	ldr	r1, [r7, #8]
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 fa59 	bl	8004004 <find_ids_in_bus>
	for (ID_t id = ID_0; id < SLAVES_NUM; ++id)
 8003b52:	2300      	movs	r3, #0
 8003b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b58:	e011      	b.n	8003b7e <BMS_Init+0xda>
		if (master->ids_in_bus[id] == false)
 8003b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4413      	add	r3, r2
 8003b62:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003b66:	f083 0301 	eor.w	r3, r3, #1
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <BMS_Init+0xd0>
			return COMM_ERROR;
 8003b70:	2312      	movs	r3, #18
 8003b72:	e045      	b.n	8003c00 <BMS_Init+0x15c>
	for (ID_t id = ID_0; id < SLAVES_NUM; ++id)
 8003b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b78:	3301      	adds	r3, #1
 8003b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	d9e9      	bls.n	8003b5a <BMS_Init+0xb6>
				return result;
		}
	}

	/* Set the UV/OV flag thresholds */
	write_cfgr(master, slave_array, BC, 0, gpio, refon, adcopt, UV_THRESHOLD, OV_THRESHOLD, no_dcc, 0);  // DYNATH ALVANIA
 8003b86:	2300      	movs	r3, #0
 8003b88:	9304      	str	r3, [sp, #16]
 8003b8a:	f107 0314 	add.w	r3, r7, #20
 8003b8e:	9303      	str	r3, [sp, #12]
 8003b90:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003b94:	9302      	str	r3, [sp, #8]
 8003b96:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	f107 0320 	add.w	r3, r7, #32
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8003c1c <BMS_Init+0x178>
 8003ba6:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8003c20 <BMS_Init+0x17c>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2200      	movs	r2, #0
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f001 f881 	bl	8004cb8 <write_cfgr>
	result = safe_write_cfgr(master, slave_array, BC, 0, gpio, refon, adcopt, UV_THRESHOLD, OV_THRESHOLD, no_dcc, 0, 3);
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	9305      	str	r3, [sp, #20]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	9304      	str	r3, [sp, #16]
 8003bbe:	f107 0314 	add.w	r3, r7, #20
 8003bc2:	9303      	str	r3, [sp, #12]
 8003bc4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003bc8:	9302      	str	r3, [sp, #8]
 8003bca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	f107 0320 	add.w	r3, r7, #32
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	eddf 0a11 	vldr	s1, [pc, #68]	; 8003c1c <BMS_Init+0x178>
 8003bda:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003c20 <BMS_Init+0x17c>
 8003bde:	2300      	movs	r3, #0
 8003be0:	2200      	movs	r2, #0
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 ffea 	bl	8004bbe <safe_write_cfgr>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (result != OK)
 8003bf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <BMS_Init+0x15a>
		return result;
 8003bf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bfc:	e000      	b.n	8003c00 <BMS_Init+0x15c>

	return OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3728      	adds	r7, #40	; 0x28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40403127 	.word	0x40403127
 8003c0c:	20000310 	.word	0x20000310
 8003c10:	080222e0 	.word	0x080222e0
 8003c14:	08021aac 	.word	0x08021aac
 8003c18:	08021ab4 	.word	0x08021ab4
 8003c1c:	40863d71 	.word	0x40863d71
 8003c20:	40433333 	.word	0x40433333

08003c24 <bms_info_struct_init>:


void bms_info_struct_init(BMS_info *bms)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
	bms->mode = STDBY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	701a      	strb	r2, [r3, #0]

	bms->uv_threshold = UV_THRESHOLD;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <bms_info_struct_init+0x74>)
 8003c36:	619a      	str	r2, [r3, #24]
	bms->ov_threshold = OV_THRESHOLD;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a18      	ldr	r2, [pc, #96]	; (8003c9c <bms_info_struct_init+0x78>)
 8003c3c:	61da      	str	r2, [r3, #28]

	bms->ut_threshold = UT_THRESHOLD;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	220a      	movs	r2, #10
 8003c42:	f883 2020 	strb.w	r2, [r3, #32]
	bms->ot_threshold = OT_THRESHOLD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	223c      	movs	r2, #60	; 0x3c
 8003c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	// CHANGE VALUES
	bms->target_charge_current = 0;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	849a      	strh	r2, [r3, #36]	; 0x24
	bms->charge_flag = 0;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	bms->max_humidity.value = 0;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28
	bms->max_humidity.pos   = 0;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	bms->state = BMS_OK;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	bms->last_error = BMS_OK;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	bms->BalInfo.state = off;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
	bms->BalInfo.balancing_enabled = 0;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	40433333 	.word	0x40433333
 8003c9c:	40863d71 	.word	0x40863d71

08003ca0 <mcu_struct_init>:



void mcu_struct_init(MCU *master, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *CS_BMS,  GPIO_TypeDef *AMS_OK,
					uint16_t CS_pin, uint64_t AMS_OK_pin)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
	master->spiHandle 	= spiHandle;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	601a      	str	r2, [r3, #0]
	master->csBMS		= CS_BMS;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	605a      	str	r2, [r3, #4]
	master->AMS_OK		= AMS_OK;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	609a      	str	r2, [r3, #8]
	master->csBMSPin	= CS_pin;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8c3a      	ldrh	r2, [r7, #32]
 8003cc4:	819a      	strh	r2, [r3, #12]
	master->AMS_OKPin	= AMS_OK_pin;
 8003cc6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	81da      	strh	r2, [r3, #14]

	for(uint8_t i = 0; i < MAX_ATTEMPTS; ++i){
 8003ccc:	2300      	movs	r3, #0
 8003cce:	75fb      	strb	r3, [r7, #23]
 8003cd0:	e007      	b.n	8003ce2 <mcu_struct_init+0x42>
		master->read_status[i] = 0;
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	2200      	movs	r2, #0
 8003cda:	741a      	strb	r2, [r3, #16]
	for(uint8_t i = 0; i < MAX_ATTEMPTS; ++i){
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	2b09      	cmp	r3, #9
 8003ce6:	d9f4      	bls.n	8003cd2 <mcu_struct_init+0x32>
	}

	for(uint8_t i = 0; i < 6; ++i){
 8003ce8:	2300      	movs	r3, #0
 8003cea:	75bb      	strb	r3, [r7, #22]
 8003cec:	e007      	b.n	8003cfe <mcu_struct_init+0x5e>
		master->write_buf[i] = 0;
 8003cee:	7dbb      	ldrb	r3, [r7, #22]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	769a      	strb	r2, [r3, #26]
	for(uint8_t i = 0; i < 6; ++i){
 8003cf8:	7dbb      	ldrb	r3, [r7, #22]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	75bb      	strb	r3, [r7, #22]
 8003cfe:	7dbb      	ldrb	r3, [r7, #22]
 8003d00:	2b05      	cmp	r3, #5
 8003d02:	d9f4      	bls.n	8003cee <mcu_struct_init+0x4e>
	}

	for(uint8_t i = 0; i < 16; ++i){
 8003d04:	2300      	movs	r3, #0
 8003d06:	757b      	strb	r3, [r7, #21]
 8003d08:	e008      	b.n	8003d1c <mcu_struct_init+0x7c>
		master->ids_in_bus[i] = false;
 8003d0a:	7d7b      	ldrb	r3, [r7, #21]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4413      	add	r3, r2
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	for(uint8_t i = 0; i < 16; ++i){
 8003d16:	7d7b      	ldrb	r3, [r7, #21]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	757b      	strb	r3, [r7, #21]
 8003d1c:	7d7b      	ldrb	r3, [r7, #21]
 8003d1e:	2b0f      	cmp	r3, #15
 8003d20:	d9f3      	bls.n	8003d0a <mcu_struct_init+0x6a>
	}
	master->command_buf = 0;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	841a      	strh	r2, [r3, #32]

	HAL_GPIO_WritePin(master->csBMS, master->csBMSPin, GPIO_PIN_SET);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6858      	ldr	r0, [r3, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	899b      	ldrh	r3, [r3, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	4619      	mov	r1, r3
 8003d34:	f00a f826 	bl	800dd84 <HAL_GPIO_WritePin>
}
 8003d38:	bf00      	nop
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <slave_array_init>:


void slave_array_init(LTC6811 *slave_array)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	for (uint8_t id = 0; id < SLAVES_NUM; ++id)
 8003d48:	2300      	movs	r3, #0
 8003d4a:	73fb      	strb	r3, [r7, #15]
 8003d4c:	e00b      	b.n	8003d66 <slave_array_init+0x26>
		slave_struct_init(&slave_array[id]);
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	22d8      	movs	r2, #216	; 0xd8
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f80b 	bl	8003d76 <slave_struct_init>
	for (uint8_t id = 0; id < SLAVES_NUM; ++id)
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	3301      	adds	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	2b0f      	cmp	r3, #15
 8003d6a:	d9f0      	bls.n	8003d4e <slave_array_init+0xe>
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <slave_struct_init>:

/* Initializes a single LTC6811 struct */
void slave_struct_init(LTC6811 *slave)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
	/* Debugging Variables */

	for (uint8_t i = 0; i < 6; ++i)
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	e006      	b.n	8003d92 <slave_struct_init+0x1c>
		slave->tx_buf[i] = 0;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	2100      	movs	r1, #0
 8003d8a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 6; ++i)
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	2b05      	cmp	r3, #5
 8003d96:	d9f5      	bls.n	8003d84 <slave_struct_init+0xe>

	for (uint8_t i = 0; i < 2; ++i)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73bb      	strb	r3, [r7, #14]
 8003d9c:	e008      	b.n	8003db0 <slave_struct_init+0x3a>
		slave->pec_status[i] = 0;
 8003d9e:	7bbb      	ldrb	r3, [r7, #14]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4413      	add	r3, r2
 8003da6:	2200      	movs	r2, #0
 8003da8:	80da      	strh	r2, [r3, #6]
	for (uint8_t i = 0; i < 2; ++i)
 8003daa:	7bbb      	ldrb	r3, [r7, #14]
 8003dac:	3301      	adds	r3, #1
 8003dae:	73bb      	strb	r3, [r7, #14]
 8003db0:	7bbb      	ldrb	r3, [r7, #14]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d9f3      	bls.n	8003d9e <slave_struct_init+0x28>

	slave->pec_errors  		 = 0;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	815a      	strh	r2, [r3, #10]
	slave->voltage_deviation = 0.0;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	619a      	str	r2, [r3, #24]
	slave->diagnose_state    = NO_DIAGNOSE_TEST;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	f883 2020 	strb.w	r2, [r3, #32]

	slave->last_valid_msg = xTaskGetTickCount();
 8003dcc:	f016 f866 	bl	8019e9c <xTaskGetTickCount>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24

	/* REGISTERS */
	for(uint8_t i = 0; i < 5; ++i) {
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	737b      	strb	r3, [r7, #13]
 8003dda:	e00e      	b.n	8003dfa <slave_struct_init+0x84>
		slave->gpio_pulldown[i] = 1;
 8003ddc:	7b7b      	ldrb	r3, [r7, #13]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	4413      	add	r3, r2
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		slave->gpio_level[i]    = 0;
 8003de8:	7b7b      	ldrb	r3, [r7, #13]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	for(uint8_t i = 0; i < 5; ++i) {
 8003df4:	7b7b      	ldrb	r3, [r7, #13]
 8003df6:	3301      	adds	r3, #1
 8003df8:	737b      	strb	r3, [r7, #13]
 8003dfa:	7b7b      	ldrb	r3, [r7, #13]
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d9ed      	bls.n	8003ddc <slave_struct_init+0x66>
	}

	slave->refon 	= 0;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	slave->dten 	= 1;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	slave->adcopt   = 0;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	slave->min_v 	= 0.0;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	639a      	str	r2, [r3, #56]	; 0x38
	slave->max_v 	= 0.0;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	63da      	str	r2, [r3, #60]	; 0x3c
	slave->dcto     = 0;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	for(uint8_t i = 0; i < CELLS_NUM; ++i) {
 8003e30:	2300      	movs	r3, #0
 8003e32:	733b      	strb	r3, [r7, #12]
 8003e34:	e02e      	b.n	8003e94 <slave_struct_init+0x11e>
		slave->dcc[i] 	    = 1;
 8003e36:	7b3b      	ldrb	r3, [r7, #12]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		slave->voltage[i]   = 0.0;
 8003e42:	7b3b      	ldrb	r3, [r7, #12]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	3312      	adds	r3, #18
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
		slave->uv_flag[i]   = 1;
 8003e54:	7b3b      	ldrb	r3, [r7, #12]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	4413      	add	r3, r2
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		slave->ov_flag[i]   = 1;
 8003e60:	7b3b      	ldrb	r3, [r7, #12]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		slave->sctrl[i]	    = 0;
 8003e6c:	7b3b      	ldrb	r3, [r7, #12]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	4413      	add	r3, r2
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		slave->pwm[i]	    = 0;
 8003e78:	7b3b      	ldrb	r3, [r7, #12]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
		slave->open_wire[i] = true;
 8003e84:	7b3b      	ldrb	r3, [r7, #12]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	4413      	add	r3, r2
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	731a      	strb	r2, [r3, #12]
	for(uint8_t i = 0; i < CELLS_NUM; ++i) {
 8003e8e:	7b3b      	ldrb	r3, [r7, #12]
 8003e90:	3301      	adds	r3, #1
 8003e92:	733b      	strb	r3, [r7, #12]
 8003e94:	7b3b      	ldrb	r3, [r7, #12]
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d9cd      	bls.n	8003e36 <slave_struct_init+0xc0>
	}
	slave->open_wire[CELLS_NUM] = true;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	755a      	strb	r2, [r3, #21]

	for(uint8_t i = 0; i < NTCS_NUM; ++i) {
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	72fb      	strb	r3, [r7, #11]
 8003ea4:	e012      	b.n	8003ecc <slave_struct_init+0x156>
		slave->gpio_voltage[i] = 0.0;
 8003ea6:	7afb      	ldrb	r3, [r7, #11]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	331c      	adds	r3, #28
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
		slave->temp[i] = 0.0;
 8003eb6:	7afb      	ldrb	r3, [r7, #11]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	3322      	adds	r3, #34	; 0x22
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < NTCS_NUM; ++i) {
 8003ec6:	7afb      	ldrb	r3, [r7, #11]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	72fb      	strb	r3, [r7, #11]
 8003ecc:	7afb      	ldrb	r3, [r7, #11]
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d9e9      	bls.n	8003ea6 <slave_struct_init+0x130>
	}

	slave->vref2    = 0.0;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	slave->humidity = 0.0;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	slave->sc 	    = 0.0;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	slave->itmp     = 0.0;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	slave->va 	    = 0.0;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	slave->vd 	    = 0.0;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	slave->muxfail = 1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	slave->thsd    = 1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

}
 8003f1e:	bf00      	nop
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <init_PEC15_Table>:

/* ------------------------------------- PEC --------------------------------------------------- */
uint16_t pec15Table[256];
uint16_t CRC15_POLY = 0x4599;
/* ------------- PRIVATE FUNCTIONS --------------- */
void init_PEC15_Table(){
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
	uint16_t remainder;
	for (int i = 0; i < 256; i++){
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	e025      	b.n	8003f80 <init_PEC15_Table+0x58>
		remainder = i << 7;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	01db      	lsls	r3, r3, #7
 8003f3a:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit){
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	607b      	str	r3, [r7, #4]
 8003f40:	e013      	b.n	8003f6a <init_PEC15_Table+0x42>
			if (remainder & 0x4000){
 8003f42:	89fb      	ldrh	r3, [r7, #14]
 8003f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <init_PEC15_Table+0x36>
				remainder = ((remainder << 1));
 8003f4c:	89fb      	ldrh	r3, [r7, #14]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	81fb      	strh	r3, [r7, #14]
				remainder = (remainder ^ CRC15_POLY);
 8003f52:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <init_PEC15_Table+0x6c>)
 8003f54:	881a      	ldrh	r2, [r3, #0]
 8003f56:	89fb      	ldrh	r3, [r7, #14]
 8003f58:	4053      	eors	r3, r2
 8003f5a:	81fb      	strh	r3, [r7, #14]
 8003f5c:	e002      	b.n	8003f64 <init_PEC15_Table+0x3c>
			}
			else{
				remainder = ((remainder << 1));
 8003f5e:	89fb      	ldrh	r3, [r7, #14]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit){
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	dce8      	bgt.n	8003f42 <init_PEC15_Table+0x1a>
			}
		}
		pec15Table[i] = remainder & 0xFFFF;
 8003f70:	4909      	ldr	r1, [pc, #36]	; (8003f98 <init_PEC15_Table+0x70>)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	89fa      	ldrh	r2, [r7, #14]
 8003f76:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < 256; i++){
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2bff      	cmp	r3, #255	; 0xff
 8003f84:	ddd6      	ble.n	8003f34 <init_PEC15_Table+0xc>
	}
}
 8003f86:	bf00      	nop
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	20000000 	.word	0x20000000
 8003f98:	20000634 	.word	0x20000634

08003f9c <pec15>:

uint16_t pec15(const uint8_t *data , const uint8_t len){
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	70fb      	strb	r3, [r7, #3]
	uint16_t remainder,address;
	remainder = 16; //PEC seed
 8003fa8:	2310      	movs	r3, #16
 8003faa:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++){
 8003fac:	2300      	movs	r3, #0
 8003fae:	737b      	strb	r3, [r7, #13]
 8003fb0:	e019      	b.n	8003fe6 <pec15+0x4a>
		address = ((remainder >> 7) ^ data[i]) & 0xFF;	// calculate PEC table address
 8003fb2:	89fb      	ldrh	r3, [r7, #14]
 8003fb4:	09db      	lsrs	r3, r3, #7
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	7b7b      	ldrb	r3, [r7, #13]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	440b      	add	r3, r1
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	4053      	eors	r3, r2
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8 ) ^ pec15Table[address];
 8003fca:	89fb      	ldrh	r3, [r7, #14]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	b21a      	sxth	r2, r3
 8003fd0:	897b      	ldrh	r3, [r7, #10]
 8003fd2:	490b      	ldr	r1, [pc, #44]	; (8004000 <pec15+0x64>)
 8003fd4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003fd8:	b21b      	sxth	r3, r3
 8003fda:	4053      	eors	r3, r2
 8003fdc:	b21b      	sxth	r3, r3
 8003fde:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++){
 8003fe0:	7b7b      	ldrb	r3, [r7, #13]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	737b      	strb	r3, [r7, #13]
 8003fe6:	7b7a      	ldrb	r2, [r7, #13]
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d3e1      	bcc.n	8003fb2 <pec15+0x16>
	}
	return (remainder * 2);	// The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8003fee:	89fb      	ldrh	r3, [r7, #14]
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	b29b      	uxth	r3, r3
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	20000634 	.word	0x20000634

08004004 <find_ids_in_bus>:
/*****************************************************************************
*  @Description	  Updates the ids_in_bus array with true for every id present
*  				  and false for every id not found
******************************************************************************/
void find_ids_in_bus(MCU *master, LTC6811 *slave_array)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af02      	add	r7, sp, #8
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
	for (uint8_t id = 0; id < 16; ++id) {
 800400e:	2300      	movs	r3, #0
 8004010:	73fb      	strb	r3, [r7, #15]
 8004012:	e01a      	b.n	800404a <find_ids_in_bus+0x46>
		if (read(master, slave_array, id, RDCFGA, 3) == OK)
 8004014:	7bfa      	ldrb	r2, [r7, #15]
 8004016:	2303      	movs	r3, #3
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	2302      	movs	r3, #2
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 ff9a 	bl	8004f58 <read>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <find_ids_in_bus+0x34>
			master->ids_in_bus[id] = true;
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4413      	add	r3, r2
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004036:	e005      	b.n	8004044 <find_ids_in_bus+0x40>
		else
			master->ids_in_bus[id] = false;
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	4413      	add	r3, r2
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	for (uint8_t id = 0; id < 16; ++id) {
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	3301      	adds	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b0f      	cmp	r3, #15
 800404e:	d9e1      	bls.n	8004014 <find_ids_in_bus+0x10>
	}
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <update_BMS_info_struct>:
*  @Description	  Updates all fields of the BMS_info struct except the state.
*                 The state is updated from update_BMS_errors because it takes
*                 into account the timeouts
******************************************************************************/
void update_BMS_info_struct(MCU* master, LTC6811 *slave_array, BMS_info *bmsInfo)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	; 0x28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
	/* Updates voltage parameters */
	float accu_voltage = 0;
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	627b      	str	r3, [r7, #36]	; 0x24

	for (uint8_t id = 0; id < SLAVES_NUM; ++id)
 800406e:	2300      	movs	r3, #0
 8004070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004074:	e026      	b.n	80040c4 <update_BMS_info_struct+0x68>
		for (uint8_t cell = 0; cell < CELLS_NUM; ++cell)
 8004076:	2300      	movs	r3, #0
 8004078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800407c:	e019      	b.n	80040b2 <update_BMS_info_struct+0x56>
			accu_voltage += slave_array[id].voltage[cell];
 800407e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004082:	22d8      	movs	r2, #216	; 0xd8
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	441a      	add	r2, r3
 800408c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004090:	3312      	adds	r3, #18
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	3304      	adds	r3, #4
 8004098:	edd3 7a00 	vldr	s15, [r3]
 800409c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80040a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		for (uint8_t cell = 0; cell < CELLS_NUM; ++cell)
 80040a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80040ac:	3301      	adds	r3, #1
 80040ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d9e1      	bls.n	800407e <update_BMS_info_struct+0x22>
	for (uint8_t id = 0; id < SLAVES_NUM; ++id)
 80040ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040be:	3301      	adds	r3, #1
 80040c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040c8:	2b0f      	cmp	r3, #15
 80040ca:	d9d4      	bls.n	8004076 <update_BMS_info_struct+0x1a>


	bmsInfo->accu_voltage = accu_voltage;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d0:	635a      	str	r2, [r3, #52]	; 0x34
	bmsInfo->avg_cell_voltage = accu_voltage / (SLAVES_NUM * CELLS_NUM);
 80040d2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80040d6:	eddf 6a78 	vldr	s13, [pc, #480]	; 80042b8 <update_BMS_info_struct+0x25c>
 80040da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	find_min_max_v(bmsInfo, slave_array);
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fb6e 	bl	80047c8 <find_min_max_v>

	/* Updates the OV/UV flags on bmsInfo struct */
	update_uv_ov_flags(bmsInfo, slave_array);
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fbf4 	bl	80048dc <update_uv_ov_flags>

	/* Updates temperature parameters */
	float cell_temp_sum = 0;
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
	uint8_t total_ntcs_num = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	76fb      	strb	r3, [r7, #27]
	for (uint8_t id = 0; id < SLAVES_NUM; ++id)
 80040fe:	2300      	movs	r3, #0
 8004100:	76bb      	strb	r3, [r7, #26]
 8004102:	e02d      	b.n	8004160 <update_BMS_info_struct+0x104>
		for (uint8_t ntc = 0; ntc < NTCS_NUM; ++ntc)
 8004104:	2300      	movs	r3, #0
 8004106:	767b      	strb	r3, [r7, #25]
 8004108:	e024      	b.n	8004154 <update_BMS_info_struct+0xf8>
		{
			if (ntc_to_cell_position[id][ntc] == 0xFF)  // Guarantees that the GPIO is taken from an NTC and not an RH sensor
 800410a:	7eba      	ldrb	r2, [r7, #26]
 800410c:	7e79      	ldrb	r1, [r7, #25]
 800410e:	486b      	ldr	r0, [pc, #428]	; (80042bc <update_BMS_info_struct+0x260>)
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	4403      	add	r3, r0
 8004118:	440b      	add	r3, r1
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2bff      	cmp	r3, #255	; 0xff
 800411e:	d015      	beq.n	800414c <update_BMS_info_struct+0xf0>
				continue;

			cell_temp_sum += slave_array[id].temp[ntc];
 8004120:	7ebb      	ldrb	r3, [r7, #26]
 8004122:	22d8      	movs	r2, #216	; 0xd8
 8004124:	fb02 f303 	mul.w	r3, r2, r3
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	441a      	add	r2, r3
 800412c:	7e7b      	ldrb	r3, [r7, #25]
 800412e:	3322      	adds	r3, #34	; 0x22
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	edd3 7a00 	vldr	s15, [r3]
 8004138:	ed97 7a07 	vldr	s14, [r7, #28]
 800413c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004140:	edc7 7a07 	vstr	s15, [r7, #28]
			total_ntcs_num++;
 8004144:	7efb      	ldrb	r3, [r7, #27]
 8004146:	3301      	adds	r3, #1
 8004148:	76fb      	strb	r3, [r7, #27]
 800414a:	e000      	b.n	800414e <update_BMS_info_struct+0xf2>
				continue;
 800414c:	bf00      	nop
		for (uint8_t ntc = 0; ntc < NTCS_NUM; ++ntc)
 800414e:	7e7b      	ldrb	r3, [r7, #25]
 8004150:	3301      	adds	r3, #1
 8004152:	767b      	strb	r3, [r7, #25]
 8004154:	7e7b      	ldrb	r3, [r7, #25]
 8004156:	2b04      	cmp	r3, #4
 8004158:	d9d7      	bls.n	800410a <update_BMS_info_struct+0xae>
	for (uint8_t id = 0; id < SLAVES_NUM; ++id)
 800415a:	7ebb      	ldrb	r3, [r7, #26]
 800415c:	3301      	adds	r3, #1
 800415e:	76bb      	strb	r3, [r7, #26]
 8004160:	7ebb      	ldrb	r3, [r7, #26]
 8004162:	2b0f      	cmp	r3, #15
 8004164:	d9ce      	bls.n	8004104 <update_BMS_info_struct+0xa8>
		}
	bmsInfo->avg_cell_temp = cell_temp_sum / total_ntcs_num;
 8004166:	7efb      	ldrb	r3, [r7, #27]
 8004168:	ee07 3a90 	vmov	s15, r3
 800416c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004170:	edd7 6a07 	vldr	s13, [r7, #28]
 8004174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

	find_min_max_temp(bmsInfo, slave_array);
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f001 fce5 	bl	8005b50 <find_min_max_temp>


	/* Updates humidity parameter */
	find_max_humidity(bmsInfo, slave_array);
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f001 fde5 	bl	8005d58 <find_max_humidity>


	/* Checks if there are hardware errors (malfunctioning slave / open wires) */
	bool slave_error_present = false;
 800418e:	2300      	movs	r3, #0
 8004190:	763b      	strb	r3, [r7, #24]
	float delta = 0.005;
 8004192:	4b4b      	ldr	r3, [pc, #300]	; (80042c0 <update_BMS_info_struct+0x264>)
 8004194:	613b      	str	r3, [r7, #16]
	for (ID_t id = ID_0; id < SLAVES_NUM; id++)
 8004196:	2300      	movs	r3, #0
 8004198:	75fb      	strb	r3, [r7, #23]
 800419a:	e055      	b.n	8004248 <update_BMS_info_struct+0x1ec>
	{
		if ((slave_array[id].diagnose_state != DIAGNOSE_OK) && (slave_array[id].diagnose_state != NO_DIAGNOSE_TEST))
 800419c:	7dfb      	ldrb	r3, [r7, #23]
 800419e:	22d8      	movs	r2, #216	; 0xd8
 80041a0:	fb02 f303 	mul.w	r3, r2, r3
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	4413      	add	r3, r2
 80041a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d012      	beq.n	80041d6 <update_BMS_info_struct+0x17a>
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	22d8      	movs	r2, #216	; 0xd8
 80041b4:	fb02 f303 	mul.w	r3, r2, r3
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	4413      	add	r3, r2
 80041bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d008      	beq.n	80041d6 <update_BMS_info_struct+0x17a>
		{
			bmsInfo->slave_error_id = id + 1;   // slave_error_num takes values from 1 to SLAVES_NUM
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	3301      	adds	r3, #1
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			slave_error_present = true;
 80041d0:	2301      	movs	r3, #1
 80041d2:	763b      	strb	r3, [r7, #24]
			break;
 80041d4:	e03b      	b.n	800424e <update_BMS_info_struct+0x1f2>
		}

		/* Checks if the parameters stored in the configuration register of each slave are correct */
		if (slave_array[id].min_v < UV_THRESHOLD - delta)
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
 80041d8:	22d8      	movs	r2, #216	; 0xd8
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	4413      	add	r3, r2
 80041e2:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80041e6:	eddf 6a37 	vldr	s13, [pc, #220]	; 80042c4 <update_BMS_info_struct+0x268>
 80041ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80041ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80041f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fa:	d507      	bpl.n	800420c <update_BMS_info_struct+0x1b0>
		{
			bmsInfo->slave_error_id = id + 1;   // slave_error_num takes values from 1 to SLAVES_NUM
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
 80041fe:	3301      	adds	r3, #1
 8004200:	b2da      	uxtb	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			slave_error_present = true;
 8004208:	2301      	movs	r3, #1
 800420a:	763b      	strb	r3, [r7, #24]
		}
		if (slave_array[id].max_v > OV_THRESHOLD + delta)
 800420c:	7dfb      	ldrb	r3, [r7, #23]
 800420e:	22d8      	movs	r2, #216	; 0xd8
 8004210:	fb02 f303 	mul.w	r3, r2, r3
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	4413      	add	r3, r2
 8004218:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800421c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004220:	eddf 6a29 	vldr	s13, [pc, #164]	; 80042c8 <update_BMS_info_struct+0x26c>
 8004224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004228:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800422c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004230:	dd07      	ble.n	8004242 <update_BMS_info_struct+0x1e6>
		{
			bmsInfo->slave_error_id = id + 1;   // slave_error_num takes values from 1 to SLAVES_NUM
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	3301      	adds	r3, #1
 8004236:	b2da      	uxtb	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			slave_error_present = true;
 800423e:	2301      	movs	r3, #1
 8004240:	763b      	strb	r3, [r7, #24]
	for (ID_t id = ID_0; id < SLAVES_NUM; id++)
 8004242:	7dfb      	ldrb	r3, [r7, #23]
 8004244:	3301      	adds	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	2b0f      	cmp	r3, #15
 800424c:	d9a6      	bls.n	800419c <update_BMS_info_struct+0x140>
		}
	}

	if (!slave_error_present)
 800424e:	7e3b      	ldrb	r3, [r7, #24]
 8004250:	f083 0301 	eor.w	r3, r3, #1
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <update_BMS_info_struct+0x206>
		bmsInfo->slave_error_id = 0;   // No slave error in the bus
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51


	/* Checks if there are communication errors (dead slave) */
	if (update_comm_errors(master, slave_array, bmsInfo) != OK)  // If COMM errors exist
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68b9      	ldr	r1, [r7, #8]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f830 	bl	80042cc <update_comm_errors>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d01a      	beq.n	80042a8 <update_BMS_info_struct+0x24c>
	{
		for (ID_t id = 0; id < SLAVES_NUM; ++id)
 8004272:	2300      	movs	r3, #0
 8004274:	75bb      	strb	r3, [r7, #22]
 8004276:	e013      	b.n	80042a0 <update_BMS_info_struct+0x244>
		{
			if (master->no_comm_time[id] > COMM_TIMEOUT_MS)
 8004278:	7dbb      	ldrb	r3, [r7, #22]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	3318      	adds	r3, #24
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	4413      	add	r3, r2
 8004282:	885b      	ldrh	r3, [r3, #2]
 8004284:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8004288:	d907      	bls.n	800429a <update_BMS_info_struct+0x23e>
			{
				bmsInfo->comm_error_id = id + 1;   // comm_error_num takes values from 1 to SLAVES_NUM
 800428a:	7dbb      	ldrb	r3, [r7, #22]
 800428c:	3301      	adds	r3, #1
 800428e:	b2da      	uxtb	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				break;
 8004296:	bf00      	nop
		}
	}
	else
		bmsInfo->comm_error_id = 0;	  // Clear Communication error

}
 8004298:	e00a      	b.n	80042b0 <update_BMS_info_struct+0x254>
		for (ID_t id = 0; id < SLAVES_NUM; ++id)
 800429a:	7dbb      	ldrb	r3, [r7, #22]
 800429c:	3301      	adds	r3, #1
 800429e:	75bb      	strb	r3, [r7, #22]
 80042a0:	7dbb      	ldrb	r3, [r7, #22]
 80042a2:	2b0f      	cmp	r3, #15
 80042a4:	d9e8      	bls.n	8004278 <update_BMS_info_struct+0x21c>
}
 80042a6:	e003      	b.n	80042b0 <update_BMS_info_struct+0x254>
		bmsInfo->comm_error_id = 0;	  // Clear Communication error
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80042b0:	bf00      	nop
 80042b2:	3728      	adds	r7, #40	; 0x28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	43100000 	.word	0x43100000
 80042bc:	08022604 	.word	0x08022604
 80042c0:	3ba3d70a 	.word	0x3ba3d70a
 80042c4:	40433333 	.word	0x40433333
 80042c8:	40863d71 	.word	0x40863d71

080042cc <update_comm_errors>:


BMSstatus_t update_comm_errors(MCU* master, LTC6811* slave_array, BMS_info* bmsInfo)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
	bool comm_error = false;
 80042d8:	2300      	movs	r3, #0
 80042da:	75fb      	strb	r3, [r7, #23]

	for (ID_t id = ID_0; id < SLAVES_NUM; ++id)
 80042dc:	2300      	movs	r3, #0
 80042de:	75bb      	strb	r3, [r7, #22]
 80042e0:	e022      	b.n	8004328 <update_comm_errors+0x5c>
	{
		master->no_comm_time[id] = xTaskGetTickCount() - slave_array[id].last_valid_msg;
 80042e2:	f015 fddb 	bl	8019e9c <xTaskGetTickCount>
 80042e6:	4603      	mov	r3, r0
 80042e8:	b299      	uxth	r1, r3
 80042ea:	7dbb      	ldrb	r3, [r7, #22]
 80042ec:	22d8      	movs	r2, #216	; 0xd8
 80042ee:	fb02 f303 	mul.w	r3, r2, r3
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	4413      	add	r3, r2
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	7dbb      	ldrb	r3, [r7, #22]
 80042fc:	1a8a      	subs	r2, r1, r2
 80042fe:	b291      	uxth	r1, r2
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	3318      	adds	r3, #24
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	4413      	add	r3, r2
 8004308:	460a      	mov	r2, r1
 800430a:	805a      	strh	r2, [r3, #2]
		if (master->no_comm_time[id] > COMM_TIMEOUT_MS)
 800430c:	7dbb      	ldrb	r3, [r7, #22]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	3318      	adds	r3, #24
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	4413      	add	r3, r2
 8004316:	885b      	ldrh	r3, [r3, #2]
 8004318:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800431c:	d901      	bls.n	8004322 <update_comm_errors+0x56>
		{
			comm_error = true;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]
	for (ID_t id = ID_0; id < SLAVES_NUM; ++id)
 8004322:	7dbb      	ldrb	r3, [r7, #22]
 8004324:	3301      	adds	r3, #1
 8004326:	75bb      	strb	r3, [r7, #22]
 8004328:	7dbb      	ldrb	r3, [r7, #22]
 800432a:	2b0f      	cmp	r3, #15
 800432c:	d9d9      	bls.n	80042e2 <update_comm_errors+0x16>
			//ams_fault(bmsInfo, master, slave_array);
		}
	}

	if (comm_error)
 800432e:	7dfb      	ldrb	r3, [r7, #23]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <update_comm_errors+0x6c>
		return COMM_ERROR;
 8004334:	2312      	movs	r3, #18
 8004336:	e000      	b.n	800433a <update_comm_errors+0x6e>

	return OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	0000      	movs	r0, r0
 8004344:	0000      	movs	r0, r0
	...

08004348 <update_balancing_cells>:
/*****************************************************************************
*  @Description	  Finds which cells have to start - stop balancing and starts -
*  				  stops the discharging
******************************************************************************/
BMSstatus_t update_balancing_cells(BMS_info *bms, MCU *master, LTC6811 *slave_array, const uint8_t attempts)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	70fb      	strb	r3, [r7, #3]

	/* OverTemperature Handling */
	// UNNECESSARY SINCE update_balancing_cells IS CALLED EVERY 10s
	if (bms->max_temp_cell.value > bms->ot_threshold)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800436a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800436e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004372:	dd09      	ble.n	8004388 <update_balancing_cells+0x40>
	{
		bms->charge_flag = false;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		stop_balancing(bms, master, slave_array, attempts);
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 faee 	bl	8004964 <stop_balancing>
	}

	if (bms->state == OVERTEMP)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800438e:	2b05      	cmp	r3, #5
 8004390:	d115      	bne.n	80043be <update_balancing_cells+0x76>
	{
		if (bms->max_temp_cell.value < bms->ot_threshold - 5)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800439e:	3b05      	subs	r3, #5
 80043a0:	ee07 3a90 	vmov	s15, r3
 80043a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b0:	d503      	bpl.n	80043ba <update_balancing_cells+0x72>
			bms->state = BMS_OK;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		return OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e0b3      	b.n	8004526 <update_balancing_cells+0x1de>
	}

	/* Final stage of balancing with no charging at higher voltages */
	else if (bms->max_voltage_cell.value >= HIGH_V)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fc f8c0 	bl	8000548 <__aeabi_f2d>
 80043c8:	a360      	add	r3, pc, #384	; (adr r3, 800454c <update_balancing_cells+0x204>)
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f7fc fb99 	bl	8000b04 <__aeabi_dcmpge>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d03c      	beq.n	8004452 <update_balancing_cells+0x10a>
	{
		bms->charge_flag = false;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		bms->target_charge_current = 0;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	849a      	strh	r2, [r3, #36]	; 0x24

		if (bms->min_voltage_cell.value >= HIGH_V)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fc f8ac 	bl	8000548 <__aeabi_f2d>
 80043f0:	a356      	add	r3, pc, #344	; (adr r3, 800454c <update_balancing_cells+0x204>)
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f7fc fb85 	bl	8000b04 <__aeabi_dcmpge>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <update_balancing_cells+0xc8>
			return finalize_balancing(bms, master, slave_array, attempts);
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f8a6 	bl	8004558 <finalize_balancing>
 800440c:	4603      	mov	r3, r0
 800440e:	e08a      	b.n	8004526 <update_balancing_cells+0x1de>

		else if (bms->min_voltage_cell.value >= MID_V)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	4618      	mov	r0, r3
 8004416:	f7fc f897 	bl	8000548 <__aeabi_f2d>
 800441a:	a345      	add	r3, pc, #276	; (adr r3, 8004530 <update_balancing_cells+0x1e8>)
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	f7fc fb70 	bl	8000b04 <__aeabi_dcmpge>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <update_balancing_cells+0xf6>
			return balance_to_min(bms, master, slave_array, 0.005, attempts);
 800442a:	78fb      	ldrb	r3, [r7, #3]
 800442c:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8004540 <update_balancing_cells+0x1f8>
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f91b 	bl	8004670 <balance_to_min>
 800443a:	4603      	mov	r3, r0
 800443c:	e073      	b.n	8004526 <update_balancing_cells+0x1de>

		else
			return balance_to_min(bms, master, slave_array, 0.010, attempts);
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8004544 <update_balancing_cells+0x1fc>
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	68b9      	ldr	r1, [r7, #8]
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f911 	bl	8004670 <balance_to_min>
 800444e:	4603      	mov	r3, r0
 8004450:	e069      	b.n	8004526 <update_balancing_cells+0x1de>
	}

	/* Middle stage of balancing with a low current charging current */
	else if (bms->max_voltage_cell.value >= MID_V)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fc f876 	bl	8000548 <__aeabi_f2d>
 800445c:	a334      	add	r3, pc, #208	; (adr r3, 8004530 <update_balancing_cells+0x1e8>)
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f7fc fb4f 	bl	8000b04 <__aeabi_dcmpge>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d020      	beq.n	80044ae <update_balancing_cells+0x166>
	{
//		bms->charge_flag = true;
//		bms->target_charge_current = MAX_CHARGE_CURRENT / 2;

		if (bms->min_voltage_cell.value >= LOW_V)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4618      	mov	r0, r3
 8004472:	f7fc f869 	bl	8000548 <__aeabi_f2d>
 8004476:	a330      	add	r3, pc, #192	; (adr r3, 8004538 <update_balancing_cells+0x1f0>)
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	f7fc fb42 	bl	8000b04 <__aeabi_dcmpge>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d009      	beq.n	800449a <update_balancing_cells+0x152>
			return balance_to_min(bms, master, slave_array, 0.003, attempts);
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8004548 <update_balancing_cells+0x200>
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f8ed 	bl	8004670 <balance_to_min>
 8004496:	4603      	mov	r3, r0
 8004498:	e045      	b.n	8004526 <update_balancing_cells+0x1de>
		else
			return balance_to_min(bms, master, slave_array, 0.010, attempts);
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8004544 <update_balancing_cells+0x1fc>
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	68b9      	ldr	r1, [r7, #8]
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f8e3 	bl	8004670 <balance_to_min>
 80044aa:	4603      	mov	r3, r0
 80044ac:	e03b      	b.n	8004526 <update_balancing_cells+0x1de>
	}

	/* High charge current and balancing to min_cell simultaneously */
	else if (bms->max_voltage_cell.value >= LOW_V)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fc f848 	bl	8000548 <__aeabi_f2d>
 80044b8:	a31f      	add	r3, pc, #124	; (adr r3, 8004538 <update_balancing_cells+0x1f0>)
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f7fc fb21 	bl	8000b04 <__aeabi_dcmpge>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d020      	beq.n	800450a <update_balancing_cells+0x1c2>
	{
//		bms->charge_flag = true;
//		bms->target_charge_current = MAX_CHARGE_CURRENT;

		if (bms->min_voltage_cell.value >= LOW_V)    // TESTED
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fc f83b 	bl	8000548 <__aeabi_f2d>
 80044d2:	a319      	add	r3, pc, #100	; (adr r3, 8004538 <update_balancing_cells+0x1f0>)
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f7fc fb14 	bl	8000b04 <__aeabi_dcmpge>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d009      	beq.n	80044f6 <update_balancing_cells+0x1ae>
			return balance_to_min(bms, master, slave_array, 0.005, attempts);
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8004540 <update_balancing_cells+0x1f8>
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f8bf 	bl	8004670 <balance_to_min>
 80044f2:	4603      	mov	r3, r0
 80044f4:	e017      	b.n	8004526 <update_balancing_cells+0x1de>

		else   // TESTED
			return balance_to_min(bms, master, slave_array, 0.010, attempts);
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8004544 <update_balancing_cells+0x1fc>
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f8b5 	bl	8004670 <balance_to_min>
 8004506:	4603      	mov	r3, r0
 8004508:	e00d      	b.n	8004526 <update_balancing_cells+0x1de>
	/* Stage where max cell is */
	else {  // 3.30 > b->max_cell_v >= 3.00
//		bms->target_charge_current = MAX_CHARGE_CURRENT;
//		bms->charge_flag = true;

		if (bms->BalInfo.state == on)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d107      	bne.n	8004524 <update_balancing_cells+0x1dc>
		{
			return stop_balancing(bms, master, slave_array, attempts);
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fa22 	bl	8004964 <stop_balancing>
 8004520:	4603      	mov	r3, r0
 8004522:	e000      	b.n	8004526 <update_balancing_cells+0x1de>
		}
		return OK;
 8004524:	2300      	movs	r3, #0
	}
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	cccccccd 	.word	0xcccccccd
 8004534:	400ecccc 	.word	0x400ecccc
 8004538:	33333333 	.word	0x33333333
 800453c:	400d3333 	.word	0x400d3333
 8004540:	3ba3d70a 	.word	0x3ba3d70a
 8004544:	3c23d70a 	.word	0x3c23d70a
 8004548:	3b449ba6 	.word	0x3b449ba6
 800454c:	5c28f5c3 	.word	0x5c28f5c3
 8004550:	4010c28f 	.word	0x4010c28f
 8004554:	00000000 	.word	0x00000000

08004558 <finalize_balancing>:

/*****************************************************************************
*  @Description	  Takes over the balancing process if all cells are above ~4.19V
******************************************************************************/
BMSstatus_t finalize_balancing(BMS_info *bms, MCU *master, LTC6811 *slave_array, const uint8_t attempts)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	70fb      	strb	r3, [r7, #3]
	float deviation = bms->max_voltage_cell.value - bms->min_voltage_cell.value;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	ed93 7a03 	vldr	s14, [r3, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004572:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004576:	edc7 7a05 	vstr	s15, [r7, #20]

	if ((bms->max_voltage_cell.value < bms->ov_threshold) && (deviation < 0.001)) {
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	edd3 7a07 	vldr	s15, [r3, #28]
 8004586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800458a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458e:	d519      	bpl.n	80045c4 <finalize_balancing+0x6c>
 8004590:	6978      	ldr	r0, [r7, #20]
 8004592:	f7fb ffd9 	bl	8000548 <__aeabi_f2d>
 8004596:	a332      	add	r3, pc, #200	; (adr r3, 8004660 <finalize_balancing+0x108>)
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	f7fc fa9e 	bl	8000adc <__aeabi_dcmplt>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00e      	beq.n	80045c4 <finalize_balancing+0x6c>
//		bms->target_charge_current = MAX_CHARGE_CURRENT / 8;
//		bms->charge_flag = true;
		if (bms->BalInfo.state == on) {
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d107      	bne.n	80045c0 <finalize_balancing+0x68>
			return stop_balancing(bms, master, slave_array, attempts);
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f9d4 	bl	8004964 <stop_balancing>
 80045bc:	4603      	mov	r3, r0
 80045be:	e040      	b.n	8004642 <finalize_balancing+0xea>
		}
		return OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e03e      	b.n	8004642 <finalize_balancing+0xea>
	}

	else if (deviation < 0.003) {
 80045c4:	6978      	ldr	r0, [r7, #20]
 80045c6:	f7fb ffbf 	bl	8000548 <__aeabi_f2d>
 80045ca:	a327      	add	r3, pc, #156	; (adr r3, 8004668 <finalize_balancing+0x110>)
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	f7fc fa84 	bl	8000adc <__aeabi_dcmplt>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00d      	beq.n	80045f6 <finalize_balancing+0x9e>
		bms->charge_flag = false;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		return balance_to_min(bms, master, slave_array, 0.001, attempts);
 80045e2:	78fb      	ldrb	r3, [r7, #3]
 80045e4:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8004658 <finalize_balancing+0x100>
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f83f 	bl	8004670 <balance_to_min>
 80045f2:	4603      	mov	r3, r0
 80045f4:	e025      	b.n	8004642 <finalize_balancing+0xea>
	}

	else if (deviation < 0.005) {
 80045f6:	6978      	ldr	r0, [r7, #20]
 80045f8:	f7fb ffa6 	bl	8000548 <__aeabi_f2d>
 80045fc:	a314      	add	r3, pc, #80	; (adr r3, 8004650 <finalize_balancing+0xf8>)
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f7fc fa6b 	bl	8000adc <__aeabi_dcmplt>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00d      	beq.n	8004628 <finalize_balancing+0xd0>
		bms->charge_flag = 0;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		return balance_to_min(bms, master, slave_array, 0.003, attempts);
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800465c <finalize_balancing+0x104>
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 f826 	bl	8004670 <balance_to_min>
 8004624:	4603      	mov	r3, r0
 8004626:	e00c      	b.n	8004642 <finalize_balancing+0xea>
	}

	else {  // deviation >= 0.005
		bms->charge_flag = 0;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		return balance_to_min(bms, master, slave_array, 0.003, attempts);
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800465c <finalize_balancing+0x104>
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f818 	bl	8004670 <balance_to_min>
 8004640:	4603      	mov	r3, r0
	}
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	f3af 8000 	nop.w
 8004650:	47ae147b 	.word	0x47ae147b
 8004654:	3f747ae1 	.word	0x3f747ae1
 8004658:	3a83126f 	.word	0x3a83126f
 800465c:	3b449ba6 	.word	0x3b449ba6
 8004660:	d2f1a9fc 	.word	0xd2f1a9fc
 8004664:	3f50624d 	.word	0x3f50624d
 8004668:	bc6a7efa 	.word	0xbc6a7efa
 800466c:	3f689374 	.word	0x3f689374

08004670 <balance_to_min>:

/*****************************************************************************
*  @Description	  Decides the cells that have to be balanced and discharges them
******************************************************************************/
BMSstatus_t balance_to_min(BMS_info *bms, MCU *master, LTC6811 *slave_array, const float deviation, const uint8_t attempts)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	6178      	str	r0, [r7, #20]
 8004678:	6139      	str	r1, [r7, #16]
 800467a:	60fa      	str	r2, [r7, #12]
 800467c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004680:	71fb      	strb	r3, [r7, #7]
	for (uint8_t id = 0; id < SLAVES_NUM; ++id)
 8004682:	2300      	movs	r3, #0
 8004684:	77fb      	strb	r3, [r7, #31]
 8004686:	e03b      	b.n	8004700 <balance_to_min+0x90>
	{
		for (uint8_t pos = 0; pos < CELLS_NUM; ++pos)
 8004688:	2300      	movs	r3, #0
 800468a:	77bb      	strb	r3, [r7, #30]
 800468c:	e032      	b.n	80046f4 <balance_to_min+0x84>
		{
			if (slave_array[id].voltage[pos] - bms->min_voltage_cell.value > deviation)
 800468e:	7ffb      	ldrb	r3, [r7, #31]
 8004690:	22d8      	movs	r2, #216	; 0xd8
 8004692:	fb02 f303 	mul.w	r3, r2, r3
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	441a      	add	r2, r3
 800469a:	7fbb      	ldrb	r3, [r7, #30]
 800469c:	3312      	adds	r3, #18
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	3304      	adds	r3, #4
 80046a4:	ed93 7a00 	vldr	s14, [r3]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80046ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80046b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046be:	d50b      	bpl.n	80046d8 <balance_to_min+0x68>
				bms->BalInfo.unbalanced_cells[id][pos] = true;
 80046c0:	7ffa      	ldrb	r2, [r7, #31]
 80046c2:	7fb9      	ldrb	r1, [r7, #30]
 80046c4:	6978      	ldr	r0, [r7, #20]
 80046c6:	4613      	mov	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	4413      	add	r3, r2
 80046cc:	4403      	add	r3, r0
 80046ce:	440b      	add	r3, r1
 80046d0:	3353      	adds	r3, #83	; 0x53
 80046d2:	2201      	movs	r2, #1
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	e00a      	b.n	80046ee <balance_to_min+0x7e>
			else
		 		bms->BalInfo.unbalanced_cells[id][pos] = false;
 80046d8:	7ffa      	ldrb	r2, [r7, #31]
 80046da:	7fb9      	ldrb	r1, [r7, #30]
 80046dc:	6978      	ldr	r0, [r7, #20]
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4413      	add	r3, r2
 80046e4:	4403      	add	r3, r0
 80046e6:	440b      	add	r3, r1
 80046e8:	3353      	adds	r3, #83	; 0x53
 80046ea:	2200      	movs	r2, #0
 80046ec:	701a      	strb	r2, [r3, #0]
		for (uint8_t pos = 0; pos < CELLS_NUM; ++pos)
 80046ee:	7fbb      	ldrb	r3, [r7, #30]
 80046f0:	3301      	adds	r3, #1
 80046f2:	77bb      	strb	r3, [r7, #30]
 80046f4:	7fbb      	ldrb	r3, [r7, #30]
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d9c9      	bls.n	800468e <balance_to_min+0x1e>
	for (uint8_t id = 0; id < SLAVES_NUM; ++id)
 80046fa:	7ffb      	ldrb	r3, [r7, #31]
 80046fc:	3301      	adds	r3, #1
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	7ffb      	ldrb	r3, [r7, #31]
 8004702:	2b0f      	cmp	r3, #15
 8004704:	d9c0      	bls.n	8004688 <balance_to_min+0x18>
		}
	}

	return balance_cells(bms, master, slave_array, attempts);
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	6939      	ldr	r1, [r7, #16]
 800470c:	6978      	ldr	r0, [r7, #20]
 800470e:	f000 f805 	bl	800471c <balance_cells>
 8004712:	4603      	mov	r3, r0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <balance_cells>:
/*****************************************************************************
*  @Description	  Takes the cells that have to discharge and creates the
*  			      discharge command
******************************************************************************/
BMSstatus_t balance_cells(BMS_info *bms, MCU *master, LTC6811 *slave_array, const uint8_t attempts)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08a      	sub	sp, #40	; 0x28
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	70fb      	strb	r3, [r7, #3]
	bms->BalInfo.state = on;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3

	uint8_t result;
	bool success = true;
 8004732:	2301      	movs	r3, #1
 8004734:	77fb      	strb	r3, [r7, #31]

	for (uint8_t id = 0; id < SLAVES_NUM; ++id) {
 8004736:	2300      	movs	r3, #0
 8004738:	77bb      	strb	r3, [r7, #30]
 800473a:	e035      	b.n	80047a8 <balance_cells+0x8c>
		uint8_t dcc[CELLS_NUM];
		for (uint8_t pos = 0; pos < CELLS_NUM; ++pos) {
 800473c:	2300      	movs	r3, #0
 800473e:	777b      	strb	r3, [r7, #29]
 8004740:	e01b      	b.n	800477a <balance_cells+0x5e>
			if (bms->BalInfo.unbalanced_cells[id][pos] == true)
 8004742:	7fba      	ldrb	r2, [r7, #30]
 8004744:	7f79      	ldrb	r1, [r7, #29]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	4613      	mov	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4413      	add	r3, r2
 800474e:	4403      	add	r3, r0
 8004750:	440b      	add	r3, r1
 8004752:	3353      	adds	r3, #83	; 0x53
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d006      	beq.n	8004768 <balance_cells+0x4c>
				dcc[pos] = 1;
 800475a:	7f7b      	ldrb	r3, [r7, #29]
 800475c:	3320      	adds	r3, #32
 800475e:	443b      	add	r3, r7
 8004760:	2201      	movs	r2, #1
 8004762:	f803 2c10 	strb.w	r2, [r3, #-16]
 8004766:	e005      	b.n	8004774 <balance_cells+0x58>
			else
				dcc[pos] = 0;
 8004768:	7f7b      	ldrb	r3, [r7, #29]
 800476a:	3320      	adds	r3, #32
 800476c:	443b      	add	r3, r7
 800476e:	2200      	movs	r2, #0
 8004770:	f803 2c10 	strb.w	r2, [r3, #-16]
		for (uint8_t pos = 0; pos < CELLS_NUM; ++pos) {
 8004774:	7f7b      	ldrb	r3, [r7, #29]
 8004776:	3301      	adds	r3, #1
 8004778:	777b      	strb	r3, [r7, #29]
 800477a:	7f7b      	ldrb	r3, [r7, #29]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d9e0      	bls.n	8004742 <balance_cells+0x26>
		}
		result = discharge(master, slave_array, id, dcc, attempts);
 8004780:	f107 0110 	add.w	r1, r7, #16
 8004784:	7fba      	ldrb	r2, [r7, #30]
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	460b      	mov	r3, r1
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	68b8      	ldr	r0, [r7, #8]
 8004790:	f000 f92c 	bl	80049ec <discharge>
 8004794:	4603      	mov	r3, r0
 8004796:	773b      	strb	r3, [r7, #28]
		if (result != OK)
 8004798:	7f3b      	ldrb	r3, [r7, #28]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <balance_cells+0x86>
			success = false;
 800479e:	2300      	movs	r3, #0
 80047a0:	77fb      	strb	r3, [r7, #31]
	for (uint8_t id = 0; id < SLAVES_NUM; ++id) {
 80047a2:	7fbb      	ldrb	r3, [r7, #30]
 80047a4:	3301      	adds	r3, #1
 80047a6:	77bb      	strb	r3, [r7, #30]
 80047a8:	7fbb      	ldrb	r3, [r7, #30]
 80047aa:	2b0f      	cmp	r3, #15
 80047ac:	d9c6      	bls.n	800473c <balance_cells+0x20>
	}
	if (!success)
 80047ae:	7ffb      	ldrb	r3, [r7, #31]
 80047b0:	f083 0301 	eor.w	r3, r3, #1
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <balance_cells+0xa2>
		return SAFE_WRITE_ERROR;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e000      	b.n	80047c0 <balance_cells+0xa4>

	return OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3720      	adds	r7, #32
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <find_min_max_v>:
*  @Description	  Finds the minimum and maximum cell voltage and position out
*  				  of the whole Accumulator Container
******************************************************************************/
// louzoun oi fisses twn connection sta kelia 64 & 82 (cell_0 dld) - tash 3.37 anti gia 3.78V
void find_min_max_v(BMS_info *bms, LTC6811 *slave_array)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
	bms->max_voltage_cell.value = slave_array[0].voltage[0];
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60da      	str	r2, [r3, #12]
	bms->max_voltage_cell.pos   = 1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	741a      	strb	r2, [r3, #16]
	bms->min_voltage_cell.value = slave_array[0].voltage[0];
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	605a      	str	r2, [r3, #4]
	bms->min_voltage_cell.pos   = 1;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	721a      	strb	r2, [r3, #8]

	for (uint8_t id =  0; id < SLAVES_NUM; ++id)
 80047ee:	2300      	movs	r3, #0
 80047f0:	73fb      	strb	r3, [r7, #15]
 80047f2:	e069      	b.n	80048c8 <find_min_max_v+0x100>
	{
		for (uint8_t pos = 0; pos < CELLS_NUM; ++pos)
 80047f4:	2300      	movs	r3, #0
 80047f6:	73bb      	strb	r3, [r7, #14]
 80047f8:	e060      	b.n	80048bc <find_min_max_v+0xf4>
		{

			if (slave_array[id].voltage[pos] > bms->max_voltage_cell.value)
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	22d8      	movs	r2, #216	; 0xd8
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	441a      	add	r2, r3
 8004806:	7bbb      	ldrb	r3, [r7, #14]
 8004808:	3312      	adds	r3, #18
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	3304      	adds	r3, #4
 8004810:	ed93 7a00 	vldr	s14, [r3]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	edd3 7a03 	vldr	s15, [r3, #12]
 800481a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800481e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004822:	dd19      	ble.n	8004858 <find_min_max_v+0x90>
			{
				bms->max_voltage_cell.value = slave_array[id].voltage[pos];
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	22d8      	movs	r2, #216	; 0xd8
 8004828:	fb02 f303 	mul.w	r3, r2, r3
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	441a      	add	r2, r3
 8004830:	7bbb      	ldrb	r3, [r7, #14]
 8004832:	3312      	adds	r3, #18
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	3304      	adds	r3, #4
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60da      	str	r2, [r3, #12]
				bms->max_voltage_cell.pos   = id * 9 + pos + 1;
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	461a      	mov	r2, r3
 8004844:	00d2      	lsls	r2, r2, #3
 8004846:	4413      	add	r3, r2
 8004848:	b2da      	uxtb	r2, r3
 800484a:	7bbb      	ldrb	r3, [r7, #14]
 800484c:	4413      	add	r3, r2
 800484e:	b2db      	uxtb	r3, r3
 8004850:	3301      	adds	r3, #1
 8004852:	b2da      	uxtb	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	741a      	strb	r2, [r3, #16]
			}

			if (slave_array[id].voltage[pos] < bms->min_voltage_cell.value)
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	22d8      	movs	r2, #216	; 0xd8
 800485c:	fb02 f303 	mul.w	r3, r2, r3
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	441a      	add	r2, r3
 8004864:	7bbb      	ldrb	r3, [r7, #14]
 8004866:	3312      	adds	r3, #18
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	3304      	adds	r3, #4
 800486e:	ed93 7a00 	vldr	s14, [r3]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	edd3 7a01 	vldr	s15, [r3, #4]
 8004878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800487c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004880:	d519      	bpl.n	80048b6 <find_min_max_v+0xee>
			{
				bms->min_voltage_cell.value = slave_array[id].voltage[pos];
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	22d8      	movs	r2, #216	; 0xd8
 8004886:	fb02 f303 	mul.w	r3, r2, r3
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	441a      	add	r2, r3
 800488e:	7bbb      	ldrb	r3, [r7, #14]
 8004890:	3312      	adds	r3, #18
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	3304      	adds	r3, #4
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	605a      	str	r2, [r3, #4]
				bms->min_voltage_cell.pos   = id * 9 + pos + 1;
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	461a      	mov	r2, r3
 80048a2:	00d2      	lsls	r2, r2, #3
 80048a4:	4413      	add	r3, r2
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	7bbb      	ldrb	r3, [r7, #14]
 80048aa:	4413      	add	r3, r2
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	3301      	adds	r3, #1
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	721a      	strb	r2, [r3, #8]
		for (uint8_t pos = 0; pos < CELLS_NUM; ++pos)
 80048b6:	7bbb      	ldrb	r3, [r7, #14]
 80048b8:	3301      	adds	r3, #1
 80048ba:	73bb      	strb	r3, [r7, #14]
 80048bc:	7bbb      	ldrb	r3, [r7, #14]
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d99b      	bls.n	80047fa <find_min_max_v+0x32>
	for (uint8_t id =  0; id < SLAVES_NUM; ++id)
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	3301      	adds	r3, #1
 80048c6:	73fb      	strb	r3, [r7, #15]
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b0f      	cmp	r3, #15
 80048cc:	d992      	bls.n	80047f4 <find_min_max_v+0x2c>
			}
		}
	}
}
 80048ce:	bf00      	nop
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <update_uv_ov_flags>:



void update_uv_ov_flags(BMS_info *bmsInfo, LTC6811 *slave_array)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
	bmsInfo->ov_flag_cell = 0;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	755a      	strb	r2, [r3, #21]
	bmsInfo->uv_flag_cell = 0;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	751a      	strb	r2, [r3, #20]

	for (ID_t id = ID_0; id < SLAVES_NUM; ++id)
 80048f2:	2300      	movs	r3, #0
 80048f4:	73fb      	strb	r3, [r7, #15]
 80048f6:	e02b      	b.n	8004950 <update_uv_ov_flags+0x74>
	{
		for (uint8_t cell = 0; cell < CELLS_NUM; ++cell)
 80048f8:	2300      	movs	r3, #0
 80048fa:	73bb      	strb	r3, [r7, #14]
 80048fc:	e022      	b.n	8004944 <update_uv_ov_flags+0x68>
		{
			if (slave_array[id].uv_flag[cell] == 1)
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	22d8      	movs	r2, #216	; 0xd8
 8004902:	fb02 f303 	mul.w	r3, r2, r3
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	441a      	add	r2, r3
 800490a:	7bbb      	ldrb	r3, [r7, #14]
 800490c:	4413      	add	r3, r2
 800490e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004912:	2b01      	cmp	r3, #1
 8004914:	d103      	bne.n	800491e <update_uv_ov_flags+0x42>
			{
				bmsInfo->uv_flag_cell = 1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	751a      	strb	r2, [r3, #20]
				break;
 800491c:	e015      	b.n	800494a <update_uv_ov_flags+0x6e>
			}
			if (slave_array[id].ov_flag[cell] == 1)
 800491e:	7bfb      	ldrb	r3, [r7, #15]
 8004920:	22d8      	movs	r2, #216	; 0xd8
 8004922:	fb02 f303 	mul.w	r3, r2, r3
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	441a      	add	r2, r3
 800492a:	7bbb      	ldrb	r3, [r7, #14]
 800492c:	4413      	add	r3, r2
 800492e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004932:	2b01      	cmp	r3, #1
 8004934:	d103      	bne.n	800493e <update_uv_ov_flags+0x62>
			{
				bmsInfo->ov_flag_cell = 1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	755a      	strb	r2, [r3, #21]
				break;
 800493c:	e005      	b.n	800494a <update_uv_ov_flags+0x6e>
		for (uint8_t cell = 0; cell < CELLS_NUM; ++cell)
 800493e:	7bbb      	ldrb	r3, [r7, #14]
 8004940:	3301      	adds	r3, #1
 8004942:	73bb      	strb	r3, [r7, #14]
 8004944:	7bbb      	ldrb	r3, [r7, #14]
 8004946:	2b08      	cmp	r3, #8
 8004948:	d9d9      	bls.n	80048fe <update_uv_ov_flags+0x22>
	for (ID_t id = ID_0; id < SLAVES_NUM; ++id)
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	3301      	adds	r3, #1
 800494e:	73fb      	strb	r3, [r7, #15]
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	2b0f      	cmp	r3, #15
 8004954:	d9d0      	bls.n	80048f8 <update_uv_ov_flags+0x1c>
			}
		}
	}
}
 8004956:	bf00      	nop
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <stop_balancing>:
*  @Description	  Stops the discharge of all the cells in the ACCU container.
*                 If voltage_measurement == true, the dcc[] arrays in the
*                 slave_array struct are not updated
******************************************************************************/
BMSstatus_t stop_balancing(BMS_info *bms, MCU *master, LTC6811 *slave_array, const uint8_t attempts)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08a      	sub	sp, #40	; 0x28
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	70fb      	strb	r3, [r7, #3]
	uint8_t result;
	bool success = true;
 8004972:	2301      	movs	r3, #1
 8004974:	77fb      	strb	r3, [r7, #31]

	uint8_t dcc[CELLS_NUM];
	for (uint8_t cell = 0; cell < CELLS_NUM; ++cell)
 8004976:	2300      	movs	r3, #0
 8004978:	77bb      	strb	r3, [r7, #30]
 800497a:	e008      	b.n	800498e <stop_balancing+0x2a>
		dcc[cell] = 0;
 800497c:	7fbb      	ldrb	r3, [r7, #30]
 800497e:	3320      	adds	r3, #32
 8004980:	443b      	add	r3, r7
 8004982:	2200      	movs	r2, #0
 8004984:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t cell = 0; cell < CELLS_NUM; ++cell)
 8004988:	7fbb      	ldrb	r3, [r7, #30]
 800498a:	3301      	adds	r3, #1
 800498c:	77bb      	strb	r3, [r7, #30]
 800498e:	7fbb      	ldrb	r3, [r7, #30]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d9f3      	bls.n	800497c <stop_balancing+0x18>

	for (uint8_t id = 0; id < SLAVES_NUM; ++id) {
 8004994:	2300      	movs	r3, #0
 8004996:	777b      	strb	r3, [r7, #29]
 8004998:	e013      	b.n	80049c2 <stop_balancing+0x5e>
		result = discharge(master, slave_array, id, dcc, attempts);
 800499a:	f107 0110 	add.w	r1, r7, #16
 800499e:	7f7a      	ldrb	r2, [r7, #29]
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	460b      	mov	r3, r1
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	68b8      	ldr	r0, [r7, #8]
 80049aa:	f000 f81f 	bl	80049ec <discharge>
 80049ae:	4603      	mov	r3, r0
 80049b0:	773b      	strb	r3, [r7, #28]
		if (result != OK)
 80049b2:	7f3b      	ldrb	r3, [r7, #28]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <stop_balancing+0x58>
			success = false;
 80049b8:	2300      	movs	r3, #0
 80049ba:	77fb      	strb	r3, [r7, #31]
	for (uint8_t id = 0; id < SLAVES_NUM; ++id) {
 80049bc:	7f7b      	ldrb	r3, [r7, #29]
 80049be:	3301      	adds	r3, #1
 80049c0:	777b      	strb	r3, [r7, #29]
 80049c2:	7f7b      	ldrb	r3, [r7, #29]
 80049c4:	2b0f      	cmp	r3, #15
 80049c6:	d9e8      	bls.n	800499a <stop_balancing+0x36>
	}

	if (!success)
 80049c8:	7ffb      	ldrb	r3, [r7, #31]
 80049ca:	f083 0301 	eor.w	r3, r3, #1
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <stop_balancing+0x74>
		return SAFE_WRITE_ERROR;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e004      	b.n	80049e2 <stop_balancing+0x7e>

	bms->BalInfo.state = off;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3

	return OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <discharge>:
/*****************************************************************************
*  @Description	  Sends the discharge command keeping all other parameters in
*  				  the register unaltered
******************************************************************************/
BMSstatus_t discharge(MCU *master, LTC6811 *slave_array, const ID_t id, const uint8_t *dcc, const uint8_t attempts)
{
 80049ec:	b5b0      	push	{r4, r5, r7, lr}
 80049ee:	b08c      	sub	sp, #48	; 0x30
 80049f0:	af06      	add	r7, sp, #24
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	4613      	mov	r3, r2
 80049fa:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < CELLS_NUM; i++)
 80049fc:	2300      	movs	r3, #0
 80049fe:	75fb      	strb	r3, [r7, #23]
 8004a00:	e011      	b.n	8004a26 <discharge+0x3a>
		slave_array[id].dcc[i] = dcc[i];
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	18d1      	adds	r1, r2, r3
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	22d8      	movs	r2, #216	; 0xd8
 8004a0c:	fb02 f303 	mul.w	r3, r2, r3
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	441a      	add	r2, r3
 8004a14:	7dfb      	ldrb	r3, [r7, #23]
 8004a16:	7809      	ldrb	r1, [r1, #0]
 8004a18:	4413      	add	r3, r2
 8004a1a:	460a      	mov	r2, r1
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	for(uint8_t i = 0; i < CELLS_NUM; i++)
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	3301      	adds	r3, #1
 8004a24:	75fb      	strb	r3, [r7, #23]
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d9ea      	bls.n	8004a02 <discharge+0x16>

	return safe_write_cfgr(master, slave_array, 1, id, slave_array[id].gpio_pulldown,
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	22d8      	movs	r2, #216	; 0xd8
 8004a30:	fb02 f303 	mul.w	r3, r2, r3
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	4413      	add	r3, r2
 8004a38:	3328      	adds	r3, #40	; 0x28
						   slave_array[id].refon, slave_array[id].adcopt, UV_THRESHOLD,
 8004a3a:	79fa      	ldrb	r2, [r7, #7]
 8004a3c:	21d8      	movs	r1, #216	; 0xd8
 8004a3e:	fb01 f202 	mul.w	r2, r1, r2
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	440a      	add	r2, r1
	return safe_write_cfgr(master, slave_array, 1, id, slave_array[id].gpio_pulldown,
 8004a46:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
						   slave_array[id].refon, slave_array[id].adcopt, UV_THRESHOLD,
 8004a4a:	79f9      	ldrb	r1, [r7, #7]
 8004a4c:	20d8      	movs	r0, #216	; 0xd8
 8004a4e:	fb00 f101 	mul.w	r1, r0, r1
 8004a52:	68b8      	ldr	r0, [r7, #8]
 8004a54:	4401      	add	r1, r0
	return safe_write_cfgr(master, slave_array, 1, id, slave_array[id].gpio_pulldown,
 8004a56:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
						   OV_THRESHOLD, dcc, slave_array[id].dcto, attempts);
 8004a5a:	79f8      	ldrb	r0, [r7, #7]
 8004a5c:	24d8      	movs	r4, #216	; 0xd8
 8004a5e:	fb04 f000 	mul.w	r0, r4, r0
 8004a62:	68bc      	ldr	r4, [r7, #8]
 8004a64:	4420      	add	r0, r4
	return safe_write_cfgr(master, slave_array, 1, id, slave_array[id].gpio_pulldown,
 8004a66:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 8004a6a:	79fd      	ldrb	r5, [r7, #7]
 8004a6c:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8004a70:	9405      	str	r4, [sp, #20]
 8004a72:	9004      	str	r0, [sp, #16]
 8004a74:	6838      	ldr	r0, [r7, #0]
 8004a76:	9003      	str	r0, [sp, #12]
 8004a78:	9102      	str	r1, [sp, #8]
 8004a7a:	9201      	str	r2, [sp, #4]
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	eddf 0a07 	vldr	s1, [pc, #28]	; 8004a9c <discharge+0xb0>
 8004a82:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8004aa0 <discharge+0xb4>
 8004a86:	462b      	mov	r3, r5
 8004a88:	2201      	movs	r2, #1
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f896 	bl	8004bbe <safe_write_cfgr>
 8004a92:	4603      	mov	r3, r0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a9c:	40863d71 	.word	0x40863d71
 8004aa0:	40433333 	.word	0x40433333

08004aa4 <update_voltages>:

/*********************** END OF DIAGNOSTIC FUNCTIONS **************************/

/* reads SC as well */
BMSstatus_t update_voltages(MCU* master, LTC6811* slave_array, BMS_info* bmsInfo, Broadcast_t nbc, ID_t id, Mode_t md)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	70fb      	strb	r3, [r7, #3]
	if (bmsInfo->BalInfo.state == on)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d113      	bne.n	8004ae4 <update_voltages+0x40>
	{
		BMSstatus_t result = stop_balancing(bmsInfo, master, slave_array, 3);
 8004abc:	2303      	movs	r3, #3
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	68f9      	ldr	r1, [r7, #12]
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff ff4e 	bl	8004964 <stop_balancing>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	75fb      	strb	r3, [r7, #23]
		bmsInfo->BalInfo.state = measuring;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
		osDelay(10);
 8004ad4:	200a      	movs	r0, #10
 8004ad6:	f013 fb35 	bl	8018144 <osDelay>
		if (result != OK)
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <update_voltages+0x40>
			return result;
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
 8004ae2:	e00d      	b.n	8004b00 <update_voltages+0x5c>
	}

	update(master, nbc, id, ADCVSC(md, 0));
 8004ae4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ae8:	2100      	movs	r1, #0
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fa18 	bl	8004f20 <ADCVSC>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004af6:	78f9      	ldrb	r1, [r7, #3]
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f001 fae8 	bl	80060ce <update>

	return OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <read_voltage_registers>:

/*****************************************************************************
*  @Description	  Reads the voltage registers of a slave
******************************************************************************/
BMSstatus_t read_voltage_registers(MCU *master, LTC6811 *slave_array, BMS_info* bmsInfo, const ID_t id, const uint8_t attempts)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	70fb      	strb	r3, [r7, #3]
	/* After cells have stopped balancing to measure their voltage, this part resumes the discharging */
	if (bmsInfo->BalInfo.state == measuring)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d111      	bne.n	8004b44 <read_voltage_registers+0x3c>
	{
		BMSstatus_t result = balance_cells(bmsInfo, master, slave_array, attempts);
 8004b20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	68f9      	ldr	r1, [r7, #12]
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff fdf7 	bl	800471c <balance_cells>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	75fb      	strb	r3, [r7, #23]
		if (result != OK)
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <read_voltage_registers+0x34>
			return result;
 8004b38:	7dfb      	ldrb	r3, [r7, #23]
 8004b3a:	e03c      	b.n	8004bb6 <read_voltage_registers+0xae>

		bmsInfo->BalInfo.state = on;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
	}

	if(read(master, slave_array, id, RDCVA, attempts) != OK)
 8004b44:	78fa      	ldrb	r2, [r7, #3]
 8004b46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fa01 	bl	8004f58 <read>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <read_voltage_registers+0x58>
		return READ_ERROR;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e02a      	b.n	8004bb6 <read_voltage_registers+0xae>

	if(read(master, slave_array, id, RDCVB, attempts) != OK)
 8004b60:	78fa      	ldrb	r2, [r7, #3]
 8004b62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	2306      	movs	r3, #6
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f9f3 	bl	8004f58 <read>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <read_voltage_registers+0x74>
		return READ_ERROR;
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e01c      	b.n	8004bb6 <read_voltage_registers+0xae>

	if(read(master, slave_array, id, RDCVC, attempts) != OK)
 8004b7c:	78fa      	ldrb	r2, [r7, #3]
 8004b7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	2308      	movs	r3, #8
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f9e5 	bl	8004f58 <read>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <read_voltage_registers+0x90>
		return READ_ERROR;
 8004b94:	2302      	movs	r3, #2
 8004b96:	e00e      	b.n	8004bb6 <read_voltage_registers+0xae>

	if(read(master, slave_array, id, RDCVD, attempts) != OK)
 8004b98:	78fa      	ldrb	r2, [r7, #3]
 8004b9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	230a      	movs	r3, #10
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f9d7 	bl	8004f58 <read>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <read_voltage_registers+0xac>
		return READ_ERROR;
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e000      	b.n	8004bb6 <read_voltage_registers+0xae>

	return OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <safe_write_cfgr>:
*  				  from it to confirm successful write
******************************************************************************/
BMSstatus_t safe_write_cfgr(MCU *master, LTC6811 *slave_array, const Broadcast_t nbc, const ID_t id, const uint8_t *gpio,
		                const uint8_t refon, const uint8_t adcopt, const float uv_limit, const float ov_limit,
						const uint8_t *dcc, const uint8_t dcto, const uint8_t attempts)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b08e      	sub	sp, #56	; 0x38
 8004bc2:	af06      	add	r7, sp, #24
 8004bc4:	6178      	str	r0, [r7, #20]
 8004bc6:	6139      	str	r1, [r7, #16]
 8004bc8:	4611      	mov	r1, r2
 8004bca:	461a      	mov	r2, r3
 8004bcc:	ed87 0a02 	vstr	s0, [r7, #8]
 8004bd0:	edc7 0a01 	vstr	s1, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	73fb      	strb	r3, [r7, #15]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	73bb      	strb	r3, [r7, #14]

	write_cfgr(master, slave_array, nbc, id, gpio, refon, adcopt, uv_limit, ov_limit, dcc, dcto);
 8004bdc:	7bb9      	ldrb	r1, [r7, #14]
 8004bde:	7bfa      	ldrb	r2, [r7, #15]
 8004be0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004be4:	9304      	str	r3, [sp, #16]
 8004be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be8:	9303      	str	r3, [sp, #12]
 8004bea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004bee:	9302      	str	r3, [sp, #8]
 8004bf0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	edd7 0a01 	vldr	s1, [r7, #4]
 8004bfe:	ed97 0a02 	vldr	s0, [r7, #8]
 8004c02:	460b      	mov	r3, r1
 8004c04:	6939      	ldr	r1, [r7, #16]
 8004c06:	6978      	ldr	r0, [r7, #20]
 8004c08:	f000 f856 	bl	8004cb8 <write_cfgr>

	ID_t start_id;
	ID_t end_id;

	// The ID to be read will only be the requested ID from the function arguments
	if (nbc == NO_BC)
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d105      	bne.n	8004c1e <safe_write_cfgr+0x60>
	{
		start_id = id;
 8004c12:	7bbb      	ldrb	r3, [r7, #14]
 8004c14:	77fb      	strb	r3, [r7, #31]
		end_id = start_id + 1;
 8004c16:	7ffb      	ldrb	r3, [r7, #31]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	77bb      	strb	r3, [r7, #30]
 8004c1c:	e003      	b.n	8004c26 <safe_write_cfgr+0x68>
	}

	// The IDs to be read will be all the IDs present on the bus
	else
	{
		start_id = ID_0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	77fb      	strb	r3, [r7, #31]
		end_id = SLAVES_NUM;
 8004c22:	2310      	movs	r3, #16
 8004c24:	77bb      	strb	r3, [r7, #30]
	}

	for (ID_t counter_id = start_id; counter_id < end_id; ++counter_id)
 8004c26:	7ffb      	ldrb	r3, [r7, #31]
 8004c28:	777b      	strb	r3, [r7, #29]
 8004c2a:	e03c      	b.n	8004ca6 <safe_write_cfgr+0xe8>
	{
		uint8_t read_status = read(master, slave_array, counter_id, RDCFGA, attempts);
 8004c2c:	7f7a      	ldrb	r2, [r7, #29]
 8004c2e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	2302      	movs	r3, #2
 8004c36:	6939      	ldr	r1, [r7, #16]
 8004c38:	6978      	ldr	r0, [r7, #20]
 8004c3a:	f000 f98d 	bl	8004f58 <read>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	76fb      	strb	r3, [r7, #27]
		if (read_status != OK)
 8004c42:	7efb      	ldrb	r3, [r7, #27]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <safe_write_cfgr+0x8e>
			return read_status;
 8004c48:	7efb      	ldrb	r3, [r7, #27]
 8004c4a:	e031      	b.n	8004cb0 <safe_write_cfgr+0xf2>

		// checks if bytes 1 to 5 are the same
		for (uint8_t i = 1; i < 6; ++i)
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	773b      	strb	r3, [r7, #28]
 8004c50:	e012      	b.n	8004c78 <safe_write_cfgr+0xba>
			if (master->write_buf[i] != slave_array[id].tx_buf[i])
 8004c52:	7f3b      	ldrb	r3, [r7, #28]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4413      	add	r3, r2
 8004c58:	7e9a      	ldrb	r2, [r3, #26]
 8004c5a:	7bbb      	ldrb	r3, [r7, #14]
 8004c5c:	21d8      	movs	r1, #216	; 0xd8
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	6939      	ldr	r1, [r7, #16]
 8004c64:	4419      	add	r1, r3
 8004c66:	7f3b      	ldrb	r3, [r7, #28]
 8004c68:	5ccb      	ldrb	r3, [r1, r3]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d001      	beq.n	8004c72 <safe_write_cfgr+0xb4>
				return SAFE_WRITE_ERROR;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e01e      	b.n	8004cb0 <safe_write_cfgr+0xf2>
		for (uint8_t i = 1; i < 6; ++i)
 8004c72:	7f3b      	ldrb	r3, [r7, #28]
 8004c74:	3301      	adds	r3, #1
 8004c76:	773b      	strb	r3, [r7, #28]
 8004c78:	7f3b      	ldrb	r3, [r7, #28]
 8004c7a:	2b05      	cmp	r3, #5
 8004c7c:	d9e9      	bls.n	8004c52 <safe_write_cfgr+0x94>

		// checks if REFON and ADCOPT are the same
		if ((master->write_buf[0] & 0b101) != (slave_array[id].tx_buf[0] & 0b101))
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	7e9a      	ldrb	r2, [r3, #26]
 8004c82:	7bbb      	ldrb	r3, [r7, #14]
 8004c84:	21d8      	movs	r1, #216	; 0xd8
 8004c86:	fb01 f303 	mul.w	r3, r1, r3
 8004c8a:	6939      	ldr	r1, [r7, #16]
 8004c8c:	440b      	add	r3, r1
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	4053      	eors	r3, r2
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f003 0305 	and.w	r3, r3, #5
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <safe_write_cfgr+0xe2>
			return SAFE_WRITE_ERROR;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e007      	b.n	8004cb0 <safe_write_cfgr+0xf2>
	for (ID_t counter_id = start_id; counter_id < end_id; ++counter_id)
 8004ca0:	7f7b      	ldrb	r3, [r7, #29]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	777b      	strb	r3, [r7, #29]
 8004ca6:	7f7a      	ldrb	r2, [r7, #29]
 8004ca8:	7fbb      	ldrb	r3, [r7, #30]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d3be      	bcc.n	8004c2c <safe_write_cfgr+0x6e>
	}

	return OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3720      	adds	r7, #32
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <write_cfgr>:
*  @Description	  Writes to the Configuration Register Group
******************************************************************************/
void write_cfgr(MCU *master, LTC6811 *slave_array, const Broadcast_t nbc, const ID_t id, const uint8_t *gpio_pd,
		           const uint8_t refon, const uint8_t adcopt, const float uv_limit, const float ov_limit,
				   const uint8_t *dcc, const uint8_t dcto)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6178      	str	r0, [r7, #20]
 8004cc0:	6139      	str	r1, [r7, #16]
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	ed87 0a02 	vstr	s0, [r7, #8]
 8004cca:	edc7 0a01 	vstr	s1, [r7, #4]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	73fb      	strb	r3, [r7, #15]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	73bb      	strb	r3, [r7, #14]
	uint16_t vuv = uv_limit / 16 / ADC_RES - 1;
 8004cd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cda:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8004cde:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004ce2:	eddf 6a75 	vldr	s13, [pc, #468]	; 8004eb8 <write_cfgr+0x200>
 8004ce6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf6:	ee17 3a90 	vmov	r3, s15
 8004cfa:	837b      	strh	r3, [r7, #26]
	uint16_t vov = ov_limit / 16 / ADC_RES;
 8004cfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d00:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8004d04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004d08:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8004eb8 <write_cfgr+0x200>
 8004d0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d14:	ee17 3a90 	vmov	r3, s15
 8004d18:	833b      	strh	r3, [r7, #24]

	if (nbc == NO_BC)  // Non-Broadcast command
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d118      	bne.n	8004d52 <write_cfgr+0x9a>
		for (uint8_t i = 0; i < 5; ++i)
 8004d20:	2300      	movs	r3, #0
 8004d22:	77fb      	strb	r3, [r7, #31]
 8004d24:	e011      	b.n	8004d4a <write_cfgr+0x92>
			slave_array[id].gpio_pulldown[i] = gpio_pd[i];
 8004d26:	7ffb      	ldrb	r3, [r7, #31]
 8004d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d2a:	18d1      	adds	r1, r2, r3
 8004d2c:	7bbb      	ldrb	r3, [r7, #14]
 8004d2e:	22d8      	movs	r2, #216	; 0xd8
 8004d30:	fb02 f303 	mul.w	r3, r2, r3
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	441a      	add	r2, r3
 8004d38:	7ffb      	ldrb	r3, [r7, #31]
 8004d3a:	7809      	ldrb	r1, [r1, #0]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	460a      	mov	r2, r1
 8004d40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		for (uint8_t i = 0; i < 5; ++i)
 8004d44:	7ffb      	ldrb	r3, [r7, #31]
 8004d46:	3301      	adds	r3, #1
 8004d48:	77fb      	strb	r3, [r7, #31]
 8004d4a:	7ffb      	ldrb	r3, [r7, #31]
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d9ea      	bls.n	8004d26 <write_cfgr+0x6e>
 8004d50:	e020      	b.n	8004d94 <write_cfgr+0xdc>
	else
		for (uint8_t j = 0; j < SLAVES_NUM; ++j)
 8004d52:	2300      	movs	r3, #0
 8004d54:	77bb      	strb	r3, [r7, #30]
 8004d56:	e01a      	b.n	8004d8e <write_cfgr+0xd6>
			for (uint8_t i = 0; i < 5; ++i)
 8004d58:	2300      	movs	r3, #0
 8004d5a:	777b      	strb	r3, [r7, #29]
 8004d5c:	e011      	b.n	8004d82 <write_cfgr+0xca>
				slave_array[j].gpio_pulldown[i] = gpio_pd[i];
 8004d5e:	7f7b      	ldrb	r3, [r7, #29]
 8004d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d62:	18d1      	adds	r1, r2, r3
 8004d64:	7fbb      	ldrb	r3, [r7, #30]
 8004d66:	22d8      	movs	r2, #216	; 0xd8
 8004d68:	fb02 f303 	mul.w	r3, r2, r3
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	441a      	add	r2, r3
 8004d70:	7f7b      	ldrb	r3, [r7, #29]
 8004d72:	7809      	ldrb	r1, [r1, #0]
 8004d74:	4413      	add	r3, r2
 8004d76:	460a      	mov	r2, r1
 8004d78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			for (uint8_t i = 0; i < 5; ++i)
 8004d7c:	7f7b      	ldrb	r3, [r7, #29]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	777b      	strb	r3, [r7, #29]
 8004d82:	7f7b      	ldrb	r3, [r7, #29]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d9ea      	bls.n	8004d5e <write_cfgr+0xa6>
		for (uint8_t j = 0; j < SLAVES_NUM; ++j)
 8004d88:	7fbb      	ldrb	r3, [r7, #30]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	77bb      	strb	r3, [r7, #30]
 8004d8e:	7fbb      	ldrb	r3, [r7, #30]
 8004d90:	2b0f      	cmp	r3, #15
 8004d92:	d9e1      	bls.n	8004d58 <write_cfgr+0xa0>

	/* gpio_pulldown:    0: GPIOx Pull-Down ON, 1: GPIOx Pull-Down OFF */
	master->write_buf[0] =  0x00 | (gpio_pd[4] << 7) | (gpio_pd[3] << 6) | (gpio_pd[2] << 5) | (gpio_pd[1] << 4) | (gpio_pd[0] << 3) | (refon << 2) | adcopt;
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	3304      	adds	r3, #4
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	01db      	lsls	r3, r3, #7
 8004d9c:	b25a      	sxtb	r2, r3
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	3303      	adds	r3, #3
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	019b      	lsls	r3, r3, #6
 8004da6:	b25b      	sxtb	r3, r3
 8004da8:	4313      	orrs	r3, r2
 8004daa:	b25a      	sxtb	r2, r3
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	3302      	adds	r3, #2
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	015b      	lsls	r3, r3, #5
 8004db4:	b25b      	sxtb	r3, r3
 8004db6:	4313      	orrs	r3, r2
 8004db8:	b25a      	sxtb	r2, r3
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	b25b      	sxtb	r3, r3
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	b25a      	sxtb	r2, r3
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	b25b      	sxtb	r3, r3
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	b25a      	sxtb	r2, r3
 8004dd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	b25b      	sxtb	r3, r3
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	b25a      	sxtb	r2, r3
 8004de0:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8004de4:	4313      	orrs	r3, r2
 8004de6:	b25b      	sxtb	r3, r3
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	769a      	strb	r2, [r3, #26]
	master->write_buf[1] =  vuv;
 8004dee:	8b7b      	ldrh	r3, [r7, #26]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	76da      	strb	r2, [r3, #27]
	master->write_buf[2] = (vov << 4) | (vuv >> 8);
 8004df6:	8b3b      	ldrh	r3, [r7, #24]
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	b25a      	sxtb	r2, r3
 8004dfc:	8b7b      	ldrh	r3, [r7, #26]
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	b25b      	sxtb	r3, r3
 8004e04:	4313      	orrs	r3, r2
 8004e06:	b25b      	sxtb	r3, r3
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	771a      	strb	r2, [r3, #28]
	master->write_buf[3] = (vov >> 4);
 8004e0e:	8b3b      	ldrh	r3, [r7, #24]
 8004e10:	091b      	lsrs	r3, r3, #4
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	775a      	strb	r2, [r3, #29]
	master->write_buf[4] = 0x00 | (dcc[6] << 7) | (dcc[5] << 6) | (dcc[4] << 4) | (dcc[3] << 3) | (dcc[2] << 2) | (dcc[1] << 1) | dcc[0];
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1c:	3306      	adds	r3, #6
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	01db      	lsls	r3, r3, #7
 8004e22:	b25a      	sxtb	r2, r3
 8004e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e26:	3305      	adds	r3, #5
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	019b      	lsls	r3, r3, #6
 8004e2c:	b25b      	sxtb	r3, r3
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	b25a      	sxtb	r2, r3
 8004e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e34:	3304      	adds	r3, #4
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	b25b      	sxtb	r3, r3
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	b25a      	sxtb	r2, r3
 8004e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e42:	3303      	adds	r3, #3
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	b25b      	sxtb	r3, r3
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	b25a      	sxtb	r2, r3
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e50:	3302      	adds	r3, #2
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	b25b      	sxtb	r3, r3
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	b25a      	sxtb	r2, r3
 8004e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5e:	3301      	adds	r3, #1
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	b25b      	sxtb	r3, r3
 8004e66:	4313      	orrs	r3, r2
 8004e68:	b25a      	sxtb	r2, r3
 8004e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	b25b      	sxtb	r3, r3
 8004e70:	4313      	orrs	r3, r2
 8004e72:	b25b      	sxtb	r3, r3
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	779a      	strb	r2, [r3, #30]
	master->write_buf[5] = 0x00 | (dcto << 4)   | (dcc[8] << 1) | dcc[7];
 8004e7a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	b25a      	sxtb	r2, r3
 8004e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e84:	3308      	adds	r3, #8
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	b25b      	sxtb	r3, r3
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	b25a      	sxtb	r2, r3
 8004e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e92:	3307      	adds	r3, #7
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	b25b      	sxtb	r3, r3
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	b25b      	sxtb	r3, r3
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	77da      	strb	r2, [r3, #31]

	write_data(master, nbc, id, WRCFGA);
 8004ea2:	7bba      	ldrb	r2, [r7, #14]
 8004ea4:	7bf9      	ldrb	r1, [r7, #15]
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	6978      	ldr	r0, [r7, #20]
 8004eaa:	f001 f97e 	bl	80061aa <write_data>
}
 8004eae:	bf00      	nop
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	38d1b717 	.word	0x38d1b717

08004ebc <ADAX>:
}

/******************************************************************************
*  @Description   Creates the command for the ADC conversion of GPIOs and Vref2
*******************************************************************************/
uint16_t ADAX(const uint8_t MD, const uint8_t CHG) {
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	460a      	mov	r2, r1
 8004ec6:	71fb      	strb	r3, [r7, #7]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	71bb      	strb	r3, [r7, #6]
	return 0b10001100000 | (MD << 7) | CHG;
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	01db      	lsls	r3, r3, #7
 8004ed0:	b21b      	sxth	r3, r3
 8004ed2:	f443 638c 	orr.w	r3, r3, #1120	; 0x460
 8004ed6:	b21a      	sxth	r2, r3
 8004ed8:	79bb      	ldrb	r3, [r7, #6]
 8004eda:	b21b      	sxth	r3, r3
 8004edc:	4313      	orrs	r3, r2
 8004ede:	b21b      	sxth	r3, r3
 8004ee0:	b29b      	uxth	r3, r3
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <ADSTAT>:
}

/******************************************************************************
*  @Description   Creates the command for the ADC conversion of status registers
*******************************************************************************/
uint16_t ADSTAT(const uint8_t MD, const uint8_t CHST) {
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	460a      	mov	r2, r1
 8004ef8:	71fb      	strb	r3, [r7, #7]
 8004efa:	4613      	mov	r3, r2
 8004efc:	71bb      	strb	r3, [r7, #6]
	return 0b10001101000 | (MD << 7) | CHST;
 8004efe:	79fb      	ldrb	r3, [r7, #7]
 8004f00:	01db      	lsls	r3, r3, #7
 8004f02:	b21b      	sxth	r3, r3
 8004f04:	f443 638d 	orr.w	r3, r3, #1128	; 0x468
 8004f08:	b21a      	sxth	r2, r3
 8004f0a:	79bb      	ldrb	r3, [r7, #6]
 8004f0c:	b21b      	sxth	r3, r3
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	b21b      	sxth	r3, r3
 8004f12:	b29b      	uxth	r3, r3
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <ADCVSC>:

/*****************************************************************************
*  @Description   Creates the command for the ADC conversion of voltages &
*  				  the total voltage of the stack (sum of all cells - SC)
******************************************************************************/
uint16_t ADCVSC(const uint8_t MD, const uint8_t DCP) {
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	460a      	mov	r2, r1
 8004f2a:	71fb      	strb	r3, [r7, #7]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	71bb      	strb	r3, [r7, #6]
	return 0b10001100111 | (MD << 7) | (DCP << 4);
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	01db      	lsls	r3, r3, #7
 8004f34:	b21b      	sxth	r3, r3
 8004f36:	f443 638c 	orr.w	r3, r3, #1120	; 0x460
 8004f3a:	f043 0307 	orr.w	r3, r3, #7
 8004f3e:	b21a      	sxth	r2, r3
 8004f40:	79bb      	ldrb	r3, [r7, #6]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	b21b      	sxth	r3, r3
 8004f46:	4313      	orrs	r3, r2
 8004f48:	b21b      	sxth	r3, r3
 8004f4a:	b29b      	uxth	r3, r3
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <read>:
*  				  tramsits it and processes the data - updates the slave struct.
*  				  If the PEC (CRC received) is wrong, it retransmits the
*  				  command for attempt times and if it fails, returns error
******************************************************************************/
BMSstatus_t read(MCU *master, LTC6811 *slave_array, const ID_t id, const uint16_t address, const uint8_t attempts)
{
 8004f58:	b590      	push	{r4, r7, lr}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4611      	mov	r1, r2
 8004f64:	461a      	mov	r2, r3
 8004f66:	460b      	mov	r3, r1
 8004f68:	71fb      	strb	r3, [r7, #7]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80bb      	strh	r3, [r7, #4]
	for (uint8_t counter = 0; counter < attempts; ++counter) {
 8004f6e:	2300      	movs	r3, #0
 8004f70:	75fb      	strb	r3, [r7, #23]
 8004f72:	e01b      	b.n	8004fac <read+0x54>

		// read_data gets a reference of the specific slave
		master->read_status[counter] = read_data(master, &slave_array[id], id, address);
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	22d8      	movs	r2, #216	; 0xd8
 8004f78:	fb02 f303 	mul.w	r3, r2, r3
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	18d1      	adds	r1, r2, r3
 8004f80:	7dfc      	ldrb	r4, [r7, #23]
 8004f82:	88bb      	ldrh	r3, [r7, #4]
 8004f84:	79fa      	ldrb	r2, [r7, #7]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 ffcc 	bl	8005f24 <read_data>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	461a      	mov	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4423      	add	r3, r4
 8004f94:	741a      	strb	r2, [r3, #16]
		if(master->read_status[counter] == OK)
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	7c1b      	ldrb	r3, [r3, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <read+0x4e>
			return OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e008      	b.n	8004fb8 <read+0x60>
	for (uint8_t counter = 0; counter < attempts; ++counter) {
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	75fb      	strb	r3, [r7, #23]
 8004fac:	7dfa      	ldrb	r2, [r7, #23]
 8004fae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d3de      	bcc.n	8004f74 <read+0x1c>
	}
	return READ_ERROR;
 8004fb6:	2302      	movs	r3, #2
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd90      	pop	{r4, r7, pc}

08004fc0 <process_read_data>:
/*****************************************************************************
*  @Description   Gets the data received from a specific register of the chip
*  				  and updates the respective struct (slave_array[id])
******************************************************************************/
void process_read_data(LTC6811 *slave, const uint16_t address)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	807b      	strh	r3, [r7, #2]
	switch (address){
 8004fcc:	887b      	ldrh	r3, [r7, #2]
 8004fce:	3b02      	subs	r3, #2
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	f200 83e5 	bhi.w	80057a0 <process_read_data+0x7e0>
 8004fd6:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <process_read_data+0x1c>)
 8004fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fdc:	08005061 	.word	0x08005061
 8004fe0:	080057a1 	.word	0x080057a1
 8004fe4:	08005215 	.word	0x08005215
 8004fe8:	080057a1 	.word	0x080057a1
 8004fec:	08005283 	.word	0x08005283
 8004ff0:	080057a1 	.word	0x080057a1
 8004ff4:	080052cd 	.word	0x080052cd
 8004ff8:	080057a1 	.word	0x080057a1
 8004ffc:	0800533b 	.word	0x0800533b
 8005000:	080057a1 	.word	0x080057a1
 8005004:	08005361 	.word	0x08005361
 8005008:	080057a1 	.word	0x080057a1
 800500c:	080053b3 	.word	0x080053b3
 8005010:	080057a1 	.word	0x080057a1
 8005014:	0800542f 	.word	0x0800542f
 8005018:	080057a1 	.word	0x080057a1
 800501c:	080054d7 	.word	0x080054d7
 8005020:	080057a1 	.word	0x080057a1
 8005024:	080057a1 	.word	0x080057a1
 8005028:	080057a1 	.word	0x080057a1
 800502c:	08005671 	.word	0x08005671
 8005030:	080057a1 	.word	0x080057a1
 8005034:	080057a1 	.word	0x080057a1
 8005038:	080057a1 	.word	0x080057a1
 800503c:	080057a1 	.word	0x080057a1
 8005040:	080057a1 	.word	0x080057a1
 8005044:	080057a1 	.word	0x080057a1
 8005048:	080057a1 	.word	0x080057a1
 800504c:	080057a1 	.word	0x080057a1
 8005050:	080057a1 	.word	0x080057a1
 8005054:	080057a1 	.word	0x080057a1
 8005058:	080057a1 	.word	0x080057a1
 800505c:	08005715 	.word	0x08005715

		case RDCFGA:
			slave->adcopt 		=  slave->tx_buf[0]       & 0x01;		/* ADC option bit */
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	b2da      	uxtb	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			slave->dten  		= (slave->tx_buf[0] >> 1) & 0x01;		/* Discharge timer enable */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	b2da      	uxtb	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			slave->refon 		= (slave->tx_buf[0] >> 2) & 0x01;		/* Set this bit for REFUP state */
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	089b      	lsrs	r3, r3, #2
 800508a:	b2db      	uxtb	r3, r3
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	b2da      	uxtb	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

			slave->gpio_level[0]  	= (slave->tx_buf[0] >> 3) & 0x01;	/* GPIO pull-downs */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	08db      	lsrs	r3, r3, #3
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			slave->gpio_level[1]  	= (slave->tx_buf[0] >> 4) & 0x01;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	091b      	lsrs	r3, r3, #4
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			slave->gpio_level[2]  	= (slave->tx_buf[0] >> 5) & 0x01;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			slave->gpio_level[3]  	= (slave->tx_buf[0] >> 6) & 0x01;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	099b      	lsrs	r3, r3, #6
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			slave->gpio_level[4]  	= (slave->tx_buf[0] >> 7) & 0x01;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	09db      	lsrs	r3, r3, #7
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

			// The OV, UV thresholds have a resolution of 1.6mV
			uint16_t min_v		= (slave->tx_buf[1] | (slave->tx_buf[2] << 8)) & 0x0FFF;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	785b      	ldrb	r3, [r3, #1]
 80050fa:	b21a      	sxth	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	789b      	ldrb	r3, [r3, #2]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	b21b      	sxth	r3, r3
 8005104:	4313      	orrs	r3, r2
 8005106:	b21b      	sxth	r3, r3
 8005108:	b29b      	uxth	r3, r3
 800510a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800510e:	81bb      	strh	r3, [r7, #12]
			slave->min_v        = (min_v + 1) * 16 * ADC_RES;
 8005110:	89bb      	ldrh	r3, [r7, #12]
 8005112:	3301      	adds	r3, #1
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800511e:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80053b8 <process_read_data+0x3f8>
 8005122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			uint16_t max_v      = (slave->tx_buf[2] >> 4) | (slave->tx_buf[3] << 4);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	789b      	ldrb	r3, [r3, #2]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	b2db      	uxtb	r3, r3
 8005134:	b21a      	sxth	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	78db      	ldrb	r3, [r3, #3]
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	b21b      	sxth	r3, r3
 800513e:	4313      	orrs	r3, r2
 8005140:	b21b      	sxth	r3, r3
 8005142:	817b      	strh	r3, [r7, #10]
			slave->max_v		=  max_v * 16 * ADC_RES;
 8005144:	897b      	ldrh	r3, [r7, #10]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	ee07 3a90 	vmov	s15, r3
 800514c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005150:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80053b8 <process_read_data+0x3f8>
 8005154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			slave->dcc[0]		=  slave->tx_buf[4]       & 0x01;		/* Discharge C1  - CELL1 */
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	791b      	ldrb	r3, [r3, #4]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	b2da      	uxtb	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			slave->dcc[1]		= (slave->tx_buf[4] >> 1) & 0x01;		/* Discharge C2  - CELL2 */
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	791b      	ldrb	r3, [r3, #4]
 8005172:	085b      	lsrs	r3, r3, #1
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	b2da      	uxtb	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			slave->dcc[2]		= (slave->tx_buf[4] >> 2) & 0x01;		/* Discharge C3  - CELL3 */
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	791b      	ldrb	r3, [r3, #4]
 8005186:	089b      	lsrs	r3, r3, #2
 8005188:	b2db      	uxtb	r3, r3
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	b2da      	uxtb	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			slave->dcc[3]		= (slave->tx_buf[4] >> 3) & 0x01;		/* Discharge C4  - CELL4 */
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	791b      	ldrb	r3, [r3, #4]
 800519a:	08db      	lsrs	r3, r3, #3
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			slave->dcc[4]		= (slave->tx_buf[4] >> 4) & 0x01;		/* Discharge C5  - CELL5 */
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	791b      	ldrb	r3, [r3, #4]
 80051ae:	091b      	lsrs	r3, r3, #4
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			slave->dcc[5]		= (slave->tx_buf[4] >> 6) & 0x01;		/* Discharge C7  - CELL6 */
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	791b      	ldrb	r3, [r3, #4]
 80051c2:	099b      	lsrs	r3, r3, #6
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			slave->dcc[6]		= (slave->tx_buf[4] >> 7) & 0x01;		/* Discharge C8  - CELL7 */
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	791b      	ldrb	r3, [r3, #4]
 80051d6:	09db      	lsrs	r3, r3, #7
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			slave->dcc[7]		=  slave->tx_buf[5]       & 0x01;		/* Discharge C9  - CELL8 */
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	795b      	ldrb	r3, [r3, #5]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			slave->dcc[8]		= (slave->tx_buf[5] >> 1) & 0x01;		/* Discharge C10 - CELL9 */
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	795b      	ldrb	r3, [r3, #5]
 80051f4:	085b      	lsrs	r3, r3, #1
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

			slave->dcto			= (slave->tx_buf[5] >> 4) & 0x0F;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	795b      	ldrb	r3, [r3, #5]
 8005208:	091b      	lsrs	r3, r3, #4
 800520a:	b2da      	uxtb	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
			break;
 8005212:	e2c5      	b.n	80057a0 <process_read_data+0x7e0>

		case RDCVA:
			slave->voltage[0] = (slave->tx_buf[0] | (slave->tx_buf[1] << 8)) * ADC_RES;		/* C0-1 ---> Cell_1 */
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	4313      	orrs	r3, r2
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800522a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80053b8 <process_read_data+0x3f8>
 800522e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			slave->voltage[1] = (slave->tx_buf[2] | (slave->tx_buf[3] << 8)) * ADC_RES;		/* C1-2 ---> Cell_2 */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	789b      	ldrb	r3, [r3, #2]
 800523c:	461a      	mov	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	78db      	ldrb	r3, [r3, #3]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	4313      	orrs	r3, r2
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800524e:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80053b8 <process_read_data+0x3f8>
 8005252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			slave->voltage[2] = (slave->tx_buf[4] | (slave->tx_buf[5] << 8)) * ADC_RES;		/* C2-3 ---> Cell_3 */
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	791b      	ldrb	r3, [r3, #4]
 8005260:	461a      	mov	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	795b      	ldrb	r3, [r3, #5]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	4313      	orrs	r3, r2
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005272:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80053b8 <process_read_data+0x3f8>
 8005276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			break;
 8005280:	e28e      	b.n	80057a0 <process_read_data+0x7e0>

		case RDCVB:
			slave->voltage[3] = (slave->tx_buf[0] | (slave->tx_buf[1] << 8)) * ADC_RES;		/* C3-4 ---> Cell_4 */
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	4313      	orrs	r3, r2
 8005290:	ee07 3a90 	vmov	s15, r3
 8005294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005298:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80053b8 <process_read_data+0x3f8>
 800529c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			slave->voltage[4] = (slave->tx_buf[2] | (slave->tx_buf[3] << 8)) * ADC_RES;		/* C4-5 ---> Cell_5 */
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	789b      	ldrb	r3, [r3, #2]
 80052aa:	461a      	mov	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	78db      	ldrb	r3, [r3, #3]
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	4313      	orrs	r3, r2
 80052b4:	ee07 3a90 	vmov	s15, r3
 80052b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052bc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80053b8 <process_read_data+0x3f8>
 80052c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			break;
 80052ca:	e269      	b.n	80057a0 <process_read_data+0x7e0>

		case RDCVC:
			slave->voltage[5] = (slave->tx_buf[0] | (slave->tx_buf[1] << 8)) * ADC_RES;		/* C6-7 ---> Cell_6 */
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	461a      	mov	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	785b      	ldrb	r3, [r3, #1]
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	4313      	orrs	r3, r2
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052e2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80053b8 <process_read_data+0x3f8>
 80052e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			slave->voltage[6] = (slave->tx_buf[2] | (slave->tx_buf[3] << 8)) * ADC_RES;		/* C7-8 ---> Cell_7 */
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	789b      	ldrb	r3, [r3, #2]
 80052f4:	461a      	mov	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	78db      	ldrb	r3, [r3, #3]
 80052fa:	021b      	lsls	r3, r3, #8
 80052fc:	4313      	orrs	r3, r2
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005306:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80053b8 <process_read_data+0x3f8>
 800530a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			slave->voltage[7] = (slave->tx_buf[4] | (slave->tx_buf[5] << 8)) * ADC_RES;		/* C8-9 ---> Cell_8 */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	791b      	ldrb	r3, [r3, #4]
 8005318:	461a      	mov	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	795b      	ldrb	r3, [r3, #5]
 800531e:	021b      	lsls	r3, r3, #8
 8005320:	4313      	orrs	r3, r2
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800532a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80053b8 <process_read_data+0x3f8>
 800532e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			break;
 8005338:	e232      	b.n	80057a0 <process_read_data+0x7e0>

		case RDCVD:
			slave->voltage[8] = (slave->tx_buf[0] | (slave->tx_buf[1] << 8)) * ADC_RES;		/* C9-10 ---> Cell_9 */
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	021b      	lsls	r3, r3, #8
 8005346:	4313      	orrs	r3, r2
 8005348:	ee07 3a90 	vmov	s15, r3
 800534c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005350:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80053b8 <process_read_data+0x3f8>
 8005354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			break;
 800535e:	e21f      	b.n	80057a0 <process_read_data+0x7e0>

		case RDAUXA:
			for (uint8_t i = 0; (i < 3) && (i < NTCS_NUM); ++i)
 8005360:	2300      	movs	r3, #0
 8005362:	73fb      	strb	r3, [r7, #15]
 8005364:	e01d      	b.n	80053a2 <process_read_data+0x3e2>
				slave->gpio_voltage[i] = (slave->tx_buf[2 * i] | (slave->tx_buf[2 * i + 1] << 8)) * ADC_RES;
 8005366:	7bfb      	ldrb	r3, [r7, #15]
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	5cd3      	ldrb	r3, [r2, r3]
 800536e:	4619      	mov	r1, r3
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	3301      	adds	r3, #1
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	5cd3      	ldrb	r3, [r2, r3]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	430b      	orrs	r3, r1
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80053b8 <process_read_data+0x3f8>
 800538c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	331c      	adds	r3, #28
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	edc3 7a00 	vstr	s15, [r3]
			for (uint8_t i = 0; (i < 3) && (i < NTCS_NUM); ++i)
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	3301      	adds	r3, #1
 80053a0:	73fb      	strb	r3, [r7, #15]
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	f200 81fa 	bhi.w	800579e <process_read_data+0x7de>
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	d9da      	bls.n	8005366 <process_read_data+0x3a6>

			// slave->gpio_voltage[0] = (slave->tx_buf[0] | (slave->tx_buf[1] << 8)) * ADC_RES;		/* GPIO 1 */
			// slave->gpio_voltage[1] = (slave->tx_buf[2] | (slave->tx_buf[3] << 8)) * ADC_RES;		/* GPIO 2 */
			// slave->gpio_voltage[2] = (slave->tx_buf[4] | (slave->tx_buf[5] << 8)) * ADC_RES;		/* GPIO 3 */
			break;
 80053b0:	e1f5      	b.n	800579e <process_read_data+0x7de>

		case RDAUXB:
			for (uint8_t i = 3; (i < 5) && (i < NTCS_NUM); ++i)
 80053b2:	2303      	movs	r3, #3
 80053b4:	73bb      	strb	r3, [r7, #14]
 80053b6:	e021      	b.n	80053fc <process_read_data+0x43c>
 80053b8:	38d1b717 	.word	0x38d1b717
				slave->gpio_voltage[i] = (slave->tx_buf[2 * (i - 3)] | (slave->tx_buf[2 * (i - 3) + 1] << 8)) * ADC_RES;
 80053bc:	7bbb      	ldrb	r3, [r7, #14]
 80053be:	3b03      	subs	r3, #3
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	5cd3      	ldrb	r3, [r2, r3]
 80053c6:	4619      	mov	r1, r3
 80053c8:	7bbb      	ldrb	r3, [r7, #14]
 80053ca:	3b03      	subs	r3, #3
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	3301      	adds	r3, #1
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	5cd3      	ldrb	r3, [r2, r3]
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	430b      	orrs	r3, r1
 80053d8:	ee07 3a90 	vmov	s15, r3
 80053dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053e0:	7bbb      	ldrb	r3, [r7, #14]
 80053e2:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 80053b8 <process_read_data+0x3f8>
 80053e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	331c      	adds	r3, #28
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	edc3 7a00 	vstr	s15, [r3]
			for (uint8_t i = 3; (i < 5) && (i < NTCS_NUM); ++i)
 80053f6:	7bbb      	ldrb	r3, [r7, #14]
 80053f8:	3301      	adds	r3, #1
 80053fa:	73bb      	strb	r3, [r7, #14]
 80053fc:	7bbb      	ldrb	r3, [r7, #14]
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d802      	bhi.n	8005408 <process_read_data+0x448>
 8005402:	7bbb      	ldrb	r3, [r7, #14]
 8005404:	2b04      	cmp	r3, #4
 8005406:	d9d9      	bls.n	80053bc <process_read_data+0x3fc>

			// slave->gpio_voltage[3] 	= (slave->tx_buf[0] | (slave->tx_buf[1] << 8)) * ADC_RES;		/* GPIO 4 */
			// slave->gpio_voltage[4] 	= (slave->tx_buf[2] | (slave->tx_buf[3] << 8)) * ADC_RES;		/* GPIO 5 */
			slave->vref2	= (slave->tx_buf[4] | (slave->tx_buf[5] << 8)) * ADC_RES;		/* V_REF2 */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	791b      	ldrb	r3, [r3, #4]
 800540c:	461a      	mov	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	795b      	ldrb	r3, [r3, #5]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	4313      	orrs	r3, r2
 8005416:	ee07 3a90 	vmov	s15, r3
 800541a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800541e:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 80053b8 <process_read_data+0x3f8>
 8005422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
			break;
 800542c:	e1b8      	b.n	80057a0 <process_read_data+0x7e0>

		case RDSTATA:
			slave->sc 	= (slave->tx_buf[0] | slave->tx_buf[1] << 8) * ADC_RES * 20;					/* Sum of all cells */
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	4313      	orrs	r3, r2
 800543c:	ee07 3a90 	vmov	s15, r3
 8005440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005444:	ed1f 7a24 	vldr	s14, [pc, #-144]	; 80053b8 <process_read_data+0x3f8>
 8005448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800544c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
			slave->itmp	= (slave->tx_buf[2] | slave->tx_buf[3] << 8) * ADC_RES / 0.0075 - 273;	/* Internal Temperature */
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	789b      	ldrb	r3, [r3, #2]
 800545e:	461a      	mov	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	78db      	ldrb	r3, [r3, #3]
 8005464:	021b      	lsls	r3, r3, #8
 8005466:	4313      	orrs	r3, r2
 8005468:	ee07 3a90 	vmov	s15, r3
 800546c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005470:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 80053b8 <process_read_data+0x3f8>
 8005474:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005478:	ee17 0a90 	vmov	r0, s15
 800547c:	f7fb f864 	bl	8000548 <__aeabi_f2d>
 8005480:	a3a0      	add	r3, pc, #640	; (adr r3, 8005704 <process_read_data+0x744>)
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	f7fb f9e1 	bl	800084c <__aeabi_ddiv>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4610      	mov	r0, r2
 8005490:	4619      	mov	r1, r3
 8005492:	a39e      	add	r3, pc, #632	; (adr r3, 800570c <process_read_data+0x74c>)
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	f7fa fef6 	bl	8000288 <__aeabi_dsub>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4610      	mov	r0, r2
 80054a2:	4619      	mov	r1, r3
 80054a4:	f7fb fba0 	bl	8000be8 <__aeabi_d2f>
 80054a8:	4602      	mov	r2, r0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			slave->va	= (slave->tx_buf[4] | slave->tx_buf[5] << 8) * ADC_RES;						/* Analog Supply voltage */
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	791b      	ldrb	r3, [r3, #4]
 80054b4:	461a      	mov	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	795b      	ldrb	r3, [r3, #5]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	4313      	orrs	r3, r2
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054c6:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8005700 <process_read_data+0x740>
 80054ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
			break;
 80054d4:	e164      	b.n	80057a0 <process_read_data+0x7e0>

		case RDSTATB:
			slave->vd 	= (slave->tx_buf[0] | slave->tx_buf[1] << 8) * ADC_RES;		/* Digital Supply voltage */
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	785b      	ldrb	r3, [r3, #1]
 80054e0:	021b      	lsls	r3, r3, #8
 80054e2:	4313      	orrs	r3, r2
 80054e4:	ee07 3a90 	vmov	s15, r3
 80054e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054ec:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8005700 <process_read_data+0x740>
 80054f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac

			slave->uv_flag[0] =  slave->tx_buf[2]       & 0x01;		/* Under-voltage cell 1: C1UV  */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	789b      	ldrb	r3, [r3, #2]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	b2da      	uxtb	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
			slave->uv_flag[1] = (slave->tx_buf[2] >> 2) & 0x01;		/* Under-voltage cell 2: C2UV  */
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	789b      	ldrb	r3, [r3, #2]
 800550e:	089b      	lsrs	r3, r3, #2
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	b2da      	uxtb	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			slave->uv_flag[2] = (slave->tx_buf[2] >> 4) & 0x01;		/* Under-voltage cell 3: C3UV  */
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	789b      	ldrb	r3, [r3, #2]
 8005522:	091b      	lsrs	r3, r3, #4
 8005524:	b2db      	uxtb	r3, r3
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	b2da      	uxtb	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
			slave->uv_flag[3] = (slave->tx_buf[2] >> 6) & 0x01;		/* Under-voltage cell 4: C4UV  */
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	789b      	ldrb	r3, [r3, #2]
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	b2db      	uxtb	r3, r3
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	b2da      	uxtb	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
			slave->uv_flag[4] =  slave->tx_buf[3]       & 0x01;		/* Under-voltage cell 5: C5UV  */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	78db      	ldrb	r3, [r3, #3]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	b2da      	uxtb	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
			slave->uv_flag[5] = (slave->tx_buf[3] >> 4) & 0x01;		/* Under-voltage cell 6: C7UV  */
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	78db      	ldrb	r3, [r3, #3]
 800555a:	091b      	lsrs	r3, r3, #4
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	b2da      	uxtb	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			slave->uv_flag[6] = (slave->tx_buf[3] >> 6) & 0x01;		/* Under-voltage cell 7: C8UV  */
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	78db      	ldrb	r3, [r3, #3]
 800556e:	099b      	lsrs	r3, r3, #6
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	b2da      	uxtb	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
			slave->uv_flag[7] =  slave->tx_buf[4]       & 0x01;		/* Under-voltage cell 8: C9UV  */
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	791b      	ldrb	r3, [r3, #4]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	b2da      	uxtb	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
			slave->uv_flag[8] = (slave->tx_buf[4] >> 2) & 0x01;		/* Under-voltage cell 9: C10UV */
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	791b      	ldrb	r3, [r3, #4]
 8005592:	089b      	lsrs	r3, r3, #2
 8005594:	b2db      	uxtb	r3, r3
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	b2da      	uxtb	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			slave->ov_flag[0] = (slave->tx_buf[2] >> 1) & 0x01;		/* Over-voltage cell 1: C1OV  */
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	789b      	ldrb	r3, [r3, #2]
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			slave->ov_flag[1] = (slave->tx_buf[2] >> 3) & 0x01;		/* Over-voltage cell 2: C2OV  */
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	789b      	ldrb	r3, [r3, #2]
 80055ba:	08db      	lsrs	r3, r3, #3
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
			slave->ov_flag[2] = (slave->tx_buf[2] >> 5) & 0x01;		/* Over-voltage cell 3: C3OV  */
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	789b      	ldrb	r3, [r3, #2]
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			slave->ov_flag[3] = (slave->tx_buf[2] >> 7) & 0x01;		/* Over-voltage cell 4: C4OV  */
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	789b      	ldrb	r3, [r3, #2]
 80055e2:	09db      	lsrs	r3, r3, #7
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
			slave->ov_flag[4] = (slave->tx_buf[3] >> 1) & 0x01;		/* Over-voltage cell 5: C5OV  */
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	78db      	ldrb	r3, [r3, #3]
 80055f0:	085b      	lsrs	r3, r3, #1
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			slave->ov_flag[5] = (slave->tx_buf[3] >> 5) & 0x01;		/* Over-voltage cell 6: C7OV  */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	78db      	ldrb	r3, [r3, #3]
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	b2da      	uxtb	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
			slave->ov_flag[6] = (slave->tx_buf[3] >> 7) & 0x01;		/* Over-voltage cell 7: C8OV  */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	78db      	ldrb	r3, [r3, #3]
 8005618:	09db      	lsrs	r3, r3, #7
 800561a:	b2da      	uxtb	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
			slave->ov_flag[7] = (slave->tx_buf[4] >> 1) & 0x01;		/* Over-voltage cell 8: C9OV  */
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	791b      	ldrb	r3, [r3, #4]
 8005626:	085b      	lsrs	r3, r3, #1
 8005628:	b2db      	uxtb	r3, r3
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	b2da      	uxtb	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
			slave->ov_flag[8] = (slave->tx_buf[4] >> 3) & 0x01;		/* Over-voltage cell 9: C10OV */
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	791b      	ldrb	r3, [r3, #4]
 800563a:	08db      	lsrs	r3, r3, #3
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	b2da      	uxtb	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

			slave->muxfail 	  = (slave->tx_buf[5] >> 1) & 0x01;		/* Multiplexer fail */
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	795b      	ldrb	r3, [r3, #5]
 800564e:	085b      	lsrs	r3, r3, #1
 8005650:	b2db      	uxtb	r3, r3
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	b2da      	uxtb	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
			slave->thsd		  =  slave->tx_buf[5] & 0x01;			/* Thermal-Shutdown */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	795b      	ldrb	r3, [r3, #5]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	b2da      	uxtb	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
			break;
 800566e:	e097      	b.n	80057a0 <process_read_data+0x7e0>

		case RDSCTRL:
			slave->sctrl[0] = slave->tx_buf[0]  & 0x0F;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	f003 030f 	and.w	r3, r3, #15
 8005678:	b2da      	uxtb	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			slave->sctrl[1] = (slave->tx_buf[0] & 0xF0) >> 4;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	091b      	lsrs	r3, r3, #4
 8005686:	b2da      	uxtb	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
			slave->sctrl[2] = slave->tx_buf[1] & 0x0F;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	785b      	ldrb	r3, [r3, #1]
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	b2da      	uxtb	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
			slave->sctrl[3] = (slave->tx_buf[1] & 0xF0) >> 4;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	091b      	lsrs	r3, r3, #4
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
			slave->sctrl[4] = slave->tx_buf[2] & 0x0F;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	789b      	ldrb	r3, [r3, #2]
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			slave->sctrl[5] = slave->tx_buf[3] & 0x0F;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	78db      	ldrb	r3, [r3, #3]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			slave->sctrl[6] = (slave->tx_buf[3] & 0xF0) >> 4;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	78db      	ldrb	r3, [r3, #3]
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
			slave->sctrl[7] = slave->tx_buf[4] & 0x0F;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	791b      	ldrb	r3, [r3, #4]
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
			slave->sctrl[8] = (slave->tx_buf[4] & 0xF0) >> 4;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	791b      	ldrb	r3, [r3, #4]
 80056ee:	091b      	lsrs	r3, r3, #4
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
			break;
 80056f8:	e052      	b.n	80057a0 <process_read_data+0x7e0>
 80056fa:	bf00      	nop
 80056fc:	f3af 8000 	nop.w
 8005700:	38d1b717 	.word	0x38d1b717
 8005704:	eb851eb8 	.word	0xeb851eb8
 8005708:	3f7eb851 	.word	0x3f7eb851
 800570c:	00000000 	.word	0x00000000
 8005710:	40711000 	.word	0x40711000

		case RDPWM:
			slave->pwm[0] = slave->tx_buf[0] & 0x0F;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	f003 030f 	and.w	r3, r3, #15
 800571c:	b2da      	uxtb	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
			slave->pwm[1] = (slave->tx_buf[0] & 0xF0) >> 4;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	091b      	lsrs	r3, r3, #4
 800572a:	b2da      	uxtb	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
			slave->pwm[2] = slave->tx_buf[1] & 0x0F;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	b2da      	uxtb	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
			slave->pwm[3] = (slave->tx_buf[1] & 0xF0) >> 4;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	091b      	lsrs	r3, r3, #4
 8005748:	b2da      	uxtb	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
			slave->pwm[4] = slave->tx_buf[2] & 0x0F;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	789b      	ldrb	r3, [r3, #2]
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	b2da      	uxtb	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
			slave->pwm[5] = slave->tx_buf[3] & 0x0F;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	78db      	ldrb	r3, [r3, #3]
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	b2da      	uxtb	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
			slave->pwm[6] = (slave->tx_buf[3] & 0xF0) >> 4;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	78db      	ldrb	r3, [r3, #3]
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	b2da      	uxtb	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
			slave->pwm[7] = slave->tx_buf[4] & 0x0F;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	791b      	ldrb	r3, [r3, #4]
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	b2da      	uxtb	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
			slave->pwm[8] = (slave->tx_buf[4] & 0xF0) >> 4;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	791b      	ldrb	r3, [r3, #4]
 8005792:	091b      	lsrs	r3, r3, #4
 8005794:	b2da      	uxtb	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
			break;
 800579c:	e000      	b.n	80057a0 <process_read_data+0x7e0>
			break;
 800579e:	bf00      	nop
	}
}
 80057a0:	bf00      	nop
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <ntc_rh_init>:
*  @Description   Gets as input the characteristics of the voltage divider
*  				  and the Resistance - Temperature curve of the NTCs used and
*  				  creates the Voltage - Temperature curve. Called only once
******************************************************************************/
bool ntc_rh_init(LTC6811 *slave_array, const float *ntc_resistance, float *ntc_voltage, const float vref, const uint32_t resistor_kOhm, const uint16_t length)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b089      	sub	sp, #36	; 0x24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6178      	str	r0, [r7, #20]
 80057b0:	6139      	str	r1, [r7, #16]
 80057b2:	60fa      	str	r2, [r7, #12]
 80057b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80057b8:	607b      	str	r3, [r7, #4]
	for (uint16_t i = 0; i < length; ++i)
 80057ba:	2300      	movs	r3, #0
 80057bc:	83fb      	strh	r3, [r7, #30]
 80057be:	e021      	b.n	8005804 <ntc_rh_init+0x5c>
		ntc_voltage[i] = vref * ntc_resistance[i] / (ntc_resistance[i] + resistor_kOhm);
 80057c0:	8bfb      	ldrh	r3, [r7, #30]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4413      	add	r3, r2
 80057c8:	ed93 7a00 	vldr	s14, [r3]
 80057cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80057d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80057d4:	8bfb      	ldrh	r3, [r7, #30]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4413      	add	r3, r2
 80057dc:	ed93 7a00 	vldr	s14, [r3]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057ee:	8bfb      	ldrh	r3, [r7, #30]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057fa:	edc3 7a00 	vstr	s15, [r3]
	for (uint16_t i = 0; i < length; ++i)
 80057fe:	8bfb      	ldrh	r3, [r7, #30]
 8005800:	3301      	adds	r3, #1
 8005802:	83fb      	strh	r3, [r7, #30]
 8005804:	8bfa      	ldrh	r2, [r7, #30]
 8005806:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005808:	429a      	cmp	r2, r3
 800580a:	d3d9      	bcc.n	80057c0 <ntc_rh_init+0x18>

	bool init_ok = true;
 800580c:	2301      	movs	r3, #1
 800580e:	777b      	strb	r3, [r7, #29]

	/* The following checks if the ntc_to_cell_position[][] array has been written correctly by the programmer */
	for (uint8_t id = 0; id < SLAVES_NUM; ++id)
 8005810:	2300      	movs	r3, #0
 8005812:	773b      	strb	r3, [r7, #28]
 8005814:	e04c      	b.n	80058b0 <ntc_rh_init+0x108>
	{
		for (uint8_t ntc = 0; ntc < NTCS_NUM - 1; ++ntc)
 8005816:	2300      	movs	r3, #0
 8005818:	76fb      	strb	r3, [r7, #27]
 800581a:	e01a      	b.n	8005852 <ntc_rh_init+0xaa>
			if ((ntc_to_cell_position[id][ntc] < 1) || (ntc_to_cell_position[id][ntc] > 144))
 800581c:	7f3a      	ldrb	r2, [r7, #28]
 800581e:	7ef9      	ldrb	r1, [r7, #27]
 8005820:	4828      	ldr	r0, [pc, #160]	; (80058c4 <ntc_rh_init+0x11c>)
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	4403      	add	r3, r0
 800582a:	440b      	add	r3, r1
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <ntc_rh_init+0xa0>
 8005832:	7f3a      	ldrb	r2, [r7, #28]
 8005834:	7ef9      	ldrb	r1, [r7, #27]
 8005836:	4823      	ldr	r0, [pc, #140]	; (80058c4 <ntc_rh_init+0x11c>)
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	4403      	add	r3, r0
 8005840:	440b      	add	r3, r1
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b90      	cmp	r3, #144	; 0x90
 8005846:	d901      	bls.n	800584c <ntc_rh_init+0xa4>
				init_ok = false;
 8005848:	2300      	movs	r3, #0
 800584a:	777b      	strb	r3, [r7, #29]
		for (uint8_t ntc = 0; ntc < NTCS_NUM - 1; ++ntc)
 800584c:	7efb      	ldrb	r3, [r7, #27]
 800584e:	3301      	adds	r3, #1
 8005850:	76fb      	strb	r3, [r7, #27]
 8005852:	7efb      	ldrb	r3, [r7, #27]
 8005854:	2b03      	cmp	r3, #3
 8005856:	d9e1      	bls.n	800581c <ntc_rh_init+0x74>

		if (ntc_to_cell_position[id][NTCS_NUM - 1] != 255)
 8005858:	7f3a      	ldrb	r2, [r7, #28]
 800585a:	491a      	ldr	r1, [pc, #104]	; (80058c4 <ntc_rh_init+0x11c>)
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	440b      	add	r3, r1
 8005864:	3304      	adds	r3, #4
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2bff      	cmp	r3, #255	; 0xff
 800586a:	d01e      	beq.n	80058aa <ntc_rh_init+0x102>
		{
			slave_array[id].humidity = 0xFF; // Since humidity is a percentage from 0 to 100, the value 0xFF = 255 shows that there is no RH sensor on the slave
 800586c:	7f3b      	ldrb	r3, [r7, #28]
 800586e:	22d8      	movs	r2, #216	; 0xd8
 8005870:	fb02 f303 	mul.w	r3, r2, r3
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4413      	add	r3, r2
 8005878:	4a13      	ldr	r2, [pc, #76]	; (80058c8 <ntc_rh_init+0x120>)
 800587a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			if ((ntc_to_cell_position[id][NTCS_NUM - 1] < 1) || (ntc_to_cell_position[id][NTCS_NUM - 1] > 144))
 800587e:	7f3a      	ldrb	r2, [r7, #28]
 8005880:	4910      	ldr	r1, [pc, #64]	; (80058c4 <ntc_rh_init+0x11c>)
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	440b      	add	r3, r1
 800588a:	3304      	adds	r3, #4
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d009      	beq.n	80058a6 <ntc_rh_init+0xfe>
 8005892:	7f3a      	ldrb	r2, [r7, #28]
 8005894:	490b      	ldr	r1, [pc, #44]	; (80058c4 <ntc_rh_init+0x11c>)
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	440b      	add	r3, r1
 800589e:	3304      	adds	r3, #4
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b90      	cmp	r3, #144	; 0x90
 80058a4:	d901      	bls.n	80058aa <ntc_rh_init+0x102>
					init_ok = false;
 80058a6:	2300      	movs	r3, #0
 80058a8:	777b      	strb	r3, [r7, #29]
	for (uint8_t id = 0; id < SLAVES_NUM; ++id)
 80058aa:	7f3b      	ldrb	r3, [r7, #28]
 80058ac:	3301      	adds	r3, #1
 80058ae:	773b      	strb	r3, [r7, #28]
 80058b0:	7f3b      	ldrb	r3, [r7, #28]
 80058b2:	2b0f      	cmp	r3, #15
 80058b4:	d9af      	bls.n	8005816 <ntc_rh_init+0x6e>
		}
	}
	return init_ok;
 80058b6:	7f7b      	ldrb	r3, [r7, #29]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3724      	adds	r7, #36	; 0x24
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	08022604 	.word	0x08022604
 80058c8:	437f0000 	.word	0x437f0000

080058cc <find_position>:
*  @Description   Uses the binary search algorithm to match the given NTC
*  				  voltage to the corresponding temperature - first called in
*  				  lookup_value
******************************************************************************/
uint16_t find_position(const float* lookup_table, const uint16_t start, const uint16_t end, const float value)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	460b      	mov	r3, r1
 80058d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80058da:	817b      	strh	r3, [r7, #10]
 80058dc:	4613      	mov	r3, r2
 80058de:	813b      	strh	r3, [r7, #8]
	if (value < lookup_table[end])
 80058e0:	893b      	ldrh	r3, [r7, #8]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	edd3 7a00 	vldr	s15, [r3]
 80058ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80058f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f8:	d501      	bpl.n	80058fe <find_position+0x32>
	    return end;
 80058fa:	893b      	ldrh	r3, [r7, #8]
 80058fc:	e068      	b.n	80059d0 <find_position+0x104>

	if (value > lookup_table[start])
 80058fe:	897b      	ldrh	r3, [r7, #10]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4413      	add	r3, r2
 8005906:	edd3 7a00 	vldr	s15, [r3]
 800590a:	ed97 7a01 	vldr	s14, [r7, #4]
 800590e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005916:	dd01      	ble.n	800591c <find_position+0x50>
	    return start;
 8005918:	897b      	ldrh	r3, [r7, #10]
 800591a:	e059      	b.n	80059d0 <find_position+0x104>

	uint16_t mid = start + (end - start) / 2;
 800591c:	893a      	ldrh	r2, [r7, #8]
 800591e:	897b      	ldrh	r3, [r7, #10]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	0fda      	lsrs	r2, r3, #31
 8005924:	4413      	add	r3, r2
 8005926:	105b      	asrs	r3, r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	897b      	ldrh	r3, [r7, #10]
 800592c:	4413      	add	r3, r2
 800592e:	82fb      	strh	r3, [r7, #22]

	if (mid == start) {
 8005930:	8afa      	ldrh	r2, [r7, #22]
 8005932:	897b      	ldrh	r3, [r7, #10]
 8005934:	429a      	cmp	r2, r3
 8005936:	d11c      	bne.n	8005972 <find_position+0xa6>
	    if (lookup_table[start] - value < value - lookup_table[end])
 8005938:	897b      	ldrh	r3, [r7, #10]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	ed93 7a00 	vldr	s14, [r3]
 8005944:	edd7 7a01 	vldr	s15, [r7, #4]
 8005948:	ee37 7a67 	vsub.f32	s14, s14, s15
 800594c:	893b      	ldrh	r3, [r7, #8]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	edd3 7a00 	vldr	s15, [r3]
 8005958:	edd7 6a01 	vldr	s13, [r7, #4]
 800595c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005968:	d501      	bpl.n	800596e <find_position+0xa2>
	        return start;
 800596a:	897b      	ldrh	r3, [r7, #10]
 800596c:	e030      	b.n	80059d0 <find_position+0x104>
	    else
	        return end;
 800596e:	893b      	ldrh	r3, [r7, #8]
 8005970:	e02e      	b.n	80059d0 <find_position+0x104>
	}

	if (value == lookup_table[mid])
 8005972:	8afb      	ldrh	r3, [r7, #22]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4413      	add	r3, r2
 800597a:	edd3 7a00 	vldr	s15, [r3]
 800597e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005982:	eeb4 7a67 	vcmp.f32	s14, s15
 8005986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800598a:	d101      	bne.n	8005990 <find_position+0xc4>
	    return mid;
 800598c:	8afb      	ldrh	r3, [r7, #22]
 800598e:	e01f      	b.n	80059d0 <find_position+0x104>

	if (value > lookup_table[mid])
 8005990:	8afb      	ldrh	r3, [r7, #22]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	edd3 7a00 	vldr	s15, [r3]
 800599c:	ed97 7a01 	vldr	s14, [r7, #4]
 80059a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80059a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a8:	dd09      	ble.n	80059be <find_position+0xf2>
	    return find_position(lookup_table, start, mid, value);
 80059aa:	8afa      	ldrh	r2, [r7, #22]
 80059ac:	897b      	ldrh	r3, [r7, #10]
 80059ae:	ed97 0a01 	vldr	s0, [r7, #4]
 80059b2:	4619      	mov	r1, r3
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7ff ff89 	bl	80058cc <find_position>
 80059ba:	4603      	mov	r3, r0
 80059bc:	e008      	b.n	80059d0 <find_position+0x104>

	// value < lookup_table[mid]
	return find_position(lookup_table, mid, end, value);
 80059be:	893a      	ldrh	r2, [r7, #8]
 80059c0:	8afb      	ldrh	r3, [r7, #22]
 80059c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80059c6:	4619      	mov	r1, r3
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff ff7f 	bl	80058cc <find_position>
 80059ce:	4603      	mov	r3, r0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <lookup_value>:


/*****************************************************************************
*  @Description   Finds the correct temperature for the given NTC voltage
******************************************************************************/
uint16_t lookup_value(const float *lookup_table, const uint16_t length, const float value) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	460b      	mov	r3, r1
 80059e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80059e6:	817b      	strh	r3, [r7, #10]
	return find_position(lookup_table, 0, length - 1, value);
 80059e8:	897b      	ldrh	r3, [r7, #10]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80059f2:	461a      	mov	r2, r3
 80059f4:	2100      	movs	r1, #0
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f7ff ff68 	bl	80058cc <find_position>
 80059fc:	4603      	mov	r3, r0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <update_temperatures>:



void update_temperatures(MCU* master, Broadcast_t nbc, ID_t id, Mode_t md)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	4608      	mov	r0, r1
 8005a10:	4611      	mov	r1, r2
 8005a12:	461a      	mov	r2, r3
 8005a14:	4603      	mov	r3, r0
 8005a16:	70fb      	strb	r3, [r7, #3]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	70bb      	strb	r3, [r7, #2]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	707b      	strb	r3, [r7, #1]
	update(master, nbc, id, ADAX(md, 0));
 8005a20:	787b      	ldrb	r3, [r7, #1]
 8005a22:	2100      	movs	r1, #0
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff fa49 	bl	8004ebc <ADAX>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	78ba      	ldrb	r2, [r7, #2]
 8005a2e:	78f9      	ldrb	r1, [r7, #3]
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fb4c 	bl	80060ce <update>
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <read_temperature_registers>:
	return update_and_wait(master, nbc, id, ADAX(md, 0), 220);
}


BMSstatus_t read_temperature_registers(MCU *master, LTC6811 *slave_array, const ID_t id, const uint8_t attempts)
{
 8005a40:	b5b0      	push	{r4, r5, r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	460b      	mov	r3, r1
 8005a50:	71fb      	strb	r3, [r7, #7]
 8005a52:	4613      	mov	r3, r2
 8005a54:	71bb      	strb	r3, [r7, #6]

	if (read(master, slave_array, id, RDAUXA, attempts) != OK)
 8005a56:	79fa      	ldrb	r2, [r7, #7]
 8005a58:	79bb      	ldrb	r3, [r7, #6]
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	230c      	movs	r3, #12
 8005a5e:	68b9      	ldr	r1, [r7, #8]
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff fa79 	bl	8004f58 <read>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <read_temperature_registers+0x30>
		return READ_ERROR;
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e064      	b.n	8005b3a <read_temperature_registers+0xfa>
	if (read(master, slave_array, id, RDAUXB, attempts) != OK)
 8005a70:	79fa      	ldrb	r2, [r7, #7]
 8005a72:	79bb      	ldrb	r3, [r7, #6]
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	230e      	movs	r3, #14
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f7ff fa6c 	bl	8004f58 <read>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <read_temperature_registers+0x4a>
		return READ_ERROR;
 8005a86:	2302      	movs	r3, #2
 8005a88:	e057      	b.n	8005b3a <read_temperature_registers+0xfa>

	uint16_t position;
	for(uint8_t i = 0; i < NTCS_NUM; i++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	75fb      	strb	r3, [r7, #23]
 8005a8e:	e050      	b.n	8005b32 <read_temperature_registers+0xf2>
	{
		/* If no NTC is placed in this slot */
		if (ntc_to_cell_position[id][i] == 0xFF)
 8005a90:	79fa      	ldrb	r2, [r7, #7]
 8005a92:	7df9      	ldrb	r1, [r7, #23]
 8005a94:	482b      	ldr	r0, [pc, #172]	; (8005b44 <read_temperature_registers+0x104>)
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	4403      	add	r3, r0
 8005a9e:	440b      	add	r3, r1
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2bff      	cmp	r3, #255	; 0xff
 8005aa4:	d111      	bne.n	8005aca <read_temperature_registers+0x8a>
		{
			slave_array[id].temp[i] = 255; // Temperature can not reach 255, so this value indicates that in this position a RH sensor is connected
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
 8005aa8:	22d8      	movs	r2, #216	; 0xd8
 8005aaa:	fb02 f303 	mul.w	r3, r2, r3
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	441a      	add	r2, r3
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
 8005ab4:	3322      	adds	r3, #34	; 0x22
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	4a23      	ldr	r2, [pc, #140]	; (8005b48 <read_temperature_registers+0x108>)
 8005abc:	601a      	str	r2, [r3, #0]
			read_humidity(slave_array, id);
 8005abe:	79fb      	ldrb	r3, [r7, #7]
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	68b8      	ldr	r0, [r7, #8]
 8005ac4:	f000 f906 	bl	8005cd4 <read_humidity>
 8005ac8:	e030      	b.n	8005b2c <read_temperature_registers+0xec>
		}
		else
		{
			position = lookup_value(NTC_voltage, NTC_LUT_LENGTH, slave_array[id].gpio_voltage[i]);
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	22d8      	movs	r2, #216	; 0xd8
 8005ace:	fb02 f303 	mul.w	r3, r2, r3
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	441a      	add	r2, r3
 8005ad6:	7dfb      	ldrb	r3, [r7, #23]
 8005ad8:	331c      	adds	r3, #28
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	edd3 7a00 	vldr	s15, [r3]
 8005ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ae6:	21c9      	movs	r1, #201	; 0xc9
 8005ae8:	4818      	ldr	r0, [pc, #96]	; (8005b4c <read_temperature_registers+0x10c>)
 8005aea:	f7ff ff75 	bl	80059d8 <lookup_value>
 8005aee:	4603      	mov	r3, r0
 8005af0:	82bb      	strh	r3, [r7, #20]
			slave_array[id].temp[i] = 1.0 * position / 2;
 8005af2:	8abb      	ldrh	r3, [r7, #20]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fa fd15 	bl	8000524 <__aeabi_i2d>
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b02:	f7fa fea3 	bl	800084c <__aeabi_ddiv>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	22d8      	movs	r2, #216	; 0xd8
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	18d4      	adds	r4, r2, r3
 8005b1a:	7dfd      	ldrb	r5, [r7, #23]
 8005b1c:	f7fb f864 	bl	8000be8 <__aeabi_d2f>
 8005b20:	4602      	mov	r2, r0
 8005b22:	f105 0322 	add.w	r3, r5, #34	; 0x22
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4423      	add	r3, r4
 8005b2a:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < NTCS_NUM; i++)
 8005b2c:	7dfb      	ldrb	r3, [r7, #23]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	75fb      	strb	r3, [r7, #23]
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d9ab      	bls.n	8005a90 <read_temperature_registers+0x50>
		}

	}

	return OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bdb0      	pop	{r4, r5, r7, pc}
 8005b42:	bf00      	nop
 8005b44:	08022604 	.word	0x08022604
 8005b48:	437f0000 	.word	0x437f0000
 8005b4c:	20000310 	.word	0x20000310

08005b50 <find_min_max_temp>:
/*****************************************************************************
*  @Description   Reads the temperatures that are already in the structs and
*  				  finds the minimum and maximum as well as their cell position
******************************************************************************/
void find_min_max_temp(BMS_info *bms, LTC6811 *slave_array)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
	bms->max_temp_cell.value  = slave_array[0].temp[0];
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	649a      	str	r2, [r3, #72]	; 0x48
	bms->max_temp_cell.pos    = ntc_to_cell_position[0][0];
 8005b64:	4b59      	ldr	r3, [pc, #356]	; (8005ccc <find_min_max_temp+0x17c>)
 8005b66:	781a      	ldrb	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	bms->min_temp_cell.value  = slave_array[0].temp[0];
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	641a      	str	r2, [r3, #64]	; 0x40
	bms->min_temp_cell.pos    = ntc_to_cell_position[0][0];
 8005b78:	4b54      	ldr	r3, [pc, #336]	; (8005ccc <find_min_max_temp+0x17c>)
 8005b7a:	781a      	ldrb	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	for (uint8_t id =  0; id < SLAVES_NUM; ++id)
 8005b82:	2300      	movs	r3, #0
 8005b84:	73fb      	strb	r3, [r7, #15]
 8005b86:	e097      	b.n	8005cb8 <find_min_max_temp+0x168>
	{
		for (uint8_t ntc = 0; ntc < NTCS_NUM; ++ntc)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	73bb      	strb	r3, [r7, #14]
 8005b8c:	e08d      	b.n	8005caa <find_min_max_temp+0x15a>
		{

			if ((slave_array[id].temp[ntc] > bms->max_temp_cell.value) && (slave_array[id].temp[ntc] != 0xFF)) // second condition guarantees that this measurement belongs to an NTC and not a RH sensor
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	22d8      	movs	r2, #216	; 0xd8
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	441a      	add	r2, r3
 8005b9a:	7bbb      	ldrb	r3, [r7, #14]
 8005b9c:	3322      	adds	r3, #34	; 0x22
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	ed93 7a00 	vldr	s14, [r3]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005bac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb4:	dd2b      	ble.n	8005c0e <find_min_max_temp+0xbe>
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
 8005bb8:	22d8      	movs	r2, #216	; 0xd8
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	441a      	add	r2, r3
 8005bc2:	7bbb      	ldrb	r3, [r7, #14]
 8005bc4:	3322      	adds	r3, #34	; 0x22
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	edd3 7a00 	vldr	s15, [r3]
 8005bce:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8005cd0 <find_min_max_temp+0x180>
 8005bd2:	eef4 7a47 	vcmp.f32	s15, s14
 8005bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bda:	d018      	beq.n	8005c0e <find_min_max_temp+0xbe>
			{
				bms->max_temp_cell.value = slave_array[id].temp[ntc];
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	22d8      	movs	r2, #216	; 0xd8
 8005be0:	fb02 f303 	mul.w	r3, r2, r3
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	441a      	add	r2, r3
 8005be8:	7bbb      	ldrb	r3, [r7, #14]
 8005bea:	3322      	adds	r3, #34	; 0x22
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	649a      	str	r2, [r3, #72]	; 0x48
				bms->max_temp_cell.pos   = ntc_to_cell_position[id][ntc];
 8005bf6:	7bfa      	ldrb	r2, [r7, #15]
 8005bf8:	7bb9      	ldrb	r1, [r7, #14]
 8005bfa:	4834      	ldr	r0, [pc, #208]	; (8005ccc <find_min_max_temp+0x17c>)
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	4403      	add	r3, r0
 8005c04:	440b      	add	r3, r1
 8005c06:	781a      	ldrb	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}

			if ((slave_array[id].temp[ntc] < bms->min_temp_cell.value) && (slave_array[id].temp[ntc] != 0xFF)) // second condition guarantees that this measurement belongs to an NTC and not a RH sensor
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
 8005c10:	22d8      	movs	r2, #216	; 0xd8
 8005c12:	fb02 f303 	mul.w	r3, r2, r3
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	441a      	add	r2, r3
 8005c1a:	7bbb      	ldrb	r3, [r7, #14]
 8005c1c:	3322      	adds	r3, #34	; 0x22
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	ed93 7a00 	vldr	s14, [r3]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005c2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c34:	d536      	bpl.n	8005ca4 <find_min_max_temp+0x154>
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	22d8      	movs	r2, #216	; 0xd8
 8005c3a:	fb02 f303 	mul.w	r3, r2, r3
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	441a      	add	r2, r3
 8005c42:	7bbb      	ldrb	r3, [r7, #14]
 8005c44:	3322      	adds	r3, #34	; 0x22
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	edd3 7a00 	vldr	s15, [r3]
 8005c4e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005cd0 <find_min_max_temp+0x180>
 8005c52:	eef4 7a47 	vcmp.f32	s15, s14
 8005c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c5a:	d023      	beq.n	8005ca4 <find_min_max_temp+0x154>
			{
				bms->min_temp_cell.value = slave_array[id].temp[ntc];
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	22d8      	movs	r2, #216	; 0xd8
 8005c60:	fb02 f303 	mul.w	r3, r2, r3
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	441a      	add	r2, r3
 8005c68:	7bbb      	ldrb	r3, [r7, #14]
 8005c6a:	3322      	adds	r3, #34	; 0x22
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	641a      	str	r2, [r3, #64]	; 0x40
				bms->min_temp_cell.pos   = ntc_to_cell_position[id][ntc];
 8005c76:	7bfa      	ldrb	r2, [r7, #15]
 8005c78:	7bb9      	ldrb	r1, [r7, #14]
 8005c7a:	4814      	ldr	r0, [pc, #80]	; (8005ccc <find_min_max_temp+0x17c>)
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	4403      	add	r3, r0
 8005c84:	440b      	add	r3, r1
 8005c86:	781a      	ldrb	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				if (bms->min_temp_cell.value == 0)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005c94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9c:	d102      	bne.n	8005ca4 <find_min_max_temp+0x154>
					osDelay(1);
 8005c9e:	2001      	movs	r0, #1
 8005ca0:	f012 fa50 	bl	8018144 <osDelay>
		for (uint8_t ntc = 0; ntc < NTCS_NUM; ++ntc)
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	73bb      	strb	r3, [r7, #14]
 8005caa:	7bbb      	ldrb	r3, [r7, #14]
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	f67f af6e 	bls.w	8005b8e <find_min_max_temp+0x3e>
	for (uint8_t id =  0; id < SLAVES_NUM; ++id)
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
 8005cba:	2b0f      	cmp	r3, #15
 8005cbc:	f67f af64 	bls.w	8005b88 <find_min_max_temp+0x38>
			}
		}
	}
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	08022604 	.word	0x08022604
 8005cd0:	437f0000 	.word	0x437f0000

08005cd4 <read_humidity>:
*  @Description   Reads the voltage from the slave's struct and converts it to
*  				  relative humidity percentage
*  				  Humidity sensor used: 10142048-31
******************************************************************************/
void read_humidity(LTC6811 *slave_array, const ID_t id)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	70fb      	strb	r3, [r7, #3]
	float humidity = -12.5 + 125 * slave_array[id].gpio_voltage[RH_GPIO_NUM] / slave_array[id].va;
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	22d8      	movs	r2, #216	; 0xd8
 8005ce4:	fb02 f303 	mul.w	r3, r2, r3
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	4413      	add	r3, r2
 8005cec:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8005cf0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005d4c <read_humidity+0x78>
 8005cf4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	22d8      	movs	r2, #216	; 0xd8
 8005cfc:	fb02 f303 	mul.w	r3, r2, r3
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	4413      	add	r3, r2
 8005d04:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8005d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d0c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005d10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d14:	edc7 7a03 	vstr	s15, [r7, #12]
	if (humidity > 100)
 8005d18:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d1c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005d50 <read_humidity+0x7c>
 8005d20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d28:	dd01      	ble.n	8005d2e <read_humidity+0x5a>
		humidity = 100;
 8005d2a:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <read_humidity+0x80>)
 8005d2c:	60fb      	str	r3, [r7, #12]

	slave_array[id].humidity = humidity;
 8005d2e:	78fb      	ldrb	r3, [r7, #3]
 8005d30:	22d8      	movs	r2, #216	; 0xd8
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	4413      	add	r3, r2
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8005d40:	bf00      	nop
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	42fa0000 	.word	0x42fa0000
 8005d50:	42c80000 	.word	0x42c80000
 8005d54:	42c80000 	.word	0x42c80000

08005d58 <find_max_humidity>:
/*****************************************************************************
*  @Description   Reads the structs in slave_array and finds the greatest
*  				  humidity and its position
******************************************************************************/
void find_max_humidity(BMS_info *bmsInfo, LTC6811 *slave_array)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
	bmsInfo->max_humidity.value = 0;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	629a      	str	r2, [r3, #40]	; 0x28
	bmsInfo->max_humidity.pos   = 0;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	for (uint8_t id = 0; id < SLAVES_NUM; ++id)
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
 8005d76:	e031      	b.n	8005ddc <find_max_humidity+0x84>
	{
		if ((slave_array[id].humidity != 255) && (slave_array[id].humidity > bmsInfo->max_humidity.value)) // First condition guarantees that there is a RH sensor on that slave
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	22d8      	movs	r2, #216	; 0xd8
 8005d7c:	fb02 f303 	mul.w	r3, r2, r3
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	4413      	add	r3, r2
 8005d84:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005d88:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005df0 <find_max_humidity+0x98>
 8005d8c:	eef4 7a47 	vcmp.f32	s15, s14
 8005d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d94:	d01f      	beq.n	8005dd6 <find_max_humidity+0x7e>
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	22d8      	movs	r2, #216	; 0xd8
 8005d9a:	fb02 f303 	mul.w	r3, r2, r3
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	4413      	add	r3, r2
 8005da2:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db4:	dd0f      	ble.n	8005dd6 <find_max_humidity+0x7e>
		{
			bmsInfo->max_humidity.value = slave_array[id].humidity;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
 8005db8:	22d8      	movs	r2, #216	; 0xd8
 8005dba:	fb02 f303 	mul.w	r3, r2, r3
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	629a      	str	r2, [r3, #40]	; 0x28
			bmsInfo->max_humidity.pos   = id + 1;
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	for (uint8_t id = 0; id < SLAVES_NUM; ++id)
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	2b0f      	cmp	r3, #15
 8005de0:	d9ca      	bls.n	8005d78 <find_max_humidity+0x20>
		}
	}
}
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	437f0000 	.word	0x437f0000

08005df4 <update_status>:



void update_status(MCU* master, Broadcast_t nbc, ID_t id, Mode_t md)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	4608      	mov	r0, r1
 8005dfe:	4611      	mov	r1, r2
 8005e00:	461a      	mov	r2, r3
 8005e02:	4603      	mov	r3, r0
 8005e04:	70fb      	strb	r3, [r7, #3]
 8005e06:	460b      	mov	r3, r1
 8005e08:	70bb      	strb	r3, [r7, #2]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	707b      	strb	r3, [r7, #1]
	update(master, nbc, id, ADSTAT(md, 0));
 8005e0e:	787b      	ldrb	r3, [r7, #1]
 8005e10:	2100      	movs	r1, #0
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff f86b 	bl	8004eee <ADSTAT>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	78ba      	ldrb	r2, [r7, #2]
 8005e1c:	78f9      	ldrb	r1, [r7, #3]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f955 	bl	80060ce <update>
}
 8005e24:	bf00      	nop
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <read_status_registers>:

BMSstatus_t read_status_registers(MCU* master, LTC6811* slave_array, ID_t id, uint8_t attempts)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af02      	add	r7, sp, #8
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	4611      	mov	r1, r2
 8005e38:	461a      	mov	r2, r3
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	71fb      	strb	r3, [r7, #7]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	71bb      	strb	r3, [r7, #6]
	if (read(master, slave_array, id, RDSTATA, attempts) != OK)
 8005e42:	79fa      	ldrb	r2, [r7, #7]
 8005e44:	79bb      	ldrb	r3, [r7, #6]
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	2310      	movs	r3, #16
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff f883 	bl	8004f58 <read>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <read_status_registers+0x30>
		return READ_ERROR;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e00d      	b.n	8005e78 <read_status_registers+0x4c>
	if (read(master, slave_array, id, RDSTATB, attempts) != OK)
 8005e5c:	79fa      	ldrb	r2, [r7, #7]
 8005e5e:	79bb      	ldrb	r3, [r7, #6]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	2312      	movs	r3, #18
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f7ff f876 	bl	8004f58 <read>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <read_status_registers+0x4a>
		return READ_ERROR;
 8005e72:	2302      	movs	r3, #2
 8005e74:	e000      	b.n	8005e78 <read_status_registers+0x4c>

	return OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <read_cfgr_register>:



BMSstatus_t read_cfgr_register(MCU* master, LTC6811* slave_array, ID_t id, uint8_t attempts)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	460b      	mov	r3, r1
 8005e90:	71fb      	strb	r3, [r7, #7]
 8005e92:	4613      	mov	r3, r2
 8005e94:	71bb      	strb	r3, [r7, #6]
	if (read(master, slave_array, id, RDCFGA, attempts) != OK)
 8005e96:	79fa      	ldrb	r2, [r7, #7]
 8005e98:	79bb      	ldrb	r3, [r7, #6]
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff f859 	bl	8004f58 <read>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <read_cfgr_register+0x30>
		return READ_ERROR;
 8005eac:	2302      	movs	r3, #2
 8005eae:	e000      	b.n	8005eb2 <read_cfgr_register+0x32>

	return OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <isospi_ready>:
*  @Description   Transitions the isoSPI port from Idle to Ready. The chip
*  				  needs 10us to transition properly. If there is no
*  				  activity (either valid or invalid command) on the isoSPI bus
*  			      for 6.7ms, it goes back to idle
******************************************************************************/
void isospi_ready(const MCU *master) {
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(master->csBMS, master->csBMSPin, GPIO_PIN_RESET);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6858      	ldr	r0, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	899b      	ldrh	r3, [r3, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	4619      	mov	r1, r3
 8005ece:	f007 ff59 	bl	800dd84 <HAL_GPIO_WritePin>

	//osDelay(2);
	uint16_t j = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 0; i < 1000; ++i)
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	81bb      	strh	r3, [r7, #12]
 8005eda:	e005      	b.n	8005ee8 <isospi_ready+0x2e>
		j++;
 8005edc:	89fb      	ldrh	r3, [r7, #14]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 0; i < 1000; ++i)
 8005ee2:	89bb      	ldrh	r3, [r7, #12]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	81bb      	strh	r3, [r7, #12]
 8005ee8:	89bb      	ldrh	r3, [r7, #12]
 8005eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eee:	d3f5      	bcc.n	8005edc <isospi_ready+0x22>

	HAL_GPIO_WritePin(master->csBMS, master->csBMSPin, GPIO_PIN_SET);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6858      	ldr	r0, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	899b      	ldrh	r3, [r3, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	4619      	mov	r1, r3
 8005efc:	f007 ff42 	bl	800dd84 <HAL_GPIO_WritePin>

	for (uint16_t i = 0; i < 1000; ++i)
 8005f00:	2300      	movs	r3, #0
 8005f02:	817b      	strh	r3, [r7, #10]
 8005f04:	e005      	b.n	8005f12 <isospi_ready+0x58>
		j++;
 8005f06:	89fb      	ldrh	r3, [r7, #14]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 0; i < 1000; ++i)
 8005f0c:	897b      	ldrh	r3, [r7, #10]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	817b      	strh	r3, [r7, #10]
 8005f12:	897b      	ldrh	r3, [r7, #10]
 8005f14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f18:	d3f5      	bcc.n	8005f06 <isospi_ready+0x4c>
}
 8005f1a:	bf00      	nop
 8005f1c:	bf00      	nop
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <read_data>:
/*****************************************************************************
*  @Description   Creates the read command, transmits it and processes the
*  				  received bytes. If the read fails once, it returns Error
******************************************************************************/
// slave is a pointer to an LTC6811 struct
BMSstatus_t read_data(MCU *master, LTC6811 *slave, const ID_t id, const uint16_t address){
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b090      	sub	sp, #64	; 0x40
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	4611      	mov	r1, r2
 8005f30:	461a      	mov	r2, r3
 8005f32:	460b      	mov	r3, r1
 8005f34:	71fb      	strb	r3, [r7, #7]
 8005f36:	4613      	mov	r3, r2
 8005f38:	80bb      	strh	r3, [r7, #4]

    uint16_t command = address | (id << 11) | (0x0001 << 15);
 8005f3a:	79fb      	ldrb	r3, [r7, #7]
 8005f3c:	02db      	lsls	r3, r3, #11
 8005f3e:	b21a      	sxth	r2, r3
 8005f40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	b21b      	sxth	r3, r3
 8005f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f50:	b21b      	sxth	r3, r3
 8005f52:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t  cmd0  	 = command >> 8;
 8005f54:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f56:	0a1b      	lsrs	r3, r3, #8
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  cmd1  	 = command;
 8005f5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 	uint8_t  cmd[2]  = {cmd0, cmd1};
 8005f64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8005f6c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005f70:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

 	master->command_buf = command;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005f78:	841a      	strh	r2, [r3, #32]

	uint16_t cmd_pec = pec15(cmd, 2);
 8005f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f7e:	2102      	movs	r1, #2
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe f80b 	bl	8003f9c <pec15>
 8005f86:	4603      	mov	r3, r0
 8005f88:	863b      	strh	r3, [r7, #48]	; 0x30
	uint8_t cmd_pec0 = cmd_pec >> 8;
 8005f8a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f8c:	0a1b      	lsrs	r3, r3, #8
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t cmd_pec1 = cmd_pec;
 8005f94:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f96:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	uint8_t write_msg[4 + 8] = {cmd0, cmd1, cmd_pec0, cmd_pec1};
 8005f9a:	f107 031c 	add.w	r3, r7, #28
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	605a      	str	r2, [r3, #4]
 8005fa4:	609a      	str	r2, [r3, #8]
 8005fa6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005faa:	773b      	strb	r3, [r7, #28]
 8005fac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005fb0:	777b      	strb	r3, [r7, #29]
 8005fb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fb6:	77bb      	strb	r3, [r7, #30]
 8005fb8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005fbc:	77fb      	strb	r3, [r7, #31]
	for (uint8_t i = 4; i < 12; ++i)
 8005fbe:	2304      	movs	r3, #4
 8005fc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005fc4:	e00b      	b.n	8005fde <read_data+0xba>
		write_msg[i] = 0;
 8005fc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fca:	3338      	adds	r3, #56	; 0x38
 8005fcc:	443b      	add	r3, r7
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i = 4; i < 12; ++i)
 8005fd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fd8:	3301      	adds	r3, #1
 8005fda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005fde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fe2:	2b0b      	cmp	r3, #11
 8005fe4:	d9ef      	bls.n	8005fc6 <read_data+0xa2>
	uint8_t read_msg[4 + 8];

	// isoSPI must be in READY state
	isospi_ready(master);
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7ff ff67 	bl	8005eba <isospi_ready>

	HAL_GPIO_WritePin(master->csBMS, master->csBMSPin, GPIO_PIN_RESET);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6858      	ldr	r0, [r3, #4]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	899b      	ldrh	r3, [r3, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	f007 fec4 	bl	800dd84 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(master->spiHandle, write_msg, read_msg, sizeof(write_msg), TIMEOUT) != HAL_OK)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	f107 0210 	add.w	r2, r7, #16
 8006004:	f107 011c 	add.w	r1, r7, #28
 8006008:	2332      	movs	r3, #50	; 0x32
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	230c      	movs	r3, #12
 800600e:	f009 ffe4 	bl	800ffda <HAL_SPI_TransmitReceive>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d009      	beq.n	800602c <read_data+0x108>
	{
		HAL_GPIO_WritePin(master->csBMS, master->csBMSPin, GPIO_PIN_SET);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6858      	ldr	r0, [r3, #4]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	899b      	ldrh	r3, [r3, #12]
 8006020:	2201      	movs	r2, #1
 8006022:	4619      	mov	r1, r3
 8006024:	f007 feae 	bl	800dd84 <HAL_GPIO_WritePin>
		return TX_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e04c      	b.n	80060c6 <read_data+0x1a2>
	}
	HAL_GPIO_WritePin(master->csBMS, master->csBMSPin, GPIO_PIN_SET);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6858      	ldr	r0, [r3, #4]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	899b      	ldrh	r3, [r3, #12]
 8006034:	2201      	movs	r2, #1
 8006036:	4619      	mov	r1, r3
 8006038:	f007 fea4 	bl	800dd84 <HAL_GPIO_WritePin>

	for (uint8_t i = 4; i < 10; ++i)
 800603c:	2304      	movs	r3, #4
 800603e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8006042:	e00f      	b.n	8006064 <read_data+0x140>
		slave->tx_buf[i - 4] = read_msg[i];
 8006044:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8006048:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800604c:	3b04      	subs	r3, #4
 800604e:	3238      	adds	r2, #56	; 0x38
 8006050:	443a      	add	r2, r7
 8006052:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 4; i < 10; ++i)
 800605a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800605e:	3301      	adds	r3, #1
 8006060:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8006064:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006068:	2b09      	cmp	r3, #9
 800606a:	d9eb      	bls.n	8006044 <read_data+0x120>

	uint16_t data_pec = pec15(slave->tx_buf, 6);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2106      	movs	r1, #6
 8006070:	4618      	mov	r0, r3
 8006072:	f7fd ff93 	bl	8003f9c <pec15>
 8006076:	4603      	mov	r3, r0
 8006078:	85bb      	strh	r3, [r7, #44]	; 0x2c

	/* Check if the LTC6811 sent wrong PEC */
    slave->pec_status[0] = data_pec;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800607e:	80da      	strh	r2, [r3, #6]
    slave->pec_status[1] = (read_msg[10] << 8) | read_msg[11];
 8006080:	7ebb      	ldrb	r3, [r7, #26]
 8006082:	021b      	lsls	r3, r3, #8
 8006084:	b21a      	sxth	r2, r3
 8006086:	7efb      	ldrb	r3, [r7, #27]
 8006088:	b21b      	sxth	r3, r3
 800608a:	4313      	orrs	r3, r2
 800608c:	b21b      	sxth	r3, r3
 800608e:	b29a      	uxth	r2, r3
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	811a      	strh	r2, [r3, #8]
	if (slave->pec_status[0] != slave->pec_status[1]){
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	88da      	ldrh	r2, [r3, #6]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	891b      	ldrh	r3, [r3, #8]
 800609c:	429a      	cmp	r2, r3
 800609e:	d007      	beq.n	80060b0 <read_data+0x18c>
		slave->pec_errors++;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	895b      	ldrh	r3, [r3, #10]
 80060a4:	3301      	adds	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	815a      	strh	r2, [r3, #10]
		return READ_ERROR;
 80060ac:	2302      	movs	r3, #2
 80060ae:	e00a      	b.n	80060c6 <read_data+0x1a2>
	}
	process_read_data(slave, address);
 80060b0:	88bb      	ldrh	r3, [r7, #4]
 80060b2:	4619      	mov	r1, r3
 80060b4:	68b8      	ldr	r0, [r7, #8]
 80060b6:	f7fe ff83 	bl	8004fc0 <process_read_data>
	slave->last_valid_msg = xTaskGetTickCount();     // If the code gets here, the slave has communicated successfully
 80060ba:	f013 feef 	bl	8019e9c <xTaskGetTickCount>
 80060be:	4602      	mov	r2, r0
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	625a      	str	r2, [r3, #36]	; 0x24

	/* No error in communicating with LTC6811 */
	return OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3738      	adds	r7, #56	; 0x38
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <update>:

/*****************************************************************************
*  @Description   Transmits the update command (given in address argumant)
*  				  which starts the ADC conversions of the requested quantity
******************************************************************************/
BMSstatus_t update(MCU *master, const Broadcast_t nbc, const ID_t id, const uint16_t address){
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b086      	sub	sp, #24
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	4608      	mov	r0, r1
 80060d8:	4611      	mov	r1, r2
 80060da:	461a      	mov	r2, r3
 80060dc:	4603      	mov	r3, r0
 80060de:	70fb      	strb	r3, [r7, #3]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70bb      	strb	r3, [r7, #2]
 80060e4:	4613      	mov	r3, r2
 80060e6:	803b      	strh	r3, [r7, #0]

	uint16_t command;
	if (nbc == 1)      // Non-Broadcast command
 80060e8:	78fb      	ldrb	r3, [r7, #3]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d10b      	bne.n	8006106 <update+0x38>
		command = 0x8000 | (id << 11) | address;
 80060ee:	78bb      	ldrb	r3, [r7, #2]
 80060f0:	02db      	lsls	r3, r3, #11
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	883b      	ldrh	r3, [r7, #0]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006102:	82fb      	strh	r3, [r7, #22]
 8006104:	e001      	b.n	800610a <update+0x3c>
	else
		command = address;
 8006106:	883b      	ldrh	r3, [r7, #0]
 8006108:	82fb      	strh	r3, [r7, #22]

	master->command_buf = command;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8afa      	ldrh	r2, [r7, #22]
 800610e:	841a      	strh	r2, [r3, #32]

	uint8_t cmd0 = command >> 8;
 8006110:	8afb      	ldrh	r3, [r7, #22]
 8006112:	0a1b      	lsrs	r3, r3, #8
 8006114:	b29b      	uxth	r3, r3
 8006116:	757b      	strb	r3, [r7, #21]
	uint8_t cmd1 = command;
 8006118:	8afb      	ldrh	r3, [r7, #22]
 800611a:	753b      	strb	r3, [r7, #20]
	uint8_t cmd[2] = {cmd0, cmd1};
 800611c:	7d7b      	ldrb	r3, [r7, #21]
 800611e:	733b      	strb	r3, [r7, #12]
 8006120:	7d3b      	ldrb	r3, [r7, #20]
 8006122:	737b      	strb	r3, [r7, #13]

	uint16_t cmd_pec = pec15(cmd, 2);
 8006124:	f107 030c 	add.w	r3, r7, #12
 8006128:	2102      	movs	r1, #2
 800612a:	4618      	mov	r0, r3
 800612c:	f7fd ff36 	bl	8003f9c <pec15>
 8006130:	4603      	mov	r3, r0
 8006132:	827b      	strh	r3, [r7, #18]
	uint8_t cmd_pec0 = cmd_pec >> 8;
 8006134:	8a7b      	ldrh	r3, [r7, #18]
 8006136:	0a1b      	lsrs	r3, r3, #8
 8006138:	b29b      	uxth	r3, r3
 800613a:	747b      	strb	r3, [r7, #17]
	uint8_t cmd_pec1 = cmd_pec;
 800613c:	8a7b      	ldrh	r3, [r7, #18]
 800613e:	743b      	strb	r3, [r7, #16]
	uint8_t monitor_msg[4] = {cmd0, cmd1, cmd_pec0, cmd_pec1};
 8006140:	7d7b      	ldrb	r3, [r7, #21]
 8006142:	723b      	strb	r3, [r7, #8]
 8006144:	7d3b      	ldrb	r3, [r7, #20]
 8006146:	727b      	strb	r3, [r7, #9]
 8006148:	7c7b      	ldrb	r3, [r7, #17]
 800614a:	72bb      	strb	r3, [r7, #10]
 800614c:	7c3b      	ldrb	r3, [r7, #16]
 800614e:	72fb      	strb	r3, [r7, #11]


	// isoSPI must be in READY state
	isospi_ready(master);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff feb2 	bl	8005eba <isospi_ready>

	HAL_GPIO_WritePin(master->csBMS, master->csBMSPin, GPIO_PIN_RESET);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6858      	ldr	r0, [r3, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	899b      	ldrh	r3, [r3, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	4619      	mov	r1, r3
 8006162:	f007 fe0f 	bl	800dd84 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(master->spiHandle, monitor_msg, sizeof(monitor_msg), TIMEOUT) != HAL_OK)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	f107 0108 	add.w	r1, r7, #8
 800616e:	2332      	movs	r3, #50	; 0x32
 8006170:	2204      	movs	r2, #4
 8006172:	f009 fdf6 	bl	800fd62 <HAL_SPI_Transmit>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d009      	beq.n	8006190 <update+0xc2>
	{
		HAL_GPIO_WritePin(master->csBMS, master->csBMSPin, GPIO_PIN_SET);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6858      	ldr	r0, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	899b      	ldrh	r3, [r3, #12]
 8006184:	2201      	movs	r2, #1
 8006186:	4619      	mov	r1, r3
 8006188:	f007 fdfc 	bl	800dd84 <HAL_GPIO_WritePin>
		return TX_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e008      	b.n	80061a2 <update+0xd4>
	}

	HAL_GPIO_WritePin(master->csBMS, master->csBMSPin, GPIO_PIN_SET);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6858      	ldr	r0, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	899b      	ldrh	r3, [r3, #12]
 8006198:	2201      	movs	r2, #1
 800619a:	4619      	mov	r1, r3
 800619c:	f007 fdf2 	bl	800dd84 <HAL_GPIO_WritePin>

	return OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <write_data>:
/*****************************************************************************
*  @Description   Gets 6 bytes from write_X functions and writes it to the
*  				  respective register. Does not check if data has been
*  				  successfully written to the register
******************************************************************************/
BMSstatus_t write_data(MCU *master, const Broadcast_t nbc, const ID_t id, const uint16_t address) {
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b08a      	sub	sp, #40	; 0x28
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	4608      	mov	r0, r1
 80061b4:	4611      	mov	r1, r2
 80061b6:	461a      	mov	r2, r3
 80061b8:	4603      	mov	r3, r0
 80061ba:	70fb      	strb	r3, [r7, #3]
 80061bc:	460b      	mov	r3, r1
 80061be:	70bb      	strb	r3, [r7, #2]
 80061c0:	4613      	mov	r3, r2
 80061c2:	803b      	strh	r3, [r7, #0]

	uint16_t command;
	if (nbc == NO_BC)   // Non-Broadcast command
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d10b      	bne.n	80061e2 <write_data+0x38>
		command = 0x8000 | (id << 11) | address;
 80061ca:	78bb      	ldrb	r3, [r7, #2]
 80061cc:	02db      	lsls	r3, r3, #11
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	883b      	ldrh	r3, [r7, #0]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80061e0:	e001      	b.n	80061e6 <write_data+0x3c>

	else
		command = 0x0000 | address;
 80061e2:	883b      	ldrh	r3, [r7, #0]
 80061e4:	84fb      	strh	r3, [r7, #38]	; 0x26

	master->command_buf = command;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061ea:	841a      	strh	r2, [r3, #32]

	uint8_t cmd0 = command >> 8;
 80061ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061ee:	0a1b      	lsrs	r3, r3, #8
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t cmd1 = command;
 80061f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t cmd[2] = {cmd0, cmd1};
 80061fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006200:	763b      	strb	r3, [r7, #24]
 8006202:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006206:	767b      	strb	r3, [r7, #25]

	uint16_t cmd_pec  = pec15(cmd, 2);
 8006208:	f107 0318 	add.w	r3, r7, #24
 800620c:	2102      	movs	r1, #2
 800620e:	4618      	mov	r0, r3
 8006210:	f7fd fec4 	bl	8003f9c <pec15>
 8006214:	4603      	mov	r3, r0
 8006216:	843b      	strh	r3, [r7, #32]
	uint8_t  cmd_pec0 = cmd_pec >> 8;
 8006218:	8c3b      	ldrh	r3, [r7, #32]
 800621a:	0a1b      	lsrs	r3, r3, #8
 800621c:	b29b      	uxth	r3, r3
 800621e:	77fb      	strb	r3, [r7, #31]
	uint8_t  cmd_pec1 = cmd_pec;
 8006220:	8c3b      	ldrh	r3, [r7, #32]
 8006222:	77bb      	strb	r3, [r7, #30]

	uint16_t data_pec  = pec15(master->write_buf, 6);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	331a      	adds	r3, #26
 8006228:	2106      	movs	r1, #6
 800622a:	4618      	mov	r0, r3
 800622c:	f7fd feb6 	bl	8003f9c <pec15>
 8006230:	4603      	mov	r3, r0
 8006232:	83bb      	strh	r3, [r7, #28]
	uint8_t  data_pec0 = data_pec >> 8;
 8006234:	8bbb      	ldrh	r3, [r7, #28]
 8006236:	0a1b      	lsrs	r3, r3, #8
 8006238:	b29b      	uxth	r3, r3
 800623a:	76fb      	strb	r3, [r7, #27]
	uint8_t  data_pec1 = data_pec;
 800623c:	8bbb      	ldrh	r3, [r7, #28]
 800623e:	76bb      	strb	r3, [r7, #26]

	uint8_t write_msg[12] = {cmd0, cmd1, cmd_pec0, cmd_pec1};
 8006240:	f107 030c 	add.w	r3, r7, #12
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	605a      	str	r2, [r3, #4]
 800624a:	609a      	str	r2, [r3, #8]
 800624c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006250:	733b      	strb	r3, [r7, #12]
 8006252:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006256:	737b      	strb	r3, [r7, #13]
 8006258:	7ffb      	ldrb	r3, [r7, #31]
 800625a:	73bb      	strb	r3, [r7, #14]
 800625c:	7fbb      	ldrb	r3, [r7, #30]
 800625e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 6; ++i)
 8006260:	2300      	movs	r3, #0
 8006262:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006266:	e010      	b.n	800628a <write_data+0xe0>
		write_msg[i + 4] = master->write_buf[i];
 8006268:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800626c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006270:	3304      	adds	r3, #4
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	440a      	add	r2, r1
 8006276:	7e92      	ldrb	r2, [r2, #26]
 8006278:	3328      	adds	r3, #40	; 0x28
 800627a:	443b      	add	r3, r7
 800627c:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i = 0; i < 6; ++i)
 8006280:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006284:	3301      	adds	r3, #1
 8006286:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800628a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800628e:	2b05      	cmp	r3, #5
 8006290:	d9ea      	bls.n	8006268 <write_data+0xbe>
	write_msg[10] = data_pec0;
 8006292:	7efb      	ldrb	r3, [r7, #27]
 8006294:	75bb      	strb	r3, [r7, #22]
	write_msg[11] = data_pec1;
 8006296:	7ebb      	ldrb	r3, [r7, #26]
 8006298:	75fb      	strb	r3, [r7, #23]


	// isoSPI must be in READY state
	isospi_ready(master);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7ff fe0d 	bl	8005eba <isospi_ready>

	HAL_GPIO_WritePin(master->csBMS, master->csBMSPin, GPIO_PIN_RESET);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6858      	ldr	r0, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	899b      	ldrh	r3, [r3, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	4619      	mov	r1, r3
 80062ac:	f007 fd6a 	bl	800dd84 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(master->spiHandle, write_msg, sizeof(write_msg), TIMEOUT) != HAL_OK)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	f107 010c 	add.w	r1, r7, #12
 80062b8:	2332      	movs	r3, #50	; 0x32
 80062ba:	220c      	movs	r2, #12
 80062bc:	f009 fd51 	bl	800fd62 <HAL_SPI_Transmit>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <write_data+0x130>
	{
		HAL_GPIO_WritePin(master->csBMS, master->csBMSPin, GPIO_PIN_SET);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6858      	ldr	r0, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	899b      	ldrh	r3, [r3, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	4619      	mov	r1, r3
 80062d2:	f007 fd57 	bl	800dd84 <HAL_GPIO_WritePin>
		return TX_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e008      	b.n	80062ec <write_data+0x142>
	}

	HAL_GPIO_WritePin(master->csBMS, master->csBMSPin, GPIO_PIN_SET);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6858      	ldr	r0, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	899b      	ldrh	r3, [r3, #12]
 80062e2:	2201      	movs	r2, #1
 80062e4:	4619      	mov	r1, r3
 80062e6:	f007 fd4d 	bl	800dd84 <HAL_GPIO_WritePin>
	return OK;
 80062ea:	2300      	movs	r3, #0

}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3728      	adds	r7, #40	; 0x28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <poll_status>:
/*****************************************************************************
*  @Description   Transmits a command to detect if the ADC conversion has
*  				  ended. If after the command and while the CS is Low, the MISO
*  				  line remains low, the conversion has not ended
******************************************************************************/
BMSstatus_t poll_status(MCU *master, const Broadcast_t nbc, const ID_t id){
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08c      	sub	sp, #48	; 0x30
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	460b      	mov	r3, r1
 80062fe:	70fb      	strb	r3, [r7, #3]
 8006300:	4613      	mov	r3, r2
 8006302:	70bb      	strb	r3, [r7, #2]
	uint16_t command;
	if (nbc == 1)              // Non-Broadcast command
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d107      	bne.n	800631a <poll_status+0x26>
		command = 0x8000 | (id << 11) | PLADC;
 800630a:	78bb      	ldrb	r3, [r7, #2]
 800630c:	02db      	lsls	r3, r3, #11
 800630e:	b21a      	sxth	r2, r3
 8006310:	4b39      	ldr	r3, [pc, #228]	; (80063f8 <poll_status+0x104>)
 8006312:	4313      	orrs	r3, r2
 8006314:	b21b      	sxth	r3, r3
 8006316:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006318:	e002      	b.n	8006320 <poll_status+0x2c>
	else
		command = PLADC;
 800631a:	f240 7314 	movw	r3, #1812	; 0x714
 800631e:	84fb      	strh	r3, [r7, #38]	; 0x26

	master->command_buf = command;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006324:	841a      	strh	r2, [r3, #32]

	uint8_t cmd0 = command >> 8;
 8006326:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006328:	0a1b      	lsrs	r3, r3, #8
 800632a:	b29b      	uxth	r3, r3
 800632c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t cmd1 = command;
 8006330:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006332:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t cmd[2] = {cmd0, cmd1};
 8006336:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800633a:	773b      	strb	r3, [r7, #28]
 800633c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006340:	777b      	strb	r3, [r7, #29]

	uint16_t cmd_pec = pec15(cmd, 2);
 8006342:	f107 031c 	add.w	r3, r7, #28
 8006346:	2102      	movs	r1, #2
 8006348:	4618      	mov	r0, r3
 800634a:	f7fd fe27 	bl	8003f9c <pec15>
 800634e:	4603      	mov	r3, r0
 8006350:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t cmd_pec0 = cmd_pec >> 8;
 8006352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006354:	0a1b      	lsrs	r3, r3, #8
 8006356:	b29b      	uxth	r3, r3
 8006358:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t cmd_pec1 = cmd_pec;
 800635c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800635e:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t poll_msg[5] = {cmd0, cmd1, cmd_pec0, cmd_pec1, 0};
 8006362:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006366:	753b      	strb	r3, [r7, #20]
 8006368:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800636c:	757b      	strb	r3, [r7, #21]
 800636e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006372:	75bb      	strb	r3, [r7, #22]
 8006374:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006378:	75fb      	strb	r3, [r7, #23]
 800637a:	2300      	movs	r3, #0
 800637c:	763b      	strb	r3, [r7, #24]
	uint8_t read_msg[5] = {0, 0, 0, 0, 0};
 800637e:	4a1f      	ldr	r2, [pc, #124]	; (80063fc <poll_status+0x108>)
 8006380:	f107 030c 	add.w	r3, r7, #12
 8006384:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006388:	6018      	str	r0, [r3, #0]
 800638a:	3304      	adds	r3, #4
 800638c:	7019      	strb	r1, [r3, #0]

	// isoSPI must be in READY state
	isospi_ready(master);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff fd93 	bl	8005eba <isospi_ready>
	HAL_GPIO_WritePin(master->csBMS, master->csBMSPin, GPIO_PIN_RESET);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6858      	ldr	r0, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	899b      	ldrh	r3, [r3, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	4619      	mov	r1, r3
 80063a0:	f007 fcf0 	bl	800dd84 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive(master->spiHandle, poll_msg, read_msg, sizeof(poll_msg), TIMEOUT) != HAL_OK) {
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	f107 020c 	add.w	r2, r7, #12
 80063ac:	f107 0114 	add.w	r1, r7, #20
 80063b0:	2332      	movs	r3, #50	; 0x32
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	2305      	movs	r3, #5
 80063b6:	f009 fe10 	bl	800ffda <HAL_SPI_TransmitReceive>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d009      	beq.n	80063d4 <poll_status+0xe0>
		HAL_GPIO_WritePin(master->csBMS, master->csBMSPin, GPIO_PIN_SET);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6858      	ldr	r0, [r3, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	899b      	ldrh	r3, [r3, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	4619      	mov	r1, r3
 80063cc:	f007 fcda 	bl	800dd84 <HAL_GPIO_WritePin>
		return TX_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e00d      	b.n	80063f0 <poll_status+0xfc>
	}
	HAL_GPIO_WritePin(master->csBMS, master->csBMSPin, GPIO_PIN_SET);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6858      	ldr	r0, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	899b      	ldrh	r3, [r3, #12]
 80063dc:	2201      	movs	r2, #1
 80063de:	4619      	mov	r1, r3
 80063e0:	f007 fcd0 	bl	800dd84 <HAL_GPIO_WritePin>

	if (read_msg[4] != 0xFF)
 80063e4:	7c3b      	ldrb	r3, [r7, #16]
 80063e6:	2bff      	cmp	r3, #255	; 0xff
 80063e8:	d001      	beq.n	80063ee <poll_status+0xfa>
		return ADC_BUSY;
 80063ea:	2306      	movs	r3, #6
 80063ec:	e000      	b.n	80063f0 <poll_status+0xfc>

	return OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3728      	adds	r7, #40	; 0x28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	ffff8714 	.word	0xffff8714
 80063fc:	08021ae0 	.word	0x08021ae0

08006400 <SD_Card_init>:
char line[100];



FRESULT SD_Card_init(SD_Card* sdCard, LTC6811* slave_array, Accu_info* accuInfo, BMS_info* bmsInfo, Ivt* ivt, Elcon* elcon, Imd* imd, P23_status* p23status)
{
 8006400:	b590      	push	{r4, r7, lr}
 8006402:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 8006406:	af00      	add	r7, sp, #0
 8006408:	f507 7420 	add.w	r4, r7, #640	; 0x280
 800640c:	f5a4 741d 	sub.w	r4, r4, #628	; 0x274
 8006410:	6020      	str	r0, [r4, #0]
 8006412:	f507 7020 	add.w	r0, r7, #640	; 0x280
 8006416:	f5a0 701e 	sub.w	r0, r0, #632	; 0x278
 800641a:	6001      	str	r1, [r0, #0]
 800641c:	f507 7120 	add.w	r1, r7, #640	; 0x280
 8006420:	f5a1 711f 	sub.w	r1, r1, #636	; 0x27c
 8006424:	600a      	str	r2, [r1, #0]
 8006426:	f507 7220 	add.w	r2, r7, #640	; 0x280
 800642a:	f5a2 7220 	sub.w	r2, r2, #640	; 0x280
 800642e:	6013      	str	r3, [r2, #0]
	sd_slave_array = slave_array;
 8006430:	4a90      	ldr	r2, [pc, #576]	; (8006674 <SD_Card_init+0x274>)
 8006432:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006436:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6013      	str	r3, [r2, #0]
	sd_accuInfo    = accuInfo;
 800643e:	4a8e      	ldr	r2, [pc, #568]	; (8006678 <SD_Card_init+0x278>)
 8006440:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006444:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6013      	str	r3, [r2, #0]
	sd_ivt         = ivt;
 800644c:	4a8b      	ldr	r2, [pc, #556]	; (800667c <SD_Card_init+0x27c>)
 800644e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8006452:	6013      	str	r3, [r2, #0]
	sd_elcon       = elcon;
 8006454:	4a8a      	ldr	r2, [pc, #552]	; (8006680 <SD_Card_init+0x280>)
 8006456:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800645a:	6013      	str	r3, [r2, #0]
	sd_imd         = imd;
 800645c:	4a89      	ldr	r2, [pc, #548]	; (8006684 <SD_Card_init+0x284>)
 800645e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006462:	6013      	str	r3, [r2, #0]
	sd_p23_status  = p23status;
 8006464:	4a88      	ldr	r2, [pc, #544]	; (8006688 <SD_Card_init+0x288>)
 8006466:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800646a:	6013      	str	r3, [r2, #0]
	sd_bmsInfo     = bmsInfo;
 800646c:	4a87      	ldr	r2, [pc, #540]	; (800668c <SD_Card_init+0x28c>)
 800646e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006472:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6013      	str	r3, [r2, #0]

	sdCard->read_flag      = 0;
 800647a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800647e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006488:	2200      	movs	r2, #0
 800648a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	sdCard->unsaved_writes = 0;
 800648e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006492:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800649c:	2200      	movs	r2, #0
 800649e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	sdCard->message_num    = 1;
 80064a2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80064a6:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064b0:	461a      	mov	r2, r3
 80064b2:	2301      	movs	r3, #1
 80064b4:	6793      	str	r3, [r2, #120]	; 0x78

	sdCard->fresult = f_mount(&(sdCard->fs), "/", 1);
 80064b6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80064ba:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2201      	movs	r2, #1
 80064c2:	4973      	ldr	r1, [pc, #460]	; (8006690 <SD_Card_init+0x290>)
 80064c4:	4618      	mov	r0, r3
 80064c6:	f010 fb53 	bl	8016b70 <f_mount>
 80064ca:	4603      	mov	r3, r0
 80064cc:	461a      	mov	r2, r3
 80064ce:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80064d2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	if (sdCard->fresult != FR_OK)
 80064e0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80064e4:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064ee:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d013      	beq.n	800651e <SD_Card_init+0x11e>
	{
		sdCard->mounted = false;
 80064f6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80064fa:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		return sdCard->fresult;
 800650a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800650e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006518:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800651c:	e373      	b.n	8006c06 <SD_Card_init+0x806>
	}

	sdCard->fresult = f_stat("number.csv", &fileInfo);
 800651e:	495d      	ldr	r1, [pc, #372]	; (8006694 <SD_Card_init+0x294>)
 8006520:	485d      	ldr	r0, [pc, #372]	; (8006698 <SD_Card_init+0x298>)
 8006522:	f011 fbd3 	bl	8017ccc <f_stat>
 8006526:	4603      	mov	r3, r0
 8006528:	461a      	mov	r2, r3
 800652a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800652e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006538:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	if (sdCard->fresult == FR_OK) {
 800653c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006540:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800654a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800654e:	2b00      	cmp	r3, #0
 8006550:	f040 80ac 	bne.w	80066ac <SD_Card_init+0x2ac>
		sdCard->fresult = f_open(&(sdCard->file), "number.csv", FA_READ | FA_WRITE);
 8006554:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006558:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006562:	3318      	adds	r3, #24
 8006564:	2203      	movs	r2, #3
 8006566:	494c      	ldr	r1, [pc, #304]	; (8006698 <SD_Card_init+0x298>)
 8006568:	4618      	mov	r0, r3
 800656a:	f010 fb65 	bl	8016c38 <f_open>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
 8006572:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006576:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006580:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		if (sdCard->fresult != FR_OK)
 8006584:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006588:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006592:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006596:	2b00      	cmp	r3, #0
 8006598:	d009      	beq.n	80065ae <SD_Card_init+0x1ae>
			return sdCard->fresult;
 800659a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800659e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065a8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80065ac:	e32b      	b.n	8006c06 <SD_Card_init+0x806>
		if (f_gets(line, sizeof(line), &(sdCard->file)) != NULL) {
 80065ae:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80065b2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80065bc:	3318      	adds	r3, #24
 80065be:	461a      	mov	r2, r3
 80065c0:	2164      	movs	r1, #100	; 0x64
 80065c2:	4836      	ldr	r0, [pc, #216]	; (800669c <SD_Card_init+0x29c>)
 80065c4:	f011 fbc2 	bl	8017d4c <f_gets>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d03a      	beq.n	8006644 <SD_Card_init+0x244>
			// Rewind the file pointer to the beginning
			f_lseek(&(sdCard->file), 0);
 80065ce:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80065d2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80065dc:	3318      	adds	r3, #24
 80065de:	2100      	movs	r1, #0
 80065e0:	4618      	mov	r0, r3
 80065e2:	f011 f905 	bl	80177f0 <f_lseek>
			if (sscanf(line, "%d", &filenumber) == 1) {
 80065e6:	4a2e      	ldr	r2, [pc, #184]	; (80066a0 <SD_Card_init+0x2a0>)
 80065e8:	492e      	ldr	r1, [pc, #184]	; (80066a4 <SD_Card_init+0x2a4>)
 80065ea:	482c      	ldr	r0, [pc, #176]	; (800669c <SD_Card_init+0x29c>)
 80065ec:	f017 ff28 	bl	801e440 <siscanf>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d105      	bne.n	8006602 <SD_Card_init+0x202>
				filenumber++;
 80065f6:	4b2a      	ldr	r3, [pc, #168]	; (80066a0 <SD_Card_init+0x2a0>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3301      	adds	r3, #1
 80065fc:	4a28      	ldr	r2, [pc, #160]	; (80066a0 <SD_Card_init+0x2a0>)
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	e002      	b.n	8006608 <SD_Card_init+0x208>
			} else {
				filenumber = 1;
 8006602:	4b27      	ldr	r3, [pc, #156]	; (80066a0 <SD_Card_init+0x2a0>)
 8006604:	2201      	movs	r2, #1
 8006606:	601a      	str	r2, [r3, #0]
			}
			snprintf(line, sizeof(line), "%d\n", filenumber);
 8006608:	4b25      	ldr	r3, [pc, #148]	; (80066a0 <SD_Card_init+0x2a0>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a26      	ldr	r2, [pc, #152]	; (80066a8 <SD_Card_init+0x2a8>)
 800660e:	2164      	movs	r1, #100	; 0x64
 8006610:	4822      	ldr	r0, [pc, #136]	; (800669c <SD_Card_init+0x29c>)
 8006612:	f017 fec1 	bl	801e398 <sniprintf>
			sdCard->fresult = f_puts(line, &(sdCard->file));
 8006616:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800661a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006624:	3318      	adds	r3, #24
 8006626:	4619      	mov	r1, r3
 8006628:	481c      	ldr	r0, [pc, #112]	; (800669c <SD_Card_init+0x29c>)
 800662a:	f011 fc43 	bl	8017eb4 <f_puts>
 800662e:	4603      	mov	r3, r0
 8006630:	b2da      	uxtb	r2, r3
 8006632:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006636:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006640:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		}
		sdCard->fresult = f_close(&(sdCard->file));
 8006644:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006648:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006652:	3318      	adds	r3, #24
 8006654:	4618      	mov	r0, r3
 8006656:	f011 f89c 	bl	8017792 <f_close>
 800665a:	4603      	mov	r3, r0
 800665c:	461a      	mov	r2, r3
 800665e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006662:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800666c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8006670:	e06b      	b.n	800674a <SD_Card_init+0x34a>
 8006672:	bf00      	nop
 8006674:	20000834 	.word	0x20000834
 8006678:	20000838 	.word	0x20000838
 800667c:	20000840 	.word	0x20000840
 8006680:	20000844 	.word	0x20000844
 8006684:	20000848 	.word	0x20000848
 8006688:	2000084c 	.word	0x2000084c
 800668c:	2000083c 	.word	0x2000083c
 8006690:	08021ae8 	.word	0x08021ae8
 8006694:	20000850 	.word	0x20000850
 8006698:	08021aec 	.word	0x08021aec
 800669c:	20000868 	.word	0x20000868
 80066a0:	20000004 	.word	0x20000004
 80066a4:	08021af8 	.word	0x08021af8
 80066a8:	08021afc 	.word	0x08021afc
	}
	else{
		filenumber=0;
 80066ac:	4bcc      	ldr	r3, [pc, #816]	; (80069e0 <SD_Card_init+0x5e0>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]
		sdCard->fresult = f_open(&(sdCard->file), "number.csv", FA_OPEN_APPEND | FA_WRITE);
 80066b2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80066b6:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80066c0:	3318      	adds	r3, #24
 80066c2:	2232      	movs	r2, #50	; 0x32
 80066c4:	49c7      	ldr	r1, [pc, #796]	; (80069e4 <SD_Card_init+0x5e4>)
 80066c6:	4618      	mov	r0, r3
 80066c8:	f010 fab6 	bl	8016c38 <f_open>
 80066cc:	4603      	mov	r3, r0
 80066ce:	461a      	mov	r2, r3
 80066d0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80066d4:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80066de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		snprintf(line, sizeof(line), "%d\n", filenumber);
 80066e2:	4bbf      	ldr	r3, [pc, #764]	; (80069e0 <SD_Card_init+0x5e0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4ac0      	ldr	r2, [pc, #768]	; (80069e8 <SD_Card_init+0x5e8>)
 80066e8:	2164      	movs	r1, #100	; 0x64
 80066ea:	48c0      	ldr	r0, [pc, #768]	; (80069ec <SD_Card_init+0x5ec>)
 80066ec:	f017 fe54 	bl	801e398 <sniprintf>
		sdCard->fresult = f_puts(line, &(sdCard->file));
 80066f0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80066f4:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80066fe:	3318      	adds	r3, #24
 8006700:	4619      	mov	r1, r3
 8006702:	48ba      	ldr	r0, [pc, #744]	; (80069ec <SD_Card_init+0x5ec>)
 8006704:	f011 fbd6 	bl	8017eb4 <f_puts>
 8006708:	4603      	mov	r3, r0
 800670a:	b2da      	uxtb	r2, r3
 800670c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006710:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800671a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		sdCard->fresult = f_close(&(sdCard->file));
 800671e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006722:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800672c:	3318      	adds	r3, #24
 800672e:	4618      	mov	r0, r3
 8006730:	f011 f82f 	bl	8017792 <f_close>
 8006734:	4603      	mov	r3, r0
 8006736:	461a      	mov	r2, r3
 8006738:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800673c:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006746:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	}
	char allFileName[20]; // Adjust the size based on your filename requirements
	snprintf(allFileName, sizeof(allFileName), "all%d.csv", filenumber);
 800674a:	4ba5      	ldr	r3, [pc, #660]	; (80069e0 <SD_Card_init+0x5e0>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f507 701a 	add.w	r0, r7, #616	; 0x268
 8006752:	4aa7      	ldr	r2, [pc, #668]	; (80069f0 <SD_Card_init+0x5f0>)
 8006754:	2114      	movs	r1, #20
 8006756:	f017 fe1f 	bl	801e398 <sniprintf>
	sdCard->fresult = f_open(&(sdCard->file), allFileName, FA_OPEN_APPEND | FA_WRITE);
 800675a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800675e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006768:	3318      	adds	r3, #24
 800676a:	f507 711a 	add.w	r1, r7, #616	; 0x268
 800676e:	2232      	movs	r2, #50	; 0x32
 8006770:	4618      	mov	r0, r3
 8006772:	f010 fa61 	bl	8016c38 <f_open>
 8006776:	4603      	mov	r3, r0
 8006778:	461a      	mov	r2, r3
 800677a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800677e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006788:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	if (sdCard->fresult != FR_OK)
 800678c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006790:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800679a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <SD_Card_init+0x3b6>
		return sdCard->fresult;
 80067a2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80067a6:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80067b0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80067b4:	e227      	b.n	8006c06 <SD_Card_init+0x806>
	sdCard->mounted = true;
 80067b6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80067ba:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91



	char header[600];

	sprintf(header, "Message_num, HAL_GetTick()");
 80067ca:	f107 0310 	add.w	r3, r7, #16
 80067ce:	4989      	ldr	r1, [pc, #548]	; (80069f4 <SD_Card_init+0x5f4>)
 80067d0:	4618      	mov	r0, r3
 80067d2:	f017 fe15 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 80067d6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80067da:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80067e4:	3318      	adds	r3, #24
 80067e6:	f107 0210 	add.w	r2, r7, #16
 80067ea:	4619      	mov	r1, r3
 80067ec:	4610      	mov	r0, r2
 80067ee:	f011 fb61 	bl	8017eb4 <f_puts>
 80067f2:	4603      	mov	r3, r0
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80067fa:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006804:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	for(uint8_t cell = 0; cell < 144; cell++){
 8006808:	2300      	movs	r3, #0
 800680a:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 800680e:	e025      	b.n	800685c <SD_Card_init+0x45c>
		sprintf(header, ", V%d", cell);
 8006810:	f897 227f 	ldrb.w	r2, [r7, #639]	; 0x27f
 8006814:	f107 0310 	add.w	r3, r7, #16
 8006818:	4977      	ldr	r1, [pc, #476]	; (80069f8 <SD_Card_init+0x5f8>)
 800681a:	4618      	mov	r0, r3
 800681c:	f017 fdf0 	bl	801e400 <siprintf>
		sdCard->fresult = f_puts(header, &(sdCard->file));
 8006820:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006824:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800682e:	3318      	adds	r3, #24
 8006830:	f107 0210 	add.w	r2, r7, #16
 8006834:	4619      	mov	r1, r3
 8006836:	4610      	mov	r0, r2
 8006838:	f011 fb3c 	bl	8017eb4 <f_puts>
 800683c:	4603      	mov	r3, r0
 800683e:	b2da      	uxtb	r2, r3
 8006840:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006844:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800684e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	for(uint8_t cell = 0; cell < 144; cell++){
 8006852:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8006856:	3301      	adds	r3, #1
 8006858:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 800685c:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8006860:	2b8f      	cmp	r3, #143	; 0x8f
 8006862:	d9d5      	bls.n	8006810 <SD_Card_init+0x410>
	}

	//BMS Temperatures
	sprintf(header, " , T0");
 8006864:	f107 0310 	add.w	r3, r7, #16
 8006868:	4964      	ldr	r1, [pc, #400]	; (80069fc <SD_Card_init+0x5fc>)
 800686a:	4618      	mov	r0, r3
 800686c:	f017 fdc8 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 8006870:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006874:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800687e:	3318      	adds	r3, #24
 8006880:	f107 0210 	add.w	r2, r7, #16
 8006884:	4619      	mov	r1, r3
 8006886:	4610      	mov	r0, r2
 8006888:	f011 fb14 	bl	8017eb4 <f_puts>
 800688c:	4603      	mov	r3, r0
 800688e:	b2da      	uxtb	r2, r3
 8006890:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006894:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800689e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	for(uint8_t ntc = 1; ntc < 80; ntc++){
 80068a2:	2301      	movs	r3, #1
 80068a4:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 80068a8:	e025      	b.n	80068f6 <SD_Card_init+0x4f6>
		sprintf(header, ", T%d", ntc);
 80068aa:	f897 227e 	ldrb.w	r2, [r7, #638]	; 0x27e
 80068ae:	f107 0310 	add.w	r3, r7, #16
 80068b2:	4953      	ldr	r1, [pc, #332]	; (8006a00 <SD_Card_init+0x600>)
 80068b4:	4618      	mov	r0, r3
 80068b6:	f017 fda3 	bl	801e400 <siprintf>
		sdCard->fresult = f_puts(header, &(sdCard->file));
 80068ba:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80068be:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80068c8:	3318      	adds	r3, #24
 80068ca:	f107 0210 	add.w	r2, r7, #16
 80068ce:	4619      	mov	r1, r3
 80068d0:	4610      	mov	r0, r2
 80068d2:	f011 faef 	bl	8017eb4 <f_puts>
 80068d6:	4603      	mov	r3, r0
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80068de:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	for(uint8_t ntc = 1; ntc < 80; ntc++){
 80068ec:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 80068f0:	3301      	adds	r3, #1
 80068f2:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 80068f6:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 80068fa:	2b4f      	cmp	r3, #79	; 0x4f
 80068fc:	d9d5      	bls.n	80068aa <SD_Card_init+0x4aa>
	}

	//BMS Humidities
	sprintf(header, " , H0");
 80068fe:	f107 0310 	add.w	r3, r7, #16
 8006902:	4940      	ldr	r1, [pc, #256]	; (8006a04 <SD_Card_init+0x604>)
 8006904:	4618      	mov	r0, r3
 8006906:	f017 fd7b 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 800690a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800690e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006918:	3318      	adds	r3, #24
 800691a:	f107 0210 	add.w	r2, r7, #16
 800691e:	4619      	mov	r1, r3
 8006920:	4610      	mov	r0, r2
 8006922:	f011 fac7 	bl	8017eb4 <f_puts>
 8006926:	4603      	mov	r3, r0
 8006928:	b2da      	uxtb	r2, r3
 800692a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800692e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006938:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	for(uint8_t rh = 1; rh < 16; rh++){
 800693c:	2301      	movs	r3, #1
 800693e:	f887 327d 	strb.w	r3, [r7, #637]	; 0x27d
 8006942:	e025      	b.n	8006990 <SD_Card_init+0x590>
		sprintf(header, ", H%d", rh);
 8006944:	f897 227d 	ldrb.w	r2, [r7, #637]	; 0x27d
 8006948:	f107 0310 	add.w	r3, r7, #16
 800694c:	492e      	ldr	r1, [pc, #184]	; (8006a08 <SD_Card_init+0x608>)
 800694e:	4618      	mov	r0, r3
 8006950:	f017 fd56 	bl	801e400 <siprintf>
		sdCard->fresult = f_puts(header, &(sdCard->file));
 8006954:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006958:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006962:	3318      	adds	r3, #24
 8006964:	f107 0210 	add.w	r2, r7, #16
 8006968:	4619      	mov	r1, r3
 800696a:	4610      	mov	r0, r2
 800696c:	f011 faa2 	bl	8017eb4 <f_puts>
 8006970:	4603      	mov	r3, r0
 8006972:	b2da      	uxtb	r2, r3
 8006974:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006978:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006982:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	for(uint8_t rh = 1; rh < 16; rh++){
 8006986:	f897 327d 	ldrb.w	r3, [r7, #637]	; 0x27d
 800698a:	3301      	adds	r3, #1
 800698c:	f887 327d 	strb.w	r3, [r7, #637]	; 0x27d
 8006990:	f897 327d 	ldrb.w	r3, [r7, #637]	; 0x27d
 8006994:	2b0f      	cmp	r3, #15
 8006996:	d9d5      	bls.n	8006944 <SD_Card_init+0x544>
	}

	//BMS PEC Errors
	sprintf(header, " ,PEC0");
 8006998:	f107 0310 	add.w	r3, r7, #16
 800699c:	491b      	ldr	r1, [pc, #108]	; (8006a0c <SD_Card_init+0x60c>)
 800699e:	4618      	mov	r0, r3
 80069a0:	f017 fd2e 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 80069a4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80069a8:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80069b2:	3318      	adds	r3, #24
 80069b4:	f107 0210 	add.w	r2, r7, #16
 80069b8:	4619      	mov	r1, r3
 80069ba:	4610      	mov	r0, r2
 80069bc:	f011 fa7a 	bl	8017eb4 <f_puts>
 80069c0:	4603      	mov	r3, r0
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80069c8:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069d2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	for(uint8_t id = 1; id < 16; id++){
 80069d6:	2301      	movs	r3, #1
 80069d8:	f887 327c 	strb.w	r3, [r7, #636]	; 0x27c
 80069dc:	e03e      	b.n	8006a5c <SD_Card_init+0x65c>
 80069de:	bf00      	nop
 80069e0:	20000004 	.word	0x20000004
 80069e4:	08021aec 	.word	0x08021aec
 80069e8:	08021afc 	.word	0x08021afc
 80069ec:	20000868 	.word	0x20000868
 80069f0:	08021b00 	.word	0x08021b00
 80069f4:	08021b0c 	.word	0x08021b0c
 80069f8:	08021b28 	.word	0x08021b28
 80069fc:	08021b30 	.word	0x08021b30
 8006a00:	08021b38 	.word	0x08021b38
 8006a04:	08021b40 	.word	0x08021b40
 8006a08:	08021b48 	.word	0x08021b48
 8006a0c:	08021b50 	.word	0x08021b50
		sprintf(header, ", PEC%d", id);
 8006a10:	f897 227c 	ldrb.w	r2, [r7, #636]	; 0x27c
 8006a14:	f107 0310 	add.w	r3, r7, #16
 8006a18:	497d      	ldr	r1, [pc, #500]	; (8006c10 <SD_Card_init+0x810>)
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f017 fcf0 	bl	801e400 <siprintf>
		sdCard->fresult = f_puts(header, &(sdCard->file));
 8006a20:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006a24:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006a2e:	3318      	adds	r3, #24
 8006a30:	f107 0210 	add.w	r2, r7, #16
 8006a34:	4619      	mov	r1, r3
 8006a36:	4610      	mov	r0, r2
 8006a38:	f011 fa3c 	bl	8017eb4 <f_puts>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006a44:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a4e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	for(uint8_t id = 1; id < 16; id++){
 8006a52:	f897 327c 	ldrb.w	r3, [r7, #636]	; 0x27c
 8006a56:	3301      	adds	r3, #1
 8006a58:	f887 327c 	strb.w	r3, [r7, #636]	; 0x27c
 8006a5c:	f897 327c 	ldrb.w	r3, [r7, #636]	; 0x27c
 8006a60:	2b0f      	cmp	r3, #15
 8006a62:	d9d5      	bls.n	8006a10 <SD_Card_init+0x610>
	}

	// AccuInfo
	sprintf(header, " ,ams_error, imd_error, AIR_P_Supp, AIR_M_Supp, AIR_P_State,  AIR_M_State, over60_dclink, dc_dc_temp, HVroom_humidity, HVroom_temperature, "
 8006a64:	f107 0310 	add.w	r3, r7, #16
 8006a68:	496a      	ldr	r1, [pc, #424]	; (8006c14 <SD_Card_init+0x814>)
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f017 fcc8 	bl	801e400 <siprintf>
			        "precharge_voltage, AIR_P_State_Int, precharge_actual_state, precharge_relay_error, air_stuck, ts_active, precharge_done, "
			        "precharge_failed");
	sdCard->fresult = f_puts(header, &(sdCard->file));
 8006a70:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006a74:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006a7e:	3318      	adds	r3, #24
 8006a80:	f107 0210 	add.w	r2, r7, #16
 8006a84:	4619      	mov	r1, r3
 8006a86:	4610      	mov	r0, r2
 8006a88:	f011 fa14 	bl	8017eb4 <f_puts>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006a94:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a9e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	// IVT
	sprintf(header, " ,current, voltage_vs, Ah_consumed, Wh_consumed");
 8006aa2:	f107 0310 	add.w	r3, r7, #16
 8006aa6:	495c      	ldr	r1, [pc, #368]	; (8006c18 <SD_Card_init+0x818>)
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f017 fca9 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 8006aae:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006ab2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006abc:	3318      	adds	r3, #24
 8006abe:	f107 0210 	add.w	r2, r7, #16
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	f011 f9f5 	bl	8017eb4 <f_puts>
 8006aca:	4603      	mov	r3, r0
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006ad2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006adc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	// Elcon
	sprintf(header, " ,elcon_connected, target_voltage, output_voltage, target_current, output_current, "
 8006ae0:	f107 0310 	add.w	r3, r7, #16
 8006ae4:	494d      	ldr	r1, [pc, #308]	; (8006c1c <SD_Card_init+0x81c>)
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f017 fc8a 	bl	801e400 <siprintf>
			        "target_charge_state, charge_state, hw_fail, charger_over_temp, ac_input_ok, charger_can_error");
	sdCard->fresult = f_puts(header, &(sdCard->file));
 8006aec:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006af0:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006afa:	3318      	adds	r3, #24
 8006afc:	f107 0210 	add.w	r2, r7, #16
 8006b00:	4619      	mov	r1, r3
 8006b02:	4610      	mov	r0, r2
 8006b04:	f011 f9d6 	bl	8017eb4 <f_puts>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006b10:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006b1a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	// IMD
	sprintf(header, " ,IMD_condition, IMD_status, insulation_kOhm");
 8006b1e:	f107 0310 	add.w	r3, r7, #16
 8006b22:	493f      	ldr	r1, [pc, #252]	; (8006c20 <SD_Card_init+0x820>)
 8006b24:	4618      	mov	r0, r3
 8006b26:	f017 fc6b 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 8006b2a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006b2e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006b38:	3318      	adds	r3, #24
 8006b3a:	f107 0210 	add.w	r2, r7, #16
 8006b3e:	4619      	mov	r1, r3
 8006b40:	4610      	mov	r0, r2
 8006b42:	f011 f9b7 	bl	8017eb4 <f_puts>
 8006b46:	4603      	mov	r3, r0
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006b4e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006b58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	// BMS Info
	sprintf(header, " ,min_SoC, max_SoC, accu_voltage");
 8006b5c:	f107 0310 	add.w	r3, r7, #16
 8006b60:	4930      	ldr	r1, [pc, #192]	; (8006c24 <SD_Card_init+0x824>)
 8006b62:	4618      	mov	r0, r3
 8006b64:	f017 fc4c 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 8006b68:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006b6c:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006b76:	3318      	adds	r3, #24
 8006b78:	f107 0210 	add.w	r2, r7, #16
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4610      	mov	r0, r2
 8006b80:	f011 f998 	bl	8017eb4 <f_puts>
 8006b84:	4603      	mov	r3, r0
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006b8c:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006b96:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	// P23 Status
	sprintf(header, " ,actual_torque, requested_torque, motor_rpm, bspd_status, ts_off, rtd_done, vcu_alive, "
 8006b9a:	f107 0310 	add.w	r3, r7, #16
 8006b9e:	4922      	ldr	r1, [pc, #136]	; (8006c28 <SD_Card_init+0x828>)
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f017 fc2d 	bl	801e400 <siprintf>
					"accu_alive, hall_fl, hall_fr, hall_rl, hall_rr, "
			        "power_limiter, apps1, apps2, Brake_pressure_front, Brake_pressure_rear, tsal_impl_air_m,"
			        "tsal_impl_air_p, tsal_impl_acccu, tsal_impl_pc_state, vcu_flags, vcu_sd_flags, inv_enabled,"
			        "inv_curr_lim_reached, tdk1_current, tdk2_current, lv_max_cell_voltage, lv_min_cell_voltage \n");
	sdCard->fresult = f_puts(header, &(sdCard->file));
 8006ba6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006baa:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006bb4:	3318      	adds	r3, #24
 8006bb6:	f107 0210 	add.w	r2, r7, #16
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	f011 f979 	bl	8017eb4 <f_puts>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006bca:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006bd4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	/* Auto Save SD Card for Headers */
	sdCard->fresult = f_sync(&(sdCard->file));
 8006bd8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006bdc:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006be6:	3318      	adds	r3, #24
 8006be8:	4618      	mov	r0, r3
 8006bea:	f010 fd49 	bl	8017680 <f_sync>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006bf6:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006c00:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	return FR_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	f507 7721 	add.w	r7, r7, #644	; 0x284
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd90      	pop	{r4, r7, pc}
 8006c10:	08021b58 	.word	0x08021b58
 8006c14:	08021b60 	.word	0x08021b60
 8006c18:	08021c78 	.word	0x08021c78
 8006c1c:	08021ca8 	.word	0x08021ca8
 8006c20:	08021d5c 	.word	0x08021d5c
 8006c24:	08021d8c 	.word	0x08021d8c
 8006c28:	08021db0 	.word	0x08021db0

08006c2c <SD_card_write>:



void SD_card_write(SD_Card* sdCard)
{
 8006c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c30:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 8006c34:	af20      	add	r7, sp, #128	; 0x80
 8006c36:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006c3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006c3e:	6018      	str	r0, [r3, #0]
	char header[500];

	sprintf(header, "%" PRIu32 ", ", sdCard->message_num);
 8006c40:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006c44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006c4e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006c50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006c54:	4989      	ldr	r1, [pc, #548]	; (8006e7c <SD_card_write+0x250>)
 8006c56:	4618      	mov	r0, r3
 8006c58:	f017 fbd2 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 8006c5c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006c60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006c6a:	3318      	adds	r3, #24
 8006c6c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006c70:	4619      	mov	r1, r3
 8006c72:	4610      	mov	r0, r2
 8006c74:	f011 f91e 	bl	8017eb4 <f_puts>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006c80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006c8a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	sprintf(header, "%" PRIu32 ", ", xTaskGetTickCount());
 8006c8e:	f013 f905 	bl	8019e9c <xTaskGetTickCount>
 8006c92:	4602      	mov	r2, r0
 8006c94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006c98:	4978      	ldr	r1, [pc, #480]	; (8006e7c <SD_card_write+0x250>)
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f017 fbb0 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 8006ca0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006ca4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006cae:	3318      	adds	r3, #24
 8006cb0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	f011 f8fc 	bl	8017eb4 <f_puts>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006cc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006cce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	//BMS Voltages
	for (uint8_t slave = 0; slave < 16; slave++){
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8006cd8:	e043      	b.n	8006d62 <SD_card_write+0x136>
		for(uint8_t cell = 0; cell < 9; cell++){
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f887 3266 	strb.w	r3, [r7, #614]	; 0x266
 8006ce0:	e036      	b.n	8006d50 <SD_card_write+0x124>
			sprintf(header, "%0.4f, ", sd_slave_array[slave].voltage[cell]);
 8006ce2:	4b67      	ldr	r3, [pc, #412]	; (8006e80 <SD_card_write+0x254>)
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006cea:	21d8      	movs	r1, #216	; 0xd8
 8006cec:	fb01 f303 	mul.w	r3, r1, r3
 8006cf0:	441a      	add	r2, r3
 8006cf2:	f897 3266 	ldrb.w	r3, [r7, #614]	; 0x266
 8006cf6:	3312      	adds	r3, #18
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7f9 fc21 	bl	8000548 <__aeabi_f2d>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8006d0e:	495d      	ldr	r1, [pc, #372]	; (8006e84 <SD_card_write+0x258>)
 8006d10:	f017 fb76 	bl	801e400 <siprintf>
			sdCard->fresult = f_puts(header, &(sdCard->file));
 8006d14:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006d18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006d22:	3318      	adds	r3, #24
 8006d24:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	f011 f8c2 	bl	8017eb4 <f_puts>
 8006d30:	4603      	mov	r3, r0
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006d38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006d42:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		for(uint8_t cell = 0; cell < 9; cell++){
 8006d46:	f897 3266 	ldrb.w	r3, [r7, #614]	; 0x266
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	f887 3266 	strb.w	r3, [r7, #614]	; 0x266
 8006d50:	f897 3266 	ldrb.w	r3, [r7, #614]	; 0x266
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d9c4      	bls.n	8006ce2 <SD_card_write+0xb6>
	for (uint8_t slave = 0; slave < 16; slave++){
 8006d58:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8006d62:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006d66:	2b0f      	cmp	r3, #15
 8006d68:	d9b7      	bls.n	8006cda <SD_card_write+0xae>
		}
	}

	//BMS Temperatures
	for (uint8_t slave = 0; slave < 16; slave++){
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	f887 3265 	strb.w	r3, [r7, #613]	; 0x265
 8006d70:	e042      	b.n	8006df8 <SD_card_write+0x1cc>
		for(uint8_t ntc = 0; ntc < 5; ntc++){
 8006d72:	2300      	movs	r3, #0
 8006d74:	f887 3264 	strb.w	r3, [r7, #612]	; 0x264
 8006d78:	e035      	b.n	8006de6 <SD_card_write+0x1ba>
			sprintf(header, "%0.4f, ", sd_slave_array[slave].temp[ntc]);
 8006d7a:	4b41      	ldr	r3, [pc, #260]	; (8006e80 <SD_card_write+0x254>)
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	f897 3265 	ldrb.w	r3, [r7, #613]	; 0x265
 8006d82:	21d8      	movs	r1, #216	; 0xd8
 8006d84:	fb01 f303 	mul.w	r3, r1, r3
 8006d88:	441a      	add	r2, r3
 8006d8a:	f897 3264 	ldrb.w	r3, [r7, #612]	; 0x264
 8006d8e:	3322      	adds	r3, #34	; 0x22
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7f9 fbd6 	bl	8000548 <__aeabi_f2d>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8006da4:	4937      	ldr	r1, [pc, #220]	; (8006e84 <SD_card_write+0x258>)
 8006da6:	f017 fb2b 	bl	801e400 <siprintf>
			sdCard->fresult = f_puts(header, &(sdCard->file));
 8006daa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006dae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006db8:	3318      	adds	r3, #24
 8006dba:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	f011 f877 	bl	8017eb4 <f_puts>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006dce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006dd8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		for(uint8_t ntc = 0; ntc < 5; ntc++){
 8006ddc:	f897 3264 	ldrb.w	r3, [r7, #612]	; 0x264
 8006de0:	3301      	adds	r3, #1
 8006de2:	f887 3264 	strb.w	r3, [r7, #612]	; 0x264
 8006de6:	f897 3264 	ldrb.w	r3, [r7, #612]	; 0x264
 8006dea:	2b04      	cmp	r3, #4
 8006dec:	d9c5      	bls.n	8006d7a <SD_card_write+0x14e>
	for (uint8_t slave = 0; slave < 16; slave++){
 8006dee:	f897 3265 	ldrb.w	r3, [r7, #613]	; 0x265
 8006df2:	3301      	adds	r3, #1
 8006df4:	f887 3265 	strb.w	r3, [r7, #613]	; 0x265
 8006df8:	f897 3265 	ldrb.w	r3, [r7, #613]	; 0x265
 8006dfc:	2b0f      	cmp	r3, #15
 8006dfe:	d9b8      	bls.n	8006d72 <SD_card_write+0x146>
		}
	}

	//BMS Humidities
	for (uint8_t rh = 0; rh < 16; rh++)
 8006e00:	2300      	movs	r3, #0
 8006e02:	f887 3263 	strb.w	r3, [r7, #611]	; 0x263
 8006e06:	e031      	b.n	8006e6c <SD_card_write+0x240>
	{
		sprintf(header, "%0.4f, ", sd_slave_array[rh].humidity);
 8006e08:	4b1d      	ldr	r3, [pc, #116]	; (8006e80 <SD_card_write+0x254>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	f897 3263 	ldrb.w	r3, [r7, #611]	; 0x263
 8006e10:	21d8      	movs	r1, #216	; 0xd8
 8006e12:	fb01 f303 	mul.w	r3, r1, r3
 8006e16:	4413      	add	r3, r2
 8006e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7f9 fb93 	bl	8000548 <__aeabi_f2d>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8006e2a:	4916      	ldr	r1, [pc, #88]	; (8006e84 <SD_card_write+0x258>)
 8006e2c:	f017 fae8 	bl	801e400 <siprintf>
		sdCard->fresult = f_puts(header, &(sdCard->file));
 8006e30:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006e34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006e3e:	3318      	adds	r3, #24
 8006e40:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f011 f834 	bl	8017eb4 <f_puts>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006e54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e5e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	for (uint8_t rh = 0; rh < 16; rh++)
 8006e62:	f897 3263 	ldrb.w	r3, [r7, #611]	; 0x263
 8006e66:	3301      	adds	r3, #1
 8006e68:	f887 3263 	strb.w	r3, [r7, #611]	; 0x263
 8006e6c:	f897 3263 	ldrb.w	r3, [r7, #611]	; 0x263
 8006e70:	2b0f      	cmp	r3, #15
 8006e72:	d9c9      	bls.n	8006e08 <SD_card_write+0x1dc>
	}

	//BMS PEC Errors
	for (uint8_t id = 0; id < SLAVES_NUM; id++)
 8006e74:	2300      	movs	r3, #0
 8006e76:	f887 3262 	strb.w	r3, [r7, #610]	; 0x262
 8006e7a:	e033      	b.n	8006ee4 <SD_card_write+0x2b8>
 8006e7c:	08021f48 	.word	0x08021f48
 8006e80:	20000834 	.word	0x20000834
 8006e84:	08021f50 	.word	0x08021f50
	{
		sprintf(header, "%" PRIu16 ", ", sd_slave_array[id].pec_errors);
 8006e88:	4bb3      	ldr	r3, [pc, #716]	; (8007158 <SD_card_write+0x52c>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	f897 3262 	ldrb.w	r3, [r7, #610]	; 0x262
 8006e90:	21d8      	movs	r1, #216	; 0xd8
 8006e92:	fb01 f303 	mul.w	r3, r1, r3
 8006e96:	4413      	add	r3, r2
 8006e98:	895b      	ldrh	r3, [r3, #10]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006ea0:	49ae      	ldr	r1, [pc, #696]	; (800715c <SD_card_write+0x530>)
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f017 faac 	bl	801e400 <siprintf>
		sdCard->fresult = f_puts(header, &(sdCard->file));
 8006ea8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006eac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006eb6:	3318      	adds	r3, #24
 8006eb8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	f010 fff8 	bl	8017eb4 <f_puts>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006ecc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006ed6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	for (uint8_t id = 0; id < SLAVES_NUM; id++)
 8006eda:	f897 3262 	ldrb.w	r3, [r7, #610]	; 0x262
 8006ede:	3301      	adds	r3, #1
 8006ee0:	f887 3262 	strb.w	r3, [r7, #610]	; 0x262
 8006ee4:	f897 3262 	ldrb.w	r3, [r7, #610]	; 0x262
 8006ee8:	2b0f      	cmp	r3, #15
 8006eea:	d9cd      	bls.n	8006e88 <SD_card_write+0x25c>
	}

	// ACCU Info
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006eec:	4b9c      	ldr	r3, [pc, #624]	; (8007160 <SD_card_write+0x534>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	7b5b      	ldrb	r3, [r3, #13]
 8006ef2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	469a      	mov	sl, r3
			         sd_accuInfo->imd_error, sd_accuInfo->AIR_P_Supp, sd_accuInfo->AIR_M_Supp, sd_accuInfo->AIR_P_State, sd_accuInfo->AIR_M_State,
 8006efa:	4b99      	ldr	r3, [pc, #612]	; (8007160 <SD_card_write+0x534>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	7b5b      	ldrb	r3, [r3, #13]
 8006f00:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006f04:	b2db      	uxtb	r3, r3
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006f06:	469b      	mov	fp, r3
			         sd_accuInfo->imd_error, sd_accuInfo->AIR_P_Supp, sd_accuInfo->AIR_M_Supp, sd_accuInfo->AIR_P_State, sd_accuInfo->AIR_M_State,
 8006f08:	4b95      	ldr	r3, [pc, #596]	; (8007160 <SD_card_write+0x534>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	7b5b      	ldrb	r3, [r3, #13]
 8006f0e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006f12:	b2db      	uxtb	r3, r3
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006f14:	663b      	str	r3, [r7, #96]	; 0x60
			         sd_accuInfo->imd_error, sd_accuInfo->AIR_P_Supp, sd_accuInfo->AIR_M_Supp, sd_accuInfo->AIR_P_State, sd_accuInfo->AIR_M_State,
 8006f16:	4b92      	ldr	r3, [pc, #584]	; (8007160 <SD_card_write+0x534>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	7b5b      	ldrb	r3, [r3, #13]
 8006f1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006f20:	b2db      	uxtb	r3, r3
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006f22:	65fb      	str	r3, [r7, #92]	; 0x5c
			         sd_accuInfo->imd_error, sd_accuInfo->AIR_P_Supp, sd_accuInfo->AIR_M_Supp, sd_accuInfo->AIR_P_State, sd_accuInfo->AIR_M_State,
 8006f24:	4b8e      	ldr	r3, [pc, #568]	; (8007160 <SD_card_write+0x534>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	7b5b      	ldrb	r3, [r3, #13]
 8006f2a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006f2e:	b2db      	uxtb	r3, r3
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006f30:	65bb      	str	r3, [r7, #88]	; 0x58
			         sd_accuInfo->imd_error, sd_accuInfo->AIR_P_Supp, sd_accuInfo->AIR_M_Supp, sd_accuInfo->AIR_P_State, sd_accuInfo->AIR_M_State,
 8006f32:	4b8b      	ldr	r3, [pc, #556]	; (8007160 <SD_card_write+0x534>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	7b5b      	ldrb	r3, [r3, #13]
 8006f38:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006f3c:	b2db      	uxtb	r3, r3
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006f3e:	657b      	str	r3, [r7, #84]	; 0x54
					 sd_accuInfo->over60V_dclink, sd_accuInfo->dc_dc_temp, sd_accuInfo->HVroom_humidity, sd_accuInfo->HVroom_temperature,
 8006f40:	4b87      	ldr	r3, [pc, #540]	; (8007160 <SD_card_write+0x534>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	7b5b      	ldrb	r3, [r3, #13]
 8006f46:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006f4a:	b2db      	uxtb	r3, r3
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006f4c:	653b      	str	r3, [r7, #80]	; 0x50
					 sd_accuInfo->over60V_dclink, sd_accuInfo->dc_dc_temp, sd_accuInfo->HVroom_humidity, sd_accuInfo->HVroom_temperature,
 8006f4e:	4b84      	ldr	r3, [pc, #528]	; (8007160 <SD_card_write+0x534>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	691b      	ldr	r3, [r3, #16]
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7f9 faf7 	bl	8000548 <__aeabi_f2d>
 8006f5a:	4680      	mov	r8, r0
 8006f5c:	4689      	mov	r9, r1
					 sd_accuInfo->over60V_dclink, sd_accuInfo->dc_dc_temp, sd_accuInfo->HVroom_humidity, sd_accuInfo->HVroom_temperature,
 8006f5e:	4b80      	ldr	r3, [pc, #512]	; (8007160 <SD_card_write+0x534>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	7d1b      	ldrb	r3, [r3, #20]
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006f64:	64fb      	str	r3, [r7, #76]	; 0x4c
					 sd_accuInfo->over60V_dclink, sd_accuInfo->dc_dc_temp, sd_accuInfo->HVroom_humidity, sd_accuInfo->HVroom_temperature,
 8006f66:	4b7e      	ldr	r3, [pc, #504]	; (8007160 <SD_card_write+0x534>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	7d5b      	ldrb	r3, [r3, #21]
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006f6c:	64bb      	str	r3, [r7, #72]	; 0x48
					 sd_accuInfo->precharge_voltage, sd_accuInfo->AIR_P_State_Int, sd_accuInfo->precharge_actual_state, sd_accuInfo->precharge_relay_error, sd_accuInfo->air_stuck, sd_accuInfo->ts_active, sd_accuInfo->precharge_done, sd_accuInfo->precharge_failed);
 8006f6e:	4b7c      	ldr	r3, [pc, #496]	; (8007160 <SD_card_write+0x534>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	699b      	ldr	r3, [r3, #24]
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7f9 fae7 	bl	8000548 <__aeabi_f2d>
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	460d      	mov	r5, r1
					 sd_accuInfo->precharge_voltage, sd_accuInfo->AIR_P_State_Int, sd_accuInfo->precharge_actual_state, sd_accuInfo->precharge_relay_error, sd_accuInfo->air_stuck, sd_accuInfo->ts_active, sd_accuInfo->precharge_done, sd_accuInfo->precharge_failed);
 8006f7e:	4b78      	ldr	r3, [pc, #480]	; (8007160 <SD_card_write+0x534>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006f86:	647b      	str	r3, [r7, #68]	; 0x44
					 sd_accuInfo->precharge_voltage, sd_accuInfo->AIR_P_State_Int, sd_accuInfo->precharge_actual_state, sd_accuInfo->precharge_relay_error, sd_accuInfo->air_stuck, sd_accuInfo->ts_active, sd_accuInfo->precharge_done, sd_accuInfo->precharge_failed);
 8006f88:	4b75      	ldr	r3, [pc, #468]	; (8007160 <SD_card_write+0x534>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006f90:	643b      	str	r3, [r7, #64]	; 0x40
					 sd_accuInfo->precharge_voltage, sd_accuInfo->AIR_P_State_Int, sd_accuInfo->precharge_actual_state, sd_accuInfo->precharge_relay_error, sd_accuInfo->air_stuck, sd_accuInfo->ts_active, sd_accuInfo->precharge_done, sd_accuInfo->precharge_failed);
 8006f92:	4b73      	ldr	r3, [pc, #460]	; (8007160 <SD_card_write+0x534>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006f9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006f9e:	b2db      	uxtb	r3, r3
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
					 sd_accuInfo->precharge_voltage, sd_accuInfo->AIR_P_State_Int, sd_accuInfo->precharge_actual_state, sd_accuInfo->precharge_relay_error, sd_accuInfo->air_stuck, sd_accuInfo->ts_active, sd_accuInfo->precharge_done, sd_accuInfo->precharge_failed);
 8006fa2:	4b6f      	ldr	r3, [pc, #444]	; (8007160 <SD_card_write+0x534>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006faa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006fae:	b2db      	uxtb	r3, r3
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006fb0:	461e      	mov	r6, r3
					 sd_accuInfo->precharge_voltage, sd_accuInfo->AIR_P_State_Int, sd_accuInfo->precharge_actual_state, sd_accuInfo->precharge_relay_error, sd_accuInfo->air_stuck, sd_accuInfo->ts_active, sd_accuInfo->precharge_done, sd_accuInfo->precharge_failed);
 8006fb2:	4b6b      	ldr	r3, [pc, #428]	; (8007160 <SD_card_write+0x534>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006fba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006fbe:	b2db      	uxtb	r3, r3
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006fc0:	4619      	mov	r1, r3
					 sd_accuInfo->precharge_voltage, sd_accuInfo->AIR_P_State_Int, sd_accuInfo->precharge_actual_state, sd_accuInfo->precharge_relay_error, sd_accuInfo->air_stuck, sd_accuInfo->ts_active, sd_accuInfo->precharge_done, sd_accuInfo->precharge_failed);
 8006fc2:	4b67      	ldr	r3, [pc, #412]	; (8007160 <SD_card_write+0x534>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006fca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006fce:	b2db      	uxtb	r3, r3
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006fd0:	461a      	mov	r2, r3
					 sd_accuInfo->precharge_voltage, sd_accuInfo->AIR_P_State_Int, sd_accuInfo->precharge_actual_state, sd_accuInfo->precharge_relay_error, sd_accuInfo->air_stuck, sd_accuInfo->ts_active, sd_accuInfo->precharge_done, sd_accuInfo->precharge_failed);
 8006fd2:	4b63      	ldr	r3, [pc, #396]	; (8007160 <SD_card_write+0x534>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006fda:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006fde:	b2db      	uxtb	r3, r3
	sprintf(header, "%u, %u, %u, %u, %u, %u, %u, %0.2f, %u, %u, %0.2f, %u, %u, %u, %u, %u, %u, %u, ", sd_accuInfo->ams_error,
 8006fe0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8006fe4:	9312      	str	r3, [sp, #72]	; 0x48
 8006fe6:	9211      	str	r2, [sp, #68]	; 0x44
 8006fe8:	9110      	str	r1, [sp, #64]	; 0x40
 8006fea:	960f      	str	r6, [sp, #60]	; 0x3c
 8006fec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fee:	920e      	str	r2, [sp, #56]	; 0x38
 8006ff0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ff2:	920d      	str	r2, [sp, #52]	; 0x34
 8006ff4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ff6:	920c      	str	r2, [sp, #48]	; 0x30
 8006ff8:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8006ffc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ffe:	9209      	str	r2, [sp, #36]	; 0x24
 8007000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007002:	9208      	str	r2, [sp, #32]
 8007004:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007008:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800700a:	9204      	str	r2, [sp, #16]
 800700c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800700e:	9203      	str	r2, [sp, #12]
 8007010:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007012:	9202      	str	r2, [sp, #8]
 8007014:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007016:	9201      	str	r2, [sp, #4]
 8007018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	465b      	mov	r3, fp
 800701e:	4652      	mov	r2, sl
 8007020:	4950      	ldr	r1, [pc, #320]	; (8007164 <SD_card_write+0x538>)
 8007022:	f017 f9ed 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 8007026:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800702a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007034:	3318      	adds	r3, #24
 8007036:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800703a:	4619      	mov	r1, r3
 800703c:	4610      	mov	r0, r2
 800703e:	f010 ff39 	bl	8017eb4 <f_puts>
 8007042:	4603      	mov	r3, r0
 8007044:	b2da      	uxtb	r2, r3
 8007046:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800704a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007054:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	//IVT
	sprintf(header, "%0.2f, %0.2f, %0.4f, ", sd_ivt->current, sd_ivt->voltage_vs, sd_ivt->Ah_consumed);
 8007058:	4b43      	ldr	r3, [pc, #268]	; (8007168 <SD_card_write+0x53c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	4618      	mov	r0, r3
 8007060:	f7f9 fa72 	bl	8000548 <__aeabi_f2d>
 8007064:	4680      	mov	r8, r0
 8007066:	4689      	mov	r9, r1
 8007068:	4b3f      	ldr	r3, [pc, #252]	; (8007168 <SD_card_write+0x53c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	4618      	mov	r0, r3
 8007070:	f7f9 fa6a 	bl	8000548 <__aeabi_f2d>
 8007074:	4604      	mov	r4, r0
 8007076:	460d      	mov	r5, r1
 8007078:	4b3b      	ldr	r3, [pc, #236]	; (8007168 <SD_card_write+0x53c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	4618      	mov	r0, r3
 8007080:	f7f9 fa62 	bl	8000548 <__aeabi_f2d>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800708c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007090:	e9cd 4500 	strd	r4, r5, [sp]
 8007094:	4642      	mov	r2, r8
 8007096:	464b      	mov	r3, r9
 8007098:	4934      	ldr	r1, [pc, #208]	; (800716c <SD_card_write+0x540>)
 800709a:	f017 f9b1 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 800709e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80070a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80070ac:	3318      	adds	r3, #24
 80070ae:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80070b2:	4619      	mov	r1, r3
 80070b4:	4610      	mov	r0, r2
 80070b6:	f010 fefd 	bl	8017eb4 <f_puts>
 80070ba:	4603      	mov	r3, r0
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80070c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80070cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	sprintf(header, "%d, ", sd_ivt->Wh_consumed);
 80070d0:	4b25      	ldr	r3, [pc, #148]	; (8007168 <SD_card_write+0x53c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80070d8:	461a      	mov	r2, r3
 80070da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80070de:	4924      	ldr	r1, [pc, #144]	; (8007170 <SD_card_write+0x544>)
 80070e0:	4618      	mov	r0, r3
 80070e2:	f017 f98d 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 80070e6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80070ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80070f4:	3318      	adds	r3, #24
 80070f6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80070fa:	4619      	mov	r1, r3
 80070fc:	4610      	mov	r0, r2
 80070fe:	f010 fed9 	bl	8017eb4 <f_puts>
 8007102:	4603      	mov	r3, r0
 8007104:	b2da      	uxtb	r2, r3
 8007106:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800710a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007114:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	// ELCON
	sprintf(header,"%u, %0.1f, %0.1f, %0.2f, %0.2f, %u, %u, %u, %u, %u, %u, ",
							sd_elcon->connected,
 8007118:	4b16      	ldr	r3, [pc, #88]	; (8007174 <SD_card_write+0x548>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	791b      	ldrb	r3, [r3, #4]
	sprintf(header,"%u, %0.1f, %0.1f, %0.2f, %0.2f, %u, %u, %u, %u, %u, %u, ",
 800711e:	663b      	str	r3, [r7, #96]	; 0x60
							sd_elcon->target_voltage, sd_elcon->output_voltage,
 8007120:	4b14      	ldr	r3, [pc, #80]	; (8007174 <SD_card_write+0x548>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	sprintf(header,"%u, %0.1f, %0.1f, %0.2f, %0.2f, %u, %u, %u, %u, %u, %u, ",
 8007126:	4618      	mov	r0, r3
 8007128:	f7f9 fa0e 	bl	8000548 <__aeabi_f2d>
 800712c:	4604      	mov	r4, r0
 800712e:	460d      	mov	r5, r1
							sd_elcon->target_voltage, sd_elcon->output_voltage,
 8007130:	4b10      	ldr	r3, [pc, #64]	; (8007174 <SD_card_write+0x548>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699b      	ldr	r3, [r3, #24]
	sprintf(header,"%u, %0.1f, %0.1f, %0.2f, %0.2f, %u, %u, %u, %u, %u, %u, ",
 8007136:	4618      	mov	r0, r3
 8007138:	f7f9 fa06 	bl	8000548 <__aeabi_f2d>
 800713c:	4680      	mov	r8, r0
 800713e:	4689      	mov	r9, r1
							sd_elcon->target_current, sd_elcon->output_current,
 8007140:	4b0c      	ldr	r3, [pc, #48]	; (8007174 <SD_card_write+0x548>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6a1b      	ldr	r3, [r3, #32]
	sprintf(header,"%u, %0.1f, %0.1f, %0.2f, %0.2f, %u, %u, %u, %u, %u, %u, ",
 8007146:	4618      	mov	r0, r3
 8007148:	f7f9 f9fe 	bl	8000548 <__aeabi_f2d>
 800714c:	4682      	mov	sl, r0
 800714e:	468b      	mov	fp, r1
							sd_elcon->target_current, sd_elcon->output_current,
 8007150:	4b08      	ldr	r3, [pc, #32]	; (8007174 <SD_card_write+0x548>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	e010      	b.n	8007178 <SD_card_write+0x54c>
 8007156:	bf00      	nop
 8007158:	20000834 	.word	0x20000834
 800715c:	08021f58 	.word	0x08021f58
 8007160:	20000838 	.word	0x20000838
 8007164:	08021f60 	.word	0x08021f60
 8007168:	20000840 	.word	0x20000840
 800716c:	08021fb0 	.word	0x08021fb0
 8007170:	08021fc8 	.word	0x08021fc8
 8007174:	20000844 	.word	0x20000844
 8007178:	69db      	ldr	r3, [r3, #28]
	sprintf(header,"%u, %0.1f, %0.1f, %0.2f, %0.2f, %u, %u, %u, %u, %u, %u, ",
 800717a:	4618      	mov	r0, r3
 800717c:	f7f9 f9e4 	bl	8000548 <__aeabi_f2d>
							sd_elcon->N_target_charge_state, sd_elcon->N_charge_state,
 8007180:	4bad      	ldr	r3, [pc, #692]	; (8007438 <SD_card_write+0x80c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	sprintf(header,"%u, %0.1f, %0.1f, %0.2f, %0.2f, %u, %u, %u, %u, %u, %u, ",
 8007188:	65fb      	str	r3, [r7, #92]	; 0x5c
							sd_elcon->N_target_charge_state, sd_elcon->N_charge_state,
 800718a:	4bab      	ldr	r3, [pc, #684]	; (8007438 <SD_card_write+0x80c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8007192:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007196:	b2db      	uxtb	r3, r3
	sprintf(header,"%u, %0.1f, %0.1f, %0.2f, %0.2f, %u, %u, %u, %u, %u, %u, ",
 8007198:	65bb      	str	r3, [r7, #88]	; 0x58
							sd_elcon->hw_fail, sd_elcon->charger_over_temp,
 800719a:	4ba7      	ldr	r3, [pc, #668]	; (8007438 <SD_card_write+0x80c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80071a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80071a6:	b2db      	uxtb	r3, r3
	sprintf(header,"%u, %0.1f, %0.1f, %0.2f, %0.2f, %u, %u, %u, %u, %u, %u, ",
 80071a8:	657b      	str	r3, [r7, #84]	; 0x54
							sd_elcon->hw_fail, sd_elcon->charger_over_temp,
 80071aa:	4ba3      	ldr	r3, [pc, #652]	; (8007438 <SD_card_write+0x80c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80071b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80071b6:	b2db      	uxtb	r3, r3
	sprintf(header,"%u, %0.1f, %0.1f, %0.2f, %0.2f, %u, %u, %u, %u, %u, %u, ",
 80071b8:	653b      	str	r3, [r7, #80]	; 0x50
			                sd_elcon->ac_input_error, sd_elcon->can_error);
 80071ba:	4b9f      	ldr	r3, [pc, #636]	; (8007438 <SD_card_write+0x80c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80071c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80071c6:	b2db      	uxtb	r3, r3
	sprintf(header,"%u, %0.1f, %0.1f, %0.2f, %0.2f, %u, %u, %u, %u, %u, %u, ",
 80071c8:	461e      	mov	r6, r3
			                sd_elcon->ac_input_error, sd_elcon->can_error);
 80071ca:	4b9b      	ldr	r3, [pc, #620]	; (8007438 <SD_card_write+0x80c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80071d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80071d6:	b2db      	uxtb	r3, r3
	sprintf(header,"%u, %0.1f, %0.1f, %0.2f, %0.2f, %u, %u, %u, %u, %u, %u, ",
 80071d8:	461a      	mov	r2, r3
 80071da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80071de:	920d      	str	r2, [sp, #52]	; 0x34
 80071e0:	960c      	str	r6, [sp, #48]	; 0x30
 80071e2:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80071e4:	960b      	str	r6, [sp, #44]	; 0x2c
 80071e6:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 80071e8:	960a      	str	r6, [sp, #40]	; 0x28
 80071ea:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 80071ec:	9609      	str	r6, [sp, #36]	; 0x24
 80071ee:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 80071f0:	9608      	str	r6, [sp, #32]
 80071f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80071f6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80071fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80071fe:	e9cd 4500 	strd	r4, r5, [sp]
 8007202:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007204:	498d      	ldr	r1, [pc, #564]	; (800743c <SD_card_write+0x810>)
 8007206:	4618      	mov	r0, r3
 8007208:	f017 f8fa 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 800720c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007210:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800721a:	3318      	adds	r3, #24
 800721c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8007220:	4619      	mov	r1, r3
 8007222:	4610      	mov	r0, r2
 8007224:	f010 fe46 	bl	8017eb4 <f_puts>
 8007228:	4603      	mov	r3, r0
 800722a:	b2da      	uxtb	r2, r3
 800722c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007230:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800723a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	// IMD
	sprintf(header,"%u, %u, ", sd_imd->condition, sd_imd->status);
 800723e:	4b80      	ldr	r3, [pc, #512]	; (8007440 <SD_card_write+0x814>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	7c5b      	ldrb	r3, [r3, #17]
 8007244:	461a      	mov	r2, r3
 8007246:	4b7e      	ldr	r3, [pc, #504]	; (8007440 <SD_card_write+0x814>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	7c9b      	ldrb	r3, [r3, #18]
 800724c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8007250:	497c      	ldr	r1, [pc, #496]	; (8007444 <SD_card_write+0x818>)
 8007252:	f017 f8d5 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 8007256:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800725a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007264:	3318      	adds	r3, #24
 8007266:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800726a:	4619      	mov	r1, r3
 800726c:	4610      	mov	r0, r2
 800726e:	f010 fe21 	bl	8017eb4 <f_puts>
 8007272:	4603      	mov	r3, r0
 8007274:	b2da      	uxtb	r2, r3
 8007276:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800727a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007284:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	sprintf(header, "%" PRIu16 ", ", sd_imd->insulation_kOhm);
 8007288:	4b6d      	ldr	r3, [pc, #436]	; (8007440 <SD_card_write+0x814>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	8a9b      	ldrh	r3, [r3, #20]
 800728e:	461a      	mov	r2, r3
 8007290:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007294:	496c      	ldr	r1, [pc, #432]	; (8007448 <SD_card_write+0x81c>)
 8007296:	4618      	mov	r0, r3
 8007298:	f017 f8b2 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 800729c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80072a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80072aa:	3318      	adds	r3, #24
 80072ac:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80072b0:	4619      	mov	r1, r3
 80072b2:	4610      	mov	r0, r2
 80072b4:	f010 fdfe 	bl	8017eb4 <f_puts>
 80072b8:	4603      	mov	r3, r0
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80072c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072ca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	// BMS Info
	sprintf(header,"%u, %u, %0.3f", sd_bmsInfo->min_SoC, sd_bmsInfo->max_SoC, sd_bmsInfo->accu_voltage);
 80072ce:	4b5f      	ldr	r3, [pc, #380]	; (800744c <SD_card_write+0x820>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80072d6:	461c      	mov	r4, r3
 80072d8:	4b5c      	ldr	r3, [pc, #368]	; (800744c <SD_card_write+0x820>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
 80072e0:	461d      	mov	r5, r3
 80072e2:	4b5a      	ldr	r3, [pc, #360]	; (800744c <SD_card_write+0x820>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7f9 f92d 	bl	8000548 <__aeabi_f2d>
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80072f6:	e9cd 2300 	strd	r2, r3, [sp]
 80072fa:	462b      	mov	r3, r5
 80072fc:	4622      	mov	r2, r4
 80072fe:	4954      	ldr	r1, [pc, #336]	; (8007450 <SD_card_write+0x824>)
 8007300:	f017 f87e 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 8007304:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007308:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007312:	3318      	adds	r3, #24
 8007314:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8007318:	4619      	mov	r1, r3
 800731a:	4610      	mov	r0, r2
 800731c:	f010 fdca 	bl	8017eb4 <f_puts>
 8007320:	4603      	mov	r3, r0
 8007322:	b2da      	uxtb	r2, r3
 8007324:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007328:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007332:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	sprintf(header, "%" PRIu16 ", ", sd_imd->insulation_kOhm);
 8007336:	4b42      	ldr	r3, [pc, #264]	; (8007440 <SD_card_write+0x814>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	8a9b      	ldrh	r3, [r3, #20]
 800733c:	461a      	mov	r2, r3
 800733e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007342:	4941      	ldr	r1, [pc, #260]	; (8007448 <SD_card_write+0x81c>)
 8007344:	4618      	mov	r0, r3
 8007346:	f017 f85b 	bl	801e400 <siprintf>
	sdCard->fresult = f_puts(header, &(sdCard->file));
 800734a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800734e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007358:	3318      	adds	r3, #24
 800735a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800735e:	4619      	mov	r1, r3
 8007360:	4610      	mov	r0, r2
 8007362:	f010 fda7 	bl	8017eb4 <f_puts>
 8007366:	4603      	mov	r3, r0
 8007368:	b2da      	uxtb	r2, r3
 800736a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800736e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007378:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	// P23 status
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
							sd_p23_status->actual_torque,   sd_p23_status->requested_torque,
 800737c:	4b35      	ldr	r3, [pc, #212]	; (8007454 <SD_card_write+0x828>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 8007384:	663b      	str	r3, [r7, #96]	; 0x60
							sd_p23_status->actual_torque,   sd_p23_status->requested_torque,
 8007386:	4b33      	ldr	r3, [pc, #204]	; (8007454 <SD_card_write+0x828>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 800738e:	65fb      	str	r3, [r7, #92]	; 0x5c
							sd_p23_status->motor_rpm,       sd_p23_status->bspd_status,
 8007390:	4b30      	ldr	r3, [pc, #192]	; (8007454 <SD_card_write+0x828>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 8007398:	65bb      	str	r3, [r7, #88]	; 0x58
							sd_p23_status->motor_rpm,       sd_p23_status->bspd_status,
 800739a:	4b2e      	ldr	r3, [pc, #184]	; (8007454 <SD_card_write+0x828>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	799b      	ldrb	r3, [r3, #6]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 80073a0:	657b      	str	r3, [r7, #84]	; 0x54
							sd_p23_status->ts_off,          sd_p23_status->rtd_done,
 80073a2:	4b2c      	ldr	r3, [pc, #176]	; (8007454 <SD_card_write+0x828>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	79db      	ldrb	r3, [r3, #7]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 80073a8:	653b      	str	r3, [r7, #80]	; 0x50
							sd_p23_status->ts_off,          sd_p23_status->rtd_done,
 80073aa:	4b2a      	ldr	r3, [pc, #168]	; (8007454 <SD_card_write+0x828>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 80073b0:	64fb      	str	r3, [r7, #76]	; 0x4c
							sd_p23_status->vcu_alive,       sd_p23_status->accu_alive,
 80073b2:	4b28      	ldr	r3, [pc, #160]	; (8007454 <SD_card_write+0x828>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 80073b8:	64bb      	str	r3, [r7, #72]	; 0x48
							sd_p23_status->vcu_alive,       sd_p23_status->accu_alive,
 80073ba:	4b26      	ldr	r3, [pc, #152]	; (8007454 <SD_card_write+0x828>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 80073c0:	647b      	str	r3, [r7, #68]	; 0x44
							sd_p23_status->hall_fl,			sd_p23_status->hall_fr,
 80073c2:	4b24      	ldr	r3, [pc, #144]	; (8007454 <SD_card_write+0x828>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 80073ca:	643b      	str	r3, [r7, #64]	; 0x40
							sd_p23_status->hall_fl,			sd_p23_status->hall_fr,
 80073cc:	4b21      	ldr	r3, [pc, #132]	; (8007454 <SD_card_write+0x828>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 80073d4:	63fb      	str	r3, [r7, #60]	; 0x3c
							sd_p23_status->hall_rl,			sd_p23_status->hall_rr,
 80073d6:	4b1f      	ldr	r3, [pc, #124]	; (8007454 <SD_card_write+0x828>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 80073de:	63bb      	str	r3, [r7, #56]	; 0x38
							sd_p23_status->hall_rl,			sd_p23_status->hall_rr,
 80073e0:	4b1c      	ldr	r3, [pc, #112]	; (8007454 <SD_card_write+0x828>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 80073e8:	637b      	str	r3, [r7, #52]	; 0x34
							sd_p23_status->power_limiter,
 80073ea:	4b1a      	ldr	r3, [pc, #104]	; (8007454 <SD_card_write+0x828>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	7adb      	ldrb	r3, [r3, #11]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 80073f0:	633b      	str	r3, [r7, #48]	; 0x30
							sd_p23_status->apps1,           sd_p23_status->apps2,
 80073f2:	4b18      	ldr	r3, [pc, #96]	; (8007454 <SD_card_write+0x828>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 80073f8:	62fb      	str	r3, [r7, #44]	; 0x2c
							sd_p23_status->apps1,           sd_p23_status->apps2,
 80073fa:	4b16      	ldr	r3, [pc, #88]	; (8007454 <SD_card_write+0x828>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 8007400:	62bb      	str	r3, [r7, #40]	; 0x28
							sd_p23_status->brf,             sd_p23_status->brr,
 8007402:	4b14      	ldr	r3, [pc, #80]	; (8007454 <SD_card_write+0x828>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 8007408:	627b      	str	r3, [r7, #36]	; 0x24
							sd_p23_status->brf,             sd_p23_status->brr,
 800740a:	4b12      	ldr	r3, [pc, #72]	; (8007454 <SD_card_write+0x828>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 8007410:	623b      	str	r3, [r7, #32]
							sd_p23_status->tsal_impl_air_m, sd_p23_status->tsal_impl_air_p,
 8007412:	4b10      	ldr	r3, [pc, #64]	; (8007454 <SD_card_write+0x828>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 8007418:	61fb      	str	r3, [r7, #28]
							sd_p23_status->tsal_impl_air_m, sd_p23_status->tsal_impl_air_p,
 800741a:	4b0e      	ldr	r3, [pc, #56]	; (8007454 <SD_card_write+0x828>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 8007420:	61bb      	str	r3, [r7, #24]
							sd_p23_status->tsal_impl_accu,  sd_p23_status->tsal_impl_pc_state,
 8007422:	4b0c      	ldr	r3, [pc, #48]	; (8007454 <SD_card_write+0x828>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	7c9b      	ldrb	r3, [r3, #18]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 8007428:	617b      	str	r3, [r7, #20]
							sd_p23_status->tsal_impl_accu,  sd_p23_status->tsal_impl_pc_state,
 800742a:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <SD_card_write+0x828>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	7cdb      	ldrb	r3, [r3, #19]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 8007430:	613b      	str	r3, [r7, #16]
							sd_p23_status->vcu_flags,       sd_p23_status->vcu_sd_flags,
 8007432:	4b08      	ldr	r3, [pc, #32]	; (8007454 <SD_card_write+0x828>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	e00f      	b.n	8007458 <SD_card_write+0x82c>
 8007438:	20000844 	.word	0x20000844
 800743c:	08021fd0 	.word	0x08021fd0
 8007440:	20000848 	.word	0x20000848
 8007444:	0802200c 	.word	0x0802200c
 8007448:	08021f58 	.word	0x08021f58
 800744c:	2000083c 	.word	0x2000083c
 8007450:	08022018 	.word	0x08022018
 8007454:	2000084c 	.word	0x2000084c
 8007458:	7d1b      	ldrb	r3, [r3, #20]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 800745a:	60fb      	str	r3, [r7, #12]
							sd_p23_status->vcu_flags,       sd_p23_status->vcu_sd_flags,
 800745c:	4b6b      	ldr	r3, [pc, #428]	; (800760c <SD_card_write+0x9e0>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	7d5b      	ldrb	r3, [r3, #21]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 8007462:	60bb      	str	r3, [r7, #8]
							sd_p23_status->inv_enabled,     sd_p23_status->inv_curr_lim_reached,
 8007464:	4b69      	ldr	r3, [pc, #420]	; (800760c <SD_card_write+0x9e0>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	7d9b      	ldrb	r3, [r3, #22]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 800746a:	607b      	str	r3, [r7, #4]
							sd_p23_status->inv_enabled,     sd_p23_status->inv_curr_lim_reached,
 800746c:	4b67      	ldr	r3, [pc, #412]	; (800760c <SD_card_write+0x9e0>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	7ddb      	ldrb	r3, [r3, #23]
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 8007472:	461e      	mov	r6, r3
							sd_p23_status->tdk1_current,    sd_p23_status->tdk2_current,
 8007474:	4b65      	ldr	r3, [pc, #404]	; (800760c <SD_card_write+0x9e0>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 800747a:	4618      	mov	r0, r3
 800747c:	f7f9 f864 	bl	8000548 <__aeabi_f2d>
 8007480:	4682      	mov	sl, r0
 8007482:	468b      	mov	fp, r1
							sd_p23_status->tdk1_current,    sd_p23_status->tdk2_current,
 8007484:	4b61      	ldr	r3, [pc, #388]	; (800760c <SD_card_write+0x9e0>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 800748a:	4618      	mov	r0, r3
 800748c:	f7f9 f85c 	bl	8000548 <__aeabi_f2d>
 8007490:	4680      	mov	r8, r0
 8007492:	4689      	mov	r9, r1
							sd_p23_status->lv_max_cell_voltage, sd_p23_status->lv_min_cell_voltage);
 8007494:	4b5d      	ldr	r3, [pc, #372]	; (800760c <SD_card_write+0x9e0>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 800749a:	4618      	mov	r0, r3
 800749c:	f7f9 f854 	bl	8000548 <__aeabi_f2d>
 80074a0:	4604      	mov	r4, r0
 80074a2:	460d      	mov	r5, r1
							sd_p23_status->lv_max_cell_voltage, sd_p23_status->lv_min_cell_voltage);
 80074a4:	4b59      	ldr	r3, [pc, #356]	; (800760c <SD_card_write+0x9e0>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	sprintf(header, "%d, %d, %d, %u, %u, %u, %u, %u, %d, %d, %d, %d, %u, %u, %u, %u, %u, %u , %u, %u, %u, %u, %u, %u, %u, %0.4f, %0.4f, %0.4f, %0.4f \n ",
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7f9 f84c 	bl	8000548 <__aeabi_f2d>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80074b8:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 80074bc:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 80074c0:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 80074c4:	e9cd ab18 	strd	sl, fp, [sp, #96]	; 0x60
 80074c8:	9616      	str	r6, [sp, #88]	; 0x58
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	9115      	str	r1, [sp, #84]	; 0x54
 80074ce:	68b9      	ldr	r1, [r7, #8]
 80074d0:	9114      	str	r1, [sp, #80]	; 0x50
 80074d2:	68f9      	ldr	r1, [r7, #12]
 80074d4:	9113      	str	r1, [sp, #76]	; 0x4c
 80074d6:	6939      	ldr	r1, [r7, #16]
 80074d8:	9112      	str	r1, [sp, #72]	; 0x48
 80074da:	6979      	ldr	r1, [r7, #20]
 80074dc:	9111      	str	r1, [sp, #68]	; 0x44
 80074de:	69b9      	ldr	r1, [r7, #24]
 80074e0:	9110      	str	r1, [sp, #64]	; 0x40
 80074e2:	69f9      	ldr	r1, [r7, #28]
 80074e4:	910f      	str	r1, [sp, #60]	; 0x3c
 80074e6:	6a39      	ldr	r1, [r7, #32]
 80074e8:	910e      	str	r1, [sp, #56]	; 0x38
 80074ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074ec:	910d      	str	r1, [sp, #52]	; 0x34
 80074ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074f0:	910c      	str	r1, [sp, #48]	; 0x30
 80074f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074f4:	910b      	str	r1, [sp, #44]	; 0x2c
 80074f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074f8:	910a      	str	r1, [sp, #40]	; 0x28
 80074fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80074fc:	9109      	str	r1, [sp, #36]	; 0x24
 80074fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007500:	9108      	str	r1, [sp, #32]
 8007502:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007504:	9107      	str	r1, [sp, #28]
 8007506:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007508:	9106      	str	r1, [sp, #24]
 800750a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800750c:	9105      	str	r1, [sp, #20]
 800750e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007510:	9104      	str	r1, [sp, #16]
 8007512:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007514:	9103      	str	r1, [sp, #12]
 8007516:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007518:	9102      	str	r1, [sp, #8]
 800751a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800751c:	9101      	str	r1, [sp, #4]
 800751e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007520:	9100      	str	r1, [sp, #0]
 8007522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007524:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007526:	493a      	ldr	r1, [pc, #232]	; (8007610 <SD_card_write+0x9e4>)
 8007528:	f016 ff6a 	bl	801e400 <siprintf>

	sdCard->fresult = f_puts(header, &(sdCard->file));
 800752c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007530:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800753a:	3318      	adds	r3, #24
 800753c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8007540:	4619      	mov	r1, r3
 8007542:	4610      	mov	r0, r2
 8007544:	f010 fcb6 	bl	8017eb4 <f_puts>
 8007548:	4603      	mov	r3, r0
 800754a:	b2da      	uxtb	r2, r3
 800754c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007550:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800755a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	sdCard->unsaved_writes++;
 800755e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007562:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800756c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8007570:	3301      	adds	r3, #1
 8007572:	b29a      	uxth	r2, r3
 8007574:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007578:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007582:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	sdCard->message_num++;
 8007586:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800758a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007596:	3301      	adds	r3, #1
 8007598:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800759c:	f5a2 7201 	sub.w	r2, r2, #516	; 0x204
 80075a0:	6812      	ldr	r2, [r2, #0]
 80075a2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80075a6:	6793      	str	r3, [r2, #120]	; 0x78
	if (sdCard->unsaved_writes >= AUTOSAVE_CYCLES)
 80075a8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80075ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075b6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80075ba:	2b31      	cmp	r3, #49	; 0x31
 80075bc:	d91f      	bls.n	80075fe <SD_card_write+0x9d2>
	{
		sdCard->fresult = f_sync(&(sdCard->file));
 80075be:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80075c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80075cc:	3318      	adds	r3, #24
 80075ce:	4618      	mov	r0, r3
 80075d0:	f010 f856 	bl	8017680 <f_sync>
 80075d4:	4603      	mov	r3, r0
 80075d6:	461a      	mov	r2, r3
 80075d8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80075dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		sdCard->unsaved_writes = 0;
 80075ea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80075ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075f8:	2200      	movs	r2, #0
 80075fa:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	}

}
 80075fe:	bf00      	nop
 8007600:	f507 771b 	add.w	r7, r7, #620	; 0x26c
 8007604:	46bd      	mov	sp, r7
 8007606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760a:	bf00      	nop
 800760c:	2000084c 	.word	0x2000084c
 8007610:	08022028 	.word	0x08022028

08007614 <SD_card_read>:


void SD_card_read(SD_Card* sdCard)
{
 8007614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007616:	b0bb      	sub	sp, #236	; 0xec
 8007618:	af04      	add	r7, sp, #16
 800761a:	6078      	str	r0, [r7, #4]
	sdCard->fresult = f_close(&sdCard->file);  /* Saves the data stored in the SD so far and closes */
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007622:	3318      	adds	r3, #24
 8007624:	4618      	mov	r0, r3
 8007626:	f010 f8b4 	bl	8017792 <f_close>
 800762a:	4603      	mov	r3, r0
 800762c:	461a      	mov	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007634:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	sdCard->fresult = f_mount(NULL, "", 1);    /* Unmounts the SD to initialize it again */
 8007638:	2201      	movs	r2, #1
 800763a:	495d      	ldr	r1, [pc, #372]	; (80077b0 <SD_card_read+0x19c>)
 800763c:	2000      	movs	r0, #0
 800763e:	f00f fa97 	bl	8016b70 <f_mount>
 8007642:	4603      	mov	r3, r0
 8007644:	461a      	mov	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800764c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68


	sdCard->fresult = f_mount(&(sdCard->fs), "/", 1);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	4957      	ldr	r1, [pc, #348]	; (80077b4 <SD_card_read+0x1a0>)
 8007656:	4618      	mov	r0, r3
 8007658:	f00f fa8a 	bl	8016b70 <f_mount>
 800765c:	4603      	mov	r3, r0
 800765e:	461a      	mov	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007666:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	if (sdCard->fresult != FR_OK)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007670:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8007674:	2b00      	cmp	r3, #0
 8007676:	d005      	beq.n	8007684 <SD_card_read+0x70>
	{
		sdCard->mounted = false;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	}
	sdCard->fresult = f_open(&(sdCard->file), "all.csv", FA_READ);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800768a:	3318      	adds	r3, #24
 800768c:	2201      	movs	r2, #1
 800768e:	494a      	ldr	r1, [pc, #296]	; (80077b8 <SD_card_read+0x1a4>)
 8007690:	4618      	mov	r0, r3
 8007692:	f00f fad1 	bl	8016c38 <f_open>
 8007696:	4603      	mov	r3, r0
 8007698:	461a      	mov	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80076a0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	if (sdCard->fresult != FR_OK)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80076aa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d005      	beq.n	80076be <SD_card_read+0xaa>
	{
		sdCard->mounted = false;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	}


	char     buffer[200];
	UINT     bytesRead = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	60bb      	str	r3, [r7, #8]
	uint32_t read_counter = 1;
 80076c2:	2301      	movs	r3, #1
 80076c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	do
	{
		sdCard->fresult = f_read(&sdCard->file, buffer, sizeof(buffer), &bytesRead);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f503 5081 	add.w	r0, r3, #4128	; 0x1020
 80076ce:	3018      	adds	r0, #24
 80076d0:	f107 0308 	add.w	r3, r7, #8
 80076d4:	f107 010c 	add.w	r1, r7, #12
 80076d8:	22c8      	movs	r2, #200	; 0xc8
 80076da:	f00f fc80 	bl	8016fde <f_read>
 80076de:	4603      	mov	r3, r0
 80076e0:	461a      	mov	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80076e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		sdCard->fresult = f_lseek(&sdCard->file, sizeof(buffer) * read_counter);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80076f2:	3318      	adds	r3, #24
 80076f4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80076f8:	21c8      	movs	r1, #200	; 0xc8
 80076fa:	fb01 f202 	mul.w	r2, r1, r2
 80076fe:	4611      	mov	r1, r2
 8007700:	4618      	mov	r0, r3
 8007702:	f010 f875 	bl	80177f0 <f_lseek>
 8007706:	4603      	mov	r3, r0
 8007708:	461a      	mov	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007710:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		read_counter++;
 8007714:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007718:	3301      	adds	r3, #1
 800771a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

		CDC_Transmit_FS ((uint8_t*)buffer, sizeof(buffer));
 800771e:	f107 030c 	add.w	r3, r7, #12
 8007722:	21c8      	movs	r1, #200	; 0xc8
 8007724:	4618      	mov	r0, r3
 8007726:	f014 fbaf 	bl	801be88 <CDC_Transmit_FS>
		osDelay(5);      /* Without delay, USB messages are lost */
 800772a:	2005      	movs	r0, #5
 800772c:	f010 fd0a 	bl	8018144 <osDelay>
	}
	while (bytesRead == sizeof(buffer));
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2bc8      	cmp	r3, #200	; 0xc8
 8007734:	d0c8      	beq.n	80076c8 <SD_card_read+0xb4>

	sdCard->fresult = f_close(&sdCard->file);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800773c:	3318      	adds	r3, #24
 800773e:	4618      	mov	r0, r3
 8007740:	f010 f827 	bl	8017792 <f_close>
 8007744:	4603      	mov	r3, r0
 8007746:	461a      	mov	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800774e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	sdCard->fresult = f_mount(NULL, "", 1);
 8007752:	2201      	movs	r2, #1
 8007754:	4916      	ldr	r1, [pc, #88]	; (80077b0 <SD_card_read+0x19c>)
 8007756:	2000      	movs	r0, #0
 8007758:	f00f fa0a 	bl	8016b70 <f_mount>
 800775c:	4603      	mov	r3, r0
 800775e:	461a      	mov	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007766:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	sdCard->fresult = SD_Card_init(sdCard, sd_slave_array, sd_accuInfo, sd_bmsInfo, sd_ivt,sd_elcon, sd_imd, sd_p23_status);
 800776a:	4b14      	ldr	r3, [pc, #80]	; (80077bc <SD_card_read+0x1a8>)
 800776c:	681c      	ldr	r4, [r3, #0]
 800776e:	4b14      	ldr	r3, [pc, #80]	; (80077c0 <SD_card_read+0x1ac>)
 8007770:	681d      	ldr	r5, [r3, #0]
 8007772:	4b14      	ldr	r3, [pc, #80]	; (80077c4 <SD_card_read+0x1b0>)
 8007774:	681e      	ldr	r6, [r3, #0]
 8007776:	4b14      	ldr	r3, [pc, #80]	; (80077c8 <SD_card_read+0x1b4>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a14      	ldr	r2, [pc, #80]	; (80077cc <SD_card_read+0x1b8>)
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	4914      	ldr	r1, [pc, #80]	; (80077d0 <SD_card_read+0x1bc>)
 8007780:	6809      	ldr	r1, [r1, #0]
 8007782:	4814      	ldr	r0, [pc, #80]	; (80077d4 <SD_card_read+0x1c0>)
 8007784:	6800      	ldr	r0, [r0, #0]
 8007786:	9003      	str	r0, [sp, #12]
 8007788:	9102      	str	r1, [sp, #8]
 800778a:	9201      	str	r2, [sp, #4]
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	4633      	mov	r3, r6
 8007790:	462a      	mov	r2, r5
 8007792:	4621      	mov	r1, r4
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7fe fe33 	bl	8006400 <SD_Card_init>
 800779a:	4603      	mov	r3, r0
 800779c:	461a      	mov	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80077a4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 80077a8:	bf00      	nop
 80077aa:	37dc      	adds	r7, #220	; 0xdc
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077b0:	080220ac 	.word	0x080220ac
 80077b4:	08021ae8 	.word	0x08021ae8
 80077b8:	080220b0 	.word	0x080220b0
 80077bc:	20000834 	.word	0x20000834
 80077c0:	20000838 	.word	0x20000838
 80077c4:	2000083c 	.word	0x2000083c
 80077c8:	20000840 	.word	0x20000840
 80077cc:	20000844 	.word	0x20000844
 80077d0:	20000848 	.word	0x20000848
 80077d4:	2000084c 	.word	0x2000084c

080077d8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80077de:	463b      	mov	r3, r7
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	605a      	str	r2, [r3, #4]
 80077e6:	609a      	str	r2, [r3, #8]
 80077e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80077ea:	4b2f      	ldr	r3, [pc, #188]	; (80078a8 <MX_ADC1_Init+0xd0>)
 80077ec:	4a2f      	ldr	r2, [pc, #188]	; (80078ac <MX_ADC1_Init+0xd4>)
 80077ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80077f0:	4b2d      	ldr	r3, [pc, #180]	; (80078a8 <MX_ADC1_Init+0xd0>)
 80077f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80077f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80077f8:	4b2b      	ldr	r3, [pc, #172]	; (80078a8 <MX_ADC1_Init+0xd0>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80077fe:	4b2a      	ldr	r3, [pc, #168]	; (80078a8 <MX_ADC1_Init+0xd0>)
 8007800:	2201      	movs	r2, #1
 8007802:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007804:	4b28      	ldr	r3, [pc, #160]	; (80078a8 <MX_ADC1_Init+0xd0>)
 8007806:	2201      	movs	r2, #1
 8007808:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800780a:	4b27      	ldr	r3, [pc, #156]	; (80078a8 <MX_ADC1_Init+0xd0>)
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007812:	4b25      	ldr	r3, [pc, #148]	; (80078a8 <MX_ADC1_Init+0xd0>)
 8007814:	2200      	movs	r2, #0
 8007816:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007818:	4b23      	ldr	r3, [pc, #140]	; (80078a8 <MX_ADC1_Init+0xd0>)
 800781a:	4a25      	ldr	r2, [pc, #148]	; (80078b0 <MX_ADC1_Init+0xd8>)
 800781c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800781e:	4b22      	ldr	r3, [pc, #136]	; (80078a8 <MX_ADC1_Init+0xd0>)
 8007820:	2200      	movs	r2, #0
 8007822:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8007824:	4b20      	ldr	r3, [pc, #128]	; (80078a8 <MX_ADC1_Init+0xd0>)
 8007826:	2203      	movs	r2, #3
 8007828:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800782a:	4b1f      	ldr	r3, [pc, #124]	; (80078a8 <MX_ADC1_Init+0xd0>)
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007832:	4b1d      	ldr	r3, [pc, #116]	; (80078a8 <MX_ADC1_Init+0xd0>)
 8007834:	2201      	movs	r2, #1
 8007836:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007838:	481b      	ldr	r0, [pc, #108]	; (80078a8 <MX_ADC1_Init+0xd0>)
 800783a:	f004 fa3d 	bl	800bcb8 <HAL_ADC_Init>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007844:	f003 fc82 	bl	800b14c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007848:	2301      	movs	r3, #1
 800784a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800784c:	2301      	movs	r3, #1
 800784e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8007850:	2306      	movs	r3, #6
 8007852:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007854:	463b      	mov	r3, r7
 8007856:	4619      	mov	r1, r3
 8007858:	4813      	ldr	r0, [pc, #76]	; (80078a8 <MX_ADC1_Init+0xd0>)
 800785a:	f004 fb95 	bl	800bf88 <HAL_ADC_ConfigChannel>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007864:	f003 fc72 	bl	800b14c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8007868:	2302      	movs	r3, #2
 800786a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800786c:	2302      	movs	r3, #2
 800786e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007870:	463b      	mov	r3, r7
 8007872:	4619      	mov	r1, r3
 8007874:	480c      	ldr	r0, [pc, #48]	; (80078a8 <MX_ADC1_Init+0xd0>)
 8007876:	f004 fb87 	bl	800bf88 <HAL_ADC_ConfigChannel>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8007880:	f003 fc64 	bl	800b14c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007884:	2303      	movs	r3, #3
 8007886:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8007888:	2303      	movs	r3, #3
 800788a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800788c:	463b      	mov	r3, r7
 800788e:	4619      	mov	r1, r3
 8007890:	4805      	ldr	r0, [pc, #20]	; (80078a8 <MX_ADC1_Init+0xd0>)
 8007892:	f004 fb79 	bl	800bf88 <HAL_ADC_ConfigChannel>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800789c:	f003 fc56 	bl	800b14c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80078a0:	bf00      	nop
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	200008e4 	.word	0x200008e4
 80078ac:	40012000 	.word	0x40012000
 80078b0:	0f000001 	.word	0x0f000001

080078b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08a      	sub	sp, #40	; 0x28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078bc:	f107 0314 	add.w	r3, r7, #20
 80078c0:	2200      	movs	r2, #0
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	605a      	str	r2, [r3, #4]
 80078c6:	609a      	str	r2, [r3, #8]
 80078c8:	60da      	str	r2, [r3, #12]
 80078ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a2f      	ldr	r2, [pc, #188]	; (8007990 <HAL_ADC_MspInit+0xdc>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d157      	bne.n	8007986 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80078d6:	2300      	movs	r3, #0
 80078d8:	613b      	str	r3, [r7, #16]
 80078da:	4b2e      	ldr	r3, [pc, #184]	; (8007994 <HAL_ADC_MspInit+0xe0>)
 80078dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078de:	4a2d      	ldr	r2, [pc, #180]	; (8007994 <HAL_ADC_MspInit+0xe0>)
 80078e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e4:	6453      	str	r3, [r2, #68]	; 0x44
 80078e6:	4b2b      	ldr	r3, [pc, #172]	; (8007994 <HAL_ADC_MspInit+0xe0>)
 80078e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ee:	613b      	str	r3, [r7, #16]
 80078f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	4b27      	ldr	r3, [pc, #156]	; (8007994 <HAL_ADC_MspInit+0xe0>)
 80078f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fa:	4a26      	ldr	r2, [pc, #152]	; (8007994 <HAL_ADC_MspInit+0xe0>)
 80078fc:	f043 0301 	orr.w	r3, r3, #1
 8007900:	6313      	str	r3, [r2, #48]	; 0x30
 8007902:	4b24      	ldr	r3, [pc, #144]	; (8007994 <HAL_ADC_MspInit+0xe0>)
 8007904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = TEMP_DCDC_Pin|StonPatoSouGiorgo_Pin|HUMIDITY_Pin;
 800790e:	230e      	movs	r3, #14
 8007910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007912:	2303      	movs	r3, #3
 8007914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007916:	2300      	movs	r3, #0
 8007918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800791a:	f107 0314 	add.w	r3, r7, #20
 800791e:	4619      	mov	r1, r3
 8007920:	481d      	ldr	r0, [pc, #116]	; (8007998 <HAL_ADC_MspInit+0xe4>)
 8007922:	f006 f87b 	bl	800da1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8007926:	4b1d      	ldr	r3, [pc, #116]	; (800799c <HAL_ADC_MspInit+0xe8>)
 8007928:	4a1d      	ldr	r2, [pc, #116]	; (80079a0 <HAL_ADC_MspInit+0xec>)
 800792a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800792c:	4b1b      	ldr	r3, [pc, #108]	; (800799c <HAL_ADC_MspInit+0xe8>)
 800792e:	2200      	movs	r2, #0
 8007930:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007932:	4b1a      	ldr	r3, [pc, #104]	; (800799c <HAL_ADC_MspInit+0xe8>)
 8007934:	2200      	movs	r2, #0
 8007936:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007938:	4b18      	ldr	r3, [pc, #96]	; (800799c <HAL_ADC_MspInit+0xe8>)
 800793a:	2200      	movs	r2, #0
 800793c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800793e:	4b17      	ldr	r3, [pc, #92]	; (800799c <HAL_ADC_MspInit+0xe8>)
 8007940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007944:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007946:	4b15      	ldr	r3, [pc, #84]	; (800799c <HAL_ADC_MspInit+0xe8>)
 8007948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800794c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800794e:	4b13      	ldr	r3, [pc, #76]	; (800799c <HAL_ADC_MspInit+0xe8>)
 8007950:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007954:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007956:	4b11      	ldr	r3, [pc, #68]	; (800799c <HAL_ADC_MspInit+0xe8>)
 8007958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800795c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800795e:	4b0f      	ldr	r3, [pc, #60]	; (800799c <HAL_ADC_MspInit+0xe8>)
 8007960:	2200      	movs	r2, #0
 8007962:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007964:	4b0d      	ldr	r3, [pc, #52]	; (800799c <HAL_ADC_MspInit+0xe8>)
 8007966:	2200      	movs	r2, #0
 8007968:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800796a:	480c      	ldr	r0, [pc, #48]	; (800799c <HAL_ADC_MspInit+0xe8>)
 800796c:	f005 fce6 	bl	800d33c <HAL_DMA_Init>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8007976:	f003 fbe9 	bl	800b14c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a07      	ldr	r2, [pc, #28]	; (800799c <HAL_ADC_MspInit+0xe8>)
 800797e:	639a      	str	r2, [r3, #56]	; 0x38
 8007980:	4a06      	ldr	r2, [pc, #24]	; (800799c <HAL_ADC_MspInit+0xe8>)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007986:	bf00      	nop
 8007988:	3728      	adds	r7, #40	; 0x28
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	40012000 	.word	0x40012000
 8007994:	40023800 	.word	0x40023800
 8007998:	40020000 	.word	0x40020000
 800799c:	2000092c 	.word	0x2000092c
 80079a0:	40026410 	.word	0x40026410
 80079a4:	00000000 	.word	0x00000000

080079a8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */

/* ADC Callback function */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
	adc_counter++;
 80079b0:	4b6f      	ldr	r3, [pc, #444]	; (8007b70 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3301      	adds	r3, #1
 80079b6:	4a6e      	ldr	r2, [pc, #440]	; (8007b70 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80079b8:	6013      	str	r3, [r2, #0]

	/* Normal Averaging */
	if (adc_counter < adc_counter_const)
 80079ba:	4b6d      	ldr	r3, [pc, #436]	; (8007b70 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079c2:	d218      	bcs.n	80079f6 <HAL_ADC_ConvCpltCallback+0x4e>
	{
		adcVal1 += adc_buf[0];
 80079c4:	4b6b      	ldr	r3, [pc, #428]	; (8007b74 <HAL_ADC_ConvCpltCallback+0x1cc>)
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	461a      	mov	r2, r3
 80079ca:	4b6b      	ldr	r3, [pc, #428]	; (8007b78 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4413      	add	r3, r2
 80079d0:	4a69      	ldr	r2, [pc, #420]	; (8007b78 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80079d2:	6013      	str	r3, [r2, #0]
		adcVal2 += adc_buf[1];
 80079d4:	4b67      	ldr	r3, [pc, #412]	; (8007b74 <HAL_ADC_ConvCpltCallback+0x1cc>)
 80079d6:	885b      	ldrh	r3, [r3, #2]
 80079d8:	461a      	mov	r2, r3
 80079da:	4b68      	ldr	r3, [pc, #416]	; (8007b7c <HAL_ADC_ConvCpltCallback+0x1d4>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4413      	add	r3, r2
 80079e0:	4a66      	ldr	r2, [pc, #408]	; (8007b7c <HAL_ADC_ConvCpltCallback+0x1d4>)
 80079e2:	6013      	str	r3, [r2, #0]
		adcVal3 += adc_buf[2];
 80079e4:	4b63      	ldr	r3, [pc, #396]	; (8007b74 <HAL_ADC_ConvCpltCallback+0x1cc>)
 80079e6:	889b      	ldrh	r3, [r3, #4]
 80079e8:	461a      	mov	r2, r3
 80079ea:	4b65      	ldr	r3, [pc, #404]	; (8007b80 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4413      	add	r3, r2
 80079f0:	4a63      	ldr	r2, [pc, #396]	; (8007b80 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80079f2:	6013      	str	r3, [r2, #0]
		adcVal1 = 0;
		adcVal2 = 0;
		adcVal3 = 0;
		adc_counter = 0;
	}
}
 80079f4:	e0aa      	b.n	8007b4c <HAL_ADC_ConvCpltCallback+0x1a4>
		accuInfo.HVroom_temperature = (uint8_t)(-60.625 +  206.25 * (adcVal2 / adc_counter) / 4095.0);
 80079f6:	4b61      	ldr	r3, [pc, #388]	; (8007b7c <HAL_ADC_ConvCpltCallback+0x1d4>)
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	4b5d      	ldr	r3, [pc, #372]	; (8007b70 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7f8 fd7e 	bl	8000504 <__aeabi_ui2d>
 8007a08:	a353      	add	r3, pc, #332	; (adr r3, 8007b58 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	f7f8 fdf3 	bl	80005f8 <__aeabi_dmul>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4610      	mov	r0, r2
 8007a18:	4619      	mov	r1, r3
 8007a1a:	a351      	add	r3, pc, #324	; (adr r3, 8007b60 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8007a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a20:	f7f8 ff14 	bl	800084c <__aeabi_ddiv>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	a34e      	add	r3, pc, #312	; (adr r3, 8007b68 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	f7f8 fc29 	bl	8000288 <__aeabi_dsub>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4610      	mov	r0, r2
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	f7f9 f8b3 	bl	8000ba8 <__aeabi_d2uiz>
 8007a42:	4603      	mov	r3, r0
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	4b4f      	ldr	r3, [pc, #316]	; (8007b84 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8007a48:	755a      	strb	r2, [r3, #21]
		accuInfo.HVroom_humidity    = (-12.5 + 125 * (adcVal3 / adc_counter) / 4095.0);
 8007a4a:	4b4d      	ldr	r3, [pc, #308]	; (8007b80 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4b48      	ldr	r3, [pc, #288]	; (8007b70 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a56:	4613      	mov	r3, r2
 8007a58:	015b      	lsls	r3, r3, #5
 8007a5a:	1a9b      	subs	r3, r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7f8 fd4f 	bl	8000504 <__aeabi_ui2d>
 8007a66:	a33e      	add	r3, pc, #248	; (adr r3, 8007b60 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	f7f8 feee 	bl	800084c <__aeabi_ddiv>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4610      	mov	r0, r2
 8007a76:	4619      	mov	r1, r3
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	4b42      	ldr	r3, [pc, #264]	; (8007b88 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8007a7e:	f7f8 fc03 	bl	8000288 <__aeabi_dsub>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4610      	mov	r0, r2
 8007a88:	4619      	mov	r1, r3
 8007a8a:	f7f9 f88d 	bl	8000ba8 <__aeabi_d2uiz>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	4b3c      	ldr	r3, [pc, #240]	; (8007b84 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8007a94:	751a      	strb	r2, [r3, #20]
		float dc_dc_voltage = 3.0 * (adcVal1 / adc_counter) / 4095.0;   // The value is multiplied by 3.0 to have the same reference voltage as the LTC6811 and use the same lookup tables
 8007a96:	4b38      	ldr	r3, [pc, #224]	; (8007b78 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	4b35      	ldr	r3, [pc, #212]	; (8007b70 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7f8 fd2e 	bl	8000504 <__aeabi_ui2d>
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	4b37      	ldr	r3, [pc, #220]	; (8007b8c <HAL_ADC_ConvCpltCallback+0x1e4>)
 8007aae:	f7f8 fda3 	bl	80005f8 <__aeabi_dmul>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	4619      	mov	r1, r3
 8007aba:	a329      	add	r3, pc, #164	; (adr r3, 8007b60 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f7f8 fec4 	bl	800084c <__aeabi_ddiv>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4619      	mov	r1, r3
 8007acc:	f7f9 f88c 	bl	8000be8 <__aeabi_d2f>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	60fb      	str	r3, [r7, #12]
		uint16_t position   = lookup_value(NTC_voltage, NTC_LUT_LENGTH, dc_dc_voltage);
 8007ad4:	ed97 0a03 	vldr	s0, [r7, #12]
 8007ad8:	21c9      	movs	r1, #201	; 0xc9
 8007ada:	482d      	ldr	r0, [pc, #180]	; (8007b90 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8007adc:	f7fd ff7c 	bl	80059d8 <lookup_value>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	817b      	strh	r3, [r7, #10]
		accuInfo.dc_dc_temp = position / 2.0;
 8007ae4:	897b      	ldrh	r3, [r7, #10]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7f8 fd1c 	bl	8000524 <__aeabi_i2d>
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007af4:	f7f8 feaa 	bl	800084c <__aeabi_ddiv>
 8007af8:	4602      	mov	r2, r0
 8007afa:	460b      	mov	r3, r1
 8007afc:	4610      	mov	r0, r2
 8007afe:	4619      	mov	r1, r3
 8007b00:	f7f9 f872 	bl	8000be8 <__aeabi_d2f>
 8007b04:	4603      	mov	r3, r0
 8007b06:	4a1f      	ldr	r2, [pc, #124]	; (8007b84 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8007b08:	6113      	str	r3, [r2, #16]
		if (accuInfo.dc_dc_temp > 90)
 8007b0a:	4b1e      	ldr	r3, [pc, #120]	; (8007b84 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8007b0c:	edd3 7a04 	vldr	s15, [r3, #16]
 8007b10:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8007b94 <HAL_ADC_ConvCpltCallback+0x1ec>
 8007b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1c:	dd05      	ble.n	8007b2a <HAL_ADC_ConvCpltCallback+0x182>
			accuInfo.vicor_overtemp = 1;
 8007b1e:	4a19      	ldr	r2, [pc, #100]	; (8007b84 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8007b20:	7b53      	ldrb	r3, [r2, #13]
 8007b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b26:	7353      	strb	r3, [r2, #13]
 8007b28:	e004      	b.n	8007b34 <HAL_ADC_ConvCpltCallback+0x18c>
			accuInfo.vicor_overtemp = 0;
 8007b2a:	4a16      	ldr	r2, [pc, #88]	; (8007b84 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8007b2c:	7b53      	ldrb	r3, [r2, #13]
 8007b2e:	f36f 13c7 	bfc	r3, #7, #1
 8007b32:	7353      	strb	r3, [r2, #13]
		adcVal1 = 0;
 8007b34:	4b10      	ldr	r3, [pc, #64]	; (8007b78 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	601a      	str	r2, [r3, #0]
		adcVal2 = 0;
 8007b3a:	4b10      	ldr	r3, [pc, #64]	; (8007b7c <HAL_ADC_ConvCpltCallback+0x1d4>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	601a      	str	r2, [r3, #0]
		adcVal3 = 0;
 8007b40:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]
		adc_counter = 0;
 8007b46:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]
}
 8007b4c:	bf00      	nop
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	f3af 8000 	nop.w
 8007b58:	00000000 	.word	0x00000000
 8007b5c:	4069c800 	.word	0x4069c800
 8007b60:	00000000 	.word	0x00000000
 8007b64:	40affe00 	.word	0x40affe00
 8007b68:	00000000 	.word	0x00000000
 8007b6c:	404e5000 	.word	0x404e5000
 8007b70:	200008cc 	.word	0x200008cc
 8007b74:	200008dc 	.word	0x200008dc
 8007b78:	200008d0 	.word	0x200008d0
 8007b7c:	200008d4 	.word	0x200008d4
 8007b80:	200008d8 	.word	0x200008d8
 8007b84:	200021cc 	.word	0x200021cc
 8007b88:	40290000 	.word	0x40290000
 8007b8c:	40080000 	.word	0x40080000
 8007b90:	20000310 	.word	0x20000310
 8007b94:	42b40000 	.word	0x42b40000

08007b98 <Enable_ADC_Conversions>:


void Enable_ADC_Conversions()
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc_buf, ADC_BUF_LEN);
 8007b9c:	2203      	movs	r2, #3
 8007b9e:	4904      	ldr	r1, [pc, #16]	; (8007bb0 <Enable_ADC_Conversions+0x18>)
 8007ba0:	4804      	ldr	r0, [pc, #16]	; (8007bb4 <Enable_ADC_Conversions+0x1c>)
 8007ba2:	f004 f8cd 	bl	800bd40 <HAL_ADC_Start_DMA>
	osDelay(1);
 8007ba6:	2001      	movs	r0, #1
 8007ba8:	f010 facc 	bl	8018144 <osDelay>
}
 8007bac:	bf00      	nop
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	200008dc 	.word	0x200008dc
 8007bb4:	200008e4 	.word	0x200008e4

08007bb8 <cJSON_strdup>:
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60bb      	str	r3, [r7, #8]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <cJSON_strdup+0x1c>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	e015      	b.n	8007c00 <cJSON_strdup+0x48>
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7f8 fb4b 	bl	8000270 <strlen>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	3301      	adds	r3, #1
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	4798      	blx	r3
 8007be8:	60b8      	str	r0, [r7, #8]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <cJSON_strdup+0x3c>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	e005      	b.n	8007c00 <cJSON_strdup+0x48>
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	68b8      	ldr	r0, [r7, #8]
 8007bfa:	f016 fd89 	bl	801e710 <memcpy>
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <cJSON_New_Item>:
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2028      	movs	r0, #40	; 0x28
 8007c16:	4798      	blx	r3
 8007c18:	60f8      	str	r0, [r7, #12]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d004      	beq.n	8007c2a <cJSON_New_Item+0x22>
 8007c20:	2228      	movs	r2, #40	; 0x28
 8007c22:	2100      	movs	r1, #0
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f016 fc7c 	bl	801e522 <memset>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <cJSON_Delete>:
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	e037      	b.n	8007cb2 <cJSON_Delete+0x7e>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d108      	bne.n	8007c66 <cJSON_Delete+0x32>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d004      	beq.n	8007c66 <cJSON_Delete+0x32>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7ff ffe7 	bl	8007c34 <cJSON_Delete>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d109      	bne.n	8007c86 <cJSON_Delete+0x52>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d005      	beq.n	8007c86 <cJSON_Delete+0x52>
 8007c7a:	4b12      	ldr	r3, [pc, #72]	; (8007cc4 <cJSON_Delete+0x90>)
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6912      	ldr	r2, [r2, #16]
 8007c82:	4610      	mov	r0, r2
 8007c84:	4798      	blx	r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d109      	bne.n	8007ca6 <cJSON_Delete+0x72>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d005      	beq.n	8007ca6 <cJSON_Delete+0x72>
 8007c9a:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <cJSON_Delete+0x90>)
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6a12      	ldr	r2, [r2, #32]
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	4798      	blx	r3
 8007ca6:	4b07      	ldr	r3, [pc, #28]	; (8007cc4 <cJSON_Delete+0x90>)
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	607b      	str	r3, [r7, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1c4      	bne.n	8007c42 <cJSON_Delete+0xe>
 8007cb8:	bf00      	nop
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20000008 	.word	0x20000008

08007cc8 <get_decimal_point>:
 8007cc8:	b480      	push	{r7}
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	232e      	movs	r3, #46	; 0x2e
 8007cce:	4618      	mov	r0, r3
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <ensure>:
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60bb      	str	r3, [r7, #8]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <ensure+0x20>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <ensure+0x24>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	e083      	b.n	8007e04 <ensure+0x12c>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d007      	beq.n	8007d14 <ensure+0x3c>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689a      	ldr	r2, [r3, #8]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d301      	bcc.n	8007d14 <ensure+0x3c>
 8007d10:	2300      	movs	r3, #0
 8007d12:	e077      	b.n	8007e04 <ensure+0x12c>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	da01      	bge.n	8007d1e <ensure+0x46>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e072      	b.n	8007e04 <ensure+0x12c>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689a      	ldr	r2, [r3, #8]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	4413      	add	r3, r2
 8007d26:	3301      	adds	r3, #1
 8007d28:	603b      	str	r3, [r7, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d805      	bhi.n	8007d40 <ensure+0x68>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	e061      	b.n	8007e04 <ensure+0x12c>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <ensure+0x74>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	e05b      	b.n	8007e04 <ensure+0x12c>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d52:	d308      	bcc.n	8007d66 <ensure+0x8e>
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	db03      	blt.n	8007d62 <ensure+0x8a>
 8007d5a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007d5e:	60bb      	str	r3, [r7, #8]
 8007d60:	e004      	b.n	8007d6c <ensure+0x94>
 8007d62:	2300      	movs	r3, #0
 8007d64:	e04e      	b.n	8007e04 <ensure+0x12c>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	60bb      	str	r3, [r7, #8]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d018      	beq.n	8007da6 <ensure+0xce>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	6812      	ldr	r2, [r2, #0]
 8007d7c:	68b9      	ldr	r1, [r7, #8]
 8007d7e:	4610      	mov	r0, r2
 8007d80:	4798      	blx	r3
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d132      	bne.n	8007df0 <ensure+0x118>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	4610      	mov	r0, r2
 8007d94:	4798      	blx	r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	605a      	str	r2, [r3, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	2300      	movs	r3, #0
 8007da4:	e02e      	b.n	8007e04 <ensure+0x12c>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	68b8      	ldr	r0, [r7, #8]
 8007dac:	4798      	blx	r3
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10d      	bne.n	8007dd2 <ensure+0xfa>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	6812      	ldr	r2, [r2, #0]
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	4798      	blx	r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	605a      	str	r2, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e018      	b.n	8007e04 <ensure+0x12c>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6819      	ldr	r1, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	461a      	mov	r2, r3
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f016 fc96 	bl	801e710 <memcpy>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	6812      	ldr	r2, [r2, #0]
 8007dec:	4610      	mov	r0, r2
 8007dee:	4798      	blx	r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	605a      	str	r2, [r3, #4]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	4413      	add	r3, r2
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <update_offset>:
 8007e0c:	b590      	push	{r4, r7, lr}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d013      	beq.n	8007e46 <update_offset+0x3a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00f      	beq.n	8007e46 <update_offset+0x3a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	4413      	add	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	689c      	ldr	r4, [r3, #8]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f7f8 fa1a 	bl	8000270 <strlen>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	18e2      	adds	r2, r4, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	609a      	str	r2, [r3, #8]
 8007e44:	e000      	b.n	8007e48 <update_offset+0x3c>
 8007e46:	bf00      	nop
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd90      	pop	{r4, r7, pc}
	...

08007e50 <compare_double>:
 8007e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e54:	b087      	sub	sp, #28
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	ed87 0b02 	vstr	d0, [r7, #8]
 8007e5c:	ed87 1b00 	vstr	d1, [r7]
 8007e60:	68b8      	ldr	r0, [r7, #8]
 8007e62:	68fe      	ldr	r6, [r7, #12]
 8007e64:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	687e      	ldr	r6, [r7, #4]
 8007e6c:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007e70:	f7f8 fe52 	bl	8000b18 <__aeabi_dcmpgt>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d004      	beq.n	8007e84 <compare_double+0x34>
 8007e7a:	68bc      	ldr	r4, [r7, #8]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007e82:	e003      	b.n	8007e8c <compare_double+0x3c>
 8007e84:	683c      	ldr	r4, [r7, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007e8c:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8007e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e98:	f7f8 f9f6 	bl	8000288 <__aeabi_dsub>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4690      	mov	r8, r2
 8007ea2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007ea6:	f04f 0200 	mov.w	r2, #0
 8007eaa:	4b0c      	ldr	r3, [pc, #48]	; (8007edc <compare_double+0x8c>)
 8007eac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007eb0:	f7f8 fba2 	bl	80005f8 <__aeabi_dmul>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	2101      	movs	r1, #1
 8007eba:	460c      	mov	r4, r1
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	f7f8 fe16 	bl	8000af0 <__aeabi_dcmple>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <compare_double+0x7e>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	461c      	mov	r4, r3
 8007ece:	b2e3      	uxtb	r3, r4
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	371c      	adds	r7, #28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eda:	bf00      	nop
 8007edc:	3cb00000 	.word	0x3cb00000

08007ee0 <print_number>:
 8007ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ee2:	b093      	sub	sp, #76	; 0x4c
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
 8007eea:	2300      	movs	r3, #0
 8007eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007ef4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007ef8:	2300      	movs	r3, #0
 8007efa:	647b      	str	r3, [r7, #68]	; 0x44
 8007efc:	2300      	movs	r3, #0
 8007efe:	643b      	str	r3, [r7, #64]	; 0x40
 8007f00:	2300      	movs	r3, #0
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	f107 0318 	add.w	r3, r7, #24
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	605a      	str	r2, [r3, #4]
 8007f0e:	609a      	str	r2, [r3, #8]
 8007f10:	60da      	str	r2, [r3, #12]
 8007f12:	611a      	str	r2, [r3, #16]
 8007f14:	829a      	strh	r2, [r3, #20]
 8007f16:	f7ff fed7 	bl	8007cc8 <get_decimal_point>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007f20:	f04f 0200 	mov.w	r2, #0
 8007f24:	f04f 0300 	mov.w	r3, #0
 8007f28:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <print_number+0x56>
 8007f32:	2300      	movs	r3, #0
 8007f34:	e0b4      	b.n	80080a0 <print_number+0x1c0>
 8007f36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007f3a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007f3e:	f7f8 fdf5 	bl	8000b2c <__aeabi_dcmpun>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d121      	bne.n	8007f8c <print_number+0xac>
 8007f48:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8007f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f4c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007f50:	2301      	movs	r3, #1
 8007f52:	461e      	mov	r6, r3
 8007f54:	f04f 32ff 	mov.w	r2, #4294967295
 8007f58:	4b53      	ldr	r3, [pc, #332]	; (80080a8 <print_number+0x1c8>)
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	f7f8 fde5 	bl	8000b2c <__aeabi_dcmpun>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10b      	bne.n	8007f80 <print_number+0xa0>
 8007f68:	f04f 32ff 	mov.w	r2, #4294967295
 8007f6c:	4b4e      	ldr	r3, [pc, #312]	; (80080a8 <print_number+0x1c8>)
 8007f6e:	4620      	mov	r0, r4
 8007f70:	4629      	mov	r1, r5
 8007f72:	f7f8 fdbd 	bl	8000af0 <__aeabi_dcmple>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <print_number+0xa0>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	461e      	mov	r6, r3
 8007f80:	b2f3      	uxtb	r3, r6
 8007f82:	f083 0301 	eor.w	r3, r3, #1
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d007      	beq.n	8007f9c <print_number+0xbc>
 8007f8c:	f107 0314 	add.w	r3, r7, #20
 8007f90:	4946      	ldr	r1, [pc, #280]	; (80080ac <print_number+0x1cc>)
 8007f92:	4618      	mov	r0, r3
 8007f94:	f016 fa34 	bl	801e400 <siprintf>
 8007f98:	6478      	str	r0, [r7, #68]	; 0x44
 8007f9a:	e03f      	b.n	800801c <print_number+0x13c>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7f8 fabf 	bl	8000524 <__aeabi_i2d>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007fae:	f7f8 fd8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d009      	beq.n	8007fcc <print_number+0xec>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	695a      	ldr	r2, [r3, #20]
 8007fbc:	f107 0314 	add.w	r3, r7, #20
 8007fc0:	493b      	ldr	r1, [pc, #236]	; (80080b0 <print_number+0x1d0>)
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f016 fa1c 	bl	801e400 <siprintf>
 8007fc8:	6478      	str	r0, [r7, #68]	; 0x44
 8007fca:	e027      	b.n	800801c <print_number+0x13c>
 8007fcc:	f107 0014 	add.w	r0, r7, #20
 8007fd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007fd4:	4937      	ldr	r1, [pc, #220]	; (80080b4 <print_number+0x1d4>)
 8007fd6:	f016 fa13 	bl	801e400 <siprintf>
 8007fda:	6478      	str	r0, [r7, #68]	; 0x44
 8007fdc:	f107 0208 	add.w	r2, r7, #8
 8007fe0:	f107 0314 	add.w	r3, r7, #20
 8007fe4:	4934      	ldr	r1, [pc, #208]	; (80080b8 <print_number+0x1d8>)
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f016 fa2a 	bl	801e440 <siscanf>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d10c      	bne.n	800800c <print_number+0x12c>
 8007ff2:	ed97 7b02 	vldr	d7, [r7, #8]
 8007ff6:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8007ffa:	eeb0 0a47 	vmov.f32	s0, s14
 8007ffe:	eef0 0a67 	vmov.f32	s1, s15
 8008002:	f7ff ff25 	bl	8007e50 <compare_double>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d107      	bne.n	800801c <print_number+0x13c>
 800800c:	f107 0014 	add.w	r0, r7, #20
 8008010:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008014:	4929      	ldr	r1, [pc, #164]	; (80080bc <print_number+0x1dc>)
 8008016:	f016 f9f3 	bl	801e400 <siprintf>
 800801a:	6478      	str	r0, [r7, #68]	; 0x44
 800801c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800801e:	2b00      	cmp	r3, #0
 8008020:	db02      	blt.n	8008028 <print_number+0x148>
 8008022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008024:	2b19      	cmp	r3, #25
 8008026:	dd01      	ble.n	800802c <print_number+0x14c>
 8008028:	2300      	movs	r3, #0
 800802a:	e039      	b.n	80080a0 <print_number+0x1c0>
 800802c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800802e:	3301      	adds	r3, #1
 8008030:	4619      	mov	r1, r3
 8008032:	6838      	ldr	r0, [r7, #0]
 8008034:	f7ff fe50 	bl	8007cd8 <ensure>
 8008038:	63f8      	str	r0, [r7, #60]	; 0x3c
 800803a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <print_number+0x164>
 8008040:	2300      	movs	r3, #0
 8008042:	e02d      	b.n	80080a0 <print_number+0x1c0>
 8008044:	2300      	movs	r3, #0
 8008046:	643b      	str	r3, [r7, #64]	; 0x40
 8008048:	e01a      	b.n	8008080 <print_number+0x1a0>
 800804a:	f107 0214 	add.w	r2, r7, #20
 800804e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008050:	4413      	add	r3, r2
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008058:	429a      	cmp	r2, r3
 800805a:	d105      	bne.n	8008068 <print_number+0x188>
 800805c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800805e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008060:	4413      	add	r3, r2
 8008062:	222e      	movs	r2, #46	; 0x2e
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	e008      	b.n	800807a <print_number+0x19a>
 8008068:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800806a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800806c:	4413      	add	r3, r2
 800806e:	f107 0114 	add.w	r1, r7, #20
 8008072:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008074:	440a      	add	r2, r1
 8008076:	7812      	ldrb	r2, [r2, #0]
 8008078:	701a      	strb	r2, [r3, #0]
 800807a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800807c:	3301      	adds	r3, #1
 800807e:	643b      	str	r3, [r7, #64]	; 0x40
 8008080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008082:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008084:	429a      	cmp	r2, r3
 8008086:	d3e0      	bcc.n	800804a <print_number+0x16a>
 8008088:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800808a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800808c:	4413      	add	r3, r2
 800808e:	2200      	movs	r2, #0
 8008090:	701a      	strb	r2, [r3, #0]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	689a      	ldr	r2, [r3, #8]
 8008096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008098:	441a      	add	r2, r3
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	609a      	str	r2, [r3, #8]
 800809e:	2301      	movs	r3, #1
 80080a0:	4618      	mov	r0, r3
 80080a2:	374c      	adds	r7, #76	; 0x4c
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080a8:	7fefffff 	.word	0x7fefffff
 80080ac:	080220c4 	.word	0x080220c4
 80080b0:	080220cc 	.word	0x080220cc
 80080b4:	080220d0 	.word	0x080220d0
 80080b8:	080220d8 	.word	0x080220d8
 80080bc:	080220dc 	.word	0x080220dc

080080c0 <print_string_ptr>:
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
 80080ca:	2300      	movs	r3, #0
 80080cc:	61fb      	str	r3, [r7, #28]
 80080ce:	2300      	movs	r3, #0
 80080d0:	613b      	str	r3, [r7, #16]
 80080d2:	2300      	movs	r3, #0
 80080d4:	61bb      	str	r3, [r7, #24]
 80080d6:	2300      	movs	r3, #0
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	2300      	movs	r3, #0
 80080dc:	617b      	str	r3, [r7, #20]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <print_string_ptr+0x28>
 80080e4:	2300      	movs	r3, #0
 80080e6:	e110      	b.n	800830a <print_string_ptr+0x24a>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d111      	bne.n	8008112 <print_string_ptr+0x52>
 80080ee:	2103      	movs	r1, #3
 80080f0:	6838      	ldr	r0, [r7, #0]
 80080f2:	f7ff fdf1 	bl	8007cd8 <ensure>
 80080f6:	6138      	str	r0, [r7, #16]
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <print_string_ptr+0x42>
 80080fe:	2300      	movs	r3, #0
 8008100:	e103      	b.n	800830a <print_string_ptr+0x24a>
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	4a83      	ldr	r2, [pc, #524]	; (8008314 <print_string_ptr+0x254>)
 8008106:	8811      	ldrh	r1, [r2, #0]
 8008108:	7892      	ldrb	r2, [r2, #2]
 800810a:	8019      	strh	r1, [r3, #0]
 800810c:	709a      	strb	r2, [r3, #2]
 800810e:	2301      	movs	r3, #1
 8008110:	e0fb      	b.n	800830a <print_string_ptr+0x24a>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	61fb      	str	r3, [r7, #28]
 8008116:	e024      	b.n	8008162 <print_string_ptr+0xa2>
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b22      	cmp	r3, #34	; 0x22
 800811e:	dc0f      	bgt.n	8008140 <print_string_ptr+0x80>
 8008120:	2b08      	cmp	r3, #8
 8008122:	db13      	blt.n	800814c <print_string_ptr+0x8c>
 8008124:	3b08      	subs	r3, #8
 8008126:	4a7c      	ldr	r2, [pc, #496]	; (8008318 <print_string_ptr+0x258>)
 8008128:	fa22 f303 	lsr.w	r3, r2, r3
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	bf14      	ite	ne
 8008134:	2301      	movne	r3, #1
 8008136:	2300      	moveq	r3, #0
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <print_string_ptr+0x84>
 800813e:	e005      	b.n	800814c <print_string_ptr+0x8c>
 8008140:	2b5c      	cmp	r3, #92	; 0x5c
 8008142:	d103      	bne.n	800814c <print_string_ptr+0x8c>
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	3301      	adds	r3, #1
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	e007      	b.n	800815c <print_string_ptr+0x9c>
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	2b1f      	cmp	r3, #31
 8008152:	d802      	bhi.n	800815a <print_string_ptr+0x9a>
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	3305      	adds	r3, #5
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	bf00      	nop
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	3301      	adds	r3, #1
 8008160:	61fb      	str	r3, [r7, #28]
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1d6      	bne.n	8008118 <print_string_ptr+0x58>
 800816a:	69fa      	ldr	r2, [r7, #28]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	461a      	mov	r2, r3
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	4413      	add	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3303      	adds	r3, #3
 800817c:	4619      	mov	r1, r3
 800817e:	6838      	ldr	r0, [r7, #0]
 8008180:	f7ff fdaa 	bl	8007cd8 <ensure>
 8008184:	6138      	str	r0, [r7, #16]
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <print_string_ptr+0xd0>
 800818c:	2300      	movs	r3, #0
 800818e:	e0bc      	b.n	800830a <print_string_ptr+0x24a>
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d117      	bne.n	80081c6 <print_string_ptr+0x106>
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	2222      	movs	r2, #34	; 0x22
 800819a:	701a      	strb	r2, [r3, #0]
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	3301      	adds	r3, #1
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f016 fab3 	bl	801e710 <memcpy>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3301      	adds	r3, #1
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	4413      	add	r3, r2
 80081b2:	2222      	movs	r2, #34	; 0x22
 80081b4:	701a      	strb	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3302      	adds	r3, #2
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	4413      	add	r3, r2
 80081be:	2200      	movs	r2, #0
 80081c0:	701a      	strb	r2, [r3, #0]
 80081c2:	2301      	movs	r3, #1
 80081c4:	e0a1      	b.n	800830a <print_string_ptr+0x24a>
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	2222      	movs	r2, #34	; 0x22
 80081ca:	701a      	strb	r2, [r3, #0]
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	3301      	adds	r3, #1
 80081d0:	61bb      	str	r3, [r7, #24]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	61fb      	str	r3, [r7, #28]
 80081d6:	e086      	b.n	80082e6 <print_string_ptr+0x226>
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b1f      	cmp	r3, #31
 80081de:	d90c      	bls.n	80081fa <print_string_ptr+0x13a>
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b22      	cmp	r3, #34	; 0x22
 80081e6:	d008      	beq.n	80081fa <print_string_ptr+0x13a>
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b5c      	cmp	r3, #92	; 0x5c
 80081ee:	d004      	beq.n	80081fa <print_string_ptr+0x13a>
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	781a      	ldrb	r2, [r3, #0]
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	701a      	strb	r2, [r3, #0]
 80081f8:	e06f      	b.n	80082da <print_string_ptr+0x21a>
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	61ba      	str	r2, [r7, #24]
 8008200:	225c      	movs	r2, #92	; 0x5c
 8008202:	701a      	strb	r2, [r3, #0]
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	2b22      	cmp	r3, #34	; 0x22
 800820a:	dc3d      	bgt.n	8008288 <print_string_ptr+0x1c8>
 800820c:	2b08      	cmp	r3, #8
 800820e:	db59      	blt.n	80082c4 <print_string_ptr+0x204>
 8008210:	3b08      	subs	r3, #8
 8008212:	2b1a      	cmp	r3, #26
 8008214:	d856      	bhi.n	80082c4 <print_string_ptr+0x204>
 8008216:	a201      	add	r2, pc, #4	; (adr r2, 800821c <print_string_ptr+0x15c>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	0800829d 	.word	0x0800829d
 8008220:	080082bd 	.word	0x080082bd
 8008224:	080082ad 	.word	0x080082ad
 8008228:	080082c5 	.word	0x080082c5
 800822c:	080082a5 	.word	0x080082a5
 8008230:	080082b5 	.word	0x080082b5
 8008234:	080082c5 	.word	0x080082c5
 8008238:	080082c5 	.word	0x080082c5
 800823c:	080082c5 	.word	0x080082c5
 8008240:	080082c5 	.word	0x080082c5
 8008244:	080082c5 	.word	0x080082c5
 8008248:	080082c5 	.word	0x080082c5
 800824c:	080082c5 	.word	0x080082c5
 8008250:	080082c5 	.word	0x080082c5
 8008254:	080082c5 	.word	0x080082c5
 8008258:	080082c5 	.word	0x080082c5
 800825c:	080082c5 	.word	0x080082c5
 8008260:	080082c5 	.word	0x080082c5
 8008264:	080082c5 	.word	0x080082c5
 8008268:	080082c5 	.word	0x080082c5
 800826c:	080082c5 	.word	0x080082c5
 8008270:	080082c5 	.word	0x080082c5
 8008274:	080082c5 	.word	0x080082c5
 8008278:	080082c5 	.word	0x080082c5
 800827c:	080082c5 	.word	0x080082c5
 8008280:	080082c5 	.word	0x080082c5
 8008284:	08008295 	.word	0x08008295
 8008288:	2b5c      	cmp	r3, #92	; 0x5c
 800828a:	d11b      	bne.n	80082c4 <print_string_ptr+0x204>
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	225c      	movs	r2, #92	; 0x5c
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	e022      	b.n	80082da <print_string_ptr+0x21a>
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	2222      	movs	r2, #34	; 0x22
 8008298:	701a      	strb	r2, [r3, #0]
 800829a:	e01e      	b.n	80082da <print_string_ptr+0x21a>
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	2262      	movs	r2, #98	; 0x62
 80082a0:	701a      	strb	r2, [r3, #0]
 80082a2:	e01a      	b.n	80082da <print_string_ptr+0x21a>
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	2266      	movs	r2, #102	; 0x66
 80082a8:	701a      	strb	r2, [r3, #0]
 80082aa:	e016      	b.n	80082da <print_string_ptr+0x21a>
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	226e      	movs	r2, #110	; 0x6e
 80082b0:	701a      	strb	r2, [r3, #0]
 80082b2:	e012      	b.n	80082da <print_string_ptr+0x21a>
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	2272      	movs	r2, #114	; 0x72
 80082b8:	701a      	strb	r2, [r3, #0]
 80082ba:	e00e      	b.n	80082da <print_string_ptr+0x21a>
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	2274      	movs	r2, #116	; 0x74
 80082c0:	701a      	strb	r2, [r3, #0]
 80082c2:	e00a      	b.n	80082da <print_string_ptr+0x21a>
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	4914      	ldr	r1, [pc, #80]	; (800831c <print_string_ptr+0x25c>)
 80082cc:	69b8      	ldr	r0, [r7, #24]
 80082ce:	f016 f897 	bl	801e400 <siprintf>
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	3304      	adds	r3, #4
 80082d6:	61bb      	str	r3, [r7, #24]
 80082d8:	bf00      	nop
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	3301      	adds	r3, #1
 80082de:	61fb      	str	r3, [r7, #28]
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	3301      	adds	r3, #1
 80082e4:	61bb      	str	r3, [r7, #24]
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f47f af74 	bne.w	80081d8 <print_string_ptr+0x118>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	3301      	adds	r3, #1
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	4413      	add	r3, r2
 80082f8:	2222      	movs	r2, #34	; 0x22
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3302      	adds	r3, #2
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	4413      	add	r3, r2
 8008304:	2200      	movs	r2, #0
 8008306:	701a      	strb	r2, [r3, #0]
 8008308:	2301      	movs	r3, #1
 800830a:	4618      	mov	r0, r3
 800830c:	3720      	adds	r7, #32
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	080220e4 	.word	0x080220e4
 8008318:	04000037 	.word	0x04000037
 800831c:	080220e8 	.word	0x080220e8

08008320 <print_string>:
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	4618      	mov	r0, r3
 8008332:	f7ff fec5 	bl	80080c0 <print_string_ptr>
 8008336:	4603      	mov	r3, r0
 8008338:	4618      	mov	r0, r3
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <print>:
 8008340:	b580      	push	{r7, lr}
 8008342:	b08e      	sub	sp, #56	; 0x38
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
 800834c:	2300      	movs	r3, #0
 800834e:	637b      	str	r3, [r7, #52]	; 0x34
 8008350:	f107 0310 	add.w	r3, r7, #16
 8008354:	2224      	movs	r2, #36	; 0x24
 8008356:	2100      	movs	r1, #0
 8008358:	4618      	mov	r0, r3
 800835a:	f016 f8e2 	bl	801e522 <memset>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a38      	ldr	r2, [pc, #224]	; (8008444 <print+0x104>)
 8008364:	6812      	ldr	r2, [r2, #0]
 8008366:	4610      	mov	r0, r2
 8008368:	4798      	blx	r3
 800836a:	4603      	mov	r3, r0
 800836c:	613b      	str	r3, [r7, #16]
 800836e:	4b35      	ldr	r3, [pc, #212]	; (8008444 <print+0x104>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	617b      	str	r3, [r7, #20]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800837e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008380:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d040      	beq.n	800840c <print+0xcc>
 800838a:	f107 0310 	add.w	r3, r7, #16
 800838e:	4619      	mov	r1, r3
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f869 	bl	8008468 <print_value>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d039      	beq.n	8008410 <print+0xd0>
 800839c:	f107 0310 	add.w	r3, r7, #16
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff fd33 	bl	8007e0c <update_offset>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00d      	beq.n	80083ca <print+0x8a>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	6938      	ldr	r0, [r7, #16]
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	3201      	adds	r2, #1
 80083b8:	4611      	mov	r1, r2
 80083ba:	4798      	blx	r3
 80083bc:	6378      	str	r0, [r7, #52]	; 0x34
 80083be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d027      	beq.n	8008414 <print+0xd4>
 80083c4:	2300      	movs	r3, #0
 80083c6:	613b      	str	r3, [r7, #16]
 80083c8:	e01e      	b.n	8008408 <print+0xc8>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	3201      	adds	r2, #1
 80083d2:	4610      	mov	r0, r2
 80083d4:	4798      	blx	r3
 80083d6:	6378      	str	r0, [r7, #52]	; 0x34
 80083d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d01c      	beq.n	8008418 <print+0xd8>
 80083de:	6939      	ldr	r1, [r7, #16]
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	4293      	cmp	r3, r2
 80083e8:	bf28      	it	cs
 80083ea:	4613      	movcs	r3, r2
 80083ec:	461a      	mov	r2, r3
 80083ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80083f0:	f016 f98e 	bl	801e710 <memcpy>
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083f8:	4413      	add	r3, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	701a      	strb	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	4610      	mov	r0, r2
 8008406:	4798      	blx	r3
 8008408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840a:	e016      	b.n	800843a <print+0xfa>
 800840c:	bf00      	nop
 800840e:	e004      	b.n	800841a <print+0xda>
 8008410:	bf00      	nop
 8008412:	e002      	b.n	800841a <print+0xda>
 8008414:	bf00      	nop
 8008416:	e000      	b.n	800841a <print+0xda>
 8008418:	bf00      	nop
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <print+0xea>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	4610      	mov	r0, r2
 8008428:	4798      	blx	r3
 800842a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <print+0xf8>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008436:	4798      	blx	r3
 8008438:	2300      	movs	r3, #0
 800843a:	4618      	mov	r0, r3
 800843c:	3738      	adds	r7, #56	; 0x38
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	08022654 	.word	0x08022654

08008448 <cJSON_Print>:
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	4a04      	ldr	r2, [pc, #16]	; (8008464 <cJSON_Print+0x1c>)
 8008452:	2101      	movs	r1, #1
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7ff ff73 	bl	8008340 <print>
 800845a:	4603      	mov	r3, r0
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20000008 	.word	0x20000008

08008468 <print_value>:
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
 8008472:	2300      	movs	r3, #0
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <print_value+0x1a>
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <print_value+0x1e>
 8008482:	2300      	movs	r3, #0
 8008484:	e0c9      	b.n	800861a <print_value+0x1b2>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b80      	cmp	r3, #128	; 0x80
 800848e:	f000 808e 	beq.w	80085ae <print_value+0x146>
 8008492:	2b80      	cmp	r3, #128	; 0x80
 8008494:	f300 80c0 	bgt.w	8008618 <print_value+0x1b0>
 8008498:	2b20      	cmp	r3, #32
 800849a:	dc49      	bgt.n	8008530 <print_value+0xc8>
 800849c:	2b00      	cmp	r3, #0
 800849e:	f340 80bb 	ble.w	8008618 <print_value+0x1b0>
 80084a2:	3b01      	subs	r3, #1
 80084a4:	2b1f      	cmp	r3, #31
 80084a6:	f200 80b7 	bhi.w	8008618 <print_value+0x1b0>
 80084aa:	a201      	add	r2, pc, #4	; (adr r2, 80084b0 <print_value+0x48>)
 80084ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b0:	0800855b 	.word	0x0800855b
 80084b4:	0800857f 	.word	0x0800857f
 80084b8:	08008619 	.word	0x08008619
 80084bc:	08008537 	.word	0x08008537
 80084c0:	08008619 	.word	0x08008619
 80084c4:	08008619 	.word	0x08008619
 80084c8:	08008619 	.word	0x08008619
 80084cc:	080085a3 	.word	0x080085a3
 80084d0:	08008619 	.word	0x08008619
 80084d4:	08008619 	.word	0x08008619
 80084d8:	08008619 	.word	0x08008619
 80084dc:	08008619 	.word	0x08008619
 80084e0:	08008619 	.word	0x08008619
 80084e4:	08008619 	.word	0x08008619
 80084e8:	08008619 	.word	0x08008619
 80084ec:	080085f5 	.word	0x080085f5
 80084f0:	08008619 	.word	0x08008619
 80084f4:	08008619 	.word	0x08008619
 80084f8:	08008619 	.word	0x08008619
 80084fc:	08008619 	.word	0x08008619
 8008500:	08008619 	.word	0x08008619
 8008504:	08008619 	.word	0x08008619
 8008508:	08008619 	.word	0x08008619
 800850c:	08008619 	.word	0x08008619
 8008510:	08008619 	.word	0x08008619
 8008514:	08008619 	.word	0x08008619
 8008518:	08008619 	.word	0x08008619
 800851c:	08008619 	.word	0x08008619
 8008520:	08008619 	.word	0x08008619
 8008524:	08008619 	.word	0x08008619
 8008528:	08008619 	.word	0x08008619
 800852c:	08008601 	.word	0x08008601
 8008530:	2b40      	cmp	r3, #64	; 0x40
 8008532:	d06b      	beq.n	800860c <print_value+0x1a4>
 8008534:	e070      	b.n	8008618 <print_value+0x1b0>
 8008536:	2105      	movs	r1, #5
 8008538:	6838      	ldr	r0, [r7, #0]
 800853a:	f7ff fbcd 	bl	8007cd8 <ensure>
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <print_value+0xe2>
 8008546:	2300      	movs	r3, #0
 8008548:	e067      	b.n	800861a <print_value+0x1b2>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	4a35      	ldr	r2, [pc, #212]	; (8008624 <print_value+0x1bc>)
 800854e:	6810      	ldr	r0, [r2, #0]
 8008550:	6018      	str	r0, [r3, #0]
 8008552:	7912      	ldrb	r2, [r2, #4]
 8008554:	711a      	strb	r2, [r3, #4]
 8008556:	2301      	movs	r3, #1
 8008558:	e05f      	b.n	800861a <print_value+0x1b2>
 800855a:	2106      	movs	r1, #6
 800855c:	6838      	ldr	r0, [r7, #0]
 800855e:	f7ff fbbb 	bl	8007cd8 <ensure>
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <print_value+0x106>
 800856a:	2300      	movs	r3, #0
 800856c:	e055      	b.n	800861a <print_value+0x1b2>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	4a2d      	ldr	r2, [pc, #180]	; (8008628 <print_value+0x1c0>)
 8008572:	6810      	ldr	r0, [r2, #0]
 8008574:	6018      	str	r0, [r3, #0]
 8008576:	8892      	ldrh	r2, [r2, #4]
 8008578:	809a      	strh	r2, [r3, #4]
 800857a:	2301      	movs	r3, #1
 800857c:	e04d      	b.n	800861a <print_value+0x1b2>
 800857e:	2105      	movs	r1, #5
 8008580:	6838      	ldr	r0, [r7, #0]
 8008582:	f7ff fba9 	bl	8007cd8 <ensure>
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d101      	bne.n	8008592 <print_value+0x12a>
 800858e:	2300      	movs	r3, #0
 8008590:	e043      	b.n	800861a <print_value+0x1b2>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	4a25      	ldr	r2, [pc, #148]	; (800862c <print_value+0x1c4>)
 8008596:	6810      	ldr	r0, [r2, #0]
 8008598:	6018      	str	r0, [r3, #0]
 800859a:	7912      	ldrb	r2, [r2, #4]
 800859c:	711a      	strb	r2, [r3, #4]
 800859e:	2301      	movs	r3, #1
 80085a0:	e03b      	b.n	800861a <print_value+0x1b2>
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7ff fc9b 	bl	8007ee0 <print_number>
 80085aa:	4603      	mov	r3, r0
 80085ac:	e035      	b.n	800861a <print_value+0x1b2>
 80085ae:	2300      	movs	r3, #0
 80085b0:	60bb      	str	r3, [r7, #8]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <print_value+0x156>
 80085ba:	2300      	movs	r3, #0
 80085bc:	e02d      	b.n	800861a <print_value+0x1b2>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7f7 fe54 	bl	8000270 <strlen>
 80085c8:	4603      	mov	r3, r0
 80085ca:	3301      	adds	r3, #1
 80085cc:	60bb      	str	r3, [r7, #8]
 80085ce:	68b9      	ldr	r1, [r7, #8]
 80085d0:	6838      	ldr	r0, [r7, #0]
 80085d2:	f7ff fb81 	bl	8007cd8 <ensure>
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <print_value+0x17a>
 80085de:	2300      	movs	r3, #0
 80085e0:	e01b      	b.n	800861a <print_value+0x1b2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	4619      	mov	r1, r3
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f016 f890 	bl	801e710 <memcpy>
 80085f0:	2301      	movs	r3, #1
 80085f2:	e012      	b.n	800861a <print_value+0x1b2>
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7ff fe92 	bl	8008320 <print_string>
 80085fc:	4603      	mov	r3, r0
 80085fe:	e00c      	b.n	800861a <print_value+0x1b2>
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f814 	bl	8008630 <print_array>
 8008608:	4603      	mov	r3, r0
 800860a:	e006      	b.n	800861a <print_value+0x1b2>
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f894 	bl	800873c <print_object>
 8008614:	4603      	mov	r3, r0
 8008616:	e000      	b.n	800861a <print_value+0x1b2>
 8008618:	2300      	movs	r3, #0
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	080220c4 	.word	0x080220c4
 8008628:	080220f4 	.word	0x080220f4
 800862c:	080220fc 	.word	0x080220fc

08008630 <print_array>:
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
 800863a:	2300      	movs	r3, #0
 800863c:	617b      	str	r3, [r7, #20]
 800863e:	2300      	movs	r3, #0
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	613b      	str	r3, [r7, #16]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <print_array+0x22>
 800864e:	2300      	movs	r3, #0
 8008650:	e070      	b.n	8008734 <print_array+0x104>
 8008652:	2101      	movs	r1, #1
 8008654:	6838      	ldr	r0, [r7, #0]
 8008656:	f7ff fb3f 	bl	8007cd8 <ensure>
 800865a:	6178      	str	r0, [r7, #20]
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <print_array+0x36>
 8008662:	2300      	movs	r3, #0
 8008664:	e066      	b.n	8008734 <print_array+0x104>
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	225b      	movs	r2, #91	; 0x5b
 800866a:	701a      	strb	r2, [r3, #0]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	609a      	str	r2, [r3, #8]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	60da      	str	r2, [r3, #12]
 8008680:	e03d      	b.n	80086fe <print_array+0xce>
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6938      	ldr	r0, [r7, #16]
 8008686:	f7ff feef 	bl	8008468 <print_value>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <print_array+0x64>
 8008690:	2300      	movs	r3, #0
 8008692:	e04f      	b.n	8008734 <print_array+0x104>
 8008694:	6838      	ldr	r0, [r7, #0]
 8008696:	f7ff fbb9 	bl	8007e0c <update_offset>
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d02a      	beq.n	80086f8 <print_array+0xc8>
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <print_array+0x7e>
 80086aa:	2302      	movs	r3, #2
 80086ac:	e000      	b.n	80086b0 <print_array+0x80>
 80086ae:	2301      	movs	r3, #1
 80086b0:	60fb      	str	r3, [r7, #12]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3301      	adds	r3, #1
 80086b6:	4619      	mov	r1, r3
 80086b8:	6838      	ldr	r0, [r7, #0]
 80086ba:	f7ff fb0d 	bl	8007cd8 <ensure>
 80086be:	6178      	str	r0, [r7, #20]
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <print_array+0x9a>
 80086c6:	2300      	movs	r3, #0
 80086c8:	e034      	b.n	8008734 <print_array+0x104>
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	1c5a      	adds	r2, r3, #1
 80086ce:	617a      	str	r2, [r7, #20]
 80086d0:	222c      	movs	r2, #44	; 0x2c
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d004      	beq.n	80086e6 <print_array+0xb6>
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	617a      	str	r2, [r7, #20]
 80086e2:	2220      	movs	r2, #32
 80086e4:	701a      	strb	r2, [r3, #0]
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2200      	movs	r2, #0
 80086ea:	701a      	strb	r2, [r3, #0]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	689a      	ldr	r2, [r3, #8]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	441a      	add	r2, r3
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	609a      	str	r2, [r3, #8]
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	613b      	str	r3, [r7, #16]
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1be      	bne.n	8008682 <print_array+0x52>
 8008704:	2102      	movs	r1, #2
 8008706:	6838      	ldr	r0, [r7, #0]
 8008708:	f7ff fae6 	bl	8007cd8 <ensure>
 800870c:	6178      	str	r0, [r7, #20]
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <print_array+0xe8>
 8008714:	2300      	movs	r3, #0
 8008716:	e00d      	b.n	8008734 <print_array+0x104>
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	617a      	str	r2, [r7, #20]
 800871e:	225d      	movs	r2, #93	; 0x5d
 8008720:	701a      	strb	r2, [r3, #0]
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2200      	movs	r2, #0
 8008726:	701a      	strb	r2, [r3, #0]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	1e5a      	subs	r2, r3, #1
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	60da      	str	r2, [r3, #12]
 8008732:	2301      	movs	r3, #1
 8008734:	4618      	mov	r0, r3
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <print_object>:
 800873c:	b580      	push	{r7, lr}
 800873e:	b088      	sub	sp, #32
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
 8008746:	2300      	movs	r3, #0
 8008748:	61fb      	str	r3, [r7, #28]
 800874a:	2300      	movs	r3, #0
 800874c:	60fb      	str	r3, [r7, #12]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	61bb      	str	r3, [r7, #24]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <print_object+0x22>
 800875a:	2300      	movs	r3, #0
 800875c:	e108      	b.n	8008970 <print_object+0x234>
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <print_object+0x2e>
 8008766:	2302      	movs	r3, #2
 8008768:	e000      	b.n	800876c <print_object+0x30>
 800876a:	2301      	movs	r3, #1
 800876c:	60fb      	str	r3, [r7, #12]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3301      	adds	r3, #1
 8008772:	4619      	mov	r1, r3
 8008774:	6838      	ldr	r0, [r7, #0]
 8008776:	f7ff faaf 	bl	8007cd8 <ensure>
 800877a:	61f8      	str	r0, [r7, #28]
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <print_object+0x4a>
 8008782:	2300      	movs	r3, #0
 8008784:	e0f4      	b.n	8008970 <print_object+0x234>
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	61fa      	str	r2, [r7, #28]
 800878c:	227b      	movs	r2, #123	; 0x7b
 800878e:	701a      	strb	r2, [r3, #0]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	60da      	str	r2, [r3, #12]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d004      	beq.n	80087ac <print_object+0x70>
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	1c5a      	adds	r2, r3, #1
 80087a6:	61fa      	str	r2, [r7, #28]
 80087a8:	220a      	movs	r2, #10
 80087aa:	701a      	strb	r2, [r3, #0]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	689a      	ldr	r2, [r3, #8]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	441a      	add	r2, r3
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	609a      	str	r2, [r3, #8]
 80087b8:	e0a0      	b.n	80088fc <print_object+0x1c0>
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d022      	beq.n	8008808 <print_object+0xcc>
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	4619      	mov	r1, r3
 80087c8:	6838      	ldr	r0, [r7, #0]
 80087ca:	f7ff fa85 	bl	8007cd8 <ensure>
 80087ce:	61f8      	str	r0, [r7, #28]
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <print_object+0x9e>
 80087d6:	2300      	movs	r3, #0
 80087d8:	e0ca      	b.n	8008970 <print_object+0x234>
 80087da:	2300      	movs	r3, #0
 80087dc:	617b      	str	r3, [r7, #20]
 80087de:	e007      	b.n	80087f0 <print_object+0xb4>
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	1c5a      	adds	r2, r3, #1
 80087e4:	61fa      	str	r2, [r7, #28]
 80087e6:	2209      	movs	r2, #9
 80087e8:	701a      	strb	r2, [r3, #0]
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	3301      	adds	r3, #1
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d3f2      	bcc.n	80087e0 <print_object+0xa4>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	689a      	ldr	r2, [r3, #8]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	441a      	add	r2, r3
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	609a      	str	r2, [r3, #8]
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	6a1b      	ldr	r3, [r3, #32]
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	4618      	mov	r0, r3
 8008810:	f7ff fc56 	bl	80080c0 <print_string_ptr>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <print_object+0xe2>
 800881a:	2300      	movs	r3, #0
 800881c:	e0a8      	b.n	8008970 <print_object+0x234>
 800881e:	6838      	ldr	r0, [r7, #0]
 8008820:	f7ff faf4 	bl	8007e0c <update_offset>
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <print_object+0xf4>
 800882c:	2302      	movs	r3, #2
 800882e:	e000      	b.n	8008832 <print_object+0xf6>
 8008830:	2301      	movs	r3, #1
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	68f9      	ldr	r1, [r7, #12]
 8008836:	6838      	ldr	r0, [r7, #0]
 8008838:	f7ff fa4e 	bl	8007cd8 <ensure>
 800883c:	61f8      	str	r0, [r7, #28]
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <print_object+0x10c>
 8008844:	2300      	movs	r3, #0
 8008846:	e093      	b.n	8008970 <print_object+0x234>
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	61fa      	str	r2, [r7, #28]
 800884e:	223a      	movs	r2, #58	; 0x3a
 8008850:	701a      	strb	r2, [r3, #0]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d004      	beq.n	8008864 <print_object+0x128>
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	61fa      	str	r2, [r7, #28]
 8008860:	2209      	movs	r2, #9
 8008862:	701a      	strb	r2, [r3, #0]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	689a      	ldr	r2, [r3, #8]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	441a      	add	r2, r3
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	609a      	str	r2, [r3, #8]
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	69b8      	ldr	r0, [r7, #24]
 8008874:	f7ff fdf8 	bl	8008468 <print_value>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <print_object+0x146>
 800887e:	2300      	movs	r3, #0
 8008880:	e076      	b.n	8008970 <print_object+0x234>
 8008882:	6838      	ldr	r0, [r7, #0]
 8008884:	f7ff fac2 	bl	8007e0c <update_offset>
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <print_object+0x158>
 8008890:	2201      	movs	r2, #1
 8008892:	e000      	b.n	8008896 <print_object+0x15a>
 8008894:	2200      	movs	r2, #0
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <print_object+0x166>
 800889e:	2301      	movs	r3, #1
 80088a0:	e000      	b.n	80088a4 <print_object+0x168>
 80088a2:	2300      	movs	r3, #0
 80088a4:	4413      	add	r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3301      	adds	r3, #1
 80088ac:	4619      	mov	r1, r3
 80088ae:	6838      	ldr	r0, [r7, #0]
 80088b0:	f7ff fa12 	bl	8007cd8 <ensure>
 80088b4:	61f8      	str	r0, [r7, #28]
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <print_object+0x184>
 80088bc:	2300      	movs	r3, #0
 80088be:	e057      	b.n	8008970 <print_object+0x234>
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d004      	beq.n	80088d2 <print_object+0x196>
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	61fa      	str	r2, [r7, #28]
 80088ce:	222c      	movs	r2, #44	; 0x2c
 80088d0:	701a      	strb	r2, [r3, #0]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d004      	beq.n	80088e4 <print_object+0x1a8>
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	1c5a      	adds	r2, r3, #1
 80088de:	61fa      	str	r2, [r7, #28]
 80088e0:	220a      	movs	r2, #10
 80088e2:	701a      	strb	r2, [r3, #0]
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	2200      	movs	r2, #0
 80088e8:	701a      	strb	r2, [r3, #0]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	689a      	ldr	r2, [r3, #8]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	441a      	add	r2, r3
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	609a      	str	r2, [r3, #8]
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	61bb      	str	r3, [r7, #24]
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f47f af5b 	bne.w	80087ba <print_object+0x7e>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <print_object+0x1d8>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	3301      	adds	r3, #1
 8008912:	e000      	b.n	8008916 <print_object+0x1da>
 8008914:	2302      	movs	r3, #2
 8008916:	4619      	mov	r1, r3
 8008918:	6838      	ldr	r0, [r7, #0]
 800891a:	f7ff f9dd 	bl	8007cd8 <ensure>
 800891e:	61f8      	str	r0, [r7, #28]
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <print_object+0x1ee>
 8008926:	2300      	movs	r3, #0
 8008928:	e022      	b.n	8008970 <print_object+0x234>
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d010      	beq.n	8008954 <print_object+0x218>
 8008932:	2300      	movs	r3, #0
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	e007      	b.n	8008948 <print_object+0x20c>
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	61fa      	str	r2, [r7, #28]
 800893e:	2209      	movs	r2, #9
 8008940:	701a      	strb	r2, [r3, #0]
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	3301      	adds	r3, #1
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	3b01      	subs	r3, #1
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	429a      	cmp	r2, r3
 8008952:	d3f1      	bcc.n	8008938 <print_object+0x1fc>
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	61fa      	str	r2, [r7, #28]
 800895a:	227d      	movs	r2, #125	; 0x7d
 800895c:	701a      	strb	r2, [r3, #0]
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	2200      	movs	r2, #0
 8008962:	701a      	strb	r2, [r3, #0]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	1e5a      	subs	r2, r3, #1
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	60da      	str	r2, [r3, #12]
 800896e:	2301      	movs	r3, #1
 8008970:	4618      	mov	r0, r3
 8008972:	3720      	adds	r7, #32
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <suffix_object>:
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	605a      	str	r2, [r3, #4]
 800898e:	bf00      	nop
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <add_item_to_array>:
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	6039      	str	r1, [r7, #0]
 80089a4:	2300      	movs	r3, #0
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d006      	beq.n	80089bc <add_item_to_array+0x22>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <add_item_to_array+0x22>
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d101      	bne.n	80089c0 <add_item_to_array+0x26>
 80089bc:	2300      	movs	r3, #0
 80089be:	e01e      	b.n	80089fe <add_item_to_array+0x64>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	60fb      	str	r3, [r7, #12]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d109      	bne.n	80089e0 <add_item_to_array+0x46>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	609a      	str	r2, [r3, #8]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	605a      	str	r2, [r3, #4]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2200      	movs	r2, #0
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	e00d      	b.n	80089fc <add_item_to_array+0x62>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d009      	beq.n	80089fc <add_item_to_array+0x62>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff ffc2 	bl	8008978 <suffix_object>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	605a      	str	r2, [r3, #4]
 80089fc:	2301      	movs	r3, #1
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <cast_away_const>:
 8008a06:	b480      	push	{r7}
 8008a08:	b083      	sub	sp, #12
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <add_item_to_object>:
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
 8008a28:	603b      	str	r3, [r7, #0]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
 8008a2e:	2300      	movs	r3, #0
 8008a30:	613b      	str	r3, [r7, #16]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d009      	beq.n	8008a4c <add_item_to_object+0x30>
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d006      	beq.n	8008a4c <add_item_to_object+0x30>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d003      	beq.n	8008a4c <add_item_to_object+0x30>
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d101      	bne.n	8008a50 <add_item_to_object+0x34>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	e036      	b.n	8008abe <add_item_to_object+0xa2>
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d009      	beq.n	8008a6a <add_item_to_object+0x4e>
 8008a56:	68b8      	ldr	r0, [r7, #8]
 8008a58:	f7ff ffd5 	bl	8008a06 <cast_away_const>
 8008a5c:	6178      	str	r0, [r7, #20]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a66:	613b      	str	r3, [r7, #16]
 8008a68:	e00e      	b.n	8008a88 <add_item_to_object+0x6c>
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	68b8      	ldr	r0, [r7, #8]
 8008a6e:	f7ff f8a3 	bl	8007bb8 <cJSON_strdup>
 8008a72:	6178      	str	r0, [r7, #20]
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <add_item_to_object+0x62>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e01f      	b.n	8008abe <add_item_to_object+0xa2>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a86:	613b      	str	r3, [r7, #16]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d109      	bne.n	8008aa8 <add_item_to_object+0x8c>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d005      	beq.n	8008aa8 <add_item_to_object+0x8c>
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	6a12      	ldr	r2, [r2, #32]
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	4798      	blx	r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	621a      	str	r2, [r3, #32]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	60da      	str	r2, [r3, #12]
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f7ff ff6f 	bl	800899a <add_item_to_array>
 8008abc:	4603      	mov	r3, r0
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <cJSON_AddItemToObject>:
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af02      	add	r7, sp, #8
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <cJSON_AddItemToObject+0x28>)
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	68b9      	ldr	r1, [r7, #8]
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f7ff ff9c 	bl	8008a1c <add_item_to_object>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	20000008 	.word	0x20000008
 8008af4:	00000000 	.word	0x00000000

08008af8 <cJSON_CreateNumber>:
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	ed87 0b00 	vstr	d0, [r7]
 8008b02:	481f      	ldr	r0, [pc, #124]	; (8008b80 <cJSON_CreateNumber+0x88>)
 8008b04:	f7ff f880 	bl	8007c08 <cJSON_New_Item>
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d02c      	beq.n	8008b6a <cJSON_CreateNumber+0x72>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2208      	movs	r2, #8
 8008b14:	60da      	str	r2, [r3, #12]
 8008b16:	68f9      	ldr	r1, [r7, #12]
 8008b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b1c:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8008b20:	a315      	add	r3, pc, #84	; (adr r3, 8008b78 <cJSON_CreateNumber+0x80>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b2a:	f7f7 ffeb 	bl	8000b04 <__aeabi_dcmpge>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d004      	beq.n	8008b3e <cJSON_CreateNumber+0x46>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008b3a:	615a      	str	r2, [r3, #20]
 8008b3c:	e015      	b.n	8008b6a <cJSON_CreateNumber+0x72>
 8008b3e:	f04f 0200 	mov.w	r2, #0
 8008b42:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <cJSON_CreateNumber+0x8c>)
 8008b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b48:	f7f7 ffd2 	bl	8000af0 <__aeabi_dcmple>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d004      	beq.n	8008b5c <cJSON_CreateNumber+0x64>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b58:	615a      	str	r2, [r3, #20]
 8008b5a:	e006      	b.n	8008b6a <cJSON_CreateNumber+0x72>
 8008b5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b60:	f7f7 fffa 	bl	8000b58 <__aeabi_d2iz>
 8008b64:	4602      	mov	r2, r0
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	615a      	str	r2, [r3, #20]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	f3af 8000 	nop.w
 8008b78:	ffc00000 	.word	0xffc00000
 8008b7c:	41dfffff 	.word	0x41dfffff
 8008b80:	20000008 	.word	0x20000008
 8008b84:	c1e00000 	.word	0xc1e00000

08008b88 <cJSON_CreateString>:
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	480f      	ldr	r0, [pc, #60]	; (8008bd0 <cJSON_CreateString+0x48>)
 8008b92:	f7ff f839 	bl	8007c08 <cJSON_New_Item>
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d012      	beq.n	8008bc4 <cJSON_CreateString+0x3c>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2210      	movs	r2, #16
 8008ba2:	60da      	str	r2, [r3, #12]
 8008ba4:	490a      	ldr	r1, [pc, #40]	; (8008bd0 <cJSON_CreateString+0x48>)
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7ff f806 	bl	8007bb8 <cJSON_strdup>
 8008bac:	4602      	mov	r2, r0
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	611a      	str	r2, [r3, #16]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d104      	bne.n	8008bc4 <cJSON_CreateString+0x3c>
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f7ff f83a 	bl	8007c34 <cJSON_Delete>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	e000      	b.n	8008bc6 <cJSON_CreateString+0x3e>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	20000008 	.word	0x20000008

08008bd4 <cJSON_CreateArray>:
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4807      	ldr	r0, [pc, #28]	; (8008bf8 <cJSON_CreateArray+0x24>)
 8008bdc:	f7ff f814 	bl	8007c08 <cJSON_New_Item>
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <cJSON_CreateArray+0x1a>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2220      	movs	r2, #32
 8008bec:	60da      	str	r2, [r3, #12]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	20000008 	.word	0x20000008

08008bfc <cJSON_CreateObject>:
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4807      	ldr	r0, [pc, #28]	; (8008c20 <cJSON_CreateObject+0x24>)
 8008c04:	f7ff f800 	bl	8007c08 <cJSON_New_Item>
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <cJSON_CreateObject+0x1a>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2240      	movs	r2, #64	; 0x40
 8008c14:	60da      	str	r2, [r3, #12]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	20000008 	.word	0x20000008

08008c24 <cJSON_CreateIntArray>:
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	617b      	str	r3, [r7, #20]
 8008c32:	2300      	movs	r3, #0
 8008c34:	613b      	str	r3, [r7, #16]
 8008c36:	2300      	movs	r3, #0
 8008c38:	60fb      	str	r3, [r7, #12]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60bb      	str	r3, [r7, #8]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	db02      	blt.n	8008c4a <cJSON_CreateIntArray+0x26>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <cJSON_CreateIntArray+0x2a>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e03f      	b.n	8008cce <cJSON_CreateIntArray+0xaa>
 8008c4e:	f7ff ffc1 	bl	8008bd4 <cJSON_CreateArray>
 8008c52:	60b8      	str	r0, [r7, #8]
 8008c54:	2300      	movs	r3, #0
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	e026      	b.n	8008ca8 <cJSON_CreateIntArray+0x84>
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	4413      	add	r3, r2
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7f7 fc5d 	bl	8000524 <__aeabi_i2d>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	ec43 2b10 	vmov	d0, r2, r3
 8008c72:	f7ff ff41 	bl	8008af8 <cJSON_CreateNumber>
 8008c76:	6138      	str	r0, [r7, #16]
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d104      	bne.n	8008c88 <cJSON_CreateIntArray+0x64>
 8008c7e:	68b8      	ldr	r0, [r7, #8]
 8008c80:	f7fe ffd8 	bl	8007c34 <cJSON_Delete>
 8008c84:	2300      	movs	r3, #0
 8008c86:	e022      	b.n	8008cce <cJSON_CreateIntArray+0xaa>
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d103      	bne.n	8008c96 <cJSON_CreateIntArray+0x72>
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	609a      	str	r2, [r3, #8]
 8008c94:	e003      	b.n	8008c9e <cJSON_CreateIntArray+0x7a>
 8008c96:	6939      	ldr	r1, [r7, #16]
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f7ff fe6d 	bl	8008978 <suffix_object>
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	60fb      	str	r3, [r7, #12]
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	617b      	str	r3, [r7, #20]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <cJSON_CreateIntArray+0x92>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d3d1      	bcc.n	8008c5a <cJSON_CreateIntArray+0x36>
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d007      	beq.n	8008ccc <cJSON_CreateIntArray+0xa8>
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d003      	beq.n	8008ccc <cJSON_CreateIntArray+0xa8>
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	605a      	str	r2, [r3, #4]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <cJSON_CreateFloatArray>:
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b086      	sub	sp, #24
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	6039      	str	r1, [r7, #0]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	617b      	str	r3, [r7, #20]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	613b      	str	r3, [r7, #16]
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	2300      	movs	r3, #0
 8008cee:	60bb      	str	r3, [r7, #8]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	db02      	blt.n	8008cfc <cJSON_CreateFloatArray+0x26>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <cJSON_CreateFloatArray+0x2a>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	e03f      	b.n	8008d80 <cJSON_CreateFloatArray+0xaa>
 8008d00:	f7ff ff68 	bl	8008bd4 <cJSON_CreateArray>
 8008d04:	60b8      	str	r0, [r7, #8]
 8008d06:	2300      	movs	r3, #0
 8008d08:	617b      	str	r3, [r7, #20]
 8008d0a:	e026      	b.n	8008d5a <cJSON_CreateFloatArray+0x84>
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	4413      	add	r3, r2
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7f7 fc16 	bl	8000548 <__aeabi_f2d>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	ec43 2b10 	vmov	d0, r2, r3
 8008d24:	f7ff fee8 	bl	8008af8 <cJSON_CreateNumber>
 8008d28:	6138      	str	r0, [r7, #16]
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d104      	bne.n	8008d3a <cJSON_CreateFloatArray+0x64>
 8008d30:	68b8      	ldr	r0, [r7, #8]
 8008d32:	f7fe ff7f 	bl	8007c34 <cJSON_Delete>
 8008d36:	2300      	movs	r3, #0
 8008d38:	e022      	b.n	8008d80 <cJSON_CreateFloatArray+0xaa>
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d103      	bne.n	8008d48 <cJSON_CreateFloatArray+0x72>
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	609a      	str	r2, [r3, #8]
 8008d46:	e003      	b.n	8008d50 <cJSON_CreateFloatArray+0x7a>
 8008d48:	6939      	ldr	r1, [r7, #16]
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7ff fe14 	bl	8008978 <suffix_object>
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	3301      	adds	r3, #1
 8008d58:	617b      	str	r3, [r7, #20]
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d003      	beq.n	8008d68 <cJSON_CreateFloatArray+0x92>
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d3d1      	bcc.n	8008d0c <cJSON_CreateFloatArray+0x36>
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d007      	beq.n	8008d7e <cJSON_CreateFloatArray+0xa8>
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <cJSON_CreateFloatArray+0xa8>
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	605a      	str	r2, [r3, #4]
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <cJSON_free>:
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	4b03      	ldr	r3, [pc, #12]	; (8008da0 <cJSON_free+0x18>)
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	4798      	blx	r3
 8008d98:	bf00      	nop
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	20000008 	.word	0x20000008

08008da4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b08a      	sub	sp, #40	; 0x28
 8008da8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8008daa:	4b28      	ldr	r3, [pc, #160]	; (8008e4c <MX_CAN1_Init+0xa8>)
 8008dac:	4a28      	ldr	r2, [pc, #160]	; (8008e50 <MX_CAN1_Init+0xac>)
 8008dae:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8008db0:	4b26      	ldr	r3, [pc, #152]	; (8008e4c <MX_CAN1_Init+0xa8>)
 8008db2:	2204      	movs	r2, #4
 8008db4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8008db6:	4b25      	ldr	r3, [pc, #148]	; (8008e4c <MX_CAN1_Init+0xa8>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008dbc:	4b23      	ldr	r3, [pc, #140]	; (8008e4c <MX_CAN1_Init+0xa8>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 8008dc2:	4b22      	ldr	r3, [pc, #136]	; (8008e4c <MX_CAN1_Init+0xa8>)
 8008dc4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8008dc8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8008dca:	4b20      	ldr	r3, [pc, #128]	; (8008e4c <MX_CAN1_Init+0xa8>)
 8008dcc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8008dd0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8008dd2:	4b1e      	ldr	r3, [pc, #120]	; (8008e4c <MX_CAN1_Init+0xa8>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8008dd8:	4b1c      	ldr	r3, [pc, #112]	; (8008e4c <MX_CAN1_Init+0xa8>)
 8008dda:	2201      	movs	r2, #1
 8008ddc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8008dde:	4b1b      	ldr	r3, [pc, #108]	; (8008e4c <MX_CAN1_Init+0xa8>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8008de4:	4b19      	ldr	r3, [pc, #100]	; (8008e4c <MX_CAN1_Init+0xa8>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8008dea:	4b18      	ldr	r3, [pc, #96]	; (8008e4c <MX_CAN1_Init+0xa8>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8008df0:	4b16      	ldr	r3, [pc, #88]	; (8008e4c <MX_CAN1_Init+0xa8>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8008df6:	4815      	ldr	r0, [pc, #84]	; (8008e4c <MX_CAN1_Init+0xa8>)
 8008df8:	f003 fb66 	bl	800c4c8 <HAL_CAN_Init>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8008e02:	f002 f9a3 	bl	800b14c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef FilterConfig0;
  FilterConfig0.FilterIdHigh = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	603b      	str	r3, [r7, #0]
  FilterConfig0.FilterIdLow = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	607b      	str	r3, [r7, #4]
  FilterConfig0.FilterMaskIdHigh = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60bb      	str	r3, [r7, #8]
  FilterConfig0.FilterMaskIdLow = 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	60fb      	str	r3, [r7, #12]
  FilterConfig0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	613b      	str	r3, [r7, #16]
  FilterConfig0.FilterBank = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	617b      	str	r3, [r7, #20]
  FilterConfig0.SlaveStartFilterBank = 14;
 8008e1e:	230e      	movs	r3, #14
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
  FilterConfig0.FilterMode = CAN_FILTERMODE_IDMASK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	61bb      	str	r3, [r7, #24]
  FilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 8008e26:	2301      	movs	r3, #1
 8008e28:	61fb      	str	r3, [r7, #28]
  FilterConfig0.FilterActivation = ENABLE;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	623b      	str	r3, [r7, #32]

  if(HAL_CAN_ConfigFilter(&hcan1, &FilterConfig0) != HAL_OK){
 8008e2e:	463b      	mov	r3, r7
 8008e30:	4619      	mov	r1, r3
 8008e32:	4806      	ldr	r0, [pc, #24]	; (8008e4c <MX_CAN1_Init+0xa8>)
 8008e34:	f003 fc44 	bl	800c6c0 <HAL_CAN_ConfigFilter>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <MX_CAN1_Init+0x9e>
	  Error_Handler();
 8008e3e:	f002 f985 	bl	800b14c <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 8008e42:	bf00      	nop
 8008e44:	3728      	adds	r7, #40	; 0x28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20000a18 	.word	0x20000a18
 8008e50:	40006400 	.word	0x40006400

08008e54 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08a      	sub	sp, #40	; 0x28
 8008e58:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8008e5a:	4b28      	ldr	r3, [pc, #160]	; (8008efc <MX_CAN2_Init+0xa8>)
 8008e5c:	4a28      	ldr	r2, [pc, #160]	; (8008f00 <MX_CAN2_Init+0xac>)
 8008e5e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8008e60:	4b26      	ldr	r3, [pc, #152]	; (8008efc <MX_CAN2_Init+0xa8>)
 8008e62:	2202      	movs	r2, #2
 8008e64:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8008e66:	4b25      	ldr	r3, [pc, #148]	; (8008efc <MX_CAN2_Init+0xa8>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008e6c:	4b23      	ldr	r3, [pc, #140]	; (8008efc <MX_CAN2_Init+0xa8>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_16TQ;
 8008e72:	4b22      	ldr	r3, [pc, #136]	; (8008efc <MX_CAN2_Init+0xa8>)
 8008e74:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8008e78:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8008e7a:	4b20      	ldr	r3, [pc, #128]	; (8008efc <MX_CAN2_Init+0xa8>)
 8008e7c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8008e80:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8008e82:	4b1e      	ldr	r3, [pc, #120]	; (8008efc <MX_CAN2_Init+0xa8>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8008e88:	4b1c      	ldr	r3, [pc, #112]	; (8008efc <MX_CAN2_Init+0xa8>)
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8008e8e:	4b1b      	ldr	r3, [pc, #108]	; (8008efc <MX_CAN2_Init+0xa8>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8008e94:	4b19      	ldr	r3, [pc, #100]	; (8008efc <MX_CAN2_Init+0xa8>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8008e9a:	4b18      	ldr	r3, [pc, #96]	; (8008efc <MX_CAN2_Init+0xa8>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8008ea0:	4b16      	ldr	r3, [pc, #88]	; (8008efc <MX_CAN2_Init+0xa8>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8008ea6:	4815      	ldr	r0, [pc, #84]	; (8008efc <MX_CAN2_Init+0xa8>)
 8008ea8:	f003 fb0e 	bl	800c4c8 <HAL_CAN_Init>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8008eb2:	f002 f94b 	bl	800b14c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef FilterConfig1;
  FilterConfig1.FilterIdHigh = 0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	603b      	str	r3, [r7, #0]
  FilterConfig1.FilterIdLow = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	607b      	str	r3, [r7, #4]
  FilterConfig1.FilterMaskIdHigh = 0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60bb      	str	r3, [r7, #8]
  FilterConfig1.FilterMaskIdLow = 0;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60fb      	str	r3, [r7, #12]
  FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	613b      	str	r3, [r7, #16]
  FilterConfig1.FilterBank = 14;
 8008eca:	230e      	movs	r3, #14
 8008ecc:	617b      	str	r3, [r7, #20]
  FilterConfig1.SlaveStartFilterBank = 14;
 8008ece:	230e      	movs	r3, #14
 8008ed0:	627b      	str	r3, [r7, #36]	; 0x24
  FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61bb      	str	r3, [r7, #24]
  FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	61fb      	str	r3, [r7, #28]
  FilterConfig1.FilterActivation = ENABLE;
 8008eda:	2301      	movs	r3, #1
 8008edc:	623b      	str	r3, [r7, #32]

  if(HAL_CAN_ConfigFilter(&hcan2, &FilterConfig1)!=HAL_OK){
 8008ede:	463b      	mov	r3, r7
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4806      	ldr	r0, [pc, #24]	; (8008efc <MX_CAN2_Init+0xa8>)
 8008ee4:	f003 fbec 	bl	800c6c0 <HAL_CAN_ConfigFilter>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <MX_CAN2_Init+0x9e>
	  Error_Handler();
 8008eee:	f002 f92d 	bl	800b14c <Error_Handler>
  }

  /* USER CODE END CAN2_Init 2 */

}
 8008ef2:	bf00      	nop
 8008ef4:	3728      	adds	r7, #40	; 0x28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000a40 	.word	0x20000a40
 8008f00:	40006800 	.word	0x40006800

08008f04 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08c      	sub	sp, #48	; 0x30
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f0c:	f107 031c 	add.w	r3, r7, #28
 8008f10:	2200      	movs	r2, #0
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	605a      	str	r2, [r3, #4]
 8008f16:	609a      	str	r2, [r3, #8]
 8008f18:	60da      	str	r2, [r3, #12]
 8008f1a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a4b      	ldr	r2, [pc, #300]	; (8009050 <HAL_CAN_MspInit+0x14c>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d13e      	bne.n	8008fa4 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8008f26:	4b4b      	ldr	r3, [pc, #300]	; (8009054 <HAL_CAN_MspInit+0x150>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	4a49      	ldr	r2, [pc, #292]	; (8009054 <HAL_CAN_MspInit+0x150>)
 8008f2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8008f30:	4b48      	ldr	r3, [pc, #288]	; (8009054 <HAL_CAN_MspInit+0x150>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d10d      	bne.n	8008f54 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8008f38:	2300      	movs	r3, #0
 8008f3a:	61bb      	str	r3, [r7, #24]
 8008f3c:	4b46      	ldr	r3, [pc, #280]	; (8009058 <HAL_CAN_MspInit+0x154>)
 8008f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f40:	4a45      	ldr	r2, [pc, #276]	; (8009058 <HAL_CAN_MspInit+0x154>)
 8008f42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008f46:	6413      	str	r3, [r2, #64]	; 0x40
 8008f48:	4b43      	ldr	r3, [pc, #268]	; (8009058 <HAL_CAN_MspInit+0x154>)
 8008f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f50:	61bb      	str	r3, [r7, #24]
 8008f52:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f54:	2300      	movs	r3, #0
 8008f56:	617b      	str	r3, [r7, #20]
 8008f58:	4b3f      	ldr	r3, [pc, #252]	; (8009058 <HAL_CAN_MspInit+0x154>)
 8008f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5c:	4a3e      	ldr	r2, [pc, #248]	; (8009058 <HAL_CAN_MspInit+0x154>)
 8008f5e:	f043 0302 	orr.w	r3, r3, #2
 8008f62:	6313      	str	r3, [r2, #48]	; 0x30
 8008f64:	4b3c      	ldr	r3, [pc, #240]	; (8009058 <HAL_CAN_MspInit+0x154>)
 8008f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	617b      	str	r3, [r7, #20]
 8008f6e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008f70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f76:	2302      	movs	r3, #2
 8008f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8008f82:	2309      	movs	r3, #9
 8008f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f86:	f107 031c 	add.w	r3, r7, #28
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4833      	ldr	r0, [pc, #204]	; (800905c <HAL_CAN_MspInit+0x158>)
 8008f8e:	f004 fd45 	bl	800da1c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8008f92:	2200      	movs	r2, #0
 8008f94:	2105      	movs	r1, #5
 8008f96:	2014      	movs	r0, #20
 8008f98:	f004 f9a6 	bl	800d2e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8008f9c:	2014      	movs	r0, #20
 8008f9e:	f004 f9bf 	bl	800d320 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8008fa2:	e050      	b.n	8009046 <HAL_CAN_MspInit+0x142>
  else if(canHandle->Instance==CAN2)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a2d      	ldr	r2, [pc, #180]	; (8009060 <HAL_CAN_MspInit+0x15c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d14b      	bne.n	8009046 <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8008fae:	2300      	movs	r3, #0
 8008fb0:	613b      	str	r3, [r7, #16]
 8008fb2:	4b29      	ldr	r3, [pc, #164]	; (8009058 <HAL_CAN_MspInit+0x154>)
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	4a28      	ldr	r2, [pc, #160]	; (8009058 <HAL_CAN_MspInit+0x154>)
 8008fb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8008fbe:	4b26      	ldr	r3, [pc, #152]	; (8009058 <HAL_CAN_MspInit+0x154>)
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fc6:	613b      	str	r3, [r7, #16]
 8008fc8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8008fca:	4b22      	ldr	r3, [pc, #136]	; (8009054 <HAL_CAN_MspInit+0x150>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	4a20      	ldr	r2, [pc, #128]	; (8009054 <HAL_CAN_MspInit+0x150>)
 8008fd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8008fd4:	4b1f      	ldr	r3, [pc, #124]	; (8009054 <HAL_CAN_MspInit+0x150>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d10d      	bne.n	8008ff8 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8008fdc:	2300      	movs	r3, #0
 8008fde:	60fb      	str	r3, [r7, #12]
 8008fe0:	4b1d      	ldr	r3, [pc, #116]	; (8009058 <HAL_CAN_MspInit+0x154>)
 8008fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe4:	4a1c      	ldr	r2, [pc, #112]	; (8009058 <HAL_CAN_MspInit+0x154>)
 8008fe6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008fea:	6413      	str	r3, [r2, #64]	; 0x40
 8008fec:	4b1a      	ldr	r3, [pc, #104]	; (8009058 <HAL_CAN_MspInit+0x154>)
 8008fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff4:	60fb      	str	r3, [r7, #12]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	60bb      	str	r3, [r7, #8]
 8008ffc:	4b16      	ldr	r3, [pc, #88]	; (8009058 <HAL_CAN_MspInit+0x154>)
 8008ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009000:	4a15      	ldr	r2, [pc, #84]	; (8009058 <HAL_CAN_MspInit+0x154>)
 8009002:	f043 0302 	orr.w	r3, r3, #2
 8009006:	6313      	str	r3, [r2, #48]	; 0x30
 8009008:	4b13      	ldr	r3, [pc, #76]	; (8009058 <HAL_CAN_MspInit+0x154>)
 800900a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900c:	f003 0302 	and.w	r3, r3, #2
 8009010:	60bb      	str	r3, [r7, #8]
 8009012:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8009014:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800901a:	2302      	movs	r3, #2
 800901c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800901e:	2300      	movs	r3, #0
 8009020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009022:	2303      	movs	r3, #3
 8009024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8009026:	2309      	movs	r3, #9
 8009028:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800902a:	f107 031c 	add.w	r3, r7, #28
 800902e:	4619      	mov	r1, r3
 8009030:	480a      	ldr	r0, [pc, #40]	; (800905c <HAL_CAN_MspInit+0x158>)
 8009032:	f004 fcf3 	bl	800da1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8009036:	2200      	movs	r2, #0
 8009038:	2105      	movs	r1, #5
 800903a:	2041      	movs	r0, #65	; 0x41
 800903c:	f004 f954 	bl	800d2e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8009040:	2041      	movs	r0, #65	; 0x41
 8009042:	f004 f96d 	bl	800d320 <HAL_NVIC_EnableIRQ>
}
 8009046:	bf00      	nop
 8009048:	3730      	adds	r7, #48	; 0x30
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	40006400 	.word	0x40006400
 8009054:	20000a68 	.word	0x20000a68
 8009058:	40023800 	.word	0x40023800
 800905c:	40020400 	.word	0x40020400
 8009060:	40006800 	.word	0x40006800

08009064 <ACCU_CAN_Config>:
}

/* USER CODE BEGIN 1 */
/* Initialization CAN Structure */
void ACCU_CAN_Config()
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af04      	add	r7, sp, #16
	/* TSAC Bus Configuration */
	CAN_Handler_Init(&can_handler_tsac, &hcan1, &RxHeader1, &TxHeader1, RxData1, TxData1, &canMailbox, CAN_IT_RX_FIFO0_MSG_PENDING);
 800906a:	2302      	movs	r3, #2
 800906c:	9303      	str	r3, [sp, #12]
 800906e:	4b22      	ldr	r3, [pc, #136]	; (80090f8 <ACCU_CAN_Config+0x94>)
 8009070:	9302      	str	r3, [sp, #8]
 8009072:	4b22      	ldr	r3, [pc, #136]	; (80090fc <ACCU_CAN_Config+0x98>)
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	4b22      	ldr	r3, [pc, #136]	; (8009100 <ACCU_CAN_Config+0x9c>)
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	4b22      	ldr	r3, [pc, #136]	; (8009104 <ACCU_CAN_Config+0xa0>)
 800907c:	4a22      	ldr	r2, [pc, #136]	; (8009108 <ACCU_CAN_Config+0xa4>)
 800907e:	4923      	ldr	r1, [pc, #140]	; (800910c <ACCU_CAN_Config+0xa8>)
 8009080:	4823      	ldr	r0, [pc, #140]	; (8009110 <ACCU_CAN_Config+0xac>)
 8009082:	f7f7 ffb5 	bl	8000ff0 <CAN_Handler_Init>

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8009086:	4821      	ldr	r0, [pc, #132]	; (800910c <ACCU_CAN_Config+0xa8>)
 8009088:	f003 fbfa 	bl	800c880 <HAL_CAN_Start>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <ACCU_CAN_Config+0x32>
		Error_Handler();
 8009092:	f002 f85b 	bl	800b14c <Error_Handler>

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8009096:	2102      	movs	r1, #2
 8009098:	481c      	ldr	r0, [pc, #112]	; (800910c <ACCU_CAN_Config+0xa8>)
 800909a:	f003 fe22 	bl	800cce2 <HAL_CAN_ActivateNotification>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <ACCU_CAN_Config+0x44>
		Error_Handler();
 80090a4:	f002 f852 	bl	800b14c <Error_Handler>

	osDelay(2);
 80090a8:	2002      	movs	r0, #2
 80090aa:	f00f f84b 	bl	8018144 <osDelay>

	/* Primary CAN Bus Configuration */
	CAN_Handler_Init(&can_handler_prim, &hcan2, &RxHeader2, &TxHeader2, RxData2, TxData2, &canMailbox, CAN_IT_RX_FIFO1_MSG_PENDING);
 80090ae:	2310      	movs	r3, #16
 80090b0:	9303      	str	r3, [sp, #12]
 80090b2:	4b11      	ldr	r3, [pc, #68]	; (80090f8 <ACCU_CAN_Config+0x94>)
 80090b4:	9302      	str	r3, [sp, #8]
 80090b6:	4b17      	ldr	r3, [pc, #92]	; (8009114 <ACCU_CAN_Config+0xb0>)
 80090b8:	9301      	str	r3, [sp, #4]
 80090ba:	4b17      	ldr	r3, [pc, #92]	; (8009118 <ACCU_CAN_Config+0xb4>)
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	4b17      	ldr	r3, [pc, #92]	; (800911c <ACCU_CAN_Config+0xb8>)
 80090c0:	4a17      	ldr	r2, [pc, #92]	; (8009120 <ACCU_CAN_Config+0xbc>)
 80090c2:	4918      	ldr	r1, [pc, #96]	; (8009124 <ACCU_CAN_Config+0xc0>)
 80090c4:	4818      	ldr	r0, [pc, #96]	; (8009128 <ACCU_CAN_Config+0xc4>)
 80090c6:	f7f7 ff93 	bl	8000ff0 <CAN_Handler_Init>

	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 80090ca:	4816      	ldr	r0, [pc, #88]	; (8009124 <ACCU_CAN_Config+0xc0>)
 80090cc:	f003 fbd8 	bl	800c880 <HAL_CAN_Start>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <ACCU_CAN_Config+0x76>
		Error_Handler();
 80090d6:	f002 f839 	bl	800b14c <Error_Handler>

	if(HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 80090da:	2110      	movs	r1, #16
 80090dc:	4811      	ldr	r0, [pc, #68]	; (8009124 <ACCU_CAN_Config+0xc0>)
 80090de:	f003 fe00 	bl	800cce2 <HAL_CAN_ActivateNotification>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <ACCU_CAN_Config+0x88>
		Error_Handler();
 80090e8:	f002 f830 	bl	800b14c <Error_Handler>

	osDelay(2);
 80090ec:	2002      	movs	r0, #2
 80090ee:	f00f f829 	bl	8018144 <osDelay>

}
 80090f2:	bf00      	nop
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	20000a14 	.word	0x20000a14
 80090fc:	20000a04 	.word	0x20000a04
 8009100:	200009f4 	.word	0x200009f4
 8009104:	200009c4 	.word	0x200009c4
 8009108:	2000098c 	.word	0x2000098c
 800910c:	20000a18 	.word	0x20000a18
 8009110:	20002270 	.word	0x20002270
 8009114:	20000a0c 	.word	0x20000a0c
 8009118:	200009fc 	.word	0x200009fc
 800911c:	200009dc 	.word	0x200009dc
 8009120:	200009a8 	.word	0x200009a8
 8009124:	20000a40 	.word	0x20000a40
 8009128:	2000229c 	.word	0x2000229c

0800912c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* TSAC Bus Callback RX function */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
	/* Generate RX_FIFO_0 Interrupts */
	if(CAN_Rx(&can_handler_tsac, CAN_RX_FIFO0) != HAL_OK);
 8009134:	2100      	movs	r1, #0
 8009136:	4806      	ldr	r0, [pc, #24]	; (8009150 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8009138:	f7f8 fd5b 	bl	8001bf2 <CAN_Rx>

	/* After filling RX_FIFO0, check ID's and update TSAC data */
	TSAC_CAN_Rx(&can_handler_tsac, &elcon, &ivt, &bmsInfo);
 800913c:	4b05      	ldr	r3, [pc, #20]	; (8009154 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800913e:	4a06      	ldr	r2, [pc, #24]	; (8009158 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8009140:	4906      	ldr	r1, [pc, #24]	; (800915c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8009142:	4803      	ldr	r0, [pc, #12]	; (8009150 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8009144:	f7f8 fac4 	bl	80016d0 <TSAC_CAN_Rx>
}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20002270 	.word	0x20002270
 8009154:	2000206c 	.word	0x2000206c
 8009158:	20002174 	.word	0x20002174
 800915c:	20002244 	.word	0x20002244

08009160 <HAL_CAN_RxFifo1MsgPendingCallback>:

/* Primary CAN Bus Callback RX function */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
	/* Generate CAN RX_FIFO_1 Interrupts */
	if(CAN_Rx(&can_handler_prim, CAN_RX_FIFO1) != HAL_OK);
 8009168:	2101      	movs	r1, #1
 800916a:	4805      	ldr	r0, [pc, #20]	; (8009180 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 800916c:	f7f8 fd41 	bl	8001bf2 <CAN_Rx>

	/* After filling RX_FIFO1, check ID's and update P23 information */
	read_P23_messages(&can_handler_prim, &p23status);
 8009170:	4904      	ldr	r1, [pc, #16]	; (8009184 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8009172:	4803      	ldr	r0, [pc, #12]	; (8009180 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 8009174:	f7f8 fd8c 	bl	8001c90 <read_P23_messages>

}
 8009178:	bf00      	nop
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	2000229c 	.word	0x2000229c
 8009184:	2000435c 	.word	0x2000435c

08009188 <MX_DMA_Init>:
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	2300      	movs	r3, #0
 8009190:	607b      	str	r3, [r7, #4]
 8009192:	4b0c      	ldr	r3, [pc, #48]	; (80091c4 <MX_DMA_Init+0x3c>)
 8009194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009196:	4a0b      	ldr	r2, [pc, #44]	; (80091c4 <MX_DMA_Init+0x3c>)
 8009198:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800919c:	6313      	str	r3, [r2, #48]	; 0x30
 800919e:	4b09      	ldr	r3, [pc, #36]	; (80091c4 <MX_DMA_Init+0x3c>)
 80091a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091a6:	607b      	str	r3, [r7, #4]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	2105      	movs	r1, #5
 80091ae:	2038      	movs	r0, #56	; 0x38
 80091b0:	f004 f89a 	bl	800d2e8 <HAL_NVIC_SetPriority>
 80091b4:	2038      	movs	r0, #56	; 0x38
 80091b6:	f004 f8b3 	bl	800d320 <HAL_NVIC_EnableIRQ>
 80091ba:	bf00      	nop
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	40023800 	.word	0x40023800

080091c8 <SELECT>:
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	2200      	movs	r2, #0
 80091ce:	2110      	movs	r1, #16
 80091d0:	4802      	ldr	r0, [pc, #8]	; (80091dc <SELECT+0x14>)
 80091d2:	f004 fdd7 	bl	800dd84 <HAL_GPIO_WritePin>
 80091d6:	bf00      	nop
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	40020000 	.word	0x40020000

080091e0 <DESELECT>:
 80091e0:	b580      	push	{r7, lr}
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	2201      	movs	r2, #1
 80091e6:	2110      	movs	r1, #16
 80091e8:	4802      	ldr	r0, [pc, #8]	; (80091f4 <DESELECT+0x14>)
 80091ea:	f004 fdcb 	bl	800dd84 <HAL_GPIO_WritePin>
 80091ee:	bf00      	nop
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	40020000 	.word	0x40020000

080091f8 <SPI_TxByte>:
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	71fb      	strb	r3, [r7, #7]
 8009202:	bf00      	nop
 8009204:	4808      	ldr	r0, [pc, #32]	; (8009228 <SPI_TxByte+0x30>)
 8009206:	f007 f88a 	bl	801031e <HAL_SPI_GetState>
 800920a:	4603      	mov	r3, r0
 800920c:	2b01      	cmp	r3, #1
 800920e:	d1f9      	bne.n	8009204 <SPI_TxByte+0xc>
 8009210:	1df9      	adds	r1, r7, #7
 8009212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009216:	2201      	movs	r2, #1
 8009218:	4803      	ldr	r0, [pc, #12]	; (8009228 <SPI_TxByte+0x30>)
 800921a:	f006 fda2 	bl	800fd62 <HAL_SPI_Transmit>
 800921e:	bf00      	nop
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	20004394 	.word	0x20004394

0800922c <SPI_RxByte>:
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af02      	add	r7, sp, #8
 8009232:	23ff      	movs	r3, #255	; 0xff
 8009234:	71fb      	strb	r3, [r7, #7]
 8009236:	2300      	movs	r3, #0
 8009238:	71bb      	strb	r3, [r7, #6]
 800923a:	bf00      	nop
 800923c:	4809      	ldr	r0, [pc, #36]	; (8009264 <SPI_RxByte+0x38>)
 800923e:	f007 f86e 	bl	801031e <HAL_SPI_GetState>
 8009242:	4603      	mov	r3, r0
 8009244:	2b01      	cmp	r3, #1
 8009246:	d1f9      	bne.n	800923c <SPI_RxByte+0x10>
 8009248:	1dba      	adds	r2, r7, #6
 800924a:	1df9      	adds	r1, r7, #7
 800924c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	2301      	movs	r3, #1
 8009254:	4803      	ldr	r0, [pc, #12]	; (8009264 <SPI_RxByte+0x38>)
 8009256:	f006 fec0 	bl	800ffda <HAL_SPI_TransmitReceive>
 800925a:	79bb      	ldrb	r3, [r7, #6]
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	20004394 	.word	0x20004394

08009268 <SPI_RxBytePtr>:
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	f7ff ffdc 	bl	800922c <SPI_RxByte>
 8009274:	4603      	mov	r3, r0
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	701a      	strb	r2, [r3, #0]
 800927c:	bf00      	nop
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <SD_ReadyWait>:
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	4b0b      	ldr	r3, [pc, #44]	; (80092b8 <SD_ReadyWait+0x34>)
 800928c:	2232      	movs	r2, #50	; 0x32
 800928e:	701a      	strb	r2, [r3, #0]
 8009290:	f7ff ffcc 	bl	800922c <SPI_RxByte>
 8009294:	f7ff ffca 	bl	800922c <SPI_RxByte>
 8009298:	4603      	mov	r3, r0
 800929a:	71fb      	strb	r3, [r7, #7]
 800929c:	79fb      	ldrb	r3, [r7, #7]
 800929e:	2bff      	cmp	r3, #255	; 0xff
 80092a0:	d004      	beq.n	80092ac <SD_ReadyWait+0x28>
 80092a2:	4b05      	ldr	r3, [pc, #20]	; (80092b8 <SD_ReadyWait+0x34>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1f3      	bne.n	8009294 <SD_ReadyWait+0x10>
 80092ac:	79fb      	ldrb	r3, [r7, #7]
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	2000448e 	.word	0x2000448e

080092bc <SD_PowerOn>:
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	f7ff ff8a 	bl	80091e0 <DESELECT>
 80092cc:	2300      	movs	r3, #0
 80092ce:	613b      	str	r3, [r7, #16]
 80092d0:	e005      	b.n	80092de <SD_PowerOn+0x22>
 80092d2:	20ff      	movs	r0, #255	; 0xff
 80092d4:	f7ff ff90 	bl	80091f8 <SPI_TxByte>
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	3301      	adds	r3, #1
 80092dc:	613b      	str	r3, [r7, #16]
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	2b09      	cmp	r3, #9
 80092e2:	ddf6      	ble.n	80092d2 <SD_PowerOn+0x16>
 80092e4:	f7ff ff70 	bl	80091c8 <SELECT>
 80092e8:	2340      	movs	r3, #64	; 0x40
 80092ea:	713b      	strb	r3, [r7, #4]
 80092ec:	2300      	movs	r3, #0
 80092ee:	717b      	strb	r3, [r7, #5]
 80092f0:	2300      	movs	r3, #0
 80092f2:	71bb      	strb	r3, [r7, #6]
 80092f4:	2300      	movs	r3, #0
 80092f6:	71fb      	strb	r3, [r7, #7]
 80092f8:	2300      	movs	r3, #0
 80092fa:	723b      	strb	r3, [r7, #8]
 80092fc:	2395      	movs	r3, #149	; 0x95
 80092fe:	727b      	strb	r3, [r7, #9]
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	e009      	b.n	800931a <SD_PowerOn+0x5e>
 8009306:	1d3a      	adds	r2, r7, #4
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4413      	add	r3, r2
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	4618      	mov	r0, r3
 8009310:	f7ff ff72 	bl	80091f8 <SPI_TxByte>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	3301      	adds	r3, #1
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b05      	cmp	r3, #5
 800931e:	ddf2      	ble.n	8009306 <SD_PowerOn+0x4a>
 8009320:	e002      	b.n	8009328 <SD_PowerOn+0x6c>
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	3b01      	subs	r3, #1
 8009326:	617b      	str	r3, [r7, #20]
 8009328:	f7ff ff80 	bl	800922c <SPI_RxByte>
 800932c:	4603      	mov	r3, r0
 800932e:	2b01      	cmp	r3, #1
 8009330:	d002      	beq.n	8009338 <SD_PowerOn+0x7c>
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1f4      	bne.n	8009322 <SD_PowerOn+0x66>
 8009338:	f7ff ff52 	bl	80091e0 <DESELECT>
 800933c:	20ff      	movs	r0, #255	; 0xff
 800933e:	f7ff ff5b 	bl	80091f8 <SPI_TxByte>
 8009342:	4b03      	ldr	r3, [pc, #12]	; (8009350 <SD_PowerOn+0x94>)
 8009344:	2201      	movs	r2, #1
 8009346:	701a      	strb	r2, [r3, #0]
 8009348:	bf00      	nop
 800934a:	3718      	adds	r7, #24
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20000a6d 	.word	0x20000a6d

08009354 <SD_PowerOff>:
 8009354:	b480      	push	{r7}
 8009356:	af00      	add	r7, sp, #0
 8009358:	4b03      	ldr	r3, [pc, #12]	; (8009368 <SD_PowerOff+0x14>)
 800935a:	2200      	movs	r2, #0
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	bf00      	nop
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	20000a6d 	.word	0x20000a6d

0800936c <SD_CheckPower>:
 800936c:	b480      	push	{r7}
 800936e:	af00      	add	r7, sp, #0
 8009370:	4b03      	ldr	r3, [pc, #12]	; (8009380 <SD_CheckPower+0x14>)
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	4618      	mov	r0, r3
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	20000a6d 	.word	0x20000a6d

08009384 <SD_RxDataBlock>:
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
 800938e:	4b17      	ldr	r3, [pc, #92]	; (80093ec <SD_RxDataBlock+0x68>)
 8009390:	220a      	movs	r2, #10
 8009392:	701a      	strb	r2, [r3, #0]
 8009394:	f7ff ff4a 	bl	800922c <SPI_RxByte>
 8009398:	4603      	mov	r3, r0
 800939a:	73fb      	strb	r3, [r7, #15]
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	2bff      	cmp	r3, #255	; 0xff
 80093a0:	d104      	bne.n	80093ac <SD_RxDataBlock+0x28>
 80093a2:	4b12      	ldr	r3, [pc, #72]	; (80093ec <SD_RxDataBlock+0x68>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1f3      	bne.n	8009394 <SD_RxDataBlock+0x10>
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	2bfe      	cmp	r3, #254	; 0xfe
 80093b0:	d001      	beq.n	80093b6 <SD_RxDataBlock+0x32>
 80093b2:	2300      	movs	r3, #0
 80093b4:	e016      	b.n	80093e4 <SD_RxDataBlock+0x60>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	607a      	str	r2, [r7, #4]
 80093bc:	4618      	mov	r0, r3
 80093be:	f7ff ff53 	bl	8009268 <SPI_RxBytePtr>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	1c5a      	adds	r2, r3, #1
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7ff ff4d 	bl	8009268 <SPI_RxBytePtr>
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	3b02      	subs	r3, #2
 80093d2:	603b      	str	r3, [r7, #0]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1ed      	bne.n	80093b6 <SD_RxDataBlock+0x32>
 80093da:	f7ff ff27 	bl	800922c <SPI_RxByte>
 80093de:	f7ff ff25 	bl	800922c <SPI_RxByte>
 80093e2:	2301      	movs	r3, #1
 80093e4:	4618      	mov	r0, r3
 80093e6:	3710      	adds	r7, #16
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	2000448d 	.word	0x2000448d

080093f0 <SD_TxDataBlock>:
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
 80093fc:	2300      	movs	r3, #0
 80093fe:	737b      	strb	r3, [r7, #13]
 8009400:	f7ff ff40 	bl	8009284 <SD_ReadyWait>
 8009404:	4603      	mov	r3, r0
 8009406:	2bff      	cmp	r3, #255	; 0xff
 8009408:	d001      	beq.n	800940e <SD_TxDataBlock+0x1e>
 800940a:	2300      	movs	r3, #0
 800940c:	e040      	b.n	8009490 <SD_TxDataBlock+0xa0>
 800940e:	78fb      	ldrb	r3, [r7, #3]
 8009410:	4618      	mov	r0, r3
 8009412:	f7ff fef1 	bl	80091f8 <SPI_TxByte>
 8009416:	78fb      	ldrb	r3, [r7, #3]
 8009418:	2bfd      	cmp	r3, #253	; 0xfd
 800941a:	d031      	beq.n	8009480 <SD_TxDataBlock+0x90>
 800941c:	2300      	movs	r3, #0
 800941e:	73bb      	strb	r3, [r7, #14]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	607a      	str	r2, [r7, #4]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	4618      	mov	r0, r3
 800942a:	f7ff fee5 	bl	80091f8 <SPI_TxByte>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	1c5a      	adds	r2, r3, #1
 8009432:	607a      	str	r2, [r7, #4]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff fede 	bl	80091f8 <SPI_TxByte>
 800943c:	7bbb      	ldrb	r3, [r7, #14]
 800943e:	3b01      	subs	r3, #1
 8009440:	73bb      	strb	r3, [r7, #14]
 8009442:	7bbb      	ldrb	r3, [r7, #14]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1eb      	bne.n	8009420 <SD_TxDataBlock+0x30>
 8009448:	f7ff fef0 	bl	800922c <SPI_RxByte>
 800944c:	f7ff feee 	bl	800922c <SPI_RxByte>
 8009450:	e00b      	b.n	800946a <SD_TxDataBlock+0x7a>
 8009452:	f7ff feeb 	bl	800922c <SPI_RxByte>
 8009456:	4603      	mov	r3, r0
 8009458:	73fb      	strb	r3, [r7, #15]
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	f003 031f 	and.w	r3, r3, #31
 8009460:	2b05      	cmp	r3, #5
 8009462:	d006      	beq.n	8009472 <SD_TxDataBlock+0x82>
 8009464:	7b7b      	ldrb	r3, [r7, #13]
 8009466:	3301      	adds	r3, #1
 8009468:	737b      	strb	r3, [r7, #13]
 800946a:	7b7b      	ldrb	r3, [r7, #13]
 800946c:	2b40      	cmp	r3, #64	; 0x40
 800946e:	d9f0      	bls.n	8009452 <SD_TxDataBlock+0x62>
 8009470:	e000      	b.n	8009474 <SD_TxDataBlock+0x84>
 8009472:	bf00      	nop
 8009474:	bf00      	nop
 8009476:	f7ff fed9 	bl	800922c <SPI_RxByte>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d0fa      	beq.n	8009476 <SD_TxDataBlock+0x86>
 8009480:	7bfb      	ldrb	r3, [r7, #15]
 8009482:	f003 031f 	and.w	r3, r3, #31
 8009486:	2b05      	cmp	r3, #5
 8009488:	d101      	bne.n	800948e <SD_TxDataBlock+0x9e>
 800948a:	2301      	movs	r3, #1
 800948c:	e000      	b.n	8009490 <SD_TxDataBlock+0xa0>
 800948e:	2300      	movs	r3, #0
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <SD_SendCmd>:
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	4603      	mov	r3, r0
 80094a0:	6039      	str	r1, [r7, #0]
 80094a2:	71fb      	strb	r3, [r7, #7]
 80094a4:	f7ff feee 	bl	8009284 <SD_ReadyWait>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2bff      	cmp	r3, #255	; 0xff
 80094ac:	d001      	beq.n	80094b2 <SD_SendCmd+0x1a>
 80094ae:	23ff      	movs	r3, #255	; 0xff
 80094b0:	e040      	b.n	8009534 <SD_SendCmd+0x9c>
 80094b2:	79fb      	ldrb	r3, [r7, #7]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7ff fe9f 	bl	80091f8 <SPI_TxByte>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	0e1b      	lsrs	r3, r3, #24
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7ff fe99 	bl	80091f8 <SPI_TxByte>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	0c1b      	lsrs	r3, r3, #16
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7ff fe93 	bl	80091f8 <SPI_TxByte>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	0a1b      	lsrs	r3, r3, #8
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	4618      	mov	r0, r3
 80094da:	f7ff fe8d 	bl	80091f8 <SPI_TxByte>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7ff fe88 	bl	80091f8 <SPI_TxByte>
 80094e8:	2300      	movs	r3, #0
 80094ea:	73fb      	strb	r3, [r7, #15]
 80094ec:	79fb      	ldrb	r3, [r7, #7]
 80094ee:	2b40      	cmp	r3, #64	; 0x40
 80094f0:	d101      	bne.n	80094f6 <SD_SendCmd+0x5e>
 80094f2:	2395      	movs	r3, #149	; 0x95
 80094f4:	73fb      	strb	r3, [r7, #15]
 80094f6:	79fb      	ldrb	r3, [r7, #7]
 80094f8:	2b48      	cmp	r3, #72	; 0x48
 80094fa:	d101      	bne.n	8009500 <SD_SendCmd+0x68>
 80094fc:	2387      	movs	r3, #135	; 0x87
 80094fe:	73fb      	strb	r3, [r7, #15]
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	4618      	mov	r0, r3
 8009504:	f7ff fe78 	bl	80091f8 <SPI_TxByte>
 8009508:	79fb      	ldrb	r3, [r7, #7]
 800950a:	2b4c      	cmp	r3, #76	; 0x4c
 800950c:	d101      	bne.n	8009512 <SD_SendCmd+0x7a>
 800950e:	f7ff fe8d 	bl	800922c <SPI_RxByte>
 8009512:	230a      	movs	r3, #10
 8009514:	73bb      	strb	r3, [r7, #14]
 8009516:	f7ff fe89 	bl	800922c <SPI_RxByte>
 800951a:	4603      	mov	r3, r0
 800951c:	737b      	strb	r3, [r7, #13]
 800951e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009522:	2b00      	cmp	r3, #0
 8009524:	da05      	bge.n	8009532 <SD_SendCmd+0x9a>
 8009526:	7bbb      	ldrb	r3, [r7, #14]
 8009528:	3b01      	subs	r3, #1
 800952a:	73bb      	strb	r3, [r7, #14]
 800952c:	7bbb      	ldrb	r3, [r7, #14]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1f1      	bne.n	8009516 <SD_SendCmd+0x7e>
 8009532:	7b7b      	ldrb	r3, [r7, #13]
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <SD_disk_initialize>:
 800953c:	b590      	push	{r4, r7, lr}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	4603      	mov	r3, r0
 8009544:	71fb      	strb	r3, [r7, #7]
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <SD_disk_initialize+0x14>
 800954c:	2301      	movs	r3, #1
 800954e:	e0d5      	b.n	80096fc <SD_disk_initialize+0x1c0>
 8009550:	4b6c      	ldr	r3, [pc, #432]	; (8009704 <SD_disk_initialize+0x1c8>)
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	b2db      	uxtb	r3, r3
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <SD_disk_initialize+0x2a>
 800955e:	4b69      	ldr	r3, [pc, #420]	; (8009704 <SD_disk_initialize+0x1c8>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	e0ca      	b.n	80096fc <SD_disk_initialize+0x1c0>
 8009566:	f7ff fea9 	bl	80092bc <SD_PowerOn>
 800956a:	f7ff fe2d 	bl	80091c8 <SELECT>
 800956e:	2300      	movs	r3, #0
 8009570:	73bb      	strb	r3, [r7, #14]
 8009572:	2100      	movs	r1, #0
 8009574:	2040      	movs	r0, #64	; 0x40
 8009576:	f7ff ff8f 	bl	8009498 <SD_SendCmd>
 800957a:	4603      	mov	r3, r0
 800957c:	2b01      	cmp	r3, #1
 800957e:	f040 80a5 	bne.w	80096cc <SD_disk_initialize+0x190>
 8009582:	4b61      	ldr	r3, [pc, #388]	; (8009708 <SD_disk_initialize+0x1cc>)
 8009584:	2264      	movs	r2, #100	; 0x64
 8009586:	701a      	strb	r2, [r3, #0]
 8009588:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800958c:	2048      	movs	r0, #72	; 0x48
 800958e:	f7ff ff83 	bl	8009498 <SD_SendCmd>
 8009592:	4603      	mov	r3, r0
 8009594:	2b01      	cmp	r3, #1
 8009596:	d158      	bne.n	800964a <SD_disk_initialize+0x10e>
 8009598:	2300      	movs	r3, #0
 800959a:	73fb      	strb	r3, [r7, #15]
 800959c:	e00c      	b.n	80095b8 <SD_disk_initialize+0x7c>
 800959e:	7bfc      	ldrb	r4, [r7, #15]
 80095a0:	f7ff fe44 	bl	800922c <SPI_RxByte>
 80095a4:	4603      	mov	r3, r0
 80095a6:	461a      	mov	r2, r3
 80095a8:	f104 0310 	add.w	r3, r4, #16
 80095ac:	443b      	add	r3, r7
 80095ae:	f803 2c08 	strb.w	r2, [r3, #-8]
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	3301      	adds	r3, #1
 80095b6:	73fb      	strb	r3, [r7, #15]
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	d9ef      	bls.n	800959e <SD_disk_initialize+0x62>
 80095be:	7abb      	ldrb	r3, [r7, #10]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	f040 8083 	bne.w	80096cc <SD_disk_initialize+0x190>
 80095c6:	7afb      	ldrb	r3, [r7, #11]
 80095c8:	2baa      	cmp	r3, #170	; 0xaa
 80095ca:	d17f      	bne.n	80096cc <SD_disk_initialize+0x190>
 80095cc:	2100      	movs	r1, #0
 80095ce:	2077      	movs	r0, #119	; 0x77
 80095d0:	f7ff ff62 	bl	8009498 <SD_SendCmd>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d807      	bhi.n	80095ea <SD_disk_initialize+0xae>
 80095da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80095de:	2069      	movs	r0, #105	; 0x69
 80095e0:	f7ff ff5a 	bl	8009498 <SD_SendCmd>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d005      	beq.n	80095f6 <SD_disk_initialize+0xba>
 80095ea:	4b47      	ldr	r3, [pc, #284]	; (8009708 <SD_disk_initialize+0x1cc>)
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1eb      	bne.n	80095cc <SD_disk_initialize+0x90>
 80095f4:	e000      	b.n	80095f8 <SD_disk_initialize+0xbc>
 80095f6:	bf00      	nop
 80095f8:	4b43      	ldr	r3, [pc, #268]	; (8009708 <SD_disk_initialize+0x1cc>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d064      	beq.n	80096cc <SD_disk_initialize+0x190>
 8009602:	2100      	movs	r1, #0
 8009604:	207a      	movs	r0, #122	; 0x7a
 8009606:	f7ff ff47 	bl	8009498 <SD_SendCmd>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d15d      	bne.n	80096cc <SD_disk_initialize+0x190>
 8009610:	2300      	movs	r3, #0
 8009612:	73fb      	strb	r3, [r7, #15]
 8009614:	e00c      	b.n	8009630 <SD_disk_initialize+0xf4>
 8009616:	7bfc      	ldrb	r4, [r7, #15]
 8009618:	f7ff fe08 	bl	800922c <SPI_RxByte>
 800961c:	4603      	mov	r3, r0
 800961e:	461a      	mov	r2, r3
 8009620:	f104 0310 	add.w	r3, r4, #16
 8009624:	443b      	add	r3, r7
 8009626:	f803 2c08 	strb.w	r2, [r3, #-8]
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	3301      	adds	r3, #1
 800962e:	73fb      	strb	r3, [r7, #15]
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	2b03      	cmp	r3, #3
 8009634:	d9ef      	bls.n	8009616 <SD_disk_initialize+0xda>
 8009636:	7a3b      	ldrb	r3, [r7, #8]
 8009638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <SD_disk_initialize+0x108>
 8009640:	2306      	movs	r3, #6
 8009642:	e000      	b.n	8009646 <SD_disk_initialize+0x10a>
 8009644:	2302      	movs	r3, #2
 8009646:	73bb      	strb	r3, [r7, #14]
 8009648:	e040      	b.n	80096cc <SD_disk_initialize+0x190>
 800964a:	2100      	movs	r1, #0
 800964c:	2077      	movs	r0, #119	; 0x77
 800964e:	f7ff ff23 	bl	8009498 <SD_SendCmd>
 8009652:	4603      	mov	r3, r0
 8009654:	2b01      	cmp	r3, #1
 8009656:	d808      	bhi.n	800966a <SD_disk_initialize+0x12e>
 8009658:	2100      	movs	r1, #0
 800965a:	2069      	movs	r0, #105	; 0x69
 800965c:	f7ff ff1c 	bl	8009498 <SD_SendCmd>
 8009660:	4603      	mov	r3, r0
 8009662:	2b01      	cmp	r3, #1
 8009664:	d801      	bhi.n	800966a <SD_disk_initialize+0x12e>
 8009666:	2302      	movs	r3, #2
 8009668:	e000      	b.n	800966c <SD_disk_initialize+0x130>
 800966a:	2301      	movs	r3, #1
 800966c:	73bb      	strb	r3, [r7, #14]
 800966e:	7bbb      	ldrb	r3, [r7, #14]
 8009670:	2b02      	cmp	r3, #2
 8009672:	d10e      	bne.n	8009692 <SD_disk_initialize+0x156>
 8009674:	2100      	movs	r1, #0
 8009676:	2077      	movs	r0, #119	; 0x77
 8009678:	f7ff ff0e 	bl	8009498 <SD_SendCmd>
 800967c:	4603      	mov	r3, r0
 800967e:	2b01      	cmp	r3, #1
 8009680:	d80e      	bhi.n	80096a0 <SD_disk_initialize+0x164>
 8009682:	2100      	movs	r1, #0
 8009684:	2069      	movs	r0, #105	; 0x69
 8009686:	f7ff ff07 	bl	8009498 <SD_SendCmd>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d107      	bne.n	80096a0 <SD_disk_initialize+0x164>
 8009690:	e00d      	b.n	80096ae <SD_disk_initialize+0x172>
 8009692:	2100      	movs	r1, #0
 8009694:	2041      	movs	r0, #65	; 0x41
 8009696:	f7ff feff 	bl	8009498 <SD_SendCmd>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <SD_disk_initialize+0x170>
 80096a0:	4b19      	ldr	r3, [pc, #100]	; (8009708 <SD_disk_initialize+0x1cc>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e1      	bne.n	800966e <SD_disk_initialize+0x132>
 80096aa:	e000      	b.n	80096ae <SD_disk_initialize+0x172>
 80096ac:	bf00      	nop
 80096ae:	4b16      	ldr	r3, [pc, #88]	; (8009708 <SD_disk_initialize+0x1cc>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d007      	beq.n	80096c8 <SD_disk_initialize+0x18c>
 80096b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80096bc:	2050      	movs	r0, #80	; 0x50
 80096be:	f7ff feeb 	bl	8009498 <SD_SendCmd>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d001      	beq.n	80096cc <SD_disk_initialize+0x190>
 80096c8:	2300      	movs	r3, #0
 80096ca:	73bb      	strb	r3, [r7, #14]
 80096cc:	4a0f      	ldr	r2, [pc, #60]	; (800970c <SD_disk_initialize+0x1d0>)
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
 80096d0:	7013      	strb	r3, [r2, #0]
 80096d2:	f7ff fd85 	bl	80091e0 <DESELECT>
 80096d6:	f7ff fda9 	bl	800922c <SPI_RxByte>
 80096da:	7bbb      	ldrb	r3, [r7, #14]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d008      	beq.n	80096f2 <SD_disk_initialize+0x1b6>
 80096e0:	4b08      	ldr	r3, [pc, #32]	; (8009704 <SD_disk_initialize+0x1c8>)
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	f023 0301 	bic.w	r3, r3, #1
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	4b05      	ldr	r3, [pc, #20]	; (8009704 <SD_disk_initialize+0x1c8>)
 80096ee:	701a      	strb	r2, [r3, #0]
 80096f0:	e001      	b.n	80096f6 <SD_disk_initialize+0x1ba>
 80096f2:	f7ff fe2f 	bl	8009354 <SD_PowerOff>
 80096f6:	4b03      	ldr	r3, [pc, #12]	; (8009704 <SD_disk_initialize+0x1c8>)
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	4618      	mov	r0, r3
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	bd90      	pop	{r4, r7, pc}
 8009704:	20000014 	.word	0x20000014
 8009708:	2000448d 	.word	0x2000448d
 800970c:	20000a6c 	.word	0x20000a6c

08009710 <SD_disk_status>:
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	71fb      	strb	r3, [r7, #7]
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <SD_disk_status+0x14>
 8009720:	2301      	movs	r3, #1
 8009722:	e002      	b.n	800972a <SD_disk_status+0x1a>
 8009724:	4b04      	ldr	r3, [pc, #16]	; (8009738 <SD_disk_status+0x28>)
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	b2db      	uxtb	r3, r3
 800972a:	4618      	mov	r0, r3
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	20000014 	.word	0x20000014

0800973c <SD_disk_read>:
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	60b9      	str	r1, [r7, #8]
 8009744:	607a      	str	r2, [r7, #4]
 8009746:	603b      	str	r3, [r7, #0]
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d102      	bne.n	8009758 <SD_disk_read+0x1c>
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <SD_disk_read+0x20>
 8009758:	2304      	movs	r3, #4
 800975a:	e051      	b.n	8009800 <SD_disk_read+0xc4>
 800975c:	4b2a      	ldr	r3, [pc, #168]	; (8009808 <SD_disk_read+0xcc>)
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <SD_disk_read+0x32>
 800976a:	2303      	movs	r3, #3
 800976c:	e048      	b.n	8009800 <SD_disk_read+0xc4>
 800976e:	4b27      	ldr	r3, [pc, #156]	; (800980c <SD_disk_read+0xd0>)
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	f003 0304 	and.w	r3, r3, #4
 8009776:	2b00      	cmp	r3, #0
 8009778:	d102      	bne.n	8009780 <SD_disk_read+0x44>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	025b      	lsls	r3, r3, #9
 800977e:	607b      	str	r3, [r7, #4]
 8009780:	f7ff fd22 	bl	80091c8 <SELECT>
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d111      	bne.n	80097ae <SD_disk_read+0x72>
 800978a:	6879      	ldr	r1, [r7, #4]
 800978c:	2051      	movs	r0, #81	; 0x51
 800978e:	f7ff fe83 	bl	8009498 <SD_SendCmd>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d129      	bne.n	80097ec <SD_disk_read+0xb0>
 8009798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800979c:	68b8      	ldr	r0, [r7, #8]
 800979e:	f7ff fdf1 	bl	8009384 <SD_RxDataBlock>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d021      	beq.n	80097ec <SD_disk_read+0xb0>
 80097a8:	2300      	movs	r3, #0
 80097aa:	603b      	str	r3, [r7, #0]
 80097ac:	e01e      	b.n	80097ec <SD_disk_read+0xb0>
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	2052      	movs	r0, #82	; 0x52
 80097b2:	f7ff fe71 	bl	8009498 <SD_SendCmd>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d117      	bne.n	80097ec <SD_disk_read+0xb0>
 80097bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80097c0:	68b8      	ldr	r0, [r7, #8]
 80097c2:	f7ff fddf 	bl	8009384 <SD_RxDataBlock>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00a      	beq.n	80097e2 <SD_disk_read+0xa6>
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80097d2:	60bb      	str	r3, [r7, #8]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	3b01      	subs	r3, #1
 80097d8:	603b      	str	r3, [r7, #0]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1ed      	bne.n	80097bc <SD_disk_read+0x80>
 80097e0:	e000      	b.n	80097e4 <SD_disk_read+0xa8>
 80097e2:	bf00      	nop
 80097e4:	2100      	movs	r1, #0
 80097e6:	204c      	movs	r0, #76	; 0x4c
 80097e8:	f7ff fe56 	bl	8009498 <SD_SendCmd>
 80097ec:	f7ff fcf8 	bl	80091e0 <DESELECT>
 80097f0:	f7ff fd1c 	bl	800922c <SPI_RxByte>
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bf14      	ite	ne
 80097fa:	2301      	movne	r3, #1
 80097fc:	2300      	moveq	r3, #0
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20000014 	.word	0x20000014
 800980c:	20000a6c 	.word	0x20000a6c

08009810 <SD_disk_write>:
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	60b9      	str	r1, [r7, #8]
 8009818:	607a      	str	r2, [r7, #4]
 800981a:	603b      	str	r3, [r7, #0]
 800981c:	4603      	mov	r3, r0
 800981e:	73fb      	strb	r3, [r7, #15]
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d102      	bne.n	800982c <SD_disk_write+0x1c>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d101      	bne.n	8009830 <SD_disk_write+0x20>
 800982c:	2304      	movs	r3, #4
 800982e:	e06b      	b.n	8009908 <SD_disk_write+0xf8>
 8009830:	4b37      	ldr	r3, [pc, #220]	; (8009910 <SD_disk_write+0x100>)
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	b2db      	uxtb	r3, r3
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <SD_disk_write+0x32>
 800983e:	2303      	movs	r3, #3
 8009840:	e062      	b.n	8009908 <SD_disk_write+0xf8>
 8009842:	4b33      	ldr	r3, [pc, #204]	; (8009910 <SD_disk_write+0x100>)
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	b2db      	uxtb	r3, r3
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b00      	cmp	r3, #0
 800984e:	d001      	beq.n	8009854 <SD_disk_write+0x44>
 8009850:	2302      	movs	r3, #2
 8009852:	e059      	b.n	8009908 <SD_disk_write+0xf8>
 8009854:	4b2f      	ldr	r3, [pc, #188]	; (8009914 <SD_disk_write+0x104>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	f003 0304 	and.w	r3, r3, #4
 800985c:	2b00      	cmp	r3, #0
 800985e:	d102      	bne.n	8009866 <SD_disk_write+0x56>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	025b      	lsls	r3, r3, #9
 8009864:	607b      	str	r3, [r7, #4]
 8009866:	f7ff fcaf 	bl	80091c8 <SELECT>
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d110      	bne.n	8009892 <SD_disk_write+0x82>
 8009870:	6879      	ldr	r1, [r7, #4]
 8009872:	2058      	movs	r0, #88	; 0x58
 8009874:	f7ff fe10 	bl	8009498 <SD_SendCmd>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d13a      	bne.n	80098f4 <SD_disk_write+0xe4>
 800987e:	21fe      	movs	r1, #254	; 0xfe
 8009880:	68b8      	ldr	r0, [r7, #8]
 8009882:	f7ff fdb5 	bl	80093f0 <SD_TxDataBlock>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d033      	beq.n	80098f4 <SD_disk_write+0xe4>
 800988c:	2300      	movs	r3, #0
 800988e:	603b      	str	r3, [r7, #0]
 8009890:	e030      	b.n	80098f4 <SD_disk_write+0xe4>
 8009892:	4b20      	ldr	r3, [pc, #128]	; (8009914 <SD_disk_write+0x104>)
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	f003 0302 	and.w	r3, r3, #2
 800989a:	2b00      	cmp	r3, #0
 800989c:	d007      	beq.n	80098ae <SD_disk_write+0x9e>
 800989e:	2100      	movs	r1, #0
 80098a0:	2077      	movs	r0, #119	; 0x77
 80098a2:	f7ff fdf9 	bl	8009498 <SD_SendCmd>
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	2057      	movs	r0, #87	; 0x57
 80098aa:	f7ff fdf5 	bl	8009498 <SD_SendCmd>
 80098ae:	6879      	ldr	r1, [r7, #4]
 80098b0:	2059      	movs	r0, #89	; 0x59
 80098b2:	f7ff fdf1 	bl	8009498 <SD_SendCmd>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d11b      	bne.n	80098f4 <SD_disk_write+0xe4>
 80098bc:	21fc      	movs	r1, #252	; 0xfc
 80098be:	68b8      	ldr	r0, [r7, #8]
 80098c0:	f7ff fd96 	bl	80093f0 <SD_TxDataBlock>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00a      	beq.n	80098e0 <SD_disk_write+0xd0>
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80098d0:	60bb      	str	r3, [r7, #8]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	3b01      	subs	r3, #1
 80098d6:	603b      	str	r3, [r7, #0]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1ee      	bne.n	80098bc <SD_disk_write+0xac>
 80098de:	e000      	b.n	80098e2 <SD_disk_write+0xd2>
 80098e0:	bf00      	nop
 80098e2:	21fd      	movs	r1, #253	; 0xfd
 80098e4:	2000      	movs	r0, #0
 80098e6:	f7ff fd83 	bl	80093f0 <SD_TxDataBlock>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d101      	bne.n	80098f4 <SD_disk_write+0xe4>
 80098f0:	2301      	movs	r3, #1
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	f7ff fc74 	bl	80091e0 <DESELECT>
 80098f8:	f7ff fc98 	bl	800922c <SPI_RxByte>
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bf14      	ite	ne
 8009902:	2301      	movne	r3, #1
 8009904:	2300      	moveq	r3, #0
 8009906:	b2db      	uxtb	r3, r3
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	20000014 	.word	0x20000014
 8009914:	20000a6c 	.word	0x20000a6c

08009918 <SD_disk_ioctl>:
 8009918:	b590      	push	{r4, r7, lr}
 800991a:	b08b      	sub	sp, #44	; 0x2c
 800991c:	af00      	add	r7, sp, #0
 800991e:	4603      	mov	r3, r0
 8009920:	603a      	str	r2, [r7, #0]
 8009922:	71fb      	strb	r3, [r7, #7]
 8009924:	460b      	mov	r3, r1
 8009926:	71bb      	strb	r3, [r7, #6]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	623b      	str	r3, [r7, #32]
 800992c:	79fb      	ldrb	r3, [r7, #7]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <SD_disk_ioctl+0x1e>
 8009932:	2304      	movs	r3, #4
 8009934:	e11b      	b.n	8009b6e <SD_disk_ioctl+0x256>
 8009936:	2301      	movs	r3, #1
 8009938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800993c:	79bb      	ldrb	r3, [r7, #6]
 800993e:	2b05      	cmp	r3, #5
 8009940:	d129      	bne.n	8009996 <SD_disk_ioctl+0x7e>
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	2b02      	cmp	r3, #2
 8009948:	d017      	beq.n	800997a <SD_disk_ioctl+0x62>
 800994a:	2b02      	cmp	r3, #2
 800994c:	dc1f      	bgt.n	800998e <SD_disk_ioctl+0x76>
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <SD_disk_ioctl+0x40>
 8009952:	2b01      	cmp	r3, #1
 8009954:	d00b      	beq.n	800996e <SD_disk_ioctl+0x56>
 8009956:	e01a      	b.n	800998e <SD_disk_ioctl+0x76>
 8009958:	f7ff fd08 	bl	800936c <SD_CheckPower>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <SD_disk_ioctl+0x4e>
 8009962:	f7ff fcf7 	bl	8009354 <SD_PowerOff>
 8009966:	2300      	movs	r3, #0
 8009968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800996c:	e0fd      	b.n	8009b6a <SD_disk_ioctl+0x252>
 800996e:	f7ff fca5 	bl	80092bc <SD_PowerOn>
 8009972:	2300      	movs	r3, #0
 8009974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009978:	e0f7      	b.n	8009b6a <SD_disk_ioctl+0x252>
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	1c5c      	adds	r4, r3, #1
 800997e:	f7ff fcf5 	bl	800936c <SD_CheckPower>
 8009982:	4603      	mov	r3, r0
 8009984:	7023      	strb	r3, [r4, #0]
 8009986:	2300      	movs	r3, #0
 8009988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800998c:	e0ed      	b.n	8009b6a <SD_disk_ioctl+0x252>
 800998e:	2304      	movs	r3, #4
 8009990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009994:	e0e9      	b.n	8009b6a <SD_disk_ioctl+0x252>
 8009996:	4b78      	ldr	r3, [pc, #480]	; (8009b78 <SD_disk_ioctl+0x260>)
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	b2db      	uxtb	r3, r3
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <SD_disk_ioctl+0x90>
 80099a4:	2303      	movs	r3, #3
 80099a6:	e0e2      	b.n	8009b6e <SD_disk_ioctl+0x256>
 80099a8:	f7ff fc0e 	bl	80091c8 <SELECT>
 80099ac:	79bb      	ldrb	r3, [r7, #6]
 80099ae:	2b0d      	cmp	r3, #13
 80099b0:	f200 80cc 	bhi.w	8009b4c <SD_disk_ioctl+0x234>
 80099b4:	a201      	add	r2, pc, #4	; (adr r2, 80099bc <SD_disk_ioctl+0xa4>)
 80099b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ba:	bf00      	nop
 80099bc:	08009ab7 	.word	0x08009ab7
 80099c0:	080099f5 	.word	0x080099f5
 80099c4:	08009aa7 	.word	0x08009aa7
 80099c8:	08009b4d 	.word	0x08009b4d
 80099cc:	08009b4d 	.word	0x08009b4d
 80099d0:	08009b4d 	.word	0x08009b4d
 80099d4:	08009b4d 	.word	0x08009b4d
 80099d8:	08009b4d 	.word	0x08009b4d
 80099dc:	08009b4d 	.word	0x08009b4d
 80099e0:	08009b4d 	.word	0x08009b4d
 80099e4:	08009b4d 	.word	0x08009b4d
 80099e8:	08009ac9 	.word	0x08009ac9
 80099ec:	08009aed 	.word	0x08009aed
 80099f0:	08009b11 	.word	0x08009b11
 80099f4:	2100      	movs	r1, #0
 80099f6:	2049      	movs	r0, #73	; 0x49
 80099f8:	f7ff fd4e 	bl	8009498 <SD_SendCmd>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f040 80a8 	bne.w	8009b54 <SD_disk_ioctl+0x23c>
 8009a04:	f107 030c 	add.w	r3, r7, #12
 8009a08:	2110      	movs	r1, #16
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7ff fcba 	bl	8009384 <SD_RxDataBlock>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f000 809e 	beq.w	8009b54 <SD_disk_ioctl+0x23c>
 8009a18:	7b3b      	ldrb	r3, [r7, #12]
 8009a1a:	099b      	lsrs	r3, r3, #6
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d10e      	bne.n	8009a40 <SD_disk_ioctl+0x128>
 8009a22:	7d7b      	ldrb	r3, [r7, #21]
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	7d3b      	ldrb	r3, [r7, #20]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	021b      	lsls	r3, r3, #8
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	4413      	add	r3, r2
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	3301      	adds	r3, #1
 8009a34:	83fb      	strh	r3, [r7, #30]
 8009a36:	8bfb      	ldrh	r3, [r7, #30]
 8009a38:	029a      	lsls	r2, r3, #10
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	e02e      	b.n	8009a9e <SD_disk_ioctl+0x186>
 8009a40:	7c7b      	ldrb	r3, [r7, #17]
 8009a42:	f003 030f 	and.w	r3, r3, #15
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	7dbb      	ldrb	r3, [r7, #22]
 8009a4a:	09db      	lsrs	r3, r3, #7
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	4413      	add	r3, r2
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	7d7b      	ldrb	r3, [r7, #21]
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	f003 0306 	and.w	r3, r3, #6
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	4413      	add	r3, r2
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	3302      	adds	r3, #2
 8009a64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009a68:	7d3b      	ldrb	r3, [r7, #20]
 8009a6a:	099b      	lsrs	r3, r3, #6
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	7cfb      	ldrb	r3, [r7, #19]
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	4413      	add	r3, r2
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	7cbb      	ldrb	r3, [r7, #18]
 8009a7e:	029b      	lsls	r3, r3, #10
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	4413      	add	r3, r2
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	83fb      	strh	r3, [r7, #30]
 8009a90:	8bfa      	ldrh	r2, [r7, #30]
 8009a92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a96:	3b09      	subs	r3, #9
 8009a98:	409a      	lsls	r2, r3
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009aa4:	e056      	b.n	8009b54 <SD_disk_ioctl+0x23c>
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009aac:	801a      	strh	r2, [r3, #0]
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ab4:	e055      	b.n	8009b62 <SD_disk_ioctl+0x24a>
 8009ab6:	f7ff fbe5 	bl	8009284 <SD_ReadyWait>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2bff      	cmp	r3, #255	; 0xff
 8009abe:	d14b      	bne.n	8009b58 <SD_disk_ioctl+0x240>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ac6:	e047      	b.n	8009b58 <SD_disk_ioctl+0x240>
 8009ac8:	2100      	movs	r1, #0
 8009aca:	2049      	movs	r0, #73	; 0x49
 8009acc:	f7ff fce4 	bl	8009498 <SD_SendCmd>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d142      	bne.n	8009b5c <SD_disk_ioctl+0x244>
 8009ad6:	2110      	movs	r1, #16
 8009ad8:	6a38      	ldr	r0, [r7, #32]
 8009ada:	f7ff fc53 	bl	8009384 <SD_RxDataBlock>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d03b      	beq.n	8009b5c <SD_disk_ioctl+0x244>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009aea:	e037      	b.n	8009b5c <SD_disk_ioctl+0x244>
 8009aec:	2100      	movs	r1, #0
 8009aee:	204a      	movs	r0, #74	; 0x4a
 8009af0:	f7ff fcd2 	bl	8009498 <SD_SendCmd>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d132      	bne.n	8009b60 <SD_disk_ioctl+0x248>
 8009afa:	2110      	movs	r1, #16
 8009afc:	6a38      	ldr	r0, [r7, #32]
 8009afe:	f7ff fc41 	bl	8009384 <SD_RxDataBlock>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d02b      	beq.n	8009b60 <SD_disk_ioctl+0x248>
 8009b08:	2300      	movs	r3, #0
 8009b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b0e:	e027      	b.n	8009b60 <SD_disk_ioctl+0x248>
 8009b10:	2100      	movs	r1, #0
 8009b12:	207a      	movs	r0, #122	; 0x7a
 8009b14:	f7ff fcc0 	bl	8009498 <SD_SendCmd>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d116      	bne.n	8009b4c <SD_disk_ioctl+0x234>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b24:	e00b      	b.n	8009b3e <SD_disk_ioctl+0x226>
 8009b26:	6a3c      	ldr	r4, [r7, #32]
 8009b28:	1c63      	adds	r3, r4, #1
 8009b2a:	623b      	str	r3, [r7, #32]
 8009b2c:	f7ff fb7e 	bl	800922c <SPI_RxByte>
 8009b30:	4603      	mov	r3, r0
 8009b32:	7023      	strb	r3, [r4, #0]
 8009b34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b38:	3301      	adds	r3, #1
 8009b3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d9ef      	bls.n	8009b26 <SD_disk_ioctl+0x20e>
 8009b46:	2300      	movs	r3, #0
 8009b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b4c:	2304      	movs	r3, #4
 8009b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b52:	e006      	b.n	8009b62 <SD_disk_ioctl+0x24a>
 8009b54:	bf00      	nop
 8009b56:	e004      	b.n	8009b62 <SD_disk_ioctl+0x24a>
 8009b58:	bf00      	nop
 8009b5a:	e002      	b.n	8009b62 <SD_disk_ioctl+0x24a>
 8009b5c:	bf00      	nop
 8009b5e:	e000      	b.n	8009b62 <SD_disk_ioctl+0x24a>
 8009b60:	bf00      	nop
 8009b62:	f7ff fb3d 	bl	80091e0 <DESELECT>
 8009b66:	f7ff fb61 	bl	800922c <SPI_RxByte>
 8009b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b6e:	4618      	mov	r0, r3
 8009b70:	372c      	adds	r7, #44	; 0x2c
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd90      	pop	{r4, r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20000014 	.word	0x20000014

08009b7c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	4a07      	ldr	r2, [pc, #28]	; (8009ba8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	4a06      	ldr	r2, [pc, #24]	; (8009bac <vApplicationGetIdleTaskMemory+0x30>)
 8009b92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2280      	movs	r2, #128	; 0x80
 8009b98:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8009b9a:	bf00      	nop
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	20000b58 	.word	0x20000b58
 8009bac:	20000bf8 	.word	0x20000bf8

08009bb0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4a07      	ldr	r2, [pc, #28]	; (8009bdc <vApplicationGetTimerTaskMemory+0x2c>)
 8009bc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	4a06      	ldr	r2, [pc, #24]	; (8009be0 <vApplicationGetTimerTaskMemory+0x30>)
 8009bc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bce:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8009bd0:	bf00      	nop
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	20000df8 	.word	0x20000df8
 8009be0:	20000e98 	.word	0x20000e98

08009be4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8009be4:	b5b0      	push	{r4, r5, r7, lr}
 8009be6:	b09a      	sub	sp, #104	; 0x68
 8009be8:	af10      	add	r7, sp, #64	; 0x40
  /* definition and creation of timCAN1 */
//  osTimerDef(timCAN1, timCAN1_Tx_Callback);
//  timCAN1Handle = osTimerCreate(osTimer(timCAN1), osTimerPeriodic, NULL);

  /* definition and creation of timTSACBus */
  osTimerDef(timTSACBus, timTSACBus_Callback);
 8009bea:	4b85      	ldr	r3, [pc, #532]	; (8009e00 <MX_FREERTOS_Init+0x21c>)
 8009bec:	623b      	str	r3, [r7, #32]
 8009bee:	2300      	movs	r3, #0
 8009bf0:	627b      	str	r3, [r7, #36]	; 0x24
  timTSACBusHandle = osTimerCreate(osTimer(timTSACBus), osTimerPeriodic, NULL);
 8009bf2:	f107 0320 	add.w	r3, r7, #32
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f00e fab6 	bl	801816c <osTimerCreate>
 8009c00:	4603      	mov	r3, r0
 8009c02:	4a80      	ldr	r2, [pc, #512]	; (8009e04 <MX_FREERTOS_Init+0x220>)
 8009c04:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 8009c06:	4b80      	ldr	r3, [pc, #512]	; (8009e08 <MX_FREERTOS_Init+0x224>)
 8009c08:	1d3c      	adds	r4, r7, #4
 8009c0a:	461d      	mov	r5, r3
 8009c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009c14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8009c18:	1d3b      	adds	r3, r7, #4
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f00e fa45 	bl	80180ac <osThreadCreate>
 8009c22:	4603      	mov	r3, r0
 8009c24:	4a79      	ldr	r2, [pc, #484]	; (8009e0c <MX_FREERTOS_Init+0x228>)
 8009c26:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  /* ACCU Error Handler */
  xTaskCreate(ACCU_Error_Handler,     "ACCU_Error_Handle Task",  128, NULL, 11, &ACCU_Error_Handle);
 8009c28:	4b79      	ldr	r3, [pc, #484]	; (8009e10 <MX_FREERTOS_Init+0x22c>)
 8009c2a:	9301      	str	r3, [sp, #4]
 8009c2c:	230b      	movs	r3, #11
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	2300      	movs	r3, #0
 8009c32:	2280      	movs	r2, #128	; 0x80
 8009c34:	4977      	ldr	r1, [pc, #476]	; (8009e14 <MX_FREERTOS_Init+0x230>)
 8009c36:	4878      	ldr	r0, [pc, #480]	; (8009e18 <MX_FREERTOS_Init+0x234>)
 8009c38:	f00f fe95 	bl	8019966 <xTaskCreate>

  /* Read Input Handler */
  xTaskCreate(read_Inputs_Task,       "Read_Inputs_Handle Task", 128, NULL, 14, &Read_Inputs_Handle);
 8009c3c:	4b77      	ldr	r3, [pc, #476]	; (8009e1c <MX_FREERTOS_Init+0x238>)
 8009c3e:	9301      	str	r3, [sp, #4]
 8009c40:	230e      	movs	r3, #14
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	2300      	movs	r3, #0
 8009c46:	2280      	movs	r2, #128	; 0x80
 8009c48:	4975      	ldr	r1, [pc, #468]	; (8009e20 <MX_FREERTOS_Init+0x23c>)
 8009c4a:	4876      	ldr	r0, [pc, #472]	; (8009e24 <MX_FREERTOS_Init+0x240>)
 8009c4c:	f00f fe8b 	bl	8019966 <xTaskCreate>

  /* TS Situation Handlers */
  xTaskCreate(TS_OFF_Check,           "TS_OFF_Handle Task"   ,   128, NULL,  9, &TS_OFF_Handle);
 8009c50:	4b75      	ldr	r3, [pc, #468]	; (8009e28 <MX_FREERTOS_Init+0x244>)
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	2309      	movs	r3, #9
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	2300      	movs	r3, #0
 8009c5a:	2280      	movs	r2, #128	; 0x80
 8009c5c:	4973      	ldr	r1, [pc, #460]	; (8009e2c <MX_FREERTOS_Init+0x248>)
 8009c5e:	4874      	ldr	r0, [pc, #464]	; (8009e30 <MX_FREERTOS_Init+0x24c>)
 8009c60:	f00f fe81 	bl	8019966 <xTaskCreate>
  xTaskCreate(PreCharge_Task,         "PreCharge_Handle Task",   128, NULL, 11, &PreCharge_Handle);
 8009c64:	4b73      	ldr	r3, [pc, #460]	; (8009e34 <MX_FREERTOS_Init+0x250>)
 8009c66:	9301      	str	r3, [sp, #4]
 8009c68:	230b      	movs	r3, #11
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	2280      	movs	r2, #128	; 0x80
 8009c70:	4971      	ldr	r1, [pc, #452]	; (8009e38 <MX_FREERTOS_Init+0x254>)
 8009c72:	4872      	ldr	r0, [pc, #456]	; (8009e3c <MX_FREERTOS_Init+0x258>)
 8009c74:	f00f fe77 	bl	8019966 <xTaskCreate>
  xTaskCreate(TS_Activation_Task,     "TS_Active_Handle Task",   128, NULL, 14, &TS_Active_Handle);
 8009c78:	4b71      	ldr	r3, [pc, #452]	; (8009e40 <MX_FREERTOS_Init+0x25c>)
 8009c7a:	9301      	str	r3, [sp, #4]
 8009c7c:	230e      	movs	r3, #14
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	2300      	movs	r3, #0
 8009c82:	2280      	movs	r2, #128	; 0x80
 8009c84:	496f      	ldr	r1, [pc, #444]	; (8009e44 <MX_FREERTOS_Init+0x260>)
 8009c86:	4870      	ldr	r0, [pc, #448]	; (8009e48 <MX_FREERTOS_Init+0x264>)
 8009c88:	f00f fe6d 	bl	8019966 <xTaskCreate>

  /* BMS Task Handling */
  xTaskCreate(BMS_Main_Task,          "BMS_Main_Handle Task",    500, NULL, 14, &BMS_Main_TaskHandle);
 8009c8c:	4b6f      	ldr	r3, [pc, #444]	; (8009e4c <MX_FREERTOS_Init+0x268>)
 8009c8e:	9301      	str	r3, [sp, #4]
 8009c90:	230e      	movs	r3, #14
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	2300      	movs	r3, #0
 8009c96:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009c9a:	496d      	ldr	r1, [pc, #436]	; (8009e50 <MX_FREERTOS_Init+0x26c>)
 8009c9c:	486d      	ldr	r0, [pc, #436]	; (8009e54 <MX_FREERTOS_Init+0x270>)
 8009c9e:	f00f fe62 	bl	8019966 <xTaskCreate>
  xTaskCreate(BMS_Communication_Task, "BMS_ADC_Handle Task",     256, NULL, 14, &BMS_Communication_TaskHandle);
 8009ca2:	4b6d      	ldr	r3, [pc, #436]	; (8009e58 <MX_FREERTOS_Init+0x274>)
 8009ca4:	9301      	str	r3, [sp, #4]
 8009ca6:	230e      	movs	r3, #14
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	2300      	movs	r3, #0
 8009cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cb0:	496a      	ldr	r1, [pc, #424]	; (8009e5c <MX_FREERTOS_Init+0x278>)
 8009cb2:	486b      	ldr	r0, [pc, #428]	; (8009e60 <MX_FREERTOS_Init+0x27c>)
 8009cb4:	f00f fe57 	bl	8019966 <xTaskCreate>

  /* CAN bus Task Handling */
  xTaskCreate(Canbus_Task,            "Canbus_Handle_Task",      128, NULL, 14, &Canbus_TaskHandle);
 8009cb8:	4b6a      	ldr	r3, [pc, #424]	; (8009e64 <MX_FREERTOS_Init+0x280>)
 8009cba:	9301      	str	r3, [sp, #4]
 8009cbc:	230e      	movs	r3, #14
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	2280      	movs	r2, #128	; 0x80
 8009cc4:	4968      	ldr	r1, [pc, #416]	; (8009e68 <MX_FREERTOS_Init+0x284>)
 8009cc6:	4869      	ldr	r0, [pc, #420]	; (8009e6c <MX_FREERTOS_Init+0x288>)
 8009cc8:	f00f fe4d 	bl	8019966 <xTaskCreate>

  /* Initialization of USB Task */
  xTaskCreate(USB_Task,               "USB_Handle Task",         600, NULL,  8, &USB_TaskHandle);
 8009ccc:	4b68      	ldr	r3, [pc, #416]	; (8009e70 <MX_FREERTOS_Init+0x28c>)
 8009cce:	9301      	str	r3, [sp, #4]
 8009cd0:	2308      	movs	r3, #8
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009cda:	4966      	ldr	r1, [pc, #408]	; (8009e74 <MX_FREERTOS_Init+0x290>)
 8009cdc:	4866      	ldr	r0, [pc, #408]	; (8009e78 <MX_FREERTOS_Init+0x294>)
 8009cde:	f00f fe42 	bl	8019966 <xTaskCreate>

  /* SD Card writing Task */
  xTaskCreate(SDCard_Task,            "SDCard_Handle Task",      500, NULL,  8, &SDCard_Handle);
 8009ce2:	4b66      	ldr	r3, [pc, #408]	; (8009e7c <MX_FREERTOS_Init+0x298>)
 8009ce4:	9301      	str	r3, [sp, #4]
 8009ce6:	2308      	movs	r3, #8
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	2300      	movs	r3, #0
 8009cec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009cf0:	4963      	ldr	r1, [pc, #396]	; (8009e80 <MX_FREERTOS_Init+0x29c>)
 8009cf2:	4864      	ldr	r0, [pc, #400]	; (8009e84 <MX_FREERTOS_Init+0x2a0>)
 8009cf4:	f00f fe37 	bl	8019966 <xTaskCreate>

  xTaskCreate(Charge_Task,            "Charge_Handle_Task",      128, NULL,  9, &Charge_Handle);
 8009cf8:	4b63      	ldr	r3, [pc, #396]	; (8009e88 <MX_FREERTOS_Init+0x2a4>)
 8009cfa:	9301      	str	r3, [sp, #4]
 8009cfc:	2309      	movs	r3, #9
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	2300      	movs	r3, #0
 8009d02:	2280      	movs	r2, #128	; 0x80
 8009d04:	4961      	ldr	r1, [pc, #388]	; (8009e8c <MX_FREERTOS_Init+0x2a8>)
 8009d06:	4862      	ldr	r0, [pc, #392]	; (8009e90 <MX_FREERTOS_Init+0x2ac>)
 8009d08:	f00f fe2d 	bl	8019966 <xTaskCreate>

  /* Pre-charge & AIR Status flags Control */
  xPreCharge_EventGroup = xEventGroupCreate();
 8009d0c:	f00e fbab 	bl	8018466 <xEventGroupCreate>
 8009d10:	4603      	mov	r3, r0
 8009d12:	4a60      	ldr	r2, [pc, #384]	; (8009e94 <MX_FREERTOS_Init+0x2b0>)
 8009d14:	6013      	str	r3, [r2, #0]
  xTS_Off_EventGroup    = xEventGroupCreate();
 8009d16:	f00e fba6 	bl	8018466 <xEventGroupCreate>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	4a5e      	ldr	r2, [pc, #376]	; (8009e98 <MX_FREERTOS_Init+0x2b4>)
 8009d1e:	6013      	str	r3, [r2, #0]

  /* BMS Initializations */
  BMS_Init(&master, slave_array, &hspi2, GPIOC, GPIOC, SPI2_CS_Pin, AMS_OK_Pin, &bmsInfo, 1, 0);
 8009d20:	2300      	movs	r3, #0
 8009d22:	9306      	str	r3, [sp, #24]
 8009d24:	2301      	movs	r3, #1
 8009d26:	9305      	str	r3, [sp, #20]
 8009d28:	4b5c      	ldr	r3, [pc, #368]	; (8009e9c <MX_FREERTOS_Init+0x2b8>)
 8009d2a:	9304      	str	r3, [sp, #16]
 8009d2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d30:	f04f 0300 	mov.w	r3, #0
 8009d34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d38:	2302      	movs	r3, #2
 8009d3a:	9301      	str	r3, [sp, #4]
 8009d3c:	4b58      	ldr	r3, [pc, #352]	; (8009ea0 <MX_FREERTOS_Init+0x2bc>)
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	4b57      	ldr	r3, [pc, #348]	; (8009ea0 <MX_FREERTOS_Init+0x2bc>)
 8009d42:	4a58      	ldr	r2, [pc, #352]	; (8009ea4 <MX_FREERTOS_Init+0x2c0>)
 8009d44:	4958      	ldr	r1, [pc, #352]	; (8009ea8 <MX_FREERTOS_Init+0x2c4>)
 8009d46:	4859      	ldr	r0, [pc, #356]	; (8009eac <MX_FREERTOS_Init+0x2c8>)
 8009d48:	f7f9 feac 	bl	8003aa4 <BMS_Init>
  ADC_Ready = 1;
 8009d4c:	4b58      	ldr	r3, [pc, #352]	; (8009eb0 <MX_FREERTOS_Init+0x2cc>)
 8009d4e:	2201      	movs	r2, #1
 8009d50:	701a      	strb	r2, [r3, #0]

  // JUST FOR NOW
  //bmsInfo.BalInfo.balancing_enabled = 1;

  /* TSAC basic struct initialization */
  Accu_Struct_Init(&accuInfo, &can_handler_prim,
 8009d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d56:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d58:	4b51      	ldr	r3, [pc, #324]	; (8009ea0 <MX_FREERTOS_Init+0x2bc>)
 8009d5a:	930e      	str	r3, [sp, #56]	; 0x38
 8009d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d60:	930d      	str	r3, [sp, #52]	; 0x34
 8009d62:	4b4f      	ldr	r3, [pc, #316]	; (8009ea0 <MX_FREERTOS_Init+0x2bc>)
 8009d64:	930c      	str	r3, [sp, #48]	; 0x30
 8009d66:	2340      	movs	r3, #64	; 0x40
 8009d68:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d6a:	4b52      	ldr	r3, [pc, #328]	; (8009eb4 <MX_FREERTOS_Init+0x2d0>)
 8009d6c:	930a      	str	r3, [sp, #40]	; 0x28
 8009d6e:	2310      	movs	r3, #16
 8009d70:	9309      	str	r3, [sp, #36]	; 0x24
 8009d72:	4b50      	ldr	r3, [pc, #320]	; (8009eb4 <MX_FREERTOS_Init+0x2d0>)
 8009d74:	9308      	str	r3, [sp, #32]
 8009d76:	2308      	movs	r3, #8
 8009d78:	9307      	str	r3, [sp, #28]
 8009d7a:	4b4e      	ldr	r3, [pc, #312]	; (8009eb4 <MX_FREERTOS_Init+0x2d0>)
 8009d7c:	9306      	str	r3, [sp, #24]
 8009d7e:	2320      	movs	r3, #32
 8009d80:	9305      	str	r3, [sp, #20]
 8009d82:	4b4c      	ldr	r3, [pc, #304]	; (8009eb4 <MX_FREERTOS_Init+0x2d0>)
 8009d84:	9304      	str	r3, [sp, #16]
 8009d86:	2320      	movs	r3, #32
 8009d88:	9303      	str	r3, [sp, #12]
 8009d8a:	4b45      	ldr	r3, [pc, #276]	; (8009ea0 <MX_FREERTOS_Init+0x2bc>)
 8009d8c:	9302      	str	r3, [sp, #8]
 8009d8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009d92:	9301      	str	r3, [sp, #4]
 8009d94:	4b42      	ldr	r3, [pc, #264]	; (8009ea0 <MX_FREERTOS_Init+0x2bc>)
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d9c:	4a46      	ldr	r2, [pc, #280]	; (8009eb8 <MX_FREERTOS_Init+0x2d4>)
 8009d9e:	4947      	ldr	r1, [pc, #284]	; (8009ebc <MX_FREERTOS_Init+0x2d8>)
 8009da0:	4847      	ldr	r0, [pc, #284]	; (8009ec0 <MX_FREERTOS_Init+0x2dc>)
 8009da2:	f7f8 f943 	bl	800202c <Accu_Struct_Init>
		  AIR_P_State_GPIO_Port, AIR_P_State_Pin,
		  AIR_P_DRIVER_GPIO_Port, AIR_P_DRIVER_Pin,
		  LED1_GPIO_Port, LED1_Pin);

  /* IVT Current Sensor and ELCON Charger struct initialization */
  IVT_Struct_Init(&ivt, &can_handler_tsac);
 8009da6:	4947      	ldr	r1, [pc, #284]	; (8009ec4 <MX_FREERTOS_Init+0x2e0>)
 8009da8:	4847      	ldr	r0, [pc, #284]	; (8009ec8 <MX_FREERTOS_Init+0x2e4>)
 8009daa:	f7f8 f9f2 	bl	8002192 <IVT_Struct_Init>
  Elcon_Struct_Init(&elcon, &can_handler_tsac);
 8009dae:	4945      	ldr	r1, [pc, #276]	; (8009ec4 <MX_FREERTOS_Init+0x2e0>)
 8009db0:	4846      	ldr	r0, [pc, #280]	; (8009ecc <MX_FREERTOS_Init+0x2e8>)
 8009db2:	f7f8 fa4b 	bl	800224c <Elcon_Struct_Init>

  /* SD Card Mounting */
  sdCard.fresult = SD_Card_init(&sdCard, slave_array, &accuInfo, &bmsInfo, &ivt, &elcon, &imd, &p23status);
 8009db6:	4b46      	ldr	r3, [pc, #280]	; (8009ed0 <MX_FREERTOS_Init+0x2ec>)
 8009db8:	9303      	str	r3, [sp, #12]
 8009dba:	4b46      	ldr	r3, [pc, #280]	; (8009ed4 <MX_FREERTOS_Init+0x2f0>)
 8009dbc:	9302      	str	r3, [sp, #8]
 8009dbe:	4b43      	ldr	r3, [pc, #268]	; (8009ecc <MX_FREERTOS_Init+0x2e8>)
 8009dc0:	9301      	str	r3, [sp, #4]
 8009dc2:	4b41      	ldr	r3, [pc, #260]	; (8009ec8 <MX_FREERTOS_Init+0x2e4>)
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	4b35      	ldr	r3, [pc, #212]	; (8009e9c <MX_FREERTOS_Init+0x2b8>)
 8009dc8:	4a3d      	ldr	r2, [pc, #244]	; (8009ec0 <MX_FREERTOS_Init+0x2dc>)
 8009dca:	4937      	ldr	r1, [pc, #220]	; (8009ea8 <MX_FREERTOS_Init+0x2c4>)
 8009dcc:	4842      	ldr	r0, [pc, #264]	; (8009ed8 <MX_FREERTOS_Init+0x2f4>)
 8009dce:	f7fc fb17 	bl	8006400 <SD_Card_init>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	4b40      	ldr	r3, [pc, #256]	; (8009ed8 <MX_FREERTOS_Init+0x2f4>)
 8009dd8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009ddc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  /* ACCU CAN Starting */
  ACCU_CAN_Config();
 8009de0:	f7ff f940 	bl	8009064 <ACCU_CAN_Config>

  /* ADC Inputs */
  Enable_ADC_Conversions();
 8009de4:	f7fd fed8 	bl	8007b98 <Enable_ADC_Conversions>

  /* Timer Configuration */
  Start_Timers();
 8009de8:	f001 fdf8 	bl	800b9dc <Start_Timers>

  /* USB Initialization */
  USB_Init(USB_ENABLE_GPIO_Port, USB_ENABLE_Pin);
 8009dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009df0:	4831      	ldr	r0, [pc, #196]	; (8009eb8 <MX_FREERTOS_Init+0x2d4>)
 8009df2:	f7f8 fde5 	bl	80029c0 <USB_Init>

  /* USER CODE END RTOS_THREADS */

}
 8009df6:	bf00      	nop
 8009df8:	3728      	adds	r7, #40	; 0x28
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	08009ffd 	.word	0x08009ffd
 8009e04:	20000b54 	.word	0x20000b54
 8009e08:	080221fc 	.word	0x080221fc
 8009e0c:	20000b50 	.word	0x20000b50
 8009e10:	20000a70 	.word	0x20000a70
 8009e14:	08022104 	.word	0x08022104
 8009e18:	0800a071 	.word	0x0800a071
 8009e1c:	20000a74 	.word	0x20000a74
 8009e20:	0802211c 	.word	0x0802211c
 8009e24:	0800a1f5 	.word	0x0800a1f5
 8009e28:	20000a80 	.word	0x20000a80
 8009e2c:	08022134 	.word	0x08022134
 8009e30:	0800a575 	.word	0x0800a575
 8009e34:	20000a78 	.word	0x20000a78
 8009e38:	08022148 	.word	0x08022148
 8009e3c:	0800a661 	.word	0x0800a661
 8009e40:	20000a7c 	.word	0x20000a7c
 8009e44:	08022160 	.word	0x08022160
 8009e48:	0800a761 	.word	0x0800a761
 8009e4c:	20000a84 	.word	0x20000a84
 8009e50:	08022178 	.word	0x08022178
 8009e54:	0800a87d 	.word	0x0800a87d
 8009e58:	20000a88 	.word	0x20000a88
 8009e5c:	08022190 	.word	0x08022190
 8009e60:	0800a905 	.word	0x0800a905
 8009e64:	20000a94 	.word	0x20000a94
 8009e68:	080221a4 	.word	0x080221a4
 8009e6c:	08009f2d 	.word	0x08009f2d
 8009e70:	20000a98 	.word	0x20000a98
 8009e74:	080221b8 	.word	0x080221b8
 8009e78:	0800ad21 	.word	0x0800ad21
 8009e7c:	20000a8c 	.word	0x20000a8c
 8009e80:	080221c8 	.word	0x080221c8
 8009e84:	0800aca1 	.word	0x0800aca1
 8009e88:	20000a90 	.word	0x20000a90
 8009e8c:	080221dc 	.word	0x080221dc
 8009e90:	0800ae31 	.word	0x0800ae31
 8009e94:	20000a9c 	.word	0x20000a9c
 8009e98:	20000aa8 	.word	0x20000aa8
 8009e9c:	2000206c 	.word	0x2000206c
 8009ea0:	40020800 	.word	0x40020800
 8009ea4:	200043ec 	.word	0x200043ec
 8009ea8:	200012ec 	.word	0x200012ec
 8009eac:	20001298 	.word	0x20001298
 8009eb0:	20000b1a 	.word	0x20000b1a
 8009eb4:	40020400 	.word	0x40020400
 8009eb8:	40020000 	.word	0x40020000
 8009ebc:	2000229c 	.word	0x2000229c
 8009ec0:	200021cc 	.word	0x200021cc
 8009ec4:	20002270 	.word	0x20002270
 8009ec8:	20002174 	.word	0x20002174
 8009ecc:	20002244 	.word	0x20002244
 8009ed0:	2000435c 	.word	0x2000435c
 8009ed4:	2000215c 	.word	0x2000215c
 8009ed8:	200022c8 	.word	0x200022c8

08009edc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8009ee4:	f011 ff12 	bl	801bd0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  /* IMD status */
	  update_imd_status(&imd);
 8009ee8:	480d      	ldr	r0, [pc, #52]	; (8009f20 <StartDefaultTask+0x44>)
 8009eea:	f7f8 fa0d 	bl	8002308 <update_imd_status>

	  /* Checking how many PEC errors in BMS occur */
	  for (ID_t id = ID_0; id < SLAVES_NUM; ++id)
 8009eee:	2300      	movs	r3, #0
 8009ef0:	73fb      	strb	r3, [r7, #15]
 8009ef2:	e00e      	b.n	8009f12 <StartDefaultTask+0x36>
		  pecErrors[id] = slave_array[id].pec_errors;
 8009ef4:	7bfa      	ldrb	r2, [r7, #15]
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
 8009ef8:	490a      	ldr	r1, [pc, #40]	; (8009f24 <StartDefaultTask+0x48>)
 8009efa:	20d8      	movs	r0, #216	; 0xd8
 8009efc:	fb00 f202 	mul.w	r2, r0, r2
 8009f00:	440a      	add	r2, r1
 8009f02:	320a      	adds	r2, #10
 8009f04:	8811      	ldrh	r1, [r2, #0]
 8009f06:	4a08      	ldr	r2, [pc, #32]	; (8009f28 <StartDefaultTask+0x4c>)
 8009f08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for (ID_t id = ID_0; id < SLAVES_NUM; ++id)
 8009f0c:	7bfb      	ldrb	r3, [r7, #15]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	73fb      	strb	r3, [r7, #15]
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
 8009f14:	2b0f      	cmp	r3, #15
 8009f16:	d9ed      	bls.n	8009ef4 <StartDefaultTask+0x18>
//	  else
//	  {
//		  bmsInfo.min_SoC = 255;	// Error in Ah mapping!
//		  bmsInfo.max_SoC = 255;
//	  }
	  osDelay(50);
 8009f18:	2032      	movs	r0, #50	; 0x32
 8009f1a:	f00e f913 	bl	8018144 <osDelay>
	  update_imd_status(&imd);
 8009f1e:	e7e3      	b.n	8009ee8 <StartDefaultTask+0xc>
 8009f20:	2000215c 	.word	0x2000215c
 8009f24:	200012ec 	.word	0x200012ec
 8009f28:	20000af8 	.word	0x20000af8

08009f2c <Canbus_Task>:
}



void Canbus_Task()
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	af00      	add	r7, sp, #0
	for (;;)
	{
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8009f30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f34:	4828      	ldr	r0, [pc, #160]	; (8009fd8 <Canbus_Task+0xac>)
 8009f36:	f003 ff3e 	bl	800ddb6 <HAL_GPIO_TogglePin>
		osDelay(1);
 8009f3a:	2001      	movs	r0, #1
 8009f3c:	f00e f902 	bl	8018144 <osDelay>

		CANTx_time = xTaskGetTickCount() - CANTx_tick;
 8009f40:	f00f ffac 	bl	8019e9c <xTaskGetTickCount>
 8009f44:	4602      	mov	r2, r0
 8009f46:	4b25      	ldr	r3, [pc, #148]	; (8009fdc <Canbus_Task+0xb0>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	4a24      	ldr	r2, [pc, #144]	; (8009fe0 <Canbus_Task+0xb4>)
 8009f4e:	6013      	str	r3, [r2, #0]
		CANTx_tick  = xTaskGetTickCount();
 8009f50:	f00f ffa4 	bl	8019e9c <xTaskGetTickCount>
 8009f54:	4603      	mov	r3, r0
 8009f56:	4a21      	ldr	r2, [pc, #132]	; (8009fdc <Canbus_Task+0xb0>)
 8009f58:	6013      	str	r3, [r2, #0]

		switch(can_msg_counter)
 8009f5a:	4b22      	ldr	r3, [pc, #136]	; (8009fe4 <Canbus_Task+0xb8>)
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	2b04      	cmp	r3, #4
 8009f60:	d828      	bhi.n	8009fb4 <Canbus_Task+0x88>
 8009f62:	a201      	add	r2, pc, #4	; (adr r2, 8009f68 <Canbus_Task+0x3c>)
 8009f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f68:	08009f7d 	.word	0x08009f7d
 8009f6c:	08009f87 	.word	0x08009f87
 8009f70:	08009f91 	.word	0x08009f91
 8009f74:	08009f9d 	.word	0x08009f9d
 8009f78:	08009fa9 	.word	0x08009fa9
		{
		case 0:
			Cell_Voltage_CAN_Tx(&bmsInfo, &can_handler_prim);
 8009f7c:	491a      	ldr	r1, [pc, #104]	; (8009fe8 <Canbus_Task+0xbc>)
 8009f7e:	481b      	ldr	r0, [pc, #108]	; (8009fec <Canbus_Task+0xc0>)
 8009f80:	f7f7 fd42 	bl	8001a08 <Cell_Voltage_CAN_Tx>
			break;
 8009f84:	e017      	b.n	8009fb6 <Canbus_Task+0x8a>

		case 1:
			Cell_Temp_CAN_Tx(&bmsInfo, &can_handler_prim);
 8009f86:	4918      	ldr	r1, [pc, #96]	; (8009fe8 <Canbus_Task+0xbc>)
 8009f88:	4818      	ldr	r0, [pc, #96]	; (8009fec <Canbus_Task+0xc0>)
 8009f8a:	f7f7 fc45 	bl	8001818 <Cell_Temp_CAN_Tx>
			break;
 8009f8e:	e012      	b.n	8009fb6 <Canbus_Task+0x8a>

		case 2:
			TSAC_Energy_CAN_Tx(&bmsInfo, &ivt, &can_handler_prim);
 8009f90:	4a15      	ldr	r2, [pc, #84]	; (8009fe8 <Canbus_Task+0xbc>)
 8009f92:	4917      	ldr	r1, [pc, #92]	; (8009ff0 <Canbus_Task+0xc4>)
 8009f94:	4815      	ldr	r0, [pc, #84]	; (8009fec <Canbus_Task+0xc0>)
 8009f96:	f7f7 fbdd 	bl	8001754 <TSAC_Energy_CAN_Tx>
			break;
 8009f9a:	e00c      	b.n	8009fb6 <Canbus_Task+0x8a>

		case 3:
			TSAC_Status_CAN_Tx(&bmsInfo, &accuInfo, &imd);
 8009f9c:	4a15      	ldr	r2, [pc, #84]	; (8009ff4 <Canbus_Task+0xc8>)
 8009f9e:	4916      	ldr	r1, [pc, #88]	; (8009ff8 <Canbus_Task+0xcc>)
 8009fa0:	4812      	ldr	r0, [pc, #72]	; (8009fec <Canbus_Task+0xc0>)
 8009fa2:	f7f7 fc77 	bl	8001894 <TSAC_Status_CAN_Tx>
			break;
 8009fa6:	e006      	b.n	8009fb6 <Canbus_Task+0x8a>

		case 4:
			Error_Msg_CAN_Tx(&accuInfo, &bmsInfo, &can_handler_prim);
 8009fa8:	4a0f      	ldr	r2, [pc, #60]	; (8009fe8 <Canbus_Task+0xbc>)
 8009faa:	4910      	ldr	r1, [pc, #64]	; (8009fec <Canbus_Task+0xc0>)
 8009fac:	4812      	ldr	r0, [pc, #72]	; (8009ff8 <Canbus_Task+0xcc>)
 8009fae:	f7f7 fd75 	bl	8001a9c <Error_Msg_CAN_Tx>
			break;
 8009fb2:	e000      	b.n	8009fb6 <Canbus_Task+0x8a>

		default:
			break;
 8009fb4:	bf00      	nop
		}

		can_msg_counter++;
 8009fb6:	4b0b      	ldr	r3, [pc, #44]	; (8009fe4 <Canbus_Task+0xb8>)
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	4b09      	ldr	r3, [pc, #36]	; (8009fe4 <Canbus_Task+0xb8>)
 8009fc0:	701a      	strb	r2, [r3, #0]
		if (can_msg_counter > 4)
 8009fc2:	4b08      	ldr	r3, [pc, #32]	; (8009fe4 <Canbus_Task+0xb8>)
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	2b04      	cmp	r3, #4
 8009fc8:	d902      	bls.n	8009fd0 <Canbus_Task+0xa4>
			can_msg_counter = 0;
 8009fca:	4b06      	ldr	r3, [pc, #24]	; (8009fe4 <Canbus_Task+0xb8>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	701a      	strb	r2, [r3, #0]

		osDelay(100);
 8009fd0:	2064      	movs	r0, #100	; 0x64
 8009fd2:	f00e f8b7 	bl	8018144 <osDelay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8009fd6:	e7ab      	b.n	8009f30 <Canbus_Task+0x4>
 8009fd8:	40020800 	.word	0x40020800
 8009fdc:	20000abc 	.word	0x20000abc
 8009fe0:	20000ab8 	.word	0x20000ab8
 8009fe4:	20000ac0 	.word	0x20000ac0
 8009fe8:	2000229c 	.word	0x2000229c
 8009fec:	2000206c 	.word	0x2000206c
 8009ff0:	20002174 	.word	0x20002174
 8009ff4:	2000215c 	.word	0x2000215c
 8009ff8:	200021cc 	.word	0x200021cc

08009ffc <timTSACBus_Callback>:
	}
}

/* timTSACBus_Callback function */
void timTSACBus_Callback(void const * argument)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN timTSACBus_Callback */
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800a004:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a008:	4814      	ldr	r0, [pc, #80]	; (800a05c <timTSACBus_Callback+0x60>)
 800a00a:	f003 fed4 	bl	800ddb6 <HAL_GPIO_TogglePin>
	if((accuInfo.AIR_M_State == 1) && (accuInfo.AIR_P_State == 1))
 800a00e:	4b14      	ldr	r3, [pc, #80]	; (800a060 <timTSACBus_Callback+0x64>)
 800a010:	7b5b      	ldrb	r3, [r3, #13]
 800a012:	f003 0320 	and.w	r3, r3, #32
 800a016:	b2db      	uxtb	r3, r3
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d012      	beq.n	800a042 <timTSACBus_Callback+0x46>
 800a01c:	4b10      	ldr	r3, [pc, #64]	; (800a060 <timTSACBus_Callback+0x64>)
 800a01e:	7b5b      	ldrb	r3, [r3, #13]
 800a020:	f003 0310 	and.w	r3, r3, #16
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00b      	beq.n	800a042 <timTSACBus_Callback+0x46>
	{
		Elcon_CAN_Tx(&elcon, &bmsInfo);
 800a02a:	490e      	ldr	r1, [pc, #56]	; (800a064 <timTSACBus_Callback+0x68>)
 800a02c:	480e      	ldr	r0, [pc, #56]	; (800a068 <timTSACBus_Callback+0x6c>)
 800a02e:	f7f7 f955 	bl	80012dc <Elcon_CAN_Tx>
		Charger_CAN_Tx(&bmsInfo, &can_handler_tsac);  // For the charger's LCD display
 800a032:	490e      	ldr	r1, [pc, #56]	; (800a06c <timTSACBus_Callback+0x70>)
 800a034:	480b      	ldr	r0, [pc, #44]	; (800a064 <timTSACBus_Callback+0x68>)
 800a036:	f7f7 fadd 	bl	80015f4 <Charger_CAN_Tx>
		bmsInfo.mode = CHARGING;
 800a03a:	4b0a      	ldr	r3, [pc, #40]	; (800a064 <timTSACBus_Callback+0x68>)
 800a03c:	2201      	movs	r2, #1
 800a03e:	701a      	strb	r2, [r3, #0]
 800a040:	e007      	b.n	800a052 <timTSACBus_Callback+0x56>
	}
	else
	{
		Elcon_stop_charging(&elcon, &bmsInfo);
 800a042:	4908      	ldr	r1, [pc, #32]	; (800a064 <timTSACBus_Callback+0x68>)
 800a044:	4808      	ldr	r0, [pc, #32]	; (800a068 <timTSACBus_Callback+0x6c>)
 800a046:	f7f7 fac3 	bl	80015d0 <Elcon_stop_charging>
		bmsInfo.mode = STDBY;
 800a04a:	4b06      	ldr	r3, [pc, #24]	; (800a064 <timTSACBus_Callback+0x68>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END timTSACBus_Callback */
}
 800a050:	bf00      	nop
 800a052:	bf00      	nop
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	40020400 	.word	0x40020400
 800a060:	200021cc 	.word	0x200021cc
 800a064:	2000206c 	.word	0x2000206c
 800a068:	20002244 	.word	0x20002244
 800a06c:	20002270 	.word	0x20002270

0800a070 <ACCU_Error_Handler>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* Task that is notified only when an error from TSAC or AMS occurs */
void ACCU_Error_Handler()
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
  /* Infinite loop */
  for(;;)
  {
	  xTaskNotifyWait(0, 0xFFFFFFFF, &error_notification, portMAX_DELAY);
 800a076:	f04f 33ff 	mov.w	r3, #4294967295
 800a07a:	4a59      	ldr	r2, [pc, #356]	; (800a1e0 <ACCU_Error_Handler+0x170>)
 800a07c:	f04f 31ff 	mov.w	r1, #4294967295
 800a080:	2000      	movs	r0, #0
 800a082:	f010 fcb7 	bl	801a9f4 <xTaskNotifyWait>

	  uint8_t error = ((error_notification == PC_RELAY_IMPLAUSIBILITY && accuInfo.precharge_relay_error));
 800a086:	4b56      	ldr	r3, [pc, #344]	; (800a1e0 <ACCU_Error_Handler+0x170>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2b07      	cmp	r3, #7
 800a08c:	d109      	bne.n	800a0a2 <ACCU_Error_Handler+0x32>
 800a08e:	4b55      	ldr	r3, [pc, #340]	; (800a1e4 <ACCU_Error_Handler+0x174>)
 800a090:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a094:	f003 0301 	and.w	r3, r3, #1
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d001      	beq.n	800a0a2 <ACCU_Error_Handler+0x32>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e000      	b.n	800a0a4 <ACCU_Error_Handler+0x34>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	71fb      	strb	r3, [r7, #7]

	  if(error)
 800a0a6:	79fb      	ldrb	r3, [r7, #7]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d006      	beq.n	800a0ba <ACCU_Error_Handler+0x4a>
		  accuInfo.precharge_relay_error = true;
 800a0ac:	4a4d      	ldr	r2, [pc, #308]	; (800a1e4 <ACCU_Error_Handler+0x174>)
 800a0ae:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800a0b2:	f043 0301 	orr.w	r3, r3, #1
 800a0b6:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

	  error |= (error_notification == (AIR_P_STUCK|AIR_M_STUCK));
 800a0ba:	4b49      	ldr	r3, [pc, #292]	; (800a1e0 <ACCU_Error_Handler+0x170>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2b07      	cmp	r3, #7
 800a0c0:	bf0c      	ite	eq
 800a0c2:	2301      	moveq	r3, #1
 800a0c4:	2300      	movne	r3, #0
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	b25a      	sxtb	r2, r3
 800a0ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	b25b      	sxtb	r3, r3
 800a0d2:	71fb      	strb	r3, [r7, #7]
	  error |= (error_notification == AIR_P_STUCK);
 800a0d4:	4b42      	ldr	r3, [pc, #264]	; (800a1e0 <ACCU_Error_Handler+0x170>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b04      	cmp	r3, #4
 800a0da:	bf0c      	ite	eq
 800a0dc:	2301      	moveq	r3, #1
 800a0de:	2300      	movne	r3, #0
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	b25a      	sxtb	r2, r3
 800a0e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	b25b      	sxtb	r3, r3
 800a0ec:	71fb      	strb	r3, [r7, #7]
	  error |= (error_notification == AIR_M_STUCK);
 800a0ee:	4b3c      	ldr	r3, [pc, #240]	; (800a1e0 <ACCU_Error_Handler+0x170>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b03      	cmp	r3, #3
 800a0f4:	bf0c      	ite	eq
 800a0f6:	2301      	moveq	r3, #1
 800a0f8:	2300      	movne	r3, #0
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	b25a      	sxtb	r2, r3
 800a0fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a102:	4313      	orrs	r3, r2
 800a104:	b25b      	sxtb	r3, r3
 800a106:	71fb      	strb	r3, [r7, #7]
	  error |= (error_notification == AIR_M_STUCK);
 800a108:	4b35      	ldr	r3, [pc, #212]	; (800a1e0 <ACCU_Error_Handler+0x170>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b03      	cmp	r3, #3
 800a10e:	bf0c      	ite	eq
 800a110:	2301      	moveq	r3, #1
 800a112:	2300      	movne	r3, #0
 800a114:	b2db      	uxtb	r3, r3
 800a116:	b25a      	sxtb	r2, r3
 800a118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	b25b      	sxtb	r3, r3
 800a120:	71fb      	strb	r3, [r7, #7]
	  error |= (error_notification == AIR_M_IMPLAUSIBILITY);
 800a122:	4b2f      	ldr	r3, [pc, #188]	; (800a1e0 <ACCU_Error_Handler+0x170>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b05      	cmp	r3, #5
 800a128:	bf0c      	ite	eq
 800a12a:	2301      	moveq	r3, #1
 800a12c:	2300      	movne	r3, #0
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	b25a      	sxtb	r2, r3
 800a132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a136:	4313      	orrs	r3, r2
 800a138:	b25b      	sxtb	r3, r3
 800a13a:	71fb      	strb	r3, [r7, #7]
	  error |= (error_notification == AIR_P_IMPLAUSIBILITY);
 800a13c:	4b28      	ldr	r3, [pc, #160]	; (800a1e0 <ACCU_Error_Handler+0x170>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b06      	cmp	r3, #6
 800a142:	bf0c      	ite	eq
 800a144:	2301      	moveq	r3, #1
 800a146:	2300      	movne	r3, #0
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	b25a      	sxtb	r2, r3
 800a14c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a150:	4313      	orrs	r3, r2
 800a152:	b25b      	sxtb	r3, r3
 800a154:	71fb      	strb	r3, [r7, #7]
	  error |= (error_notification == PC_CIRCUIT_ERROR);
 800a156:	4b22      	ldr	r3, [pc, #136]	; (800a1e0 <ACCU_Error_Handler+0x170>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2b08      	cmp	r3, #8
 800a15c:	bf0c      	ite	eq
 800a15e:	2301      	moveq	r3, #1
 800a160:	2300      	movne	r3, #0
 800a162:	b2db      	uxtb	r3, r3
 800a164:	b25a      	sxtb	r2, r3
 800a166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	b25b      	sxtb	r3, r3
 800a16e:	71fb      	strb	r3, [r7, #7]
	  error |= (bmsInfo.state      != BMS_OK);
 800a170:	4b1d      	ldr	r3, [pc, #116]	; (800a1e8 <ACCU_Error_Handler+0x178>)
 800a172:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a176:	2b00      	cmp	r3, #0
 800a178:	bf14      	ite	ne
 800a17a:	2301      	movne	r3, #1
 800a17c:	2300      	moveq	r3, #0
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	b25a      	sxtb	r2, r3
 800a182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a186:	4313      	orrs	r3, r2
 800a188:	b25b      	sxtb	r3, r3
 800a18a:	71fb      	strb	r3, [r7, #7]

	  if(bmsInfo.BalInfo.state == on)
 800a18c:	4b16      	ldr	r3, [pc, #88]	; (800a1e8 <ACCU_Error_Handler+0x178>)
 800a18e:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 800a192:	2b01      	cmp	r3, #1
 800a194:	d105      	bne.n	800a1a2 <ACCU_Error_Handler+0x132>
		  stop_balancing(&bmsInfo, &master, slave_array, 3);
 800a196:	2303      	movs	r3, #3
 800a198:	4a14      	ldr	r2, [pc, #80]	; (800a1ec <ACCU_Error_Handler+0x17c>)
 800a19a:	4915      	ldr	r1, [pc, #84]	; (800a1f0 <ACCU_Error_Handler+0x180>)
 800a19c:	4812      	ldr	r0, [pc, #72]	; (800a1e8 <ACCU_Error_Handler+0x178>)
 800a19e:	f7fa fbe1 	bl	8004964 <stop_balancing>

	  /* In case of a preCharge relay error, open BMS SD relay and AIR+ driver */
	  if(error)
 800a1a2:	79fb      	ldrb	r3, [r7, #7]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d016      	beq.n	800a1d6 <ACCU_Error_Handler+0x166>
	  {
		  ams_fault(&master, &accuInfo);
 800a1a8:	490e      	ldr	r1, [pc, #56]	; (800a1e4 <ACCU_Error_Handler+0x174>)
 800a1aa:	4811      	ldr	r0, [pc, #68]	; (800a1f0 <ACCU_Error_Handler+0x180>)
 800a1ac:	f7f8 fbf2 	bl	8002994 <ams_fault>
		  HAL_GPIO_WritePin(accuInfo.AIR_P_Driver, accuInfo.AIR_P_Driver_pin, GPIO_PIN_RESET);
 800a1b0:	4b0c      	ldr	r3, [pc, #48]	; (800a1e4 <ACCU_Error_Handler+0x174>)
 800a1b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1b4:	4a0b      	ldr	r2, [pc, #44]	; (800a1e4 <ACCU_Error_Handler+0x174>)
 800a1b6:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f003 fde1 	bl	800dd84 <HAL_GPIO_WritePin>
		  bmsInfo.charge_flag = 0;
 800a1c2:	4b09      	ldr	r3, [pc, #36]	; (800a1e8 <ACCU_Error_Handler+0x178>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		  bmsInfo.target_charge_current = 0;
 800a1ca:	4b07      	ldr	r3, [pc, #28]	; (800a1e8 <ACCU_Error_Handler+0x178>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	849a      	strh	r2, [r3, #36]	; 0x24
		  osDelay(1);
 800a1d0:	2001      	movs	r0, #1
 800a1d2:	f00d ffb7 	bl	8018144 <osDelay>
	  }
	  osDelay(10);
 800a1d6:	200a      	movs	r0, #10
 800a1d8:	f00d ffb4 	bl	8018144 <osDelay>
  {
 800a1dc:	e74b      	b.n	800a076 <ACCU_Error_Handler+0x6>
 800a1de:	bf00      	nop
 800a1e0:	20000acc 	.word	0x20000acc
 800a1e4:	200021cc 	.word	0x200021cc
 800a1e8:	2000206c 	.word	0x2000206c
 800a1ec:	200012ec 	.word	0x200012ec
 800a1f0:	20001298 	.word	0x20001298

0800a1f4 <read_Inputs_Task>:
}


/* Task that constantly runs on reading AIR status, IMD status & Pre-Charge relay status */
void read_Inputs_Task()
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	af00      	add	r7, sp, #0
  /* Infinite loop */
  for(;;)
  {
	  /* Reading AVI opto-coupler output, concerning if the voltage at vehicle side is over 60V. */
	  accuInfo.over60V_dclink = HAL_GPIO_ReadPin(accuInfo.VS_OVER60V, accuInfo.VS_OVER60V_Pin);
 800a1f8:	4ba0      	ldr	r3, [pc, #640]	; (800a47c <read_Inputs_Task+0x288>)
 800a1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fc:	4a9f      	ldr	r2, [pc, #636]	; (800a47c <read_Inputs_Task+0x288>)
 800a1fe:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800a200:	4611      	mov	r1, r2
 800a202:	4618      	mov	r0, r3
 800a204:	f003 fda6 	bl	800dd54 <HAL_GPIO_ReadPin>
 800a208:	4603      	mov	r3, r0
 800a20a:	f003 0301 	and.w	r3, r3, #1
 800a20e:	b2d9      	uxtb	r1, r3
 800a210:	4a9a      	ldr	r2, [pc, #616]	; (800a47c <read_Inputs_Task+0x288>)
 800a212:	7b53      	ldrb	r3, [r2, #13]
 800a214:	f361 1386 	bfi	r3, r1, #6, #1
 800a218:	7353      	strb	r3, [r2, #13]

	  /* Reading PreCharge actual state based on PicKering's mechanical state */
	  accuInfo.precharge_actual_state
	  = !(HAL_GPIO_ReadPin(accuInfo.PC_Indicator, accuInfo.PC_Indicator_Pin));
 800a21a:	4b98      	ldr	r3, [pc, #608]	; (800a47c <read_Inputs_Task+0x288>)
 800a21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21e:	4a97      	ldr	r2, [pc, #604]	; (800a47c <read_Inputs_Task+0x288>)
 800a220:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800a222:	4611      	mov	r1, r2
 800a224:	4618      	mov	r0, r3
 800a226:	f003 fd95 	bl	800dd54 <HAL_GPIO_ReadPin>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	bf0c      	ite	eq
 800a230:	2301      	moveq	r3, #1
 800a232:	2300      	movne	r3, #0
 800a234:	b2db      	uxtb	r3, r3
 800a236:	461a      	mov	r2, r3
 800a238:	4b90      	ldr	r3, [pc, #576]	; (800a47c <read_Inputs_Task+0x288>)
 800a23a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	  /* Reading AIR's status */
	  accuInfo.AIR_M_Supp  = HAL_GPIO_ReadPin(accuInfo.AIR_M_Supp_3V,  accuInfo.AIR_M_Supp_3V_pin);
 800a23e:	4b8f      	ldr	r3, [pc, #572]	; (800a47c <read_Inputs_Task+0x288>)
 800a240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a242:	4a8e      	ldr	r2, [pc, #568]	; (800a47c <read_Inputs_Task+0x288>)
 800a244:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800a248:	4611      	mov	r1, r2
 800a24a:	4618      	mov	r0, r3
 800a24c:	f003 fd82 	bl	800dd54 <HAL_GPIO_ReadPin>
 800a250:	4603      	mov	r3, r0
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	b2d9      	uxtb	r1, r3
 800a258:	4a88      	ldr	r2, [pc, #544]	; (800a47c <read_Inputs_Task+0x288>)
 800a25a:	7b53      	ldrb	r3, [r2, #13]
 800a25c:	f361 03c3 	bfi	r3, r1, #3, #1
 800a260:	7353      	strb	r3, [r2, #13]
	  accuInfo.AIR_M_State = HAL_GPIO_ReadPin(accuInfo.AIR_M_State_3V, accuInfo.AIR_M_State_3V_pin);
 800a262:	4b86      	ldr	r3, [pc, #536]	; (800a47c <read_Inputs_Task+0x288>)
 800a264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a266:	4a85      	ldr	r2, [pc, #532]	; (800a47c <read_Inputs_Task+0x288>)
 800a268:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 800a26c:	4611      	mov	r1, r2
 800a26e:	4618      	mov	r0, r3
 800a270:	f003 fd70 	bl	800dd54 <HAL_GPIO_ReadPin>
 800a274:	4603      	mov	r3, r0
 800a276:	f003 0301 	and.w	r3, r3, #1
 800a27a:	b2d9      	uxtb	r1, r3
 800a27c:	4a7f      	ldr	r2, [pc, #508]	; (800a47c <read_Inputs_Task+0x288>)
 800a27e:	7b53      	ldrb	r3, [r2, #13]
 800a280:	f361 1345 	bfi	r3, r1, #5, #1
 800a284:	7353      	strb	r3, [r2, #13]
	  accuInfo.AIR_P_Supp  = HAL_GPIO_ReadPin(accuInfo.AIR_P_Supp_3V,  accuInfo.AIR_P_Supp_3V_pin);
 800a286:	4b7d      	ldr	r3, [pc, #500]	; (800a47c <read_Inputs_Task+0x288>)
 800a288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a28a:	4a7c      	ldr	r2, [pc, #496]	; (800a47c <read_Inputs_Task+0x288>)
 800a28c:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800a290:	4611      	mov	r1, r2
 800a292:	4618      	mov	r0, r3
 800a294:	f003 fd5e 	bl	800dd54 <HAL_GPIO_ReadPin>
 800a298:	4603      	mov	r3, r0
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	b2d9      	uxtb	r1, r3
 800a2a0:	4a76      	ldr	r2, [pc, #472]	; (800a47c <read_Inputs_Task+0x288>)
 800a2a2:	7b53      	ldrb	r3, [r2, #13]
 800a2a4:	f361 0382 	bfi	r3, r1, #2, #1
 800a2a8:	7353      	strb	r3, [r2, #13]
	  accuInfo.AIR_P_State = HAL_GPIO_ReadPin(accuInfo.AIR_P_State_3V, accuInfo.AIR_P_State_3V_pin);
 800a2aa:	4b74      	ldr	r3, [pc, #464]	; (800a47c <read_Inputs_Task+0x288>)
 800a2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ae:	4a73      	ldr	r2, [pc, #460]	; (800a47c <read_Inputs_Task+0x288>)
 800a2b0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f003 fd4c 	bl	800dd54 <HAL_GPIO_ReadPin>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	b2d9      	uxtb	r1, r3
 800a2c4:	4a6d      	ldr	r2, [pc, #436]	; (800a47c <read_Inputs_Task+0x288>)
 800a2c6:	7b53      	ldrb	r3, [r2, #13]
 800a2c8:	f361 1304 	bfi	r3, r1, #4, #1
 800a2cc:	7353      	strb	r3, [r2, #13]

	  /* Check AIR- Supply */
	  if(accuInfo.AIR_M_Supp)
 800a2ce:	4b6b      	ldr	r3, [pc, #428]	; (800a47c <read_Inputs_Task+0x288>)
 800a2d0:	7b5b      	ldrb	r3, [r3, #13]
 800a2d2:	f003 0308 	and.w	r3, r3, #8
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d006      	beq.n	800a2ea <read_Inputs_Task+0xf6>
	  {
		  xEventGroupSetBits(xPreCharge_EventGroup, AIR_M_SUPP);
 800a2dc:	4b68      	ldr	r3, [pc, #416]	; (800a480 <read_Inputs_Task+0x28c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2102      	movs	r1, #2
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f00e f9e0 	bl	80186a8 <xEventGroupSetBits>
 800a2e8:	e029      	b.n	800a33e <read_Inputs_Task+0x14a>
	  }
	  else
	  {
		  /* In case of an open SD flag, we reset the appropriate flags */
		  HAL_GPIO_WritePin(accuInfo.AIR_P_Driver, accuInfo.AIR_P_Driver_pin, GPIO_PIN_RESET);
 800a2ea:	4b64      	ldr	r3, [pc, #400]	; (800a47c <read_Inputs_Task+0x288>)
 800a2ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2ee:	4a63      	ldr	r2, [pc, #396]	; (800a47c <read_Inputs_Task+0x288>)
 800a2f0:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f003 fd44 	bl	800dd84 <HAL_GPIO_WritePin>
		  xEventGroupClearBits(xPreCharge_EventGroup, AIR_M_SUPP|PC_DONE);
 800a2fc:	4b60      	ldr	r3, [pc, #384]	; (800a480 <read_Inputs_Task+0x28c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2142      	movs	r1, #66	; 0x42
 800a302:	4618      	mov	r0, r3
 800a304:	f00e f998 	bl	8018638 <xEventGroupClearBits>
		  xEventGroupSetBits(xPreCharge_EventGroup, TS_INACTIVE);
 800a308:	4b5d      	ldr	r3, [pc, #372]	; (800a480 <read_Inputs_Task+0x28c>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2101      	movs	r1, #1
 800a30e:	4618      	mov	r0, r3
 800a310:	f00e f9ca 	bl	80186a8 <xEventGroupSetBits>

		  /* If SD opens the DC_Link will be discharged, so we need to reset all TS flags */
		  accuInfo.ts_active = false;
 800a314:	4a59      	ldr	r2, [pc, #356]	; (800a47c <read_Inputs_Task+0x288>)
 800a316:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800a31a:	f36f 0382 	bfc	r3, #2, #1
 800a31e:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
		  accuInfo.precharge_done = 0;
 800a322:	4a56      	ldr	r2, [pc, #344]	; (800a47c <read_Inputs_Task+0x288>)
 800a324:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800a328:	f36f 03c3 	bfc	r3, #3, #1
 800a32c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
		  accuInfo.precharge_failed = 0;
 800a330:	4a52      	ldr	r2, [pc, #328]	; (800a47c <read_Inputs_Task+0x288>)
 800a332:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800a336:	f36f 1304 	bfc	r3, #4, #1
 800a33a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	  }

	  /* Check AIR- State */
	  if(accuInfo.AIR_M_State)
 800a33e:	4b4f      	ldr	r3, [pc, #316]	; (800a47c <read_Inputs_Task+0x288>)
 800a340:	7b5b      	ldrb	r3, [r3, #13]
 800a342:	f003 0320 	and.w	r3, r3, #32
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00b      	beq.n	800a364 <read_Inputs_Task+0x170>
	  {
		 xEventGroupSetBits(xPreCharge_EventGroup, AIR_M_STATE);
 800a34c:	4b4c      	ldr	r3, [pc, #304]	; (800a480 <read_Inputs_Task+0x28c>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2104      	movs	r1, #4
 800a352:	4618      	mov	r0, r3
 800a354:	f00e f9a8 	bl	80186a8 <xEventGroupSetBits>
		 accuInfo.AIR_M_closed_time = xTaskGetTickCount();
 800a358:	f00f fda0 	bl	8019e9c <xTaskGetTickCount>
 800a35c:	4603      	mov	r3, r0
 800a35e:	4a47      	ldr	r2, [pc, #284]	; (800a47c <read_Inputs_Task+0x288>)
 800a360:	6213      	str	r3, [r2, #32]
 800a362:	e005      	b.n	800a370 <read_Inputs_Task+0x17c>
	  }
	  else
		  xEventGroupClearBits(xPreCharge_EventGroup, AIR_M_STATE);
 800a364:	4b46      	ldr	r3, [pc, #280]	; (800a480 <read_Inputs_Task+0x28c>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2104      	movs	r1, #4
 800a36a:	4618      	mov	r0, r3
 800a36c:	f00e f964 	bl	8018638 <xEventGroupClearBits>

	  /* Check AIR+ Supply */
	  if(accuInfo.AIR_P_Supp)
 800a370:	4b42      	ldr	r3, [pc, #264]	; (800a47c <read_Inputs_Task+0x288>)
 800a372:	7b5b      	ldrb	r3, [r3, #13]
 800a374:	f003 0304 	and.w	r3, r3, #4
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d006      	beq.n	800a38c <read_Inputs_Task+0x198>
		  xEventGroupSetBits(xPreCharge_EventGroup, AIR_P_SUPP);
 800a37e:	4b40      	ldr	r3, [pc, #256]	; (800a480 <read_Inputs_Task+0x28c>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2108      	movs	r1, #8
 800a384:	4618      	mov	r0, r3
 800a386:	f00e f98f 	bl	80186a8 <xEventGroupSetBits>
 800a38a:	e005      	b.n	800a398 <read_Inputs_Task+0x1a4>
	  else
		  xEventGroupClearBits(xPreCharge_EventGroup, AIR_P_SUPP);
 800a38c:	4b3c      	ldr	r3, [pc, #240]	; (800a480 <read_Inputs_Task+0x28c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2108      	movs	r1, #8
 800a392:	4618      	mov	r0, r3
 800a394:	f00e f950 	bl	8018638 <xEventGroupClearBits>

	  /* Check AIR+ State */
	  if(accuInfo.AIR_P_State)
 800a398:	4b38      	ldr	r3, [pc, #224]	; (800a47c <read_Inputs_Task+0x288>)
 800a39a:	7b5b      	ldrb	r3, [r3, #13]
 800a39c:	f003 0310 	and.w	r3, r3, #16
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d006      	beq.n	800a3b4 <read_Inputs_Task+0x1c0>
	  {
		  xEventGroupSetBits(xPreCharge_EventGroup, AIR_P_STATE);
 800a3a6:	4b36      	ldr	r3, [pc, #216]	; (800a480 <read_Inputs_Task+0x28c>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2110      	movs	r1, #16
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f00e f97b 	bl	80186a8 <xEventGroupSetBits>
 800a3b2:	e005      	b.n	800a3c0 <read_Inputs_Task+0x1cc>
	  }
	  else
	  {
		  xEventGroupClearBits(xPreCharge_EventGroup, AIR_P_STATE);
 800a3b4:	4b32      	ldr	r3, [pc, #200]	; (800a480 <read_Inputs_Task+0x28c>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2110      	movs	r1, #16
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f00e f93c 	bl	8018638 <xEventGroupClearBits>
	  }
	  /* OVER_60V flag is set when VS voltage reaches at least 60V, so we know that PreCharge
	   * has started. Moreover, we want to show that TS is now active, so we reset TS_OFF flag */
	  if(accuInfo.over60V_dclink)
 800a3c0:	4b2e      	ldr	r3, [pc, #184]	; (800a47c <read_Inputs_Task+0x288>)
 800a3c2:	7b5b      	ldrb	r3, [r3, #13]
 800a3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00c      	beq.n	800a3e8 <read_Inputs_Task+0x1f4>
	  {
		  xEventGroupClearBits(xTS_Off_EventGroup, TS_OFF);
 800a3ce:	4b2d      	ldr	r3, [pc, #180]	; (800a484 <read_Inputs_Task+0x290>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f00e f92f 	bl	8018638 <xEventGroupClearBits>
		  xEventGroupSetBits(xPreCharge_EventGroup, OVER_60V);
 800a3da:	4b29      	ldr	r3, [pc, #164]	; (800a480 <read_Inputs_Task+0x28c>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2120      	movs	r1, #32
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f00e f961 	bl	80186a8 <xEventGroupSetBits>
 800a3e6:	e00b      	b.n	800a400 <read_Inputs_Task+0x20c>
	  }
	  else
	  {
		  xEventGroupSetBits(xTS_Off_EventGroup, TS_OFF);
 800a3e8:	4b26      	ldr	r3, [pc, #152]	; (800a484 <read_Inputs_Task+0x290>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f00e f95a 	bl	80186a8 <xEventGroupSetBits>
		  xEventGroupClearBits(xPreCharge_EventGroup, OVER_60V);
 800a3f4:	4b22      	ldr	r3, [pc, #136]	; (800a480 <read_Inputs_Task+0x28c>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2120      	movs	r1, #32
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f00e f91c 	bl	8018638 <xEventGroupClearBits>
	  }
	  /* Pre-Charge Relay Error Handling:
	   * Must be constantly checked so as to provide that P23 won't start PreCharge,
	   * if the PC relay in on the wrong mechanical state */
	  if(accuInfo.precharge_actual_state != accuInfo.AIR_M_Supp)
 800a400:	4b1e      	ldr	r3, [pc, #120]	; (800a47c <read_Inputs_Task+0x288>)
 800a402:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a406:	4a1d      	ldr	r2, [pc, #116]	; (800a47c <read_Inputs_Task+0x288>)
 800a408:	7b52      	ldrb	r2, [r2, #13]
 800a40a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800a40e:	b2d2      	uxtb	r2, r2
 800a410:	4293      	cmp	r3, r2
 800a412:	d03f      	beq.n	800a494 <read_Inputs_Task+0x2a0>
	  {
		  if(counter_pc_error == 0)
 800a414:	4b1c      	ldr	r3, [pc, #112]	; (800a488 <read_Inputs_Task+0x294>)
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10a      	bne.n	800a432 <read_Inputs_Task+0x23e>
		  {
			  accuInfo.tick_PC_Error = xTaskGetTickCount();
 800a41c:	f00f fd3e 	bl	8019e9c <xTaskGetTickCount>
 800a420:	4603      	mov	r3, r0
 800a422:	4a16      	ldr	r2, [pc, #88]	; (800a47c <read_Inputs_Task+0x288>)
 800a424:	6713      	str	r3, [r2, #112]	; 0x70
			  counter_pc_error++;
 800a426:	4b18      	ldr	r3, [pc, #96]	; (800a488 <read_Inputs_Task+0x294>)
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	3301      	adds	r3, #1
 800a42c:	b2da      	uxtb	r2, r3
 800a42e:	4b16      	ldr	r3, [pc, #88]	; (800a488 <read_Inputs_Task+0x294>)
 800a430:	701a      	strb	r2, [r3, #0]
		  }

		  if(xTaskGetTickCount() - accuInfo.tick_PC_Error > PC_IMPLAUSIBILITY_TIME)
 800a432:	f00f fd33 	bl	8019e9c <xTaskGetTickCount>
 800a436:	4602      	mov	r2, r0
 800a438:	4b10      	ldr	r3, [pc, #64]	; (800a47c <read_Inputs_Task+0x288>)
 800a43a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	4a13      	ldr	r2, [pc, #76]	; (800a48c <read_Inputs_Task+0x298>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d942      	bls.n	800a4ca <read_Inputs_Task+0x2d6>
		  {
			  xEventGroupSetBits(xPreCharge_EventGroup, PC_RELAY_ERROR);
 800a444:	4b0e      	ldr	r3, [pc, #56]	; (800a480 <read_Inputs_Task+0x28c>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2180      	movs	r1, #128	; 0x80
 800a44a:	4618      	mov	r0, r3
 800a44c:	f00e f92c 	bl	80186a8 <xEventGroupSetBits>
			  accuInfo.precharge_relay_error = true;
 800a450:	4a0a      	ldr	r2, [pc, #40]	; (800a47c <read_Inputs_Task+0x288>)
 800a452:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800a456:	f043 0301 	orr.w	r3, r3, #1
 800a45a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
			  accuInfo.state 	  = PC_RELAY_IMPLAUSIBILITY;
 800a45e:	4b07      	ldr	r3, [pc, #28]	; (800a47c <read_Inputs_Task+0x288>)
 800a460:	2207      	movs	r2, #7
 800a462:	701a      	strb	r2, [r3, #0]
			  accuInfo.last_error = PC_RELAY_IMPLAUSIBILITY;
 800a464:	4b05      	ldr	r3, [pc, #20]	; (800a47c <read_Inputs_Task+0x288>)
 800a466:	2207      	movs	r2, #7
 800a468:	705a      	strb	r2, [r3, #1]
			  xTaskNotify(ACCU_Error_Handle, PC_RELAY_IMPLAUSIBILITY, eSetValueWithOverwrite);
 800a46a:	4b09      	ldr	r3, [pc, #36]	; (800a490 <read_Inputs_Task+0x29c>)
 800a46c:	6818      	ldr	r0, [r3, #0]
 800a46e:	2300      	movs	r3, #0
 800a470:	2203      	movs	r2, #3
 800a472:	2107      	movs	r1, #7
 800a474:	f010 fb1e 	bl	801aab4 <xTaskGenericNotify>
 800a478:	e027      	b.n	800a4ca <read_Inputs_Task+0x2d6>
 800a47a:	bf00      	nop
 800a47c:	200021cc 	.word	0x200021cc
 800a480:	20000a9c 	.word	0x20000a9c
 800a484:	20000aa8 	.word	0x20000aa8
 800a488:	20000b4c 	.word	0x20000b4c
 800a48c:	000186a0 	.word	0x000186a0
 800a490:	20000a70 	.word	0x20000a70
		  }
	  }
	  else if(accuInfo.precharge_actual_state == accuInfo.AIR_M_Supp && !accuInfo.precharge_relay_error)
 800a494:	4b30      	ldr	r3, [pc, #192]	; (800a558 <read_Inputs_Task+0x364>)
 800a496:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a49a:	4a2f      	ldr	r2, [pc, #188]	; (800a558 <read_Inputs_Task+0x364>)
 800a49c:	7b52      	ldrb	r2, [r2, #13]
 800a49e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800a4a2:	b2d2      	uxtb	r2, r2
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d110      	bne.n	800a4ca <read_Inputs_Task+0x2d6>
 800a4a8:	4b2b      	ldr	r3, [pc, #172]	; (800a558 <read_Inputs_Task+0x364>)
 800a4aa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d108      	bne.n	800a4ca <read_Inputs_Task+0x2d6>
	  {
		  counter_pc_error = 0;
 800a4b8:	4b28      	ldr	r3, [pc, #160]	; (800a55c <read_Inputs_Task+0x368>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	701a      	strb	r2, [r3, #0]
		  xEventGroupClearBits(xPreCharge_EventGroup, PC_RELAY_ERROR);
 800a4be:	4b28      	ldr	r3, [pc, #160]	; (800a560 <read_Inputs_Task+0x36c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2180      	movs	r1, #128	; 0x80
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f00e f8b7 	bl	8018638 <xEventGroupClearBits>
	  }

	  /* Take Actions concerning all possible TSAC Errors:
	   * On the background AIR checks and Pre-Charge procedure will continue */
	  accuInfo.imd_error = !HAL_GPIO_ReadPin(accuInfo.IMD_ok, accuInfo.IMD_ok_Pin);
 800a4ca:	4b23      	ldr	r3, [pc, #140]	; (800a558 <read_Inputs_Task+0x364>)
 800a4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ce:	4a22      	ldr	r2, [pc, #136]	; (800a558 <read_Inputs_Task+0x364>)
 800a4d0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f003 fc3d 	bl	800dd54 <HAL_GPIO_ReadPin>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	bf0c      	ite	eq
 800a4e0:	2301      	moveq	r3, #1
 800a4e2:	2300      	movne	r3, #0
 800a4e4:	b2d9      	uxtb	r1, r3
 800a4e6:	4a1c      	ldr	r2, [pc, #112]	; (800a558 <read_Inputs_Task+0x364>)
 800a4e8:	7b53      	ldrb	r3, [r2, #13]
 800a4ea:	f361 0341 	bfi	r3, r1, #1, #1
 800a4ee:	7353      	strb	r3, [r2, #13]
	  if(accuInfo.imd_error)
 800a4f0:	4b19      	ldr	r3, [pc, #100]	; (800a558 <read_Inputs_Task+0x364>)
 800a4f2:	7b5b      	ldrb	r3, [r3, #13]
 800a4f4:	f003 0302 	and.w	r3, r3, #2
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00d      	beq.n	800a51a <read_Inputs_Task+0x326>
	  {
		  accuInfo.state	  = IMD_ERROR;	/* Verify IMD_ERROR */
 800a4fe:	4b16      	ldr	r3, [pc, #88]	; (800a558 <read_Inputs_Task+0x364>)
 800a500:	2201      	movs	r2, #1
 800a502:	701a      	strb	r2, [r3, #0]
		  accuInfo.last_error = IMD_ERROR;
 800a504:	4b14      	ldr	r3, [pc, #80]	; (800a558 <read_Inputs_Task+0x364>)
 800a506:	2201      	movs	r2, #1
 800a508:	705a      	strb	r2, [r3, #1]
		  xTaskNotify(ACCU_Error_Handle, IMD_ERROR, eSetValueWithOverwrite);
 800a50a:	4b16      	ldr	r3, [pc, #88]	; (800a564 <read_Inputs_Task+0x370>)
 800a50c:	6818      	ldr	r0, [r3, #0]
 800a50e:	2300      	movs	r3, #0
 800a510:	2203      	movs	r2, #3
 800a512:	2101      	movs	r1, #1
 800a514:	f010 face 	bl	801aab4 <xTaskGenericNotify>
 800a518:	e006      	b.n	800a528 <read_Inputs_Task+0x334>
	  }
	  else if (accuInfo.state == IMD_ERROR) /* Resets only an IMD_ERROR */
 800a51a:	4b0f      	ldr	r3, [pc, #60]	; (800a558 <read_Inputs_Task+0x364>)
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d102      	bne.n	800a528 <read_Inputs_Task+0x334>
	  {
		  accuInfo.state = TSAC_OK;
 800a522:	4b0d      	ldr	r3, [pc, #52]	; (800a558 <read_Inputs_Task+0x364>)
 800a524:	2200      	movs	r2, #0
 800a526:	701a      	strb	r2, [r3, #0]
	  }

	  /* Check the PreCharge Event_Bits & TS_OFF Event bits that were set at this moment */
	  PreCharge_EventBits_now_set = xEventGroupGetBits(xPreCharge_EventGroup);
 800a528:	4b0d      	ldr	r3, [pc, #52]	; (800a560 <read_Inputs_Task+0x36c>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2100      	movs	r1, #0
 800a52e:	4618      	mov	r0, r3
 800a530:	f00e f882 	bl	8018638 <xEventGroupClearBits>
 800a534:	4603      	mov	r3, r0
 800a536:	b2da      	uxtb	r2, r3
 800a538:	4b0b      	ldr	r3, [pc, #44]	; (800a568 <read_Inputs_Task+0x374>)
 800a53a:	701a      	strb	r2, [r3, #0]
	  TS_Off_EventBits_now_set	  = xEventGroupGetBits(xTS_Off_EventGroup);
 800a53c:	4b0b      	ldr	r3, [pc, #44]	; (800a56c <read_Inputs_Task+0x378>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2100      	movs	r1, #0
 800a542:	4618      	mov	r0, r3
 800a544:	f00e f878 	bl	8018638 <xEventGroupClearBits>
 800a548:	4603      	mov	r3, r0
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	4b08      	ldr	r3, [pc, #32]	; (800a570 <read_Inputs_Task+0x37c>)
 800a54e:	701a      	strb	r2, [r3, #0]
	  osDelay(100);
 800a550:	2064      	movs	r0, #100	; 0x64
 800a552:	f00d fdf7 	bl	8018144 <osDelay>
	  accuInfo.over60V_dclink = HAL_GPIO_ReadPin(accuInfo.VS_OVER60V, accuInfo.VS_OVER60V_Pin);
 800a556:	e64f      	b.n	800a1f8 <read_Inputs_Task+0x4>
 800a558:	200021cc 	.word	0x200021cc
 800a55c:	20000b4c 	.word	0x20000b4c
 800a560:	20000a9c 	.word	0x20000a9c
 800a564:	20000a70 	.word	0x20000a70
 800a568:	20000aa4 	.word	0x20000aa4
 800a56c:	20000aa8 	.word	0x20000aa8
 800a570:	20000ab0 	.word	0x20000ab0

0800a574 <TS_OFF_Check>:
}


/* Checking constantly while SD has not closed that an AIR is stuck & notify BMS Errors */
void TS_OFF_Check()
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af02      	add	r7, sp, #8
	for(;;)
	{
		/* TS_OFF Task is blocked until SD is opened at some point,
		 * so AIR_M_Supply is 0V: Initial or during error situation */
		xEventGroupWaitBits(xTS_Off_EventGroup, TS_OFF, pdTRUE, pdTRUE, portMAX_DELAY);
 800a57a:	4b33      	ldr	r3, [pc, #204]	; (800a648 <TS_OFF_Check+0xd4>)
 800a57c:	6818      	ldr	r0, [r3, #0]
 800a57e:	f04f 33ff 	mov.w	r3, #4294967295
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	2301      	movs	r3, #1
 800a586:	2201      	movs	r2, #1
 800a588:	2101      	movs	r1, #1
 800a58a:	f00d ff87 	bl	801849c <xEventGroupWaitBits>
		xEventGroupWaitBits(xTS_Off_EventGroup, AIRM_STATE|AIRP_STATE, pdTRUE, pdFALSE, portMAX_DELAY);
 800a58e:	4b2e      	ldr	r3, [pc, #184]	; (800a648 <TS_OFF_Check+0xd4>)
 800a590:	6818      	ldr	r0, [r3, #0]
 800a592:	f04f 33ff 	mov.w	r3, #4294967295
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	2300      	movs	r3, #0
 800a59a:	2201      	movs	r2, #1
 800a59c:	2106      	movs	r1, #6
 800a59e:	f00d ff7d 	bl	801849c <xEventGroupWaitBits>
		osDelay(50);
 800a5a2:	2032      	movs	r0, #50	; 0x32
 800a5a4:	f00d fdce 	bl	8018144 <osDelay>
		/* Don't clear TS_OFF on exit: It must only be cleared from
		 * OVER_60V flag that indicates preCharge has started
		 * When the task is unblocked it will check only the AIR's Stuck situation
		 * If this situation exists for more than STUCK_AIR_INTERVAL, then show
		 * AIR Stuck error */
		if(TS_Off_EventBits == AIRP_STATE || TS_Off_EventBits == AIRM_STATE)
 800a5a8:	4b28      	ldr	r3, [pc, #160]	; (800a64c <TS_OFF_Check+0xd8>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b04      	cmp	r3, #4
 800a5ae:	d003      	beq.n	800a5b8 <TS_OFF_Check+0x44>
 800a5b0:	4b26      	ldr	r3, [pc, #152]	; (800a64c <TS_OFF_Check+0xd8>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d142      	bne.n	800a63e <TS_OFF_Check+0xca>
		{
			if(counter_air_stuck == 0)
 800a5b8:	4b25      	ldr	r3, [pc, #148]	; (800a650 <TS_OFF_Check+0xdc>)
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10a      	bne.n	800a5d6 <TS_OFF_Check+0x62>
			{
				counter_air_stuck++;
 800a5c0:	4b23      	ldr	r3, [pc, #140]	; (800a650 <TS_OFF_Check+0xdc>)
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	b2da      	uxtb	r2, r3
 800a5c8:	4b21      	ldr	r3, [pc, #132]	; (800a650 <TS_OFF_Check+0xdc>)
 800a5ca:	701a      	strb	r2, [r3, #0]
				accuInfo.tick_AIR_Stuck = xTaskGetTickCount();
 800a5cc:	f00f fc66 	bl	8019e9c <xTaskGetTickCount>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	4a20      	ldr	r2, [pc, #128]	; (800a654 <TS_OFF_Check+0xe0>)
 800a5d4:	6753      	str	r3, [r2, #116]	; 0x74
			}

			/* In case AIR stuck situation is persistent for enough time */
			if(xTaskGetTickCount() - accuInfo.tick_AIR_Stuck > STUCK_AIR_INTERVAL)
 800a5d6:	f00f fc61 	bl	8019e9c <xTaskGetTickCount>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	4b1d      	ldr	r3, [pc, #116]	; (800a654 <TS_OFF_Check+0xe0>)
 800a5de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	4a1d      	ldr	r2, [pc, #116]	; (800a658 <TS_OFF_Check+0xe4>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d92a      	bls.n	800a63e <TS_OFF_Check+0xca>
			{
				accuInfo.air_stuck = true;
 800a5e8:	4a1a      	ldr	r2, [pc, #104]	; (800a654 <TS_OFF_Check+0xe0>)
 800a5ea:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800a5ee:	f043 0302 	orr.w	r3, r3, #2
 800a5f2:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

				if(accuInfo.AIR_M_State)
 800a5f6:	4b17      	ldr	r3, [pc, #92]	; (800a654 <TS_OFF_Check+0xe0>)
 800a5f8:	7b5b      	ldrb	r3, [r3, #13]
 800a5fa:	f003 0320 	and.w	r3, r3, #32
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	2b00      	cmp	r3, #0
 800a602:	d006      	beq.n	800a612 <TS_OFF_Check+0x9e>
				{
					accuInfo.state 		= AIR_M_STUCK;
 800a604:	4b13      	ldr	r3, [pc, #76]	; (800a654 <TS_OFF_Check+0xe0>)
 800a606:	2203      	movs	r2, #3
 800a608:	701a      	strb	r2, [r3, #0]
					accuInfo.last_error = AIR_M_STUCK;
 800a60a:	4b12      	ldr	r3, [pc, #72]	; (800a654 <TS_OFF_Check+0xe0>)
 800a60c:	2203      	movs	r2, #3
 800a60e:	705a      	strb	r2, [r3, #1]
 800a610:	e00c      	b.n	800a62c <TS_OFF_Check+0xb8>
				}

				else if(accuInfo.AIR_P_State)
 800a612:	4b10      	ldr	r3, [pc, #64]	; (800a654 <TS_OFF_Check+0xe0>)
 800a614:	7b5b      	ldrb	r3, [r3, #13]
 800a616:	f003 0310 	and.w	r3, r3, #16
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d005      	beq.n	800a62c <TS_OFF_Check+0xb8>
				{
					accuInfo.state 		= AIR_P_STUCK;
 800a620:	4b0c      	ldr	r3, [pc, #48]	; (800a654 <TS_OFF_Check+0xe0>)
 800a622:	2204      	movs	r2, #4
 800a624:	701a      	strb	r2, [r3, #0]
					accuInfo.last_error = AIR_P_STUCK;
 800a626:	4b0b      	ldr	r3, [pc, #44]	; (800a654 <TS_OFF_Check+0xe0>)
 800a628:	2204      	movs	r2, #4
 800a62a:	705a      	strb	r2, [r3, #1]
				}

				xTaskNotify(ACCU_Error_Handle, accuInfo.state, eSetValueWithOverwrite);
 800a62c:	4b0b      	ldr	r3, [pc, #44]	; (800a65c <TS_OFF_Check+0xe8>)
 800a62e:	6818      	ldr	r0, [r3, #0]
 800a630:	4b08      	ldr	r3, [pc, #32]	; (800a654 <TS_OFF_Check+0xe0>)
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	4619      	mov	r1, r3
 800a636:	2300      	movs	r3, #0
 800a638:	2203      	movs	r2, #3
 800a63a:	f010 fa3b 	bl	801aab4 <xTaskGenericNotify>
			}
		}
		osDelay(10);
 800a63e:	200a      	movs	r0, #10
 800a640:	f00d fd80 	bl	8018144 <osDelay>
		xEventGroupWaitBits(xTS_Off_EventGroup, TS_OFF, pdTRUE, pdTRUE, portMAX_DELAY);
 800a644:	e799      	b.n	800a57a <TS_OFF_Check+0x6>
 800a646:	bf00      	nop
 800a648:	20000aa8 	.word	0x20000aa8
 800a64c:	20000aac 	.word	0x20000aac
 800a650:	20000b4d 	.word	0x20000b4d
 800a654:	200021cc 	.word	0x200021cc
 800a658:	000186a0 	.word	0x000186a0
 800a65c:	20000a70 	.word	0x20000a70

0800a660 <PreCharge_Task>:


/* Runs only, when Pre-Charge is notified to start to see if
 * HV voltage is build up on the Vehicle side */
void PreCharge_Task()
{
 800a660:	b5b0      	push	{r4, r5, r7, lr}
 800a662:	af00      	add	r7, sp, #0
	for(;;)
	{
		/* Wait for Notification from the PreCharge procedure */
		xTaskNotifyWait(0, 0xFFFFFFFF, &pc_notification, portMAX_DELAY);
 800a664:	f04f 33ff 	mov.w	r3, #4294967295
 800a668:	4a37      	ldr	r2, [pc, #220]	; (800a748 <PreCharge_Task+0xe8>)
 800a66a:	f04f 31ff 	mov.w	r1, #4294967295
 800a66e:	2000      	movs	r0, #0
 800a670:	f010 f9c0 	bl	801a9f4 <xTaskNotifyWait>

		// PreCharge error add
		while(!accuInfo.precharge_done && !accuInfo.precharge_failed)
 800a674:	e050      	b.n	800a718 <PreCharge_Task+0xb8>
		{
			if((bmsInfo.accu_voltage > 432.0) && (ivt.voltage_vs > 0.93 * bmsInfo.accu_voltage))
 800a676:	4b35      	ldr	r3, [pc, #212]	; (800a74c <PreCharge_Task+0xec>)
 800a678:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800a67c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a750 <PreCharge_Task+0xf0>
 800a680:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a688:	dd32      	ble.n	800a6f0 <PreCharge_Task+0x90>
 800a68a:	4b32      	ldr	r3, [pc, #200]	; (800a754 <PreCharge_Task+0xf4>)
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	4618      	mov	r0, r3
 800a690:	f7f5 ff5a 	bl	8000548 <__aeabi_f2d>
 800a694:	4604      	mov	r4, r0
 800a696:	460d      	mov	r5, r1
 800a698:	4b2c      	ldr	r3, [pc, #176]	; (800a74c <PreCharge_Task+0xec>)
 800a69a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7f5 ff53 	bl	8000548 <__aeabi_f2d>
 800a6a2:	a327      	add	r3, pc, #156	; (adr r3, 800a740 <PreCharge_Task+0xe0>)
 800a6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a8:	f7f5 ffa6 	bl	80005f8 <__aeabi_dmul>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	f7f6 fa30 	bl	8000b18 <__aeabi_dcmpgt>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d018      	beq.n	800a6f0 <PreCharge_Task+0x90>
			{
				accuInfo.precharge_failed = 0;
 800a6be:	4a26      	ldr	r2, [pc, #152]	; (800a758 <PreCharge_Task+0xf8>)
 800a6c0:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800a6c4:	f36f 1304 	bfc	r3, #4, #1
 800a6c8:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
				accuInfo.precharge_voltage = ivt.voltage_U2 - ivt.voltage_vs;
 800a6cc:	4b21      	ldr	r3, [pc, #132]	; (800a754 <PreCharge_Task+0xf4>)
 800a6ce:	ed93 7a07 	vldr	s14, [r3, #28]
 800a6d2:	4b20      	ldr	r3, [pc, #128]	; (800a754 <PreCharge_Task+0xf4>)
 800a6d4:	edd3 7a04 	vldr	s15, [r3, #16]
 800a6d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6dc:	4b1e      	ldr	r3, [pc, #120]	; (800a758 <PreCharge_Task+0xf8>)
 800a6de:	edc3 7a06 	vstr	s15, [r3, #24]
				xEventGroupSetBits(xPreCharge_EventGroup, PC_DONE);
 800a6e2:	4b1e      	ldr	r3, [pc, #120]	; (800a75c <PreCharge_Task+0xfc>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2140      	movs	r1, #64	; 0x40
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f00d ffdd 	bl	80186a8 <xEventGroupSetBits>
 800a6ee:	e013      	b.n	800a718 <PreCharge_Task+0xb8>
			}
			else
			{
				accuInfo.precharge_done = 0;
 800a6f0:	4a19      	ldr	r2, [pc, #100]	; (800a758 <PreCharge_Task+0xf8>)
 800a6f2:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800a6f6:	f36f 03c3 	bfc	r3, #3, #1
 800a6fa:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
				accuInfo.precharge_failed = 0;
 800a6fe:	4a16      	ldr	r2, [pc, #88]	; (800a758 <PreCharge_Task+0xf8>)
 800a700:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800a704:	f36f 1304 	bfc	r3, #4, #1
 800a708:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
				xEventGroupClearBits(xPreCharge_EventGroup, PC_DONE);
 800a70c:	4b13      	ldr	r3, [pc, #76]	; (800a75c <PreCharge_Task+0xfc>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2140      	movs	r1, #64	; 0x40
 800a712:	4618      	mov	r0, r3
 800a714:	f00d ff90 	bl	8018638 <xEventGroupClearBits>
		while(!accuInfo.precharge_done && !accuInfo.precharge_failed)
 800a718:	4b0f      	ldr	r3, [pc, #60]	; (800a758 <PreCharge_Task+0xf8>)
 800a71a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a71e:	f003 0308 	and.w	r3, r3, #8
 800a722:	b2db      	uxtb	r3, r3
 800a724:	2b00      	cmp	r3, #0
 800a726:	d107      	bne.n	800a738 <PreCharge_Task+0xd8>
 800a728:	4b0b      	ldr	r3, [pc, #44]	; (800a758 <PreCharge_Task+0xf8>)
 800a72a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a72e:	f003 0310 	and.w	r3, r3, #16
 800a732:	b2db      	uxtb	r3, r3
 800a734:	2b00      	cmp	r3, #0
 800a736:	d09e      	beq.n	800a676 <PreCharge_Task+0x16>
			}
		}
		osDelay(5);
 800a738:	2005      	movs	r0, #5
 800a73a:	f00d fd03 	bl	8018144 <osDelay>
		xTaskNotifyWait(0, 0xFFFFFFFF, &pc_notification, portMAX_DELAY);
 800a73e:	e791      	b.n	800a664 <PreCharge_Task+0x4>
 800a740:	5c28f5c3 	.word	0x5c28f5c3
 800a744:	3fedc28f 	.word	0x3fedc28f
 800a748:	20000ac8 	.word	0x20000ac8
 800a74c:	2000206c 	.word	0x2000206c
 800a750:	43d80000 	.word	0x43d80000
 800a754:	20002174 	.word	0x20002174
 800a758:	200021cc 	.word	0x200021cc
 800a75c:	20000a9c 	.word	0x20000a9c

0800a760 <TS_Activation_Task>:
}


/* Checks in order to activate/deactivate TS properly with no AIRs or PC errors */
void TS_Activation_Task()
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af02      	add	r7, sp, #8
	for(;;)
	{
		/* Task is blocked until SD is closed and AIR- has 24V supply
		 *  No AIR- problem, so notify the Pre-Charge checks after PC relay
		 *  is OK, else check PreCharge_Event bits */
		PreCharge_EventBits = xEventGroupWaitBits(xPreCharge_EventGroup, AIR_M_SUPP|AIR_M_STATE|OVER_60V|TS_INACTIVE, pdTRUE, pdTRUE, portMAX_DELAY);
 800a766:	4b40      	ldr	r3, [pc, #256]	; (800a868 <TS_Activation_Task+0x108>)
 800a768:	6818      	ldr	r0, [r3, #0]
 800a76a:	f04f 33ff 	mov.w	r3, #4294967295
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	2301      	movs	r3, #1
 800a772:	2201      	movs	r2, #1
 800a774:	2127      	movs	r1, #39	; 0x27
 800a776:	f00d fe91 	bl	801849c <xEventGroupWaitBits>
 800a77a:	4603      	mov	r3, r0
 800a77c:	4a3b      	ldr	r2, [pc, #236]	; (800a86c <TS_Activation_Task+0x10c>)
 800a77e:	6013      	str	r3, [r2, #0]

		/* Wait until PreCharge has started and DC_Link reaches at least 60V */
		if(PreCharge_EventBits == (AIR_M_SUPP|AIR_M_STATE|OVER_60V|TS_INACTIVE))
 800a780:	4b3a      	ldr	r3, [pc, #232]	; (800a86c <TS_Activation_Task+0x10c>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b27      	cmp	r3, #39	; 0x27
 800a786:	d164      	bne.n	800a852 <TS_Activation_Task+0xf2>
		{
			/* Notify PreCharge check task, for PreCharge Voltage control */
			xTaskNotify(PreCharge_Handle, 6969, eSetValueWithOverwrite);
 800a788:	4b39      	ldr	r3, [pc, #228]	; (800a870 <TS_Activation_Task+0x110>)
 800a78a:	6818      	ldr	r0, [r3, #0]
 800a78c:	2300      	movs	r3, #0
 800a78e:	2203      	movs	r2, #3
 800a790:	f641 3139 	movw	r1, #6969	; 0x1b39
 800a794:	f010 f98e 	bl	801aab4 <xTaskGenericNotify>

			/* Wait until Pre-charge procedure is done & closing AIR+ can be done */
			PreCharge_EventBits = xEventGroupWaitBits(xPreCharge_EventGroup, AIR_M_SUPP|AIR_M_STATE|PC_DONE|OVER_60V, pdTRUE, pdTRUE, PC_DONE_TIME);
 800a798:	4b33      	ldr	r3, [pc, #204]	; (800a868 <TS_Activation_Task+0x108>)
 800a79a:	6818      	ldr	r0, [r3, #0]
 800a79c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	2166      	movs	r1, #102	; 0x66
 800a7a8:	f00d fe78 	bl	801849c <xEventGroupWaitBits>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	4a2f      	ldr	r2, [pc, #188]	; (800a86c <TS_Activation_Task+0x10c>)
 800a7b0:	6013      	str	r3, [r2, #0]

			if(PreCharge_EventBits == (AIR_M_SUPP|AIR_M_STATE|OVER_60V|PC_DONE))
 800a7b2:	4b2e      	ldr	r3, [pc, #184]	; (800a86c <TS_Activation_Task+0x10c>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2b66      	cmp	r3, #102	; 0x66
 800a7b8:	d13d      	bne.n	800a836 <TS_Activation_Task+0xd6>
			{
				/* If everything is OK, notify the task that has to close AIR+ */

  				HAL_GPIO_WritePin(accuInfo.AIR_P_Driver, accuInfo.AIR_P_Driver_pin, GPIO_PIN_SET);
 800a7ba:	4b2e      	ldr	r3, [pc, #184]	; (800a874 <TS_Activation_Task+0x114>)
 800a7bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7be:	4a2d      	ldr	r2, [pc, #180]	; (800a874 <TS_Activation_Task+0x114>)
 800a7c0:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f003 fadc 	bl	800dd84 <HAL_GPIO_WritePin>
				PreCharge_EventBits = xEventGroupWaitBits(xPreCharge_EventGroup, AIR_M_SUPP|AIR_M_STATE|AIR_P_SUPP|AIR_P_STATE|OVER_60V|PC_DONE, pdTRUE, pdTRUE, AIR_P_INTERVAL);
 800a7cc:	4b26      	ldr	r3, [pc, #152]	; (800a868 <TS_Activation_Task+0x108>)
 800a7ce:	6818      	ldr	r0, [r3, #0]
 800a7d0:	2364      	movs	r3, #100	; 0x64
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	217e      	movs	r1, #126	; 0x7e
 800a7da:	f00d fe5f 	bl	801849c <xEventGroupWaitBits>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	4a22      	ldr	r2, [pc, #136]	; (800a86c <TS_Activation_Task+0x10c>)
 800a7e2:	6013      	str	r3, [r2, #0]

				if(PreCharge_EventBits == (AIR_M_SUPP|AIR_M_STATE|AIR_P_SUPP|AIR_P_STATE|OVER_60V|PC_DONE))
 800a7e4:	4b21      	ldr	r3, [pc, #132]	; (800a86c <TS_Activation_Task+0x10c>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b7e      	cmp	r3, #126	; 0x7e
 800a7ea:	d11d      	bne.n	800a828 <TS_Activation_Task+0xc8>
				{
					accuInfo.ts_active = true;
 800a7ec:	4a21      	ldr	r2, [pc, #132]	; (800a874 <TS_Activation_Task+0x114>)
 800a7ee:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800a7f2:	f043 0304 	orr.w	r3, r3, #4
 800a7f6:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
					xEventGroupClearBits(xPreCharge_EventGroup, TS_INACTIVE);
 800a7fa:	4b1b      	ldr	r3, [pc, #108]	; (800a868 <TS_Activation_Task+0x108>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2101      	movs	r1, #1
 800a800:	4618      	mov	r0, r3
 800a802:	f00d ff19 	bl	8018638 <xEventGroupClearBits>

					accuInfo.precharge_done = 1;
 800a806:	4a1b      	ldr	r2, [pc, #108]	; (800a874 <TS_Activation_Task+0x114>)
 800a808:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800a80c:	f043 0308 	orr.w	r3, r3, #8
 800a810:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

					uint8_t data[8];
					data[1] = 0x01;		// To indicate for ASB & VCU control that TS is Active!
 800a814:	2301      	movs	r3, #1
 800a816:	707b      	strb	r3, [r7, #1]
					if(CAN_Tx(&can_handler_prim, 0x304, 8, data) != HAL_OK);
 800a818:	463b      	mov	r3, r7
 800a81a:	2208      	movs	r2, #8
 800a81c:	f44f 7141 	mov.w	r1, #772	; 0x304
 800a820:	4815      	ldr	r0, [pc, #84]	; (800a878 <TS_Activation_Task+0x118>)
 800a822:	f7f7 f9a5 	bl	8001b70 <CAN_Tx>
 800a826:	e01a      	b.n	800a85e <TS_Activation_Task+0xfe>
				}
				/* Enters the else statement once in each precharge */
				else
					update_TSAC_Errors(PreCharge_EventBits, &accuInfo);
 800a828:	4b10      	ldr	r3, [pc, #64]	; (800a86c <TS_Activation_Task+0x10c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4911      	ldr	r1, [pc, #68]	; (800a874 <TS_Activation_Task+0x114>)
 800a82e:	4618      	mov	r0, r3
 800a830:	f7f8 f84a 	bl	80028c8 <update_TSAC_Errors>
 800a834:	e013      	b.n	800a85e <TS_Activation_Task+0xfe>
			}
			else
			{
				accuInfo.precharge_failed = 1;
 800a836:	4a0f      	ldr	r2, [pc, #60]	; (800a874 <TS_Activation_Task+0x114>)
 800a838:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800a83c:	f043 0310 	orr.w	r3, r3, #16
 800a840:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
				update_TSAC_Errors(PreCharge_EventBits, &accuInfo);
 800a844:	4b09      	ldr	r3, [pc, #36]	; (800a86c <TS_Activation_Task+0x10c>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	490a      	ldr	r1, [pc, #40]	; (800a874 <TS_Activation_Task+0x114>)
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7f8 f83c 	bl	80028c8 <update_TSAC_Errors>
 800a850:	e005      	b.n	800a85e <TS_Activation_Task+0xfe>
			}
		}
		else
			update_TSAC_Errors(PreCharge_EventBits, &accuInfo);
 800a852:	4b06      	ldr	r3, [pc, #24]	; (800a86c <TS_Activation_Task+0x10c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4907      	ldr	r1, [pc, #28]	; (800a874 <TS_Activation_Task+0x114>)
 800a858:	4618      	mov	r0, r3
 800a85a:	f7f8 f835 	bl	80028c8 <update_TSAC_Errors>

		osDelay(5);
 800a85e:	2005      	movs	r0, #5
 800a860:	f00d fc70 	bl	8018144 <osDelay>
		PreCharge_EventBits = xEventGroupWaitBits(xPreCharge_EventGroup, AIR_M_SUPP|AIR_M_STATE|OVER_60V|TS_INACTIVE, pdTRUE, pdTRUE, portMAX_DELAY);
 800a864:	e77f      	b.n	800a766 <TS_Activation_Task+0x6>
 800a866:	bf00      	nop
 800a868:	20000a9c 	.word	0x20000a9c
 800a86c:	20000aa0 	.word	0x20000aa0
 800a870:	20000a78 	.word	0x20000a78
 800a874:	200021cc 	.word	0x200021cc
 800a878:	2000229c 	.word	0x2000229c

0800a87c <BMS_Main_Task>:

/* AMS TASK HANDLING */
/* Checks if there is communication timeout / slave-PCB error /
 * overTemp / underTemp /overVoltage / underVoltage / overCurrent */
void BMS_Main_Task()
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af02      	add	r7, sp, #8
//	uint8_t initial_soc_determined = 0;
	/* Infinite Loop */
	for(;;)
	{
		if (first_volt_measurement_taken && first_temp_measurement_taken)
 800a882:	4b18      	ldr	r3, [pc, #96]	; (800a8e4 <BMS_Main_Task+0x68>)
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d028      	beq.n	800a8dc <BMS_Main_Task+0x60>
 800a88a:	4b17      	ldr	r3, [pc, #92]	; (800a8e8 <BMS_Main_Task+0x6c>)
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d024      	beq.n	800a8dc <BMS_Main_Task+0x60>
		{
			/* Update BMS ErrorCode */
			update_BMS_Errors(&master, slave_array, &bmsInfo, &ivt, &accuInfo);
 800a892:	4b16      	ldr	r3, [pc, #88]	; (800a8ec <BMS_Main_Task+0x70>)
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	4b16      	ldr	r3, [pc, #88]	; (800a8f0 <BMS_Main_Task+0x74>)
 800a898:	4a16      	ldr	r2, [pc, #88]	; (800a8f4 <BMS_Main_Task+0x78>)
 800a89a:	4917      	ldr	r1, [pc, #92]	; (800a8f8 <BMS_Main_Task+0x7c>)
 800a89c:	4817      	ldr	r0, [pc, #92]	; (800a8fc <BMS_Main_Task+0x80>)
 800a89e:	f7f7 fe45 	bl	800252c <update_BMS_Errors>
//				bmsInfo.max_initial_SoC  = 100.0 * bmsInfo.max_total_Ah / 15.4;
//				initial_soc_determined = 1;
//			}

			/* If the errorCode detects a BMS Error, notify ACCU_ErrorHandler() with the BMS ErrorCode value */
			if (bmsInfo.state == BMS_OK)
 800a8a2:	4b14      	ldr	r3, [pc, #80]	; (800a8f4 <BMS_Main_Task+0x78>)
 800a8a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10d      	bne.n	800a8c8 <BMS_Main_Task+0x4c>
			{
				HAL_GPIO_WritePin(master.AMS_OK, master.AMS_OKPin, GPIO_PIN_SET);
 800a8ac:	4b13      	ldr	r3, [pc, #76]	; (800a8fc <BMS_Main_Task+0x80>)
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	4a12      	ldr	r2, [pc, #72]	; (800a8fc <BMS_Main_Task+0x80>)
 800a8b2:	89d1      	ldrh	r1, [r2, #14]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f003 fa64 	bl	800dd84 <HAL_GPIO_WritePin>
				accuInfo.ams_error = 0;
 800a8bc:	4a0b      	ldr	r2, [pc, #44]	; (800a8ec <BMS_Main_Task+0x70>)
 800a8be:	7b53      	ldrb	r3, [r2, #13]
 800a8c0:	f36f 0300 	bfc	r3, #0, #1
 800a8c4:	7353      	strb	r3, [r2, #13]
 800a8c6:	e009      	b.n	800a8dc <BMS_Main_Task+0x60>
			}
			else
				xTaskNotify(ACCU_Error_Handle, bmsInfo.state, eSetValueWithOverwrite);
 800a8c8:	4b0d      	ldr	r3, [pc, #52]	; (800a900 <BMS_Main_Task+0x84>)
 800a8ca:	6818      	ldr	r0, [r3, #0]
 800a8cc:	4b09      	ldr	r3, [pc, #36]	; (800a8f4 <BMS_Main_Task+0x78>)
 800a8ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	2203      	movs	r2, #3
 800a8d8:	f010 f8ec 	bl	801aab4 <xTaskGenericNotify>
		}
		osDelay(10);
 800a8dc:	200a      	movs	r0, #10
 800a8de:	f00d fc31 	bl	8018144 <osDelay>
		if (first_volt_measurement_taken && first_temp_measurement_taken)
 800a8e2:	e7ce      	b.n	800a882 <BMS_Main_Task+0x6>
 800a8e4:	20000b18 	.word	0x20000b18
 800a8e8:	20000b19 	.word	0x20000b19
 800a8ec:	200021cc 	.word	0x200021cc
 800a8f0:	20002174 	.word	0x20002174
 800a8f4:	2000206c 	.word	0x2000206c
 800a8f8:	200012ec 	.word	0x200012ec
 800a8fc:	20001298 	.word	0x20001298
 800a900:	20000a70 	.word	0x20000a70

0800a904 <BMS_Communication_Task>:


/* Implement successful ADC Conversion of cell voltages, temperatures and status measurements for BMS:
 * Update functionality of LTC6811 voltage, temperature & status registers  */
void BMS_Communication_Task()
{
 800a904:	b590      	push	{r4, r7, lr}
 800a906:	b08d      	sub	sp, #52	; 0x34
 800a908:	af06      	add	r7, sp, #24
	first_volt_measurement_taken = 0;
 800a90a:	4b97      	ldr	r3, [pc, #604]	; (800ab68 <BMS_Communication_Task+0x264>)
 800a90c:	2200      	movs	r2, #0
 800a90e:	701a      	strb	r2, [r3, #0]
	first_temp_measurement_taken = 0;
 800a910:	4b96      	ldr	r3, [pc, #600]	; (800ab6c <BMS_Communication_Task+0x268>)
 800a912:	2200      	movs	r2, #0
 800a914:	701a      	strb	r2, [r3, #0]

	/* Infinite Loop */
	for(;;)
	{
		if(ADC_Ready && (!reg_locked))
 800a916:	4b96      	ldr	r3, [pc, #600]	; (800ab70 <BMS_Communication_Task+0x26c>)
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f000 8181 	beq.w	800ac22 <BMS_Communication_Task+0x31e>
 800a920:	4b94      	ldr	r3, [pc, #592]	; (800ab74 <BMS_Communication_Task+0x270>)
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	f040 817c 	bne.w	800ac22 <BMS_Communication_Task+0x31e>
		{
			if (xTaskGetTickCount() - ADC_volt_tick > 100)
 800a92a:	f00f fab7 	bl	8019e9c <xTaskGetTickCount>
 800a92e:	4602      	mov	r2, r0
 800a930:	4b91      	ldr	r3, [pc, #580]	; (800ab78 <BMS_Communication_Task+0x274>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	1ad3      	subs	r3, r2, r3
 800a936:	2b64      	cmp	r3, #100	; 0x64
 800a938:	d955      	bls.n	800a9e6 <BMS_Communication_Task+0xe2>
			{
				ADC_volt_tick = xTaskGetTickCount();
 800a93a:	f00f faaf 	bl	8019e9c <xTaskGetTickCount>
 800a93e:	4603      	mov	r3, r0
 800a940:	4a8d      	ldr	r2, [pc, #564]	; (800ab78 <BMS_Communication_Task+0x274>)
 800a942:	6013      	str	r3, [r2, #0]
				update_voltages(&master, slave_array, &bmsInfo, BC, ID_0, MD_0);
 800a944:	2300      	movs	r3, #0
 800a946:	9301      	str	r3, [sp, #4]
 800a948:	2300      	movs	r3, #0
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	2300      	movs	r3, #0
 800a94e:	4a8b      	ldr	r2, [pc, #556]	; (800ab7c <BMS_Communication_Task+0x278>)
 800a950:	498b      	ldr	r1, [pc, #556]	; (800ab80 <BMS_Communication_Task+0x27c>)
 800a952:	488c      	ldr	r0, [pc, #560]	; (800ab84 <BMS_Communication_Task+0x280>)
 800a954:	f7fa f8a6 	bl	8004aa4 <update_voltages>
				for(uint8_t id = ID_0; id < SLAVES_NUM; id++)
 800a958:	2300      	movs	r3, #0
 800a95a:	75fb      	strb	r3, [r7, #23]
 800a95c:	e00e      	b.n	800a97c <BMS_Communication_Task+0x78>
					while (poll_status(&master, NO_BC, id) != OK)
						osDelay(5);
 800a95e:	2005      	movs	r0, #5
 800a960:	f00d fbf0 	bl	8018144 <osDelay>
					while (poll_status(&master, NO_BC, id) != OK)
 800a964:	7dfb      	ldrb	r3, [r7, #23]
 800a966:	461a      	mov	r2, r3
 800a968:	2101      	movs	r1, #1
 800a96a:	4886      	ldr	r0, [pc, #536]	; (800ab84 <BMS_Communication_Task+0x280>)
 800a96c:	f7fb fcc2 	bl	80062f4 <poll_status>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1f3      	bne.n	800a95e <BMS_Communication_Task+0x5a>
				for(uint8_t id = ID_0; id < SLAVES_NUM; id++)
 800a976:	7dfb      	ldrb	r3, [r7, #23]
 800a978:	3301      	adds	r3, #1
 800a97a:	75fb      	strb	r3, [r7, #23]
 800a97c:	7dfb      	ldrb	r3, [r7, #23]
 800a97e:	2b0f      	cmp	r3, #15
 800a980:	d9f0      	bls.n	800a964 <BMS_Communication_Task+0x60>
				reg_locked = 1;
 800a982:	4b7c      	ldr	r3, [pc, #496]	; (800ab74 <BMS_Communication_Task+0x270>)
 800a984:	2201      	movs	r2, #1
 800a986:	701a      	strb	r2, [r3, #0]
				ADC_Ready  = 1;
 800a988:	4b79      	ldr	r3, [pc, #484]	; (800ab70 <BMS_Communication_Task+0x26c>)
 800a98a:	2201      	movs	r2, #1
 800a98c:	701a      	strb	r2, [r3, #0]

				for(uint8_t id = ID_0; id < SLAVES_NUM; id++)
 800a98e:	2300      	movs	r3, #0
 800a990:	75bb      	strb	r3, [r7, #22]
 800a992:	e012      	b.n	800a9ba <BMS_Communication_Task+0xb6>
				{
					if(read_voltage_registers(&master, slave_array, &bmsInfo, id, 3) != OK)
 800a994:	7dbb      	ldrb	r3, [r7, #22]
 800a996:	2203      	movs	r2, #3
 800a998:	9200      	str	r2, [sp, #0]
 800a99a:	4a78      	ldr	r2, [pc, #480]	; (800ab7c <BMS_Communication_Task+0x278>)
 800a99c:	4978      	ldr	r1, [pc, #480]	; (800ab80 <BMS_Communication_Task+0x27c>)
 800a99e:	4879      	ldr	r0, [pc, #484]	; (800ab84 <BMS_Communication_Task+0x280>)
 800a9a0:	f7fa f8b2 	bl	8004b08 <read_voltage_registers>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d004      	beq.n	800a9b4 <BMS_Communication_Task+0xb0>
						volt_error++;
 800a9aa:	4b77      	ldr	r3, [pc, #476]	; (800ab88 <BMS_Communication_Task+0x284>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	4a75      	ldr	r2, [pc, #468]	; (800ab88 <BMS_Communication_Task+0x284>)
 800a9b2:	6013      	str	r3, [r2, #0]
				for(uint8_t id = ID_0; id < SLAVES_NUM; id++)
 800a9b4:	7dbb      	ldrb	r3, [r7, #22]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	75bb      	strb	r3, [r7, #22]
 800a9ba:	7dbb      	ldrb	r3, [r7, #22]
 800a9bc:	2b0f      	cmp	r3, #15
 800a9be:	d9e9      	bls.n	800a994 <BMS_Communication_Task+0x90>
				}
				volt_read_time = xTaskGetTickCount() - volt_tick;
 800a9c0:	f00f fa6c 	bl	8019e9c <xTaskGetTickCount>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	4b71      	ldr	r3, [pc, #452]	; (800ab8c <BMS_Communication_Task+0x288>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	4a70      	ldr	r2, [pc, #448]	; (800ab90 <BMS_Communication_Task+0x28c>)
 800a9ce:	6013      	str	r3, [r2, #0]
				volt_tick = xTaskGetTickCount();
 800a9d0:	f00f fa64 	bl	8019e9c <xTaskGetTickCount>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	4a6d      	ldr	r2, [pc, #436]	; (800ab8c <BMS_Communication_Task+0x288>)
 800a9d8:	6013      	str	r3, [r2, #0]
				reg_locked = 0;
 800a9da:	4b66      	ldr	r3, [pc, #408]	; (800ab74 <BMS_Communication_Task+0x270>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	701a      	strb	r2, [r3, #0]
				first_volt_measurement_taken = 1;
 800a9e0:	4b61      	ldr	r3, [pc, #388]	; (800ab68 <BMS_Communication_Task+0x264>)
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	701a      	strb	r2, [r3, #0]
			}

			if (xTaskGetTickCount() - ADC_temp_tick > 350)
 800a9e6:	f00f fa59 	bl	8019e9c <xTaskGetTickCount>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	4b69      	ldr	r3, [pc, #420]	; (800ab94 <BMS_Communication_Task+0x290>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800a9f6:	d94f      	bls.n	800aa98 <BMS_Communication_Task+0x194>
			{
				ADC_temp_tick = xTaskGetTickCount();
 800a9f8:	f00f fa50 	bl	8019e9c <xTaskGetTickCount>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	4a65      	ldr	r2, [pc, #404]	; (800ab94 <BMS_Communication_Task+0x290>)
 800aa00:	6013      	str	r3, [r2, #0]
				update_temperatures(&master, BC, ID_0, MD_0);
 800aa02:	2300      	movs	r3, #0
 800aa04:	2200      	movs	r2, #0
 800aa06:	2100      	movs	r1, #0
 800aa08:	485e      	ldr	r0, [pc, #376]	; (800ab84 <BMS_Communication_Task+0x280>)
 800aa0a:	f7fa fffc 	bl	8005a06 <update_temperatures>
				for(uint8_t id = ID_0; id < SLAVES_NUM; id++)
 800aa0e:	2300      	movs	r3, #0
 800aa10:	757b      	strb	r3, [r7, #21]
 800aa12:	e00e      	b.n	800aa32 <BMS_Communication_Task+0x12e>
					while (poll_status(&master, NO_BC, id) != OK)
						osDelay(5);
 800aa14:	2005      	movs	r0, #5
 800aa16:	f00d fb95 	bl	8018144 <osDelay>
					while (poll_status(&master, NO_BC, id) != OK)
 800aa1a:	7d7b      	ldrb	r3, [r7, #21]
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	2101      	movs	r1, #1
 800aa20:	4858      	ldr	r0, [pc, #352]	; (800ab84 <BMS_Communication_Task+0x280>)
 800aa22:	f7fb fc67 	bl	80062f4 <poll_status>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1f3      	bne.n	800aa14 <BMS_Communication_Task+0x110>
				for(uint8_t id = ID_0; id < SLAVES_NUM; id++)
 800aa2c:	7d7b      	ldrb	r3, [r7, #21]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	757b      	strb	r3, [r7, #21]
 800aa32:	7d7b      	ldrb	r3, [r7, #21]
 800aa34:	2b0f      	cmp	r3, #15
 800aa36:	d9f0      	bls.n	800aa1a <BMS_Communication_Task+0x116>
				reg_locked = 1;
 800aa38:	4b4e      	ldr	r3, [pc, #312]	; (800ab74 <BMS_Communication_Task+0x270>)
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	701a      	strb	r2, [r3, #0]
				ADC_Ready = 1;
 800aa3e:	4b4c      	ldr	r3, [pc, #304]	; (800ab70 <BMS_Communication_Task+0x26c>)
 800aa40:	2201      	movs	r2, #1
 800aa42:	701a      	strb	r2, [r3, #0]

				for(uint8_t id = ID_0; id < SLAVES_NUM; id++)
 800aa44:	2300      	movs	r3, #0
 800aa46:	753b      	strb	r3, [r7, #20]
 800aa48:	e010      	b.n	800aa6c <BMS_Communication_Task+0x168>
				{
					if(read_temperature_registers(&master, slave_array, id, 3) != OK)
 800aa4a:	7d3a      	ldrb	r2, [r7, #20]
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	494c      	ldr	r1, [pc, #304]	; (800ab80 <BMS_Communication_Task+0x27c>)
 800aa50:	484c      	ldr	r0, [pc, #304]	; (800ab84 <BMS_Communication_Task+0x280>)
 800aa52:	f7fa fff5 	bl	8005a40 <read_temperature_registers>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d004      	beq.n	800aa66 <BMS_Communication_Task+0x162>
						temp_error++;
 800aa5c:	4b4e      	ldr	r3, [pc, #312]	; (800ab98 <BMS_Communication_Task+0x294>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	3301      	adds	r3, #1
 800aa62:	4a4d      	ldr	r2, [pc, #308]	; (800ab98 <BMS_Communication_Task+0x294>)
 800aa64:	6013      	str	r3, [r2, #0]
				for(uint8_t id = ID_0; id < SLAVES_NUM; id++)
 800aa66:	7d3b      	ldrb	r3, [r7, #20]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	753b      	strb	r3, [r7, #20]
 800aa6c:	7d3b      	ldrb	r3, [r7, #20]
 800aa6e:	2b0f      	cmp	r3, #15
 800aa70:	d9eb      	bls.n	800aa4a <BMS_Communication_Task+0x146>
				}
				temp_read_time = xTaskGetTickCount() - temp_tick;
 800aa72:	f00f fa13 	bl	8019e9c <xTaskGetTickCount>
 800aa76:	4602      	mov	r2, r0
 800aa78:	4b48      	ldr	r3, [pc, #288]	; (800ab9c <BMS_Communication_Task+0x298>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	4a48      	ldr	r2, [pc, #288]	; (800aba0 <BMS_Communication_Task+0x29c>)
 800aa80:	6013      	str	r3, [r2, #0]
				temp_tick = xTaskGetTickCount();
 800aa82:	f00f fa0b 	bl	8019e9c <xTaskGetTickCount>
 800aa86:	4603      	mov	r3, r0
 800aa88:	4a44      	ldr	r2, [pc, #272]	; (800ab9c <BMS_Communication_Task+0x298>)
 800aa8a:	6013      	str	r3, [r2, #0]
				reg_locked = 0;
 800aa8c:	4b39      	ldr	r3, [pc, #228]	; (800ab74 <BMS_Communication_Task+0x270>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	701a      	strb	r2, [r3, #0]
				first_temp_measurement_taken = 1;
 800aa92:	4b36      	ldr	r3, [pc, #216]	; (800ab6c <BMS_Communication_Task+0x268>)
 800aa94:	2201      	movs	r2, #1
 800aa96:	701a      	strb	r2, [r3, #0]
			}

			if (xTaskGetTickCount() - ADC_stat_tick > 600)
 800aa98:	f00f fa00 	bl	8019e9c <xTaskGetTickCount>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	4b41      	ldr	r3, [pc, #260]	; (800aba4 <BMS_Communication_Task+0x2a0>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800aaa8:	d94c      	bls.n	800ab44 <BMS_Communication_Task+0x240>
			{
				ADC_stat_tick = xTaskGetTickCount();
 800aaaa:	f00f f9f7 	bl	8019e9c <xTaskGetTickCount>
 800aaae:	4603      	mov	r3, r0
 800aab0:	4a3c      	ldr	r2, [pc, #240]	; (800aba4 <BMS_Communication_Task+0x2a0>)
 800aab2:	6013      	str	r3, [r2, #0]
				update_status(&master, BC, ID_0, MD_0);
 800aab4:	2300      	movs	r3, #0
 800aab6:	2200      	movs	r2, #0
 800aab8:	2100      	movs	r1, #0
 800aaba:	4832      	ldr	r0, [pc, #200]	; (800ab84 <BMS_Communication_Task+0x280>)
 800aabc:	f7fb f99a 	bl	8005df4 <update_status>
				for(uint8_t id = ID_0; id < SLAVES_NUM; id++)
 800aac0:	2300      	movs	r3, #0
 800aac2:	74fb      	strb	r3, [r7, #19]
 800aac4:	e00e      	b.n	800aae4 <BMS_Communication_Task+0x1e0>
					while (poll_status(&master, NO_BC, id) != OK)
						osDelay(5);
 800aac6:	2005      	movs	r0, #5
 800aac8:	f00d fb3c 	bl	8018144 <osDelay>
					while (poll_status(&master, NO_BC, id) != OK)
 800aacc:	7cfb      	ldrb	r3, [r7, #19]
 800aace:	461a      	mov	r2, r3
 800aad0:	2101      	movs	r1, #1
 800aad2:	482c      	ldr	r0, [pc, #176]	; (800ab84 <BMS_Communication_Task+0x280>)
 800aad4:	f7fb fc0e 	bl	80062f4 <poll_status>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1f3      	bne.n	800aac6 <BMS_Communication_Task+0x1c2>
				for(uint8_t id = ID_0; id < SLAVES_NUM; id++)
 800aade:	7cfb      	ldrb	r3, [r7, #19]
 800aae0:	3301      	adds	r3, #1
 800aae2:	74fb      	strb	r3, [r7, #19]
 800aae4:	7cfb      	ldrb	r3, [r7, #19]
 800aae6:	2b0f      	cmp	r3, #15
 800aae8:	d9f0      	bls.n	800aacc <BMS_Communication_Task+0x1c8>
				reg_locked = 1;
 800aaea:	4b22      	ldr	r3, [pc, #136]	; (800ab74 <BMS_Communication_Task+0x270>)
 800aaec:	2201      	movs	r2, #1
 800aaee:	701a      	strb	r2, [r3, #0]
				ADC_Ready = 1;
 800aaf0:	4b1f      	ldr	r3, [pc, #124]	; (800ab70 <BMS_Communication_Task+0x26c>)
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	701a      	strb	r2, [r3, #0]

				for(uint8_t id = ID_0; id < SLAVES_NUM; id++)
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	74bb      	strb	r3, [r7, #18]
 800aafa:	e010      	b.n	800ab1e <BMS_Communication_Task+0x21a>
				{
					if(read_status_registers(&master, slave_array, id, 3) != OK)
 800aafc:	7cba      	ldrb	r2, [r7, #18]
 800aafe:	2303      	movs	r3, #3
 800ab00:	491f      	ldr	r1, [pc, #124]	; (800ab80 <BMS_Communication_Task+0x27c>)
 800ab02:	4820      	ldr	r0, [pc, #128]	; (800ab84 <BMS_Communication_Task+0x280>)
 800ab04:	f7fb f992 	bl	8005e2c <read_status_registers>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d004      	beq.n	800ab18 <BMS_Communication_Task+0x214>
						stat_error++;
 800ab0e:	4b26      	ldr	r3, [pc, #152]	; (800aba8 <BMS_Communication_Task+0x2a4>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3301      	adds	r3, #1
 800ab14:	4a24      	ldr	r2, [pc, #144]	; (800aba8 <BMS_Communication_Task+0x2a4>)
 800ab16:	6013      	str	r3, [r2, #0]
				for(uint8_t id = ID_0; id < SLAVES_NUM; id++)
 800ab18:	7cbb      	ldrb	r3, [r7, #18]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	74bb      	strb	r3, [r7, #18]
 800ab1e:	7cbb      	ldrb	r3, [r7, #18]
 800ab20:	2b0f      	cmp	r3, #15
 800ab22:	d9eb      	bls.n	800aafc <BMS_Communication_Task+0x1f8>
				}
				stat_read_time = xTaskGetTickCount() - stat_tick;
 800ab24:	f00f f9ba 	bl	8019e9c <xTaskGetTickCount>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	4b20      	ldr	r3, [pc, #128]	; (800abac <BMS_Communication_Task+0x2a8>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	4a1f      	ldr	r2, [pc, #124]	; (800abb0 <BMS_Communication_Task+0x2ac>)
 800ab32:	6013      	str	r3, [r2, #0]
				stat_tick = xTaskGetTickCount();
 800ab34:	f00f f9b2 	bl	8019e9c <xTaskGetTickCount>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	4a1c      	ldr	r2, [pc, #112]	; (800abac <BMS_Communication_Task+0x2a8>)
 800ab3c:	6013      	str	r3, [r2, #0]
				reg_locked = 0;
 800ab3e:	4b0d      	ldr	r3, [pc, #52]	; (800ab74 <BMS_Communication_Task+0x270>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	701a      	strb	r2, [r3, #0]
			}

			if (xTaskGetTickCount() - cfgr_tick > 2000)
 800ab44:	f00f f9aa 	bl	8019e9c <xTaskGetTickCount>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	4b1a      	ldr	r3, [pc, #104]	; (800abb4 <BMS_Communication_Task+0x2b0>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ab54:	d965      	bls.n	800ac22 <BMS_Communication_Task+0x31e>
			{
				cfgr_tick = xTaskGetTickCount();
 800ab56:	f00f f9a1 	bl	8019e9c <xTaskGetTickCount>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	4a15      	ldr	r2, [pc, #84]	; (800abb4 <BMS_Communication_Task+0x2b0>)
 800ab5e:	6013      	str	r3, [r2, #0]
				for (ID_t id = ID_0; id < SLAVES_NUM; ++id)
 800ab60:	2300      	movs	r3, #0
 800ab62:	747b      	strb	r3, [r7, #17]
 800ab64:	e031      	b.n	800abca <BMS_Communication_Task+0x2c6>
 800ab66:	bf00      	nop
 800ab68:	20000b18 	.word	0x20000b18
 800ab6c:	20000b19 	.word	0x20000b19
 800ab70:	20000b1a 	.word	0x20000b1a
 800ab74:	20000b1b 	.word	0x20000b1b
 800ab78:	20000aec 	.word	0x20000aec
 800ab7c:	2000206c 	.word	0x2000206c
 800ab80:	200012ec 	.word	0x200012ec
 800ab84:	20001298 	.word	0x20001298
 800ab88:	20000b1c 	.word	0x20000b1c
 800ab8c:	20000ad0 	.word	0x20000ad0
 800ab90:	20000ae0 	.word	0x20000ae0
 800ab94:	20000af0 	.word	0x20000af0
 800ab98:	20000b20 	.word	0x20000b20
 800ab9c:	20000ad4 	.word	0x20000ad4
 800aba0:	20000ae4 	.word	0x20000ae4
 800aba4:	20000af4 	.word	0x20000af4
 800aba8:	20000b24 	.word	0x20000b24
 800abac:	20000ad8 	.word	0x20000ad8
 800abb0:	20000ae8 	.word	0x20000ae8
 800abb4:	20000adc 	.word	0x20000adc
					read_cfgr_register(&master, slave_array, id, 3);
 800abb8:	7c7a      	ldrb	r2, [r7, #17]
 800abba:	2303      	movs	r3, #3
 800abbc:	4930      	ldr	r1, [pc, #192]	; (800ac80 <BMS_Communication_Task+0x37c>)
 800abbe:	4831      	ldr	r0, [pc, #196]	; (800ac84 <BMS_Communication_Task+0x380>)
 800abc0:	f7fb f95e 	bl	8005e80 <read_cfgr_register>
				for (ID_t id = ID_0; id < SLAVES_NUM; ++id)
 800abc4:	7c7b      	ldrb	r3, [r7, #17]
 800abc6:	3301      	adds	r3, #1
 800abc8:	747b      	strb	r3, [r7, #17]
 800abca:	7c7b      	ldrb	r3, [r7, #17]
 800abcc:	2b0f      	cmp	r3, #15
 800abce:	d9f3      	bls.n	800abb8 <BMS_Communication_Task+0x2b4>

				if (bmsInfo.state == SLAVE_ERROR)
 800abd0:	4b2d      	ldr	r3, [pc, #180]	; (800ac88 <BMS_Communication_Task+0x384>)
 800abd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800abd6:	2b09      	cmp	r3, #9
 800abd8:	d123      	bne.n	800ac22 <BMS_Communication_Task+0x31e>
				{
					uint8_t gpio[5] = {1,1,1,1,1};
 800abda:	4a2c      	ldr	r2, [pc, #176]	; (800ac8c <BMS_Communication_Task+0x388>)
 800abdc:	f107 030c 	add.w	r3, r7, #12
 800abe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800abe4:	6018      	str	r0, [r3, #0]
 800abe6:	3304      	adds	r3, #4
 800abe8:	7019      	strb	r1, [r3, #0]
					uint8_t no_dcc[9] = {0,0,0,0,0,0,0,0,0};
 800abea:	4a29      	ldr	r2, [pc, #164]	; (800ac90 <BMS_Communication_Task+0x38c>)
 800abec:	463b      	mov	r3, r7
 800abee:	ca07      	ldmia	r2, {r0, r1, r2}
 800abf0:	c303      	stmia	r3!, {r0, r1}
 800abf2:	701a      	strb	r2, [r3, #0]
					safe_write_cfgr(&master, slave_array, BC, 0, gpio, 1, 0, UV_THRESHOLD, OV_THRESHOLD, no_dcc, 0, 3);
 800abf4:	2303      	movs	r3, #3
 800abf6:	9305      	str	r3, [sp, #20]
 800abf8:	2300      	movs	r3, #0
 800abfa:	9304      	str	r3, [sp, #16]
 800abfc:	463b      	mov	r3, r7
 800abfe:	9303      	str	r3, [sp, #12]
 800ac00:	2300      	movs	r3, #0
 800ac02:	9302      	str	r3, [sp, #8]
 800ac04:	2301      	movs	r3, #1
 800ac06:	9301      	str	r3, [sp, #4]
 800ac08:	f107 030c 	add.w	r3, r7, #12
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	eddf 0a21 	vldr	s1, [pc, #132]	; 800ac94 <BMS_Communication_Task+0x390>
 800ac12:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800ac98 <BMS_Communication_Task+0x394>
 800ac16:	2300      	movs	r3, #0
 800ac18:	2200      	movs	r2, #0
 800ac1a:	4919      	ldr	r1, [pc, #100]	; (800ac80 <BMS_Communication_Task+0x37c>)
 800ac1c:	4819      	ldr	r0, [pc, #100]	; (800ac84 <BMS_Communication_Task+0x380>)
 800ac1e:	f7f9 ffce 	bl	8004bbe <safe_write_cfgr>
				}
			}
		}

		/* Task that handles balancing algorithm: Decides which cells require discharge or not */
		if(bmsInfo.BalInfo.balancing_enabled && (bmsInfo.state == BMS_OK))
 800ac22:	4b19      	ldr	r3, [pc, #100]	; (800ac88 <BMS_Communication_Task+0x384>)
 800ac24:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d01a      	beq.n	800ac62 <BMS_Communication_Task+0x35e>
 800ac2c:	4b16      	ldr	r3, [pc, #88]	; (800ac88 <BMS_Communication_Task+0x384>)
 800ac2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d115      	bne.n	800ac62 <BMS_Communication_Task+0x35e>
		{
			if (balancing_update_time - xTaskGetTickCount() > 3000)
 800ac36:	4b19      	ldr	r3, [pc, #100]	; (800ac9c <BMS_Communication_Task+0x398>)
 800ac38:	681c      	ldr	r4, [r3, #0]
 800ac3a:	f00f f92f 	bl	8019e9c <xTaskGetTickCount>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	1ae3      	subs	r3, r4, r3
 800ac42:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d916      	bls.n	800ac78 <BMS_Communication_Task+0x374>
			{
				update_balancing_cells(&bmsInfo,  &master, slave_array, 5);
 800ac4a:	2305      	movs	r3, #5
 800ac4c:	4a0c      	ldr	r2, [pc, #48]	; (800ac80 <BMS_Communication_Task+0x37c>)
 800ac4e:	490d      	ldr	r1, [pc, #52]	; (800ac84 <BMS_Communication_Task+0x380>)
 800ac50:	480d      	ldr	r0, [pc, #52]	; (800ac88 <BMS_Communication_Task+0x384>)
 800ac52:	f7f9 fb79 	bl	8004348 <update_balancing_cells>
				balancing_update_time = xTaskGetTickCount();
 800ac56:	f00f f921 	bl	8019e9c <xTaskGetTickCount>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	4a0f      	ldr	r2, [pc, #60]	; (800ac9c <BMS_Communication_Task+0x398>)
 800ac5e:	6013      	str	r3, [r2, #0]
			if (balancing_update_time - xTaskGetTickCount() > 3000)
 800ac60:	e00a      	b.n	800ac78 <BMS_Communication_Task+0x374>
			}
		}
		else if (bmsInfo.BalInfo.state != off)
 800ac62:	4b09      	ldr	r3, [pc, #36]	; (800ac88 <BMS_Communication_Task+0x384>)
 800ac64:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d005      	beq.n	800ac78 <BMS_Communication_Task+0x374>
			stop_balancing(&bmsInfo, &master, slave_array, 3);
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	4a04      	ldr	r2, [pc, #16]	; (800ac80 <BMS_Communication_Task+0x37c>)
 800ac70:	4904      	ldr	r1, [pc, #16]	; (800ac84 <BMS_Communication_Task+0x380>)
 800ac72:	4805      	ldr	r0, [pc, #20]	; (800ac88 <BMS_Communication_Task+0x384>)
 800ac74:	f7f9 fe76 	bl	8004964 <stop_balancing>

		osDelay(5);
 800ac78:	2005      	movs	r0, #5
 800ac7a:	f00d fa63 	bl	8018144 <osDelay>
		if(ADC_Ready && (!reg_locked))
 800ac7e:	e64a      	b.n	800a916 <BMS_Communication_Task+0x12>
 800ac80:	200012ec 	.word	0x200012ec
 800ac84:	20001298 	.word	0x20001298
 800ac88:	2000206c 	.word	0x2000206c
 800ac8c:	08022218 	.word	0x08022218
 800ac90:	08022220 	.word	0x08022220
 800ac94:	40863d71 	.word	0x40863d71
 800ac98:	40433333 	.word	0x40433333
 800ac9c:	20000ac4 	.word	0x20000ac4

0800aca0 <SDCard_Task>:
}


/* Task that constantly writes data on SD Card */
void SDCard_Task()
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	af00      	add	r7, sp, #0
	/* Infinite loop */
	for(;;)
	{
		sdCard.time_interval = xTaskGetTickCount() - SD_tick;
 800aca4:	f00f f8fa 	bl	8019e9c <xTaskGetTickCount>
 800aca8:	4603      	mov	r3, r0
 800acaa:	b29a      	uxth	r2, r3
 800acac:	4b19      	ldr	r3, [pc, #100]	; (800ad14 <SDCard_Task+0x74>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	4b18      	ldr	r3, [pc, #96]	; (800ad18 <SDCard_Task+0x78>)
 800acb8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800acbc:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		SD_tick = xTaskGetTickCount();
 800acc0:	f00f f8ec 	bl	8019e9c <xTaskGetTickCount>
 800acc4:	4603      	mov	r3, r0
 800acc6:	4a13      	ldr	r2, [pc, #76]	; (800ad14 <SDCard_Task+0x74>)
 800acc8:	6013      	str	r3, [r2, #0]

		sdCard.connected = (!HAL_GPIO_ReadPin(SD_Detect_GPIO_Port, SD_Detect_Pin));
 800acca:	2110      	movs	r1, #16
 800accc:	4813      	ldr	r0, [pc, #76]	; (800ad1c <SDCard_Task+0x7c>)
 800acce:	f003 f841 	bl	800dd54 <HAL_GPIO_ReadPin>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	bf0c      	ite	eq
 800acd8:	2301      	moveq	r3, #1
 800acda:	2300      	movne	r3, #0
 800acdc:	b2da      	uxtb	r2, r3
 800acde:	4b0e      	ldr	r3, [pc, #56]	; (800ad18 <SDCard_Task+0x78>)
 800ace0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ace4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

		if (sdCard.mounted && (!sdCard.read_flag))
 800ace8:	4b0b      	ldr	r3, [pc, #44]	; (800ad18 <SDCard_Task+0x78>)
 800acea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800acee:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d009      	beq.n	800ad0a <SDCard_Task+0x6a>
 800acf6:	4b08      	ldr	r3, [pc, #32]	; (800ad18 <SDCard_Task+0x78>)
 800acf8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800acfc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d102      	bne.n	800ad0a <SDCard_Task+0x6a>
		{
			SD_card_write(&sdCard);
 800ad04:	4804      	ldr	r0, [pc, #16]	; (800ad18 <SDCard_Task+0x78>)
 800ad06:	f7fb ff91 	bl	8006c2c <SD_card_write>
		}

		osDelay(200);
 800ad0a:	20c8      	movs	r0, #200	; 0xc8
 800ad0c:	f00d fa1a 	bl	8018144 <osDelay>
		sdCard.time_interval = xTaskGetTickCount() - SD_tick;
 800ad10:	e7c8      	b.n	800aca4 <SDCard_Task+0x4>
 800ad12:	bf00      	nop
 800ad14:	20000ab4 	.word	0x20000ab4
 800ad18:	200022c8 	.word	0x200022c8
 800ad1c:	40020800 	.word	0x40020800

0800ad20 <USB_Task>:
}


/* jSON Transactions for GUI-Interface communication */
void USB_Task()
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	af00      	add	r7, sp, #0
	/* Infinite Loop */
	for(;;)
	{
		/* Checks if a GUI device is connected to the USB COM Port */
		usb_connected = HAL_GPIO_ReadPin(VBUS_SENSE_GPIO_Port, VBUS_SENSE_Pin);
 800ad24:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad28:	4839      	ldr	r0, [pc, #228]	; (800ae10 <USB_Task+0xf0>)
 800ad2a:	f003 f813 	bl	800dd54 <HAL_GPIO_ReadPin>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	461a      	mov	r2, r3
 800ad32:	4b38      	ldr	r3, [pc, #224]	; (800ae14 <USB_Task+0xf4>)
 800ad34:	701a      	strb	r2, [r3, #0]
		if(usb_connected)
 800ad36:	4b37      	ldr	r3, [pc, #220]	; (800ae14 <USB_Task+0xf4>)
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d063      	beq.n	800ae06 <USB_Task+0xe6>
//				else
//					slave_array[id].humidity = 0xFF;
//			}
			/* ------------------------- GUI TESTING END --------------------------- */

			if (sdCard.read_flag)
 800ad3e:	4b36      	ldr	r3, [pc, #216]	; (800ae18 <USB_Task+0xf8>)
 800ad40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ad44:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00c      	beq.n	800ad66 <USB_Task+0x46>
			{
				SD_card_read(&sdCard);
 800ad4c:	4832      	ldr	r0, [pc, #200]	; (800ae18 <USB_Task+0xf8>)
 800ad4e:	f7fc fc61 	bl	8007614 <SD_card_read>
				sdCard.read_flag = 0;
 800ad52:	4b31      	ldr	r3, [pc, #196]	; (800ae18 <USB_Task+0xf8>)
 800ad54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
				osDelay(50);
 800ad5e:	2032      	movs	r0, #50	; 0x32
 800ad60:	f00d f9f0 	bl	8018144 <osDelay>
 800ad64:	e04f      	b.n	800ae06 <USB_Task+0xe6>
			}
			else  /* Transmits only if the SD card does not use the USB to transmit its content */
			{
				usb_result = voltages_json(slave_array);
 800ad66:	482d      	ldr	r0, [pc, #180]	; (800ae1c <USB_Task+0xfc>)
 800ad68:	f7f7 fe5c 	bl	8002a24 <voltages_json>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	461a      	mov	r2, r3
 800ad70:	4b2b      	ldr	r3, [pc, #172]	; (800ae20 <USB_Task+0x100>)
 800ad72:	701a      	strb	r2, [r3, #0]
				osDelay(50);
 800ad74:	2032      	movs	r0, #50	; 0x32
 800ad76:	f00d f9e5 	bl	8018144 <osDelay>
				usb_result = balancing_json(slave_array);
 800ad7a:	4828      	ldr	r0, [pc, #160]	; (800ae1c <USB_Task+0xfc>)
 800ad7c:	f7f7 feee 	bl	8002b5c <balancing_json>
 800ad80:	4603      	mov	r3, r0
 800ad82:	461a      	mov	r2, r3
 800ad84:	4b26      	ldr	r3, [pc, #152]	; (800ae20 <USB_Task+0x100>)
 800ad86:	701a      	strb	r2, [r3, #0]
				osDelay(50);
 800ad88:	2032      	movs	r0, #50	; 0x32
 800ad8a:	f00d f9db 	bl	8018144 <osDelay>
				usb_result = temperatures_json(slave_array);
 800ad8e:	4823      	ldr	r0, [pc, #140]	; (800ae1c <USB_Task+0xfc>)
 800ad90:	f7f7 ff7e 	bl	8002c90 <temperatures_json>
 800ad94:	4603      	mov	r3, r0
 800ad96:	461a      	mov	r2, r3
 800ad98:	4b21      	ldr	r3, [pc, #132]	; (800ae20 <USB_Task+0x100>)
 800ad9a:	701a      	strb	r2, [r3, #0]
				osDelay(50);
 800ad9c:	2032      	movs	r0, #50	; 0x32
 800ad9e:	f00d f9d1 	bl	8018144 <osDelay>
				usb_result = humidities_json(slave_array);
 800ada2:	481e      	ldr	r0, [pc, #120]	; (800ae1c <USB_Task+0xfc>)
 800ada4:	f7f8 f84a 	bl	8002e3c <humidities_json>
 800ada8:	4603      	mov	r3, r0
 800adaa:	461a      	mov	r2, r3
 800adac:	4b1c      	ldr	r3, [pc, #112]	; (800ae20 <USB_Task+0x100>)
 800adae:	701a      	strb	r2, [r3, #0]
				osDelay(50);
 800adb0:	2032      	movs	r0, #50	; 0x32
 800adb2:	f00d f9c7 	bl	8018144 <osDelay>
				usb_result = Accu_json(&accuInfo);
 800adb6:	481b      	ldr	r0, [pc, #108]	; (800ae24 <USB_Task+0x104>)
 800adb8:	f7f8 f918 	bl	8002fec <Accu_json>
 800adbc:	4603      	mov	r3, r0
 800adbe:	461a      	mov	r2, r3
 800adc0:	4b17      	ldr	r3, [pc, #92]	; (800ae20 <USB_Task+0x100>)
 800adc2:	701a      	strb	r2, [r3, #0]
				osDelay(50);
 800adc4:	2032      	movs	r0, #50	; 0x32
 800adc6:	f00d f9bd 	bl	8018144 <osDelay>
				usb_result = Ivt_json(&ivt);
 800adca:	4817      	ldr	r0, [pc, #92]	; (800ae28 <USB_Task+0x108>)
 800adcc:	f7f8 fb50 	bl	8003470 <Ivt_json>
 800add0:	4603      	mov	r3, r0
 800add2:	461a      	mov	r2, r3
 800add4:	4b12      	ldr	r3, [pc, #72]	; (800ae20 <USB_Task+0x100>)
 800add6:	701a      	strb	r2, [r3, #0]
				osDelay(50);
 800add8:	2032      	movs	r0, #50	; 0x32
 800adda:	f00d f9b3 	bl	8018144 <osDelay>
				usb_result = Elcon_json(&elcon);
 800adde:	4813      	ldr	r0, [pc, #76]	; (800ae2c <USB_Task+0x10c>)
 800ade0:	f7f8 fc48 	bl	8003674 <Elcon_json>
 800ade4:	4603      	mov	r3, r0
 800ade6:	461a      	mov	r2, r3
 800ade8:	4b0d      	ldr	r3, [pc, #52]	; (800ae20 <USB_Task+0x100>)
 800adea:	701a      	strb	r2, [r3, #0]
				osDelay(50);
 800adec:	2032      	movs	r0, #50	; 0x32
 800adee:	f00d f9a9 	bl	8018144 <osDelay>
				usb_result = PECerrors_json(slave_array);
 800adf2:	480a      	ldr	r0, [pc, #40]	; (800ae1c <USB_Task+0xfc>)
 800adf4:	f7f8 f88c 	bl	8002f10 <PECerrors_json>
 800adf8:	4603      	mov	r3, r0
 800adfa:	461a      	mov	r2, r3
 800adfc:	4b08      	ldr	r3, [pc, #32]	; (800ae20 <USB_Task+0x100>)
 800adfe:	701a      	strb	r2, [r3, #0]
				osDelay(50);
 800ae00:	2032      	movs	r0, #50	; 0x32
 800ae02:	f00d f99f 	bl	8018144 <osDelay>
			}
		}
		osDelay(150);
 800ae06:	2096      	movs	r0, #150	; 0x96
 800ae08:	f00d f99c 	bl	8018144 <osDelay>
		usb_connected = HAL_GPIO_ReadPin(VBUS_SENSE_GPIO_Port, VBUS_SENSE_Pin);
 800ae0c:	e78a      	b.n	800ad24 <USB_Task+0x4>
 800ae0e:	bf00      	nop
 800ae10:	40020000 	.word	0x40020000
 800ae14:	20000ac1 	.word	0x20000ac1
 800ae18:	200022c8 	.word	0x200022c8
 800ae1c:	200012ec 	.word	0x200012ec
 800ae20:	20000ac2 	.word	0x20000ac2
 800ae24:	200021cc 	.word	0x200021cc
 800ae28:	20002174 	.word	0x20002174
 800ae2c:	20002244 	.word	0x20002244

0800ae30 <Charge_Task>:
}



void Charge_Task()
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	af00      	add	r7, sp, #0
	for(;;)
	{
		/* Start Timer for TSAC Bus for Charging, only if ELCON charger verifies connection */
		if(elcon.connected)
 800ae34:	4b19      	ldr	r3, [pc, #100]	; (800ae9c <Charge_Task+0x6c>)
 800ae36:	791b      	ldrb	r3, [r3, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00d      	beq.n	800ae58 <Charge_Task+0x28>
		{
			if (tsac_timer_stopped)
 800ae3c:	4b18      	ldr	r3, [pc, #96]	; (800aea0 <Charge_Task+0x70>)
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d009      	beq.n	800ae58 <Charge_Task+0x28>
			{
				/* This timer sends Elcon / Charger PCB the necessary messages */
				osTimerStart(timTSACBusHandle, 950);
 800ae44:	4b17      	ldr	r3, [pc, #92]	; (800aea4 <Charge_Task+0x74>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f240 31b6 	movw	r1, #950	; 0x3b6
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f00d f9c1 	bl	80181d4 <osTimerStart>
				tsac_timer_stopped = false;
 800ae52:	4b13      	ldr	r3, [pc, #76]	; (800aea0 <Charge_Task+0x70>)
 800ae54:	2200      	movs	r2, #0
 800ae56:	701a      	strb	r2, [r3, #0]
			}
		}

		/* If ELCON charger hasn't responded for at least CHARGER_TIMEOUT_MS
		 * stop the Timer that transmits its messages and reset the connection */
		if((xTaskGetTickCount() - elcon.last_msg_received > CHARGER_TIMEOUT_MS) && elcon.connected)
 800ae58:	f00f f820 	bl	8019e9c <xTaskGetTickCount>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	4b0f      	ldr	r3, [pc, #60]	; (800ae9c <Charge_Task+0x6c>)
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d912      	bls.n	800ae92 <Charge_Task+0x62>
 800ae6c:	4b0b      	ldr	r3, [pc, #44]	; (800ae9c <Charge_Task+0x6c>)
 800ae6e:	791b      	ldrb	r3, [r3, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00e      	beq.n	800ae92 <Charge_Task+0x62>
		{
			elcon.connected = false;
 800ae74:	4b09      	ldr	r3, [pc, #36]	; (800ae9c <Charge_Task+0x6c>)
 800ae76:	2200      	movs	r2, #0
 800ae78:	711a      	strb	r2, [r3, #4]
			bmsInfo.BalInfo.balancing_enabled = 0;
 800ae7a:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <Charge_Task+0x78>)
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			tsac_timer_stopped = true;
 800ae82:	4b07      	ldr	r3, [pc, #28]	; (800aea0 <Charge_Task+0x70>)
 800ae84:	2201      	movs	r2, #1
 800ae86:	701a      	strb	r2, [r3, #0]
			osTimerStop(timTSACBusHandle);
 800ae88:	4b06      	ldr	r3, [pc, #24]	; (800aea4 <Charge_Task+0x74>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f00d f9e5 	bl	801825c <osTimerStop>
		}

		osDelay(100);
 800ae92:	2064      	movs	r0, #100	; 0x64
 800ae94:	f00d f956 	bl	8018144 <osDelay>
		if(elcon.connected)
 800ae98:	e7cc      	b.n	800ae34 <Charge_Task+0x4>
 800ae9a:	bf00      	nop
 800ae9c:	20002244 	.word	0x20002244
 800aea0:	20000015 	.word	0x20000015
 800aea4:	20000b54 	.word	0x20000b54
 800aea8:	2000206c 	.word	0x2000206c

0800aeac <MX_GPIO_Init>:
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b08a      	sub	sp, #40	; 0x28
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	f107 0314 	add.w	r3, r7, #20
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	601a      	str	r2, [r3, #0]
 800aeba:	605a      	str	r2, [r3, #4]
 800aebc:	609a      	str	r2, [r3, #8]
 800aebe:	60da      	str	r2, [r3, #12]
 800aec0:	611a      	str	r2, [r3, #16]
 800aec2:	2300      	movs	r3, #0
 800aec4:	613b      	str	r3, [r7, #16]
 800aec6:	4b4f      	ldr	r3, [pc, #316]	; (800b004 <MX_GPIO_Init+0x158>)
 800aec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeca:	4a4e      	ldr	r2, [pc, #312]	; (800b004 <MX_GPIO_Init+0x158>)
 800aecc:	f043 0304 	orr.w	r3, r3, #4
 800aed0:	6313      	str	r3, [r2, #48]	; 0x30
 800aed2:	4b4c      	ldr	r3, [pc, #304]	; (800b004 <MX_GPIO_Init+0x158>)
 800aed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed6:	f003 0304 	and.w	r3, r3, #4
 800aeda:	613b      	str	r3, [r7, #16]
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	2300      	movs	r3, #0
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	4b48      	ldr	r3, [pc, #288]	; (800b004 <MX_GPIO_Init+0x158>)
 800aee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee6:	4a47      	ldr	r2, [pc, #284]	; (800b004 <MX_GPIO_Init+0x158>)
 800aee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeec:	6313      	str	r3, [r2, #48]	; 0x30
 800aeee:	4b45      	ldr	r3, [pc, #276]	; (800b004 <MX_GPIO_Init+0x158>)
 800aef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aef6:	60fb      	str	r3, [r7, #12]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2300      	movs	r3, #0
 800aefc:	60bb      	str	r3, [r7, #8]
 800aefe:	4b41      	ldr	r3, [pc, #260]	; (800b004 <MX_GPIO_Init+0x158>)
 800af00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af02:	4a40      	ldr	r2, [pc, #256]	; (800b004 <MX_GPIO_Init+0x158>)
 800af04:	f043 0301 	orr.w	r3, r3, #1
 800af08:	6313      	str	r3, [r2, #48]	; 0x30
 800af0a:	4b3e      	ldr	r3, [pc, #248]	; (800b004 <MX_GPIO_Init+0x158>)
 800af0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	60bb      	str	r3, [r7, #8]
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	2300      	movs	r3, #0
 800af18:	607b      	str	r3, [r7, #4]
 800af1a:	4b3a      	ldr	r3, [pc, #232]	; (800b004 <MX_GPIO_Init+0x158>)
 800af1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1e:	4a39      	ldr	r2, [pc, #228]	; (800b004 <MX_GPIO_Init+0x158>)
 800af20:	f043 0302 	orr.w	r3, r3, #2
 800af24:	6313      	str	r3, [r2, #48]	; 0x30
 800af26:	4b37      	ldr	r3, [pc, #220]	; (800b004 <MX_GPIO_Init+0x158>)
 800af28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af2a:	f003 0302 	and.w	r3, r3, #2
 800af2e:	607b      	str	r3, [r7, #4]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	f241 7102 	movw	r1, #5890	; 0x1702
 800af38:	4833      	ldr	r0, [pc, #204]	; (800b008 <MX_GPIO_Init+0x15c>)
 800af3a:	f002 ff23 	bl	800dd84 <HAL_GPIO_WritePin>
 800af3e:	2200      	movs	r2, #0
 800af40:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800af44:	4831      	ldr	r0, [pc, #196]	; (800b00c <MX_GPIO_Init+0x160>)
 800af46:	f002 ff1d 	bl	800dd84 <HAL_GPIO_WritePin>
 800af4a:	2200      	movs	r2, #0
 800af4c:	f248 0120 	movw	r1, #32800	; 0x8020
 800af50:	482f      	ldr	r0, [pc, #188]	; (800b010 <MX_GPIO_Init+0x164>)
 800af52:	f002 ff17 	bl	800dd84 <HAL_GPIO_WritePin>
 800af56:	f244 0330 	movw	r3, #16432	; 0x4030
 800af5a:	617b      	str	r3, [r7, #20]
 800af5c:	2300      	movs	r3, #0
 800af5e:	61bb      	str	r3, [r7, #24]
 800af60:	2300      	movs	r3, #0
 800af62:	61fb      	str	r3, [r7, #28]
 800af64:	f107 0314 	add.w	r3, r7, #20
 800af68:	4619      	mov	r1, r3
 800af6a:	4827      	ldr	r0, [pc, #156]	; (800b008 <MX_GPIO_Init+0x15c>)
 800af6c:	f002 fd56 	bl	800da1c <HAL_GPIO_Init>
 800af70:	f241 7302 	movw	r3, #5890	; 0x1702
 800af74:	617b      	str	r3, [r7, #20]
 800af76:	2301      	movs	r3, #1
 800af78:	61bb      	str	r3, [r7, #24]
 800af7a:	2300      	movs	r3, #0
 800af7c:	61fb      	str	r3, [r7, #28]
 800af7e:	2300      	movs	r3, #0
 800af80:	623b      	str	r3, [r7, #32]
 800af82:	f107 0314 	add.w	r3, r7, #20
 800af86:	4619      	mov	r1, r3
 800af88:	481f      	ldr	r0, [pc, #124]	; (800b008 <MX_GPIO_Init+0x15c>)
 800af8a:	f002 fd47 	bl	800da1c <HAL_GPIO_Init>
 800af8e:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800af92:	617b      	str	r3, [r7, #20]
 800af94:	2301      	movs	r3, #1
 800af96:	61bb      	str	r3, [r7, #24]
 800af98:	2300      	movs	r3, #0
 800af9a:	61fb      	str	r3, [r7, #28]
 800af9c:	2300      	movs	r3, #0
 800af9e:	623b      	str	r3, [r7, #32]
 800afa0:	f107 0314 	add.w	r3, r7, #20
 800afa4:	4619      	mov	r1, r3
 800afa6:	4819      	ldr	r0, [pc, #100]	; (800b00c <MX_GPIO_Init+0x160>)
 800afa8:	f002 fd38 	bl	800da1c <HAL_GPIO_Init>
 800afac:	235a      	movs	r3, #90	; 0x5a
 800afae:	617b      	str	r3, [r7, #20]
 800afb0:	2300      	movs	r3, #0
 800afb2:	61bb      	str	r3, [r7, #24]
 800afb4:	2300      	movs	r3, #0
 800afb6:	61fb      	str	r3, [r7, #28]
 800afb8:	f107 0314 	add.w	r3, r7, #20
 800afbc:	4619      	mov	r1, r3
 800afbe:	4814      	ldr	r0, [pc, #80]	; (800b010 <MX_GPIO_Init+0x164>)
 800afc0:	f002 fd2c 	bl	800da1c <HAL_GPIO_Init>
 800afc4:	f248 0320 	movw	r3, #32800	; 0x8020
 800afc8:	617b      	str	r3, [r7, #20]
 800afca:	2301      	movs	r3, #1
 800afcc:	61bb      	str	r3, [r7, #24]
 800afce:	2300      	movs	r3, #0
 800afd0:	61fb      	str	r3, [r7, #28]
 800afd2:	2300      	movs	r3, #0
 800afd4:	623b      	str	r3, [r7, #32]
 800afd6:	f107 0314 	add.w	r3, r7, #20
 800afda:	4619      	mov	r1, r3
 800afdc:	480c      	ldr	r0, [pc, #48]	; (800b010 <MX_GPIO_Init+0x164>)
 800afde:	f002 fd1d 	bl	800da1c <HAL_GPIO_Init>
 800afe2:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 800afe6:	617b      	str	r3, [r7, #20]
 800afe8:	2300      	movs	r3, #0
 800afea:	61bb      	str	r3, [r7, #24]
 800afec:	2300      	movs	r3, #0
 800afee:	61fb      	str	r3, [r7, #28]
 800aff0:	f107 0314 	add.w	r3, r7, #20
 800aff4:	4619      	mov	r1, r3
 800aff6:	4805      	ldr	r0, [pc, #20]	; (800b00c <MX_GPIO_Init+0x160>)
 800aff8:	f002 fd10 	bl	800da1c <HAL_GPIO_Init>
 800affc:	bf00      	nop
 800affe:	3728      	adds	r7, #40	; 0x28
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	40023800 	.word	0x40023800
 800b008:	40020800 	.word	0x40020800
 800b00c:	40020000 	.word	0x40020000
 800b010:	40020400 	.word	0x40020400

0800b014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b018:	f000 fde8 	bl	800bbec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b01c:	f000 f81a 	bl	800b054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b020:	f7ff ff44 	bl	800aeac <MX_GPIO_Init>
  MX_DMA_Init();
 800b024:	f7fe f8b0 	bl	8009188 <MX_DMA_Init>
  MX_ADC1_Init();
 800b028:	f7fc fbd6 	bl	80077d8 <MX_ADC1_Init>
  MX_SPI1_Init();
 800b02c:	f000 f894 	bl	800b158 <MX_SPI1_Init>
  MX_FATFS_Init();
 800b030:	f007 fec6 	bl	8012dc0 <MX_FATFS_Init>
  MX_CAN1_Init();
 800b034:	f7fd feb6 	bl	8008da4 <MX_CAN1_Init>
  MX_CAN2_Init();
 800b038:	f7fd ff0c 	bl	8008e54 <MX_CAN2_Init>
  MX_SPI2_Init();
 800b03c:	f000 f8c2 	bl	800b1c4 <MX_SPI2_Init>
  MX_TIM1_Init();
 800b040:	f000 fba4 	bl	800b78c <MX_TIM1_Init>
  MX_TIM3_Init();
 800b044:	f000 fbf2 	bl	800b82c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800b048:	f7fe fdcc 	bl	8009be4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800b04c:	f00d f827 	bl	801809e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800b050:	e7fe      	b.n	800b050 <main+0x3c>
	...

0800b054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b094      	sub	sp, #80	; 0x50
 800b058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b05a:	f107 0320 	add.w	r3, r7, #32
 800b05e:	2230      	movs	r2, #48	; 0x30
 800b060:	2100      	movs	r1, #0
 800b062:	4618      	mov	r0, r3
 800b064:	f013 fa5d 	bl	801e522 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b068:	f107 030c 	add.w	r3, r7, #12
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]
 800b070:	605a      	str	r2, [r3, #4]
 800b072:	609a      	str	r2, [r3, #8]
 800b074:	60da      	str	r2, [r3, #12]
 800b076:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800b078:	2300      	movs	r3, #0
 800b07a:	60bb      	str	r3, [r7, #8]
 800b07c:	4b28      	ldr	r3, [pc, #160]	; (800b120 <SystemClock_Config+0xcc>)
 800b07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b080:	4a27      	ldr	r2, [pc, #156]	; (800b120 <SystemClock_Config+0xcc>)
 800b082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b086:	6413      	str	r3, [r2, #64]	; 0x40
 800b088:	4b25      	ldr	r3, [pc, #148]	; (800b120 <SystemClock_Config+0xcc>)
 800b08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b090:	60bb      	str	r3, [r7, #8]
 800b092:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b094:	2300      	movs	r3, #0
 800b096:	607b      	str	r3, [r7, #4]
 800b098:	4b22      	ldr	r3, [pc, #136]	; (800b124 <SystemClock_Config+0xd0>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a21      	ldr	r2, [pc, #132]	; (800b124 <SystemClock_Config+0xd0>)
 800b09e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b0a2:	6013      	str	r3, [r2, #0]
 800b0a4:	4b1f      	ldr	r3, [pc, #124]	; (800b124 <SystemClock_Config+0xd0>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0ac:	607b      	str	r3, [r7, #4]
 800b0ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b0b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b0b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b0be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800b0c4:	2304      	movs	r3, #4
 800b0c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800b0c8:	23a8      	movs	r3, #168	; 0xa8
 800b0ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b0cc:	2302      	movs	r3, #2
 800b0ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800b0d0:	2307      	movs	r3, #7
 800b0d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b0d4:	f107 0320 	add.w	r3, r7, #32
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f004 f903 	bl	800f2e4 <HAL_RCC_OscConfig>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800b0e4:	f000 f832 	bl	800b14c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b0e8:	230f      	movs	r3, #15
 800b0ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800b0f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800b0f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b0fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800b100:	f107 030c 	add.w	r3, r7, #12
 800b104:	2105      	movs	r1, #5
 800b106:	4618      	mov	r0, r3
 800b108:	f004 fb64 	bl	800f7d4 <HAL_RCC_ClockConfig>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800b112:	f000 f81b 	bl	800b14c <Error_Handler>
  }
}
 800b116:	bf00      	nop
 800b118:	3750      	adds	r7, #80	; 0x50
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	40023800 	.word	0x40023800
 800b124:	40007000 	.word	0x40007000

0800b128 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a04      	ldr	r2, [pc, #16]	; (800b148 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d101      	bne.n	800b13e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800b13a:	f000 fd79 	bl	800bc30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800b13e:	bf00      	nop
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	40001000 	.word	0x40001000

0800b14c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b14c:	b480      	push	{r7}
 800b14e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b150:	b672      	cpsid	i
}
 800b152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b154:	e7fe      	b.n	800b154 <Error_Handler+0x8>
	...

0800b158 <MX_SPI1_Init>:
 800b158:	b580      	push	{r7, lr}
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	4b17      	ldr	r3, [pc, #92]	; (800b1bc <MX_SPI1_Init+0x64>)
 800b15e:	4a18      	ldr	r2, [pc, #96]	; (800b1c0 <MX_SPI1_Init+0x68>)
 800b160:	601a      	str	r2, [r3, #0]
 800b162:	4b16      	ldr	r3, [pc, #88]	; (800b1bc <MX_SPI1_Init+0x64>)
 800b164:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b168:	605a      	str	r2, [r3, #4]
 800b16a:	4b14      	ldr	r3, [pc, #80]	; (800b1bc <MX_SPI1_Init+0x64>)
 800b16c:	2200      	movs	r2, #0
 800b16e:	609a      	str	r2, [r3, #8]
 800b170:	4b12      	ldr	r3, [pc, #72]	; (800b1bc <MX_SPI1_Init+0x64>)
 800b172:	2200      	movs	r2, #0
 800b174:	60da      	str	r2, [r3, #12]
 800b176:	4b11      	ldr	r3, [pc, #68]	; (800b1bc <MX_SPI1_Init+0x64>)
 800b178:	2200      	movs	r2, #0
 800b17a:	611a      	str	r2, [r3, #16]
 800b17c:	4b0f      	ldr	r3, [pc, #60]	; (800b1bc <MX_SPI1_Init+0x64>)
 800b17e:	2200      	movs	r2, #0
 800b180:	615a      	str	r2, [r3, #20]
 800b182:	4b0e      	ldr	r3, [pc, #56]	; (800b1bc <MX_SPI1_Init+0x64>)
 800b184:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b188:	619a      	str	r2, [r3, #24]
 800b18a:	4b0c      	ldr	r3, [pc, #48]	; (800b1bc <MX_SPI1_Init+0x64>)
 800b18c:	2220      	movs	r2, #32
 800b18e:	61da      	str	r2, [r3, #28]
 800b190:	4b0a      	ldr	r3, [pc, #40]	; (800b1bc <MX_SPI1_Init+0x64>)
 800b192:	2200      	movs	r2, #0
 800b194:	621a      	str	r2, [r3, #32]
 800b196:	4b09      	ldr	r3, [pc, #36]	; (800b1bc <MX_SPI1_Init+0x64>)
 800b198:	2200      	movs	r2, #0
 800b19a:	625a      	str	r2, [r3, #36]	; 0x24
 800b19c:	4b07      	ldr	r3, [pc, #28]	; (800b1bc <MX_SPI1_Init+0x64>)
 800b19e:	2200      	movs	r2, #0
 800b1a0:	629a      	str	r2, [r3, #40]	; 0x28
 800b1a2:	4b06      	ldr	r3, [pc, #24]	; (800b1bc <MX_SPI1_Init+0x64>)
 800b1a4:	220a      	movs	r2, #10
 800b1a6:	62da      	str	r2, [r3, #44]	; 0x2c
 800b1a8:	4804      	ldr	r0, [pc, #16]	; (800b1bc <MX_SPI1_Init+0x64>)
 800b1aa:	f004 fd51 	bl	800fc50 <HAL_SPI_Init>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <MX_SPI1_Init+0x60>
 800b1b4:	f7ff ffca 	bl	800b14c <Error_Handler>
 800b1b8:	bf00      	nop
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	20004394 	.word	0x20004394
 800b1c0:	40013000 	.word	0x40013000

0800b1c4 <MX_SPI2_Init>:
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	4b17      	ldr	r3, [pc, #92]	; (800b228 <MX_SPI2_Init+0x64>)
 800b1ca:	4a18      	ldr	r2, [pc, #96]	; (800b22c <MX_SPI2_Init+0x68>)
 800b1cc:	601a      	str	r2, [r3, #0]
 800b1ce:	4b16      	ldr	r3, [pc, #88]	; (800b228 <MX_SPI2_Init+0x64>)
 800b1d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b1d4:	605a      	str	r2, [r3, #4]
 800b1d6:	4b14      	ldr	r3, [pc, #80]	; (800b228 <MX_SPI2_Init+0x64>)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	609a      	str	r2, [r3, #8]
 800b1dc:	4b12      	ldr	r3, [pc, #72]	; (800b228 <MX_SPI2_Init+0x64>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	60da      	str	r2, [r3, #12]
 800b1e2:	4b11      	ldr	r3, [pc, #68]	; (800b228 <MX_SPI2_Init+0x64>)
 800b1e4:	2202      	movs	r2, #2
 800b1e6:	611a      	str	r2, [r3, #16]
 800b1e8:	4b0f      	ldr	r3, [pc, #60]	; (800b228 <MX_SPI2_Init+0x64>)
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	615a      	str	r2, [r3, #20]
 800b1ee:	4b0e      	ldr	r3, [pc, #56]	; (800b228 <MX_SPI2_Init+0x64>)
 800b1f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1f4:	619a      	str	r2, [r3, #24]
 800b1f6:	4b0c      	ldr	r3, [pc, #48]	; (800b228 <MX_SPI2_Init+0x64>)
 800b1f8:	2228      	movs	r2, #40	; 0x28
 800b1fa:	61da      	str	r2, [r3, #28]
 800b1fc:	4b0a      	ldr	r3, [pc, #40]	; (800b228 <MX_SPI2_Init+0x64>)
 800b1fe:	2200      	movs	r2, #0
 800b200:	621a      	str	r2, [r3, #32]
 800b202:	4b09      	ldr	r3, [pc, #36]	; (800b228 <MX_SPI2_Init+0x64>)
 800b204:	2200      	movs	r2, #0
 800b206:	625a      	str	r2, [r3, #36]	; 0x24
 800b208:	4b07      	ldr	r3, [pc, #28]	; (800b228 <MX_SPI2_Init+0x64>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	629a      	str	r2, [r3, #40]	; 0x28
 800b20e:	4b06      	ldr	r3, [pc, #24]	; (800b228 <MX_SPI2_Init+0x64>)
 800b210:	220a      	movs	r2, #10
 800b212:	62da      	str	r2, [r3, #44]	; 0x2c
 800b214:	4804      	ldr	r0, [pc, #16]	; (800b228 <MX_SPI2_Init+0x64>)
 800b216:	f004 fd1b 	bl	800fc50 <HAL_SPI_Init>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d001      	beq.n	800b224 <MX_SPI2_Init+0x60>
 800b220:	f7ff ff94 	bl	800b14c <Error_Handler>
 800b224:	bf00      	nop
 800b226:	bd80      	pop	{r7, pc}
 800b228:	200043ec 	.word	0x200043ec
 800b22c:	40003800 	.word	0x40003800

0800b230 <HAL_SPI_MspInit>:
 800b230:	b580      	push	{r7, lr}
 800b232:	b08c      	sub	sp, #48	; 0x30
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	f107 031c 	add.w	r3, r7, #28
 800b23c:	2200      	movs	r2, #0
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	605a      	str	r2, [r3, #4]
 800b242:	609a      	str	r2, [r3, #8]
 800b244:	60da      	str	r2, [r3, #12]
 800b246:	611a      	str	r2, [r3, #16]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a41      	ldr	r2, [pc, #260]	; (800b354 <HAL_SPI_MspInit+0x124>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d12c      	bne.n	800b2ac <HAL_SPI_MspInit+0x7c>
 800b252:	2300      	movs	r3, #0
 800b254:	61bb      	str	r3, [r7, #24]
 800b256:	4b40      	ldr	r3, [pc, #256]	; (800b358 <HAL_SPI_MspInit+0x128>)
 800b258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b25a:	4a3f      	ldr	r2, [pc, #252]	; (800b358 <HAL_SPI_MspInit+0x128>)
 800b25c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b260:	6453      	str	r3, [r2, #68]	; 0x44
 800b262:	4b3d      	ldr	r3, [pc, #244]	; (800b358 <HAL_SPI_MspInit+0x128>)
 800b264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b26a:	61bb      	str	r3, [r7, #24]
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	2300      	movs	r3, #0
 800b270:	617b      	str	r3, [r7, #20]
 800b272:	4b39      	ldr	r3, [pc, #228]	; (800b358 <HAL_SPI_MspInit+0x128>)
 800b274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b276:	4a38      	ldr	r2, [pc, #224]	; (800b358 <HAL_SPI_MspInit+0x128>)
 800b278:	f043 0301 	orr.w	r3, r3, #1
 800b27c:	6313      	str	r3, [r2, #48]	; 0x30
 800b27e:	4b36      	ldr	r3, [pc, #216]	; (800b358 <HAL_SPI_MspInit+0x128>)
 800b280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	617b      	str	r3, [r7, #20]
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	23e0      	movs	r3, #224	; 0xe0
 800b28c:	61fb      	str	r3, [r7, #28]
 800b28e:	2302      	movs	r3, #2
 800b290:	623b      	str	r3, [r7, #32]
 800b292:	2300      	movs	r3, #0
 800b294:	627b      	str	r3, [r7, #36]	; 0x24
 800b296:	2303      	movs	r3, #3
 800b298:	62bb      	str	r3, [r7, #40]	; 0x28
 800b29a:	2305      	movs	r3, #5
 800b29c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b29e:	f107 031c 	add.w	r3, r7, #28
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	482d      	ldr	r0, [pc, #180]	; (800b35c <HAL_SPI_MspInit+0x12c>)
 800b2a6:	f002 fbb9 	bl	800da1c <HAL_GPIO_Init>
 800b2aa:	e04f      	b.n	800b34c <HAL_SPI_MspInit+0x11c>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a2b      	ldr	r2, [pc, #172]	; (800b360 <HAL_SPI_MspInit+0x130>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d14a      	bne.n	800b34c <HAL_SPI_MspInit+0x11c>
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	613b      	str	r3, [r7, #16]
 800b2ba:	4b27      	ldr	r3, [pc, #156]	; (800b358 <HAL_SPI_MspInit+0x128>)
 800b2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2be:	4a26      	ldr	r2, [pc, #152]	; (800b358 <HAL_SPI_MspInit+0x128>)
 800b2c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b2c4:	6413      	str	r3, [r2, #64]	; 0x40
 800b2c6:	4b24      	ldr	r3, [pc, #144]	; (800b358 <HAL_SPI_MspInit+0x128>)
 800b2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2ce:	613b      	str	r3, [r7, #16]
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	60fb      	str	r3, [r7, #12]
 800b2d6:	4b20      	ldr	r3, [pc, #128]	; (800b358 <HAL_SPI_MspInit+0x128>)
 800b2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2da:	4a1f      	ldr	r2, [pc, #124]	; (800b358 <HAL_SPI_MspInit+0x128>)
 800b2dc:	f043 0304 	orr.w	r3, r3, #4
 800b2e0:	6313      	str	r3, [r2, #48]	; 0x30
 800b2e2:	4b1d      	ldr	r3, [pc, #116]	; (800b358 <HAL_SPI_MspInit+0x128>)
 800b2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e6:	f003 0304 	and.w	r3, r3, #4
 800b2ea:	60fb      	str	r3, [r7, #12]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	60bb      	str	r3, [r7, #8]
 800b2f2:	4b19      	ldr	r3, [pc, #100]	; (800b358 <HAL_SPI_MspInit+0x128>)
 800b2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f6:	4a18      	ldr	r2, [pc, #96]	; (800b358 <HAL_SPI_MspInit+0x128>)
 800b2f8:	f043 0302 	orr.w	r3, r3, #2
 800b2fc:	6313      	str	r3, [r2, #48]	; 0x30
 800b2fe:	4b16      	ldr	r3, [pc, #88]	; (800b358 <HAL_SPI_MspInit+0x128>)
 800b300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b302:	f003 0302 	and.w	r3, r3, #2
 800b306:	60bb      	str	r3, [r7, #8]
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	230c      	movs	r3, #12
 800b30c:	61fb      	str	r3, [r7, #28]
 800b30e:	2302      	movs	r3, #2
 800b310:	623b      	str	r3, [r7, #32]
 800b312:	2300      	movs	r3, #0
 800b314:	627b      	str	r3, [r7, #36]	; 0x24
 800b316:	2303      	movs	r3, #3
 800b318:	62bb      	str	r3, [r7, #40]	; 0x28
 800b31a:	2305      	movs	r3, #5
 800b31c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b31e:	f107 031c 	add.w	r3, r7, #28
 800b322:	4619      	mov	r1, r3
 800b324:	480f      	ldr	r0, [pc, #60]	; (800b364 <HAL_SPI_MspInit+0x134>)
 800b326:	f002 fb79 	bl	800da1c <HAL_GPIO_Init>
 800b32a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b32e:	61fb      	str	r3, [r7, #28]
 800b330:	2302      	movs	r3, #2
 800b332:	623b      	str	r3, [r7, #32]
 800b334:	2300      	movs	r3, #0
 800b336:	627b      	str	r3, [r7, #36]	; 0x24
 800b338:	2303      	movs	r3, #3
 800b33a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b33c:	2305      	movs	r3, #5
 800b33e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b340:	f107 031c 	add.w	r3, r7, #28
 800b344:	4619      	mov	r1, r3
 800b346:	4808      	ldr	r0, [pc, #32]	; (800b368 <HAL_SPI_MspInit+0x138>)
 800b348:	f002 fb68 	bl	800da1c <HAL_GPIO_Init>
 800b34c:	bf00      	nop
 800b34e:	3730      	adds	r7, #48	; 0x30
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	40013000 	.word	0x40013000
 800b358:	40023800 	.word	0x40023800
 800b35c:	40020000 	.word	0x40020000
 800b360:	40003800 	.word	0x40003800
 800b364:	40020800 	.word	0x40020800
 800b368:	40020400 	.word	0x40020400

0800b36c <HAL_MspInit>:
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	2300      	movs	r3, #0
 800b374:	607b      	str	r3, [r7, #4]
 800b376:	4b12      	ldr	r3, [pc, #72]	; (800b3c0 <HAL_MspInit+0x54>)
 800b378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b37a:	4a11      	ldr	r2, [pc, #68]	; (800b3c0 <HAL_MspInit+0x54>)
 800b37c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b380:	6453      	str	r3, [r2, #68]	; 0x44
 800b382:	4b0f      	ldr	r3, [pc, #60]	; (800b3c0 <HAL_MspInit+0x54>)
 800b384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b38a:	607b      	str	r3, [r7, #4]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2300      	movs	r3, #0
 800b390:	603b      	str	r3, [r7, #0]
 800b392:	4b0b      	ldr	r3, [pc, #44]	; (800b3c0 <HAL_MspInit+0x54>)
 800b394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b396:	4a0a      	ldr	r2, [pc, #40]	; (800b3c0 <HAL_MspInit+0x54>)
 800b398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b39c:	6413      	str	r3, [r2, #64]	; 0x40
 800b39e:	4b08      	ldr	r3, [pc, #32]	; (800b3c0 <HAL_MspInit+0x54>)
 800b3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3a6:	603b      	str	r3, [r7, #0]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	210f      	movs	r1, #15
 800b3ae:	f06f 0001 	mvn.w	r0, #1
 800b3b2:	f001 ff99 	bl	800d2e8 <HAL_NVIC_SetPriority>
 800b3b6:	bf00      	nop
 800b3b8:	3708      	adds	r7, #8
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	40023800 	.word	0x40023800

0800b3c4 <HAL_InitTick>:
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b08e      	sub	sp, #56	; 0x38
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	60fb      	str	r3, [r7, #12]
 800b3d8:	4b33      	ldr	r3, [pc, #204]	; (800b4a8 <HAL_InitTick+0xe4>)
 800b3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3dc:	4a32      	ldr	r2, [pc, #200]	; (800b4a8 <HAL_InitTick+0xe4>)
 800b3de:	f043 0310 	orr.w	r3, r3, #16
 800b3e2:	6413      	str	r3, [r2, #64]	; 0x40
 800b3e4:	4b30      	ldr	r3, [pc, #192]	; (800b4a8 <HAL_InitTick+0xe4>)
 800b3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e8:	f003 0310 	and.w	r3, r3, #16
 800b3ec:	60fb      	str	r3, [r7, #12]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f107 0210 	add.w	r2, r7, #16
 800b3f4:	f107 0314 	add.w	r3, r7, #20
 800b3f8:	4611      	mov	r1, r2
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f004 fbf6 	bl	800fbec <HAL_RCC_GetClockConfig>
 800b400:	6a3b      	ldr	r3, [r7, #32]
 800b402:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b406:	2b00      	cmp	r3, #0
 800b408:	d103      	bne.n	800b412 <HAL_InitTick+0x4e>
 800b40a:	f004 fbdb 	bl	800fbc4 <HAL_RCC_GetPCLK1Freq>
 800b40e:	6378      	str	r0, [r7, #52]	; 0x34
 800b410:	e004      	b.n	800b41c <HAL_InitTick+0x58>
 800b412:	f004 fbd7 	bl	800fbc4 <HAL_RCC_GetPCLK1Freq>
 800b416:	4603      	mov	r3, r0
 800b418:	005b      	lsls	r3, r3, #1
 800b41a:	637b      	str	r3, [r7, #52]	; 0x34
 800b41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b41e:	4a23      	ldr	r2, [pc, #140]	; (800b4ac <HAL_InitTick+0xe8>)
 800b420:	fba2 2303 	umull	r2, r3, r2, r3
 800b424:	0c9b      	lsrs	r3, r3, #18
 800b426:	3b01      	subs	r3, #1
 800b428:	62bb      	str	r3, [r7, #40]	; 0x28
 800b42a:	4b21      	ldr	r3, [pc, #132]	; (800b4b0 <HAL_InitTick+0xec>)
 800b42c:	4a21      	ldr	r2, [pc, #132]	; (800b4b4 <HAL_InitTick+0xf0>)
 800b42e:	601a      	str	r2, [r3, #0]
 800b430:	4b1f      	ldr	r3, [pc, #124]	; (800b4b0 <HAL_InitTick+0xec>)
 800b432:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b436:	60da      	str	r2, [r3, #12]
 800b438:	4a1d      	ldr	r2, [pc, #116]	; (800b4b0 <HAL_InitTick+0xec>)
 800b43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43c:	6053      	str	r3, [r2, #4]
 800b43e:	4b1c      	ldr	r3, [pc, #112]	; (800b4b0 <HAL_InitTick+0xec>)
 800b440:	2200      	movs	r2, #0
 800b442:	611a      	str	r2, [r3, #16]
 800b444:	4b1a      	ldr	r3, [pc, #104]	; (800b4b0 <HAL_InitTick+0xec>)
 800b446:	2200      	movs	r2, #0
 800b448:	609a      	str	r2, [r3, #8]
 800b44a:	4b19      	ldr	r3, [pc, #100]	; (800b4b0 <HAL_InitTick+0xec>)
 800b44c:	2200      	movs	r2, #0
 800b44e:	619a      	str	r2, [r3, #24]
 800b450:	4817      	ldr	r0, [pc, #92]	; (800b4b0 <HAL_InitTick+0xec>)
 800b452:	f005 f83d 	bl	80104d0 <HAL_TIM_Base_Init>
 800b456:	4603      	mov	r3, r0
 800b458:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b45c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b460:	2b00      	cmp	r3, #0
 800b462:	d11b      	bne.n	800b49c <HAL_InitTick+0xd8>
 800b464:	4812      	ldr	r0, [pc, #72]	; (800b4b0 <HAL_InitTick+0xec>)
 800b466:	f005 f883 	bl	8010570 <HAL_TIM_Base_Start_IT>
 800b46a:	4603      	mov	r3, r0
 800b46c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b470:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b474:	2b00      	cmp	r3, #0
 800b476:	d111      	bne.n	800b49c <HAL_InitTick+0xd8>
 800b478:	2036      	movs	r0, #54	; 0x36
 800b47a:	f001 ff51 	bl	800d320 <HAL_NVIC_EnableIRQ>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2b0f      	cmp	r3, #15
 800b482:	d808      	bhi.n	800b496 <HAL_InitTick+0xd2>
 800b484:	2200      	movs	r2, #0
 800b486:	6879      	ldr	r1, [r7, #4]
 800b488:	2036      	movs	r0, #54	; 0x36
 800b48a:	f001 ff2d 	bl	800d2e8 <HAL_NVIC_SetPriority>
 800b48e:	4a0a      	ldr	r2, [pc, #40]	; (800b4b8 <HAL_InitTick+0xf4>)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6013      	str	r3, [r2, #0]
 800b494:	e002      	b.n	800b49c <HAL_InitTick+0xd8>
 800b496:	2301      	movs	r3, #1
 800b498:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b49c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3738      	adds	r7, #56	; 0x38
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	40023800 	.word	0x40023800
 800b4ac:	431bde83 	.word	0x431bde83
 800b4b0:	20004444 	.word	0x20004444
 800b4b4:	40001000 	.word	0x40001000
 800b4b8:	2000001c 	.word	0x2000001c

0800b4bc <SDTimer_Handler>:
 800b4bc:	b480      	push	{r7}
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	4b0e      	ldr	r3, [pc, #56]	; (800b4fc <SDTimer_Handler+0x40>)
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d006      	beq.n	800b4d8 <SDTimer_Handler+0x1c>
 800b4ca:	4b0c      	ldr	r3, [pc, #48]	; (800b4fc <SDTimer_Handler+0x40>)
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	4b09      	ldr	r3, [pc, #36]	; (800b4fc <SDTimer_Handler+0x40>)
 800b4d6:	701a      	strb	r2, [r3, #0]
 800b4d8:	4b09      	ldr	r3, [pc, #36]	; (800b500 <SDTimer_Handler+0x44>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d006      	beq.n	800b4f0 <SDTimer_Handler+0x34>
 800b4e2:	4b07      	ldr	r3, [pc, #28]	; (800b500 <SDTimer_Handler+0x44>)
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	4b04      	ldr	r3, [pc, #16]	; (800b500 <SDTimer_Handler+0x44>)
 800b4ee:	701a      	strb	r2, [r3, #0]
 800b4f0:	bf00      	nop
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	2000448d 	.word	0x2000448d
 800b500:	2000448e 	.word	0x2000448e

0800b504 <NMI_Handler>:
 800b504:	b480      	push	{r7}
 800b506:	af00      	add	r7, sp, #0
 800b508:	e7fe      	b.n	800b508 <NMI_Handler+0x4>

0800b50a <HardFault_Handler>:
 800b50a:	b480      	push	{r7}
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	e7fe      	b.n	800b50e <HardFault_Handler+0x4>

0800b510 <MemManage_Handler>:
 800b510:	b480      	push	{r7}
 800b512:	af00      	add	r7, sp, #0
 800b514:	e7fe      	b.n	800b514 <MemManage_Handler+0x4>

0800b516 <BusFault_Handler>:
 800b516:	b480      	push	{r7}
 800b518:	af00      	add	r7, sp, #0
 800b51a:	e7fe      	b.n	800b51a <BusFault_Handler+0x4>

0800b51c <UsageFault_Handler>:
 800b51c:	b480      	push	{r7}
 800b51e:	af00      	add	r7, sp, #0
 800b520:	e7fe      	b.n	800b520 <UsageFault_Handler+0x4>

0800b522 <DebugMon_Handler>:
 800b522:	b480      	push	{r7}
 800b524:	af00      	add	r7, sp, #0
 800b526:	bf00      	nop
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <CAN1_RX0_IRQHandler>:
 800b530:	b580      	push	{r7, lr}
 800b532:	af00      	add	r7, sp, #0
 800b534:	4802      	ldr	r0, [pc, #8]	; (800b540 <CAN1_RX0_IRQHandler+0x10>)
 800b536:	f001 fbfa 	bl	800cd2e <HAL_CAN_IRQHandler>
 800b53a:	bf00      	nop
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	20000a18 	.word	0x20000a18

0800b544 <TIM3_IRQHandler>:
 800b544:	b580      	push	{r7, lr}
 800b546:	af00      	add	r7, sp, #0
 800b548:	4802      	ldr	r0, [pc, #8]	; (800b554 <TIM3_IRQHandler+0x10>)
 800b54a:	f005 fa03 	bl	8010954 <HAL_TIM_IRQHandler>
 800b54e:	bf00      	nop
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	200044dc 	.word	0x200044dc

0800b558 <TIM6_DAC_IRQHandler>:
 800b558:	b580      	push	{r7, lr}
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	4b0d      	ldr	r3, [pc, #52]	; (800b594 <TIM6_DAC_IRQHandler+0x3c>)
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	b2db      	uxtb	r3, r3
 800b562:	3301      	adds	r3, #1
 800b564:	b2da      	uxtb	r2, r3
 800b566:	4b0b      	ldr	r3, [pc, #44]	; (800b594 <TIM6_DAC_IRQHandler+0x3c>)
 800b568:	701a      	strb	r2, [r3, #0]
 800b56a:	4b0a      	ldr	r3, [pc, #40]	; (800b594 <TIM6_DAC_IRQHandler+0x3c>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	2b09      	cmp	r3, #9
 800b572:	d904      	bls.n	800b57e <TIM6_DAC_IRQHandler+0x26>
 800b574:	4b07      	ldr	r3, [pc, #28]	; (800b594 <TIM6_DAC_IRQHandler+0x3c>)
 800b576:	2200      	movs	r2, #0
 800b578:	701a      	strb	r2, [r3, #0]
 800b57a:	f7ff ff9f 	bl	800b4bc <SDTimer_Handler>
 800b57e:	4b06      	ldr	r3, [pc, #24]	; (800b598 <TIM6_DAC_IRQHandler+0x40>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3301      	adds	r3, #1
 800b584:	4a04      	ldr	r2, [pc, #16]	; (800b598 <TIM6_DAC_IRQHandler+0x40>)
 800b586:	6013      	str	r3, [r2, #0]
 800b588:	4804      	ldr	r0, [pc, #16]	; (800b59c <TIM6_DAC_IRQHandler+0x44>)
 800b58a:	f005 f9e3 	bl	8010954 <HAL_TIM_IRQHandler>
 800b58e:	bf00      	nop
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	2000448c 	.word	0x2000448c
 800b598:	20004390 	.word	0x20004390
 800b59c:	20004444 	.word	0x20004444

0800b5a0 <DMA2_Stream0_IRQHandler>:
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	4802      	ldr	r0, [pc, #8]	; (800b5b0 <DMA2_Stream0_IRQHandler+0x10>)
 800b5a6:	f001 ffcf 	bl	800d548 <HAL_DMA_IRQHandler>
 800b5aa:	bf00      	nop
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	2000092c 	.word	0x2000092c

0800b5b4 <CAN2_RX1_IRQHandler>:
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	4802      	ldr	r0, [pc, #8]	; (800b5c4 <CAN2_RX1_IRQHandler+0x10>)
 800b5ba:	f001 fbb8 	bl	800cd2e <HAL_CAN_IRQHandler>
 800b5be:	bf00      	nop
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	20000a40 	.word	0x20000a40

0800b5c8 <OTG_FS_IRQHandler>:
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	4802      	ldr	r0, [pc, #8]	; (800b5d8 <OTG_FS_IRQHandler+0x10>)
 800b5ce:	f002 fd5c 	bl	800e08a <HAL_PCD_IRQHandler>
 800b5d2:	bf00      	nop
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	20009954 	.word	0x20009954

0800b5dc <_getpid>:
 800b5dc:	b480      	push	{r7}
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <_kill>:
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
 800b5f6:	f013 f85f 	bl	801e6b8 <__errno>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2216      	movs	r2, #22
 800b5fe:	601a      	str	r2, [r3, #0]
 800b600:	f04f 33ff 	mov.w	r3, #4294967295
 800b604:	4618      	mov	r0, r3
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <_exit>:
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	f04f 31ff 	mov.w	r1, #4294967295
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f7ff ffe7 	bl	800b5ec <_kill>
 800b61e:	e7fe      	b.n	800b61e <_exit+0x12>

0800b620 <_read>:
 800b620:	b580      	push	{r7, lr}
 800b622:	b086      	sub	sp, #24
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
 800b62c:	2300      	movs	r3, #0
 800b62e:	617b      	str	r3, [r7, #20]
 800b630:	e00a      	b.n	800b648 <_read+0x28>
 800b632:	f3af 8000 	nop.w
 800b636:	4601      	mov	r1, r0
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	1c5a      	adds	r2, r3, #1
 800b63c:	60ba      	str	r2, [r7, #8]
 800b63e:	b2ca      	uxtb	r2, r1
 800b640:	701a      	strb	r2, [r3, #0]
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	3301      	adds	r3, #1
 800b646:	617b      	str	r3, [r7, #20]
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	dbf0      	blt.n	800b632 <_read+0x12>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4618      	mov	r0, r3
 800b654:	3718      	adds	r7, #24
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <_write>:
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b086      	sub	sp, #24
 800b65e:	af00      	add	r7, sp, #0
 800b660:	60f8      	str	r0, [r7, #12]
 800b662:	60b9      	str	r1, [r7, #8]
 800b664:	607a      	str	r2, [r7, #4]
 800b666:	2300      	movs	r3, #0
 800b668:	617b      	str	r3, [r7, #20]
 800b66a:	e009      	b.n	800b680 <_write+0x26>
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	1c5a      	adds	r2, r3, #1
 800b670:	60ba      	str	r2, [r7, #8]
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	4618      	mov	r0, r3
 800b676:	f3af 8000 	nop.w
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	3301      	adds	r3, #1
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	697a      	ldr	r2, [r7, #20]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	429a      	cmp	r2, r3
 800b686:	dbf1      	blt.n	800b66c <_write+0x12>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4618      	mov	r0, r3
 800b68c:	3718      	adds	r7, #24
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <_close>:
 800b692:	b480      	push	{r7}
 800b694:	b083      	sub	sp, #12
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	f04f 33ff 	mov.w	r3, #4294967295
 800b69e:	4618      	mov	r0, r3
 800b6a0:	370c      	adds	r7, #12
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr

0800b6aa <_fstat>:
 800b6aa:	b480      	push	{r7}
 800b6ac:	b083      	sub	sp, #12
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	6039      	str	r1, [r7, #0]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b6ba:	605a      	str	r2, [r3, #4]
 800b6bc:	2300      	movs	r3, #0
 800b6be:	4618      	mov	r0, r3
 800b6c0:	370c      	adds	r7, #12
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <_isatty>:
 800b6ca:	b480      	push	{r7}
 800b6cc:	b083      	sub	sp, #12
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <_lseek>:
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	607a      	str	r2, [r7, #4]
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3714      	adds	r7, #20
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
	...

0800b6fc <_sbrk>:
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	4a14      	ldr	r2, [pc, #80]	; (800b758 <_sbrk+0x5c>)
 800b706:	4b15      	ldr	r3, [pc, #84]	; (800b75c <_sbrk+0x60>)
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	617b      	str	r3, [r7, #20]
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	613b      	str	r3, [r7, #16]
 800b710:	4b13      	ldr	r3, [pc, #76]	; (800b760 <_sbrk+0x64>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d102      	bne.n	800b71e <_sbrk+0x22>
 800b718:	4b11      	ldr	r3, [pc, #68]	; (800b760 <_sbrk+0x64>)
 800b71a:	4a12      	ldr	r2, [pc, #72]	; (800b764 <_sbrk+0x68>)
 800b71c:	601a      	str	r2, [r3, #0]
 800b71e:	4b10      	ldr	r3, [pc, #64]	; (800b760 <_sbrk+0x64>)
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4413      	add	r3, r2
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d207      	bcs.n	800b73c <_sbrk+0x40>
 800b72c:	f012 ffc4 	bl	801e6b8 <__errno>
 800b730:	4603      	mov	r3, r0
 800b732:	220c      	movs	r2, #12
 800b734:	601a      	str	r2, [r3, #0]
 800b736:	f04f 33ff 	mov.w	r3, #4294967295
 800b73a:	e009      	b.n	800b750 <_sbrk+0x54>
 800b73c:	4b08      	ldr	r3, [pc, #32]	; (800b760 <_sbrk+0x64>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	60fb      	str	r3, [r7, #12]
 800b742:	4b07      	ldr	r3, [pc, #28]	; (800b760 <_sbrk+0x64>)
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4413      	add	r3, r2
 800b74a:	4a05      	ldr	r2, [pc, #20]	; (800b760 <_sbrk+0x64>)
 800b74c:	6013      	str	r3, [r2, #0]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	4618      	mov	r0, r3
 800b752:	3718      	adds	r7, #24
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	20020000 	.word	0x20020000
 800b75c:	00000400 	.word	0x00000400
 800b760:	20004490 	.word	0x20004490
 800b764:	2000a1d0 	.word	0x2000a1d0

0800b768 <SystemInit>:
 800b768:	b480      	push	{r7}
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	4b06      	ldr	r3, [pc, #24]	; (800b788 <SystemInit+0x20>)
 800b76e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b772:	4a05      	ldr	r2, [pc, #20]	; (800b788 <SystemInit+0x20>)
 800b774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800b77c:	bf00      	nop
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr
 800b786:	bf00      	nop
 800b788:	e000ed00 	.word	0xe000ed00

0800b78c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b792:	f107 0308 	add.w	r3, r7, #8
 800b796:	2200      	movs	r2, #0
 800b798:	601a      	str	r2, [r3, #0]
 800b79a:	605a      	str	r2, [r3, #4]
 800b79c:	609a      	str	r2, [r3, #8]
 800b79e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b7a0:	463b      	mov	r3, r7
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	601a      	str	r2, [r3, #0]
 800b7a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800b7a8:	4b1e      	ldr	r3, [pc, #120]	; (800b824 <MX_TIM1_Init+0x98>)
 800b7aa:	4a1f      	ldr	r2, [pc, #124]	; (800b828 <MX_TIM1_Init+0x9c>)
 800b7ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800b7ae:	4b1d      	ldr	r3, [pc, #116]	; (800b824 <MX_TIM1_Init+0x98>)
 800b7b0:	22a7      	movs	r2, #167	; 0xa7
 800b7b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b7b4:	4b1b      	ldr	r3, [pc, #108]	; (800b824 <MX_TIM1_Init+0x98>)
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800b7ba:	4b1a      	ldr	r3, [pc, #104]	; (800b824 <MX_TIM1_Init+0x98>)
 800b7bc:	f242 720f 	movw	r2, #9999	; 0x270f
 800b7c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b7c2:	4b18      	ldr	r3, [pc, #96]	; (800b824 <MX_TIM1_Init+0x98>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800b7c8:	4b16      	ldr	r3, [pc, #88]	; (800b824 <MX_TIM1_Init+0x98>)
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b7ce:	4b15      	ldr	r3, [pc, #84]	; (800b824 <MX_TIM1_Init+0x98>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800b7d4:	4813      	ldr	r0, [pc, #76]	; (800b824 <MX_TIM1_Init+0x98>)
 800b7d6:	f004 fe7b 	bl	80104d0 <HAL_TIM_Base_Init>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d001      	beq.n	800b7e4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800b7e0:	f7ff fcb4 	bl	800b14c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b7e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800b7ea:	f107 0308 	add.w	r3, r7, #8
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	480c      	ldr	r0, [pc, #48]	; (800b824 <MX_TIM1_Init+0x98>)
 800b7f2:	f005 fa53 	bl	8010c9c <HAL_TIM_ConfigClockSource>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d001      	beq.n	800b800 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800b7fc:	f7ff fca6 	bl	800b14c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b800:	2300      	movs	r3, #0
 800b802:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b804:	2300      	movs	r3, #0
 800b806:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b808:	463b      	mov	r3, r7
 800b80a:	4619      	mov	r1, r3
 800b80c:	4805      	ldr	r0, [pc, #20]	; (800b824 <MX_TIM1_Init+0x98>)
 800b80e:	f005 fdf9 	bl	8011404 <HAL_TIMEx_MasterConfigSynchronization>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800b818:	f7ff fc98 	bl	800b14c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800b81c:	bf00      	nop
 800b81e:	3718      	adds	r7, #24
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	20004494 	.word	0x20004494
 800b828:	40010000 	.word	0x40010000

0800b82c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b08a      	sub	sp, #40	; 0x28
 800b830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b832:	f107 0318 	add.w	r3, r7, #24
 800b836:	2200      	movs	r2, #0
 800b838:	601a      	str	r2, [r3, #0]
 800b83a:	605a      	str	r2, [r3, #4]
 800b83c:	609a      	str	r2, [r3, #8]
 800b83e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b840:	f107 0310 	add.w	r3, r7, #16
 800b844:	2200      	movs	r2, #0
 800b846:	601a      	str	r2, [r3, #0]
 800b848:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800b84a:	463b      	mov	r3, r7
 800b84c:	2200      	movs	r2, #0
 800b84e:	601a      	str	r2, [r3, #0]
 800b850:	605a      	str	r2, [r3, #4]
 800b852:	609a      	str	r2, [r3, #8]
 800b854:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b856:	4b2c      	ldr	r3, [pc, #176]	; (800b908 <MX_TIM3_Init+0xdc>)
 800b858:	4a2c      	ldr	r2, [pc, #176]	; (800b90c <MX_TIM3_Init+0xe0>)
 800b85a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400 - 1;
 800b85c:	4b2a      	ldr	r3, [pc, #168]	; (800b908 <MX_TIM3_Init+0xdc>)
 800b85e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800b862:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b864:	4b28      	ldr	r3, [pc, #160]	; (800b908 <MX_TIM3_Init+0xdc>)
 800b866:	2200      	movs	r2, #0
 800b868:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 800b86a:	4b27      	ldr	r3, [pc, #156]	; (800b908 <MX_TIM3_Init+0xdc>)
 800b86c:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b870:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b872:	4b25      	ldr	r3, [pc, #148]	; (800b908 <MX_TIM3_Init+0xdc>)
 800b874:	2200      	movs	r2, #0
 800b876:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b878:	4b23      	ldr	r3, [pc, #140]	; (800b908 <MX_TIM3_Init+0xdc>)
 800b87a:	2200      	movs	r2, #0
 800b87c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b87e:	4822      	ldr	r0, [pc, #136]	; (800b908 <MX_TIM3_Init+0xdc>)
 800b880:	f004 fe26 	bl	80104d0 <HAL_TIM_Base_Init>
 800b884:	4603      	mov	r3, r0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d001      	beq.n	800b88e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800b88a:	f7ff fc5f 	bl	800b14c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b88e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b892:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b894:	f107 0318 	add.w	r3, r7, #24
 800b898:	4619      	mov	r1, r3
 800b89a:	481b      	ldr	r0, [pc, #108]	; (800b908 <MX_TIM3_Init+0xdc>)
 800b89c:	f005 f9fe 	bl	8010c9c <HAL_TIM_ConfigClockSource>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d001      	beq.n	800b8aa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800b8a6:	f7ff fc51 	bl	800b14c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800b8aa:	4817      	ldr	r0, [pc, #92]	; (800b908 <MX_TIM3_Init+0xdc>)
 800b8ac:	f004 fed0 	bl	8010650 <HAL_TIM_IC_Init>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d001      	beq.n	800b8ba <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800b8b6:	f7ff fc49 	bl	800b14c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b8c2:	f107 0310 	add.w	r3, r7, #16
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	480f      	ldr	r0, [pc, #60]	; (800b908 <MX_TIM3_Init+0xdc>)
 800b8ca:	f005 fd9b 	bl	8011404 <HAL_TIMEx_MasterConfigSynchronization>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 800b8d4:	f7ff fc3a 	bl	800b14c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800b8d8:	230a      	movs	r3, #10
 800b8da:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800b8e8:	463b      	mov	r3, r7
 800b8ea:	2204      	movs	r2, #4
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	4806      	ldr	r0, [pc, #24]	; (800b908 <MX_TIM3_Init+0xdc>)
 800b8f0:	f005 f938 	bl	8010b64 <HAL_TIM_IC_ConfigChannel>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800b8fa:	f7ff fc27 	bl	800b14c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800b8fe:	bf00      	nop
 800b900:	3728      	adds	r7, #40	; 0x28
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	200044dc 	.word	0x200044dc
 800b90c:	40000400 	.word	0x40000400

0800b910 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b08a      	sub	sp, #40	; 0x28
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b918:	f107 0314 	add.w	r3, r7, #20
 800b91c:	2200      	movs	r2, #0
 800b91e:	601a      	str	r2, [r3, #0]
 800b920:	605a      	str	r2, [r3, #4]
 800b922:	609a      	str	r2, [r3, #8]
 800b924:	60da      	str	r2, [r3, #12]
 800b926:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a27      	ldr	r2, [pc, #156]	; (800b9cc <HAL_TIM_Base_MspInit+0xbc>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d10e      	bne.n	800b950 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b932:	2300      	movs	r3, #0
 800b934:	613b      	str	r3, [r7, #16]
 800b936:	4b26      	ldr	r3, [pc, #152]	; (800b9d0 <HAL_TIM_Base_MspInit+0xc0>)
 800b938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b93a:	4a25      	ldr	r2, [pc, #148]	; (800b9d0 <HAL_TIM_Base_MspInit+0xc0>)
 800b93c:	f043 0301 	orr.w	r3, r3, #1
 800b940:	6453      	str	r3, [r2, #68]	; 0x44
 800b942:	4b23      	ldr	r3, [pc, #140]	; (800b9d0 <HAL_TIM_Base_MspInit+0xc0>)
 800b944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b946:	f003 0301 	and.w	r3, r3, #1
 800b94a:	613b      	str	r3, [r7, #16]
 800b94c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800b94e:	e038      	b.n	800b9c2 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM3)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a1f      	ldr	r2, [pc, #124]	; (800b9d4 <HAL_TIM_Base_MspInit+0xc4>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d133      	bne.n	800b9c2 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b95a:	2300      	movs	r3, #0
 800b95c:	60fb      	str	r3, [r7, #12]
 800b95e:	4b1c      	ldr	r3, [pc, #112]	; (800b9d0 <HAL_TIM_Base_MspInit+0xc0>)
 800b960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b962:	4a1b      	ldr	r2, [pc, #108]	; (800b9d0 <HAL_TIM_Base_MspInit+0xc0>)
 800b964:	f043 0302 	orr.w	r3, r3, #2
 800b968:	6413      	str	r3, [r2, #64]	; 0x40
 800b96a:	4b19      	ldr	r3, [pc, #100]	; (800b9d0 <HAL_TIM_Base_MspInit+0xc0>)
 800b96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96e:	f003 0302 	and.w	r3, r3, #2
 800b972:	60fb      	str	r3, [r7, #12]
 800b974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b976:	2300      	movs	r3, #0
 800b978:	60bb      	str	r3, [r7, #8]
 800b97a:	4b15      	ldr	r3, [pc, #84]	; (800b9d0 <HAL_TIM_Base_MspInit+0xc0>)
 800b97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97e:	4a14      	ldr	r2, [pc, #80]	; (800b9d0 <HAL_TIM_Base_MspInit+0xc0>)
 800b980:	f043 0304 	orr.w	r3, r3, #4
 800b984:	6313      	str	r3, [r2, #48]	; 0x30
 800b986:	4b12      	ldr	r3, [pc, #72]	; (800b9d0 <HAL_TIM_Base_MspInit+0xc0>)
 800b988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b98a:	f003 0304 	and.w	r3, r3, #4
 800b98e:	60bb      	str	r3, [r7, #8]
 800b990:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 800b992:	2380      	movs	r3, #128	; 0x80
 800b994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b996:	2302      	movs	r3, #2
 800b998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b99a:	2300      	movs	r3, #0
 800b99c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b9a2:	2302      	movs	r3, #2
 800b9a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 800b9a6:	f107 0314 	add.w	r3, r7, #20
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	480a      	ldr	r0, [pc, #40]	; (800b9d8 <HAL_TIM_Base_MspInit+0xc8>)
 800b9ae:	f002 f835 	bl	800da1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2105      	movs	r1, #5
 800b9b6:	201d      	movs	r0, #29
 800b9b8:	f001 fc96 	bl	800d2e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b9bc:	201d      	movs	r0, #29
 800b9be:	f001 fcaf 	bl	800d320 <HAL_NVIC_EnableIRQ>
}
 800b9c2:	bf00      	nop
 800b9c4:	3728      	adds	r7, #40	; 0x28
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	40010000 	.word	0x40010000
 800b9d0:	40023800 	.word	0x40023800
 800b9d4:	40000400 	.word	0x40000400
 800b9d8:	40020800 	.word	0x40020800

0800b9dc <Start_Timers>:
}

/* USER CODE BEGIN 1 */

void Start_Timers()
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	af00      	add	r7, sp, #0
//	TIM8->CCR3 = 20;                    /* Defines the Duty Cycle of the TIM3_CH4. 20 -> 50% DC */
//	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);   // Fans require 25kHz PWM frequency
	osDelay(3);
 800b9e0:	2003      	movs	r0, #3
 800b9e2:	f00c fbaf 	bl	8018144 <osDelay>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800b9e6:	2104      	movs	r1, #4
 800b9e8:	4803      	ldr	r0, [pc, #12]	; (800b9f8 <Start_Timers+0x1c>)
 800b9ea:	f004 fe8b 	bl	8010704 <HAL_TIM_IC_Start_IT>
	osDelay(3);
 800b9ee:	2003      	movs	r0, #3
 800b9f0:	f00c fba8 	bl	8018144 <osDelay>
}
 800b9f4:	bf00      	nop
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	200044dc 	.word	0x200044dc

0800b9fc <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b9fc:	b5b0      	push	{r4, r5, r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
	/* TIM3_CHANNEL2 measures the PWM frequency and Duty Cycle from the IMD */
	if ((htim == &htim3) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a5f      	ldr	r2, [pc, #380]	; (800bb84 <HAL_TIM_IC_CaptureCallback+0x188>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	f040 80b7 	bne.w	800bb7c <HAL_TIM_IC_CaptureCallback+0x180>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	7f1b      	ldrb	r3, [r3, #28]
 800ba12:	2b02      	cmp	r3, #2
 800ba14:	f040 80b2 	bne.w	800bb7c <HAL_TIM_IC_CaptureCallback+0x180>
	{
		GPIO_PinState pwm_level = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);
 800ba18:	2180      	movs	r1, #128	; 0x80
 800ba1a:	485b      	ldr	r0, [pc, #364]	; (800bb88 <HAL_TIM_IC_CaptureCallback+0x18c>)
 800ba1c:	f002 f99a 	bl	800dd54 <HAL_GPIO_ReadPin>
 800ba20:	4603      	mov	r3, r0
 800ba22:	73fb      	strb	r3, [r7, #15]
		if (pwm_level == GPIO_PIN_SET)
 800ba24:	7bfb      	ldrb	r3, [r7, #15]
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d103      	bne.n	800ba32 <HAL_TIM_IC_CaptureCallback+0x36>
			imd.rising_edge_detected = true;
 800ba2a:	4b58      	ldr	r3, [pc, #352]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	741a      	strb	r2, [r3, #16]
 800ba30:	e002      	b.n	800ba38 <HAL_TIM_IC_CaptureCallback+0x3c>
		else
			imd.rising_edge_detected = false;
 800ba32:	4b56      	ldr	r3, [pc, #344]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba34:	2200      	movs	r2, #0
 800ba36:	741a      	strb	r2, [r3, #16]


		if (imd.rising_edge_detected)
 800ba38:	4b54      	ldr	r3, [pc, #336]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba3a:	7c1b      	ldrb	r3, [r3, #16]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d037      	beq.n	800bab0 <HAL_TIM_IC_CaptureCallback+0xb4>
		{
			imd.rising_edge_detected = false;
 800ba40:	4b52      	ldr	r3, [pc, #328]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba42:	2200      	movs	r2, #0
 800ba44:	741a      	strb	r2, [r3, #16]
			imd.rising_edge2 = imd.rising_edge1;
 800ba46:	4b51      	ldr	r3, [pc, #324]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba48:	881a      	ldrh	r2, [r3, #0]
 800ba4a:	4b50      	ldr	r3, [pc, #320]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba4c:	809a      	strh	r2, [r3, #4]
			imd.rising_edge1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800ba4e:	2104      	movs	r1, #4
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f005 f9eb 	bl	8010e2c <HAL_TIM_ReadCapturedValue>
 800ba56:	4603      	mov	r3, r0
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	4b4c      	ldr	r3, [pc, #304]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba5c:	801a      	strh	r2, [r3, #0]

			if (imd.rising_edge2 > imd.rising_edge1)
 800ba5e:	4b4b      	ldr	r3, [pc, #300]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba60:	889a      	ldrh	r2, [r3, #4]
 800ba62:	4b4a      	ldr	r3, [pc, #296]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba64:	881b      	ldrh	r3, [r3, #0]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d908      	bls.n	800ba7c <HAL_TIM_IC_CaptureCallback+0x80>
				imd.period = imd.rising_edge2 - imd.rising_edge1;
 800ba6a:	4b48      	ldr	r3, [pc, #288]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba6c:	889a      	ldrh	r2, [r3, #4]
 800ba6e:	4b47      	ldr	r3, [pc, #284]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba70:	881b      	ldrh	r3, [r3, #0]
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	4b45      	ldr	r3, [pc, #276]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba78:	811a      	strh	r2, [r3, #8]
 800ba7a:	e011      	b.n	800baa0 <HAL_TIM_IC_CaptureCallback+0xa4>
			else if (imd.rising_edge2 < imd.rising_edge1)
 800ba7c:	4b43      	ldr	r3, [pc, #268]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba7e:	889a      	ldrh	r2, [r3, #4]
 800ba80:	4b42      	ldr	r3, [pc, #264]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba82:	881b      	ldrh	r3, [r3, #0]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d20b      	bcs.n	800baa0 <HAL_TIM_IC_CaptureCallback+0xa4>
				imd.period = (TIM3_PERIOD - imd.rising_edge1) + imd.rising_edge2;
 800ba88:	4b40      	ldr	r3, [pc, #256]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba8a:	889a      	ldrh	r2, [r3, #4]
 800ba8c:	4b3f      	ldr	r3, [pc, #252]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba8e:	881b      	ldrh	r3, [r3, #0]
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	f5a3 5372 	sub.w	r3, r3, #15488	; 0x3c80
 800ba98:	3b30      	subs	r3, #48	; 0x30
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	4b3b      	ldr	r3, [pc, #236]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800ba9e:	811a      	strh	r2, [r3, #8]

			imd.period = TIM3_PERIOD - imd.period;  // DYNATH ALVANIA
 800baa0:	4b3a      	ldr	r3, [pc, #232]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800baa2:	891a      	ldrh	r2, [r3, #8]
 800baa4:	4b3a      	ldr	r3, [pc, #232]	; (800bb90 <HAL_TIM_IC_CaptureCallback+0x194>)
 800baa6:	1a9b      	subs	r3, r3, r2
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	4b38      	ldr	r3, [pc, #224]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800baac:	811a      	strh	r2, [r3, #8]
				imd.frequency = TIM3_CLOCK / imd.period;
				imd.dutyCycle = 100.0 * (float)(imd.pulse_width) / (float)(imd.period);
			}
		}
	}
}
 800baae:	e065      	b.n	800bb7c <HAL_TIM_IC_CaptureCallback+0x180>
			imd.rising_edge_detected = true;
 800bab0:	4b36      	ldr	r3, [pc, #216]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800bab2:	2201      	movs	r2, #1
 800bab4:	741a      	strb	r2, [r3, #16]
			imd.falling_edge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800bab6:	2104      	movs	r1, #4
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f005 f9b7 	bl	8010e2c <HAL_TIM_ReadCapturedValue>
 800babe:	4603      	mov	r3, r0
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	4b32      	ldr	r3, [pc, #200]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800bac4:	805a      	strh	r2, [r3, #2]
			if (imd.falling_edge > imd.rising_edge1)
 800bac6:	4b31      	ldr	r3, [pc, #196]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800bac8:	885a      	ldrh	r2, [r3, #2]
 800baca:	4b30      	ldr	r3, [pc, #192]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800bacc:	881b      	ldrh	r3, [r3, #0]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d908      	bls.n	800bae4 <HAL_TIM_IC_CaptureCallback+0xe8>
				imd.pulse_width = imd.falling_edge - imd.rising_edge1;
 800bad2:	4b2e      	ldr	r3, [pc, #184]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800bad4:	885a      	ldrh	r2, [r3, #2]
 800bad6:	4b2d      	ldr	r3, [pc, #180]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800bad8:	881b      	ldrh	r3, [r3, #0]
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	b29a      	uxth	r2, r3
 800bade:	4b2b      	ldr	r3, [pc, #172]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800bae0:	80da      	strh	r2, [r3, #6]
 800bae2:	e011      	b.n	800bb08 <HAL_TIM_IC_CaptureCallback+0x10c>
			else if (imd.falling_edge < imd.rising_edge1)
 800bae4:	4b29      	ldr	r3, [pc, #164]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800bae6:	885a      	ldrh	r2, [r3, #2]
 800bae8:	4b28      	ldr	r3, [pc, #160]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800baea:	881b      	ldrh	r3, [r3, #0]
 800baec:	429a      	cmp	r2, r3
 800baee:	d20b      	bcs.n	800bb08 <HAL_TIM_IC_CaptureCallback+0x10c>
				imd.pulse_width = (TIM3_PERIOD - imd.rising_edge1) + imd.falling_edge;
 800baf0:	4b26      	ldr	r3, [pc, #152]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800baf2:	885a      	ldrh	r2, [r3, #2]
 800baf4:	4b25      	ldr	r3, [pc, #148]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800baf6:	881b      	ldrh	r3, [r3, #0]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	f5a3 5372 	sub.w	r3, r3, #15488	; 0x3c80
 800bb00:	3b30      	subs	r3, #48	; 0x30
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	4b21      	ldr	r3, [pc, #132]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800bb06:	80da      	strh	r2, [r3, #6]
			if (imd.period != 0)
 800bb08:	4b20      	ldr	r3, [pc, #128]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800bb0a:	891b      	ldrh	r3, [r3, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d035      	beq.n	800bb7c <HAL_TIM_IC_CaptureCallback+0x180>
				imd.frequency = TIM3_CLOCK / imd.period;
 800bb10:	4b1e      	ldr	r3, [pc, #120]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800bb12:	891b      	ldrh	r3, [r3, #8]
 800bb14:	461a      	mov	r2, r3
 800bb16:	f242 7310 	movw	r3, #10000	; 0x2710
 800bb1a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	4b1a      	ldr	r3, [pc, #104]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800bb22:	815a      	strh	r2, [r3, #10]
				imd.dutyCycle = 100.0 * (float)(imd.pulse_width) / (float)(imd.period);
 800bb24:	4b19      	ldr	r3, [pc, #100]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800bb26:	88db      	ldrh	r3, [r3, #6]
 800bb28:	ee07 3a90 	vmov	s15, r3
 800bb2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb30:	ee17 0a90 	vmov	r0, s15
 800bb34:	f7f4 fd08 	bl	8000548 <__aeabi_f2d>
 800bb38:	f04f 0200 	mov.w	r2, #0
 800bb3c:	4b15      	ldr	r3, [pc, #84]	; (800bb94 <HAL_TIM_IC_CaptureCallback+0x198>)
 800bb3e:	f7f4 fd5b 	bl	80005f8 <__aeabi_dmul>
 800bb42:	4602      	mov	r2, r0
 800bb44:	460b      	mov	r3, r1
 800bb46:	4614      	mov	r4, r2
 800bb48:	461d      	mov	r5, r3
 800bb4a:	4b10      	ldr	r3, [pc, #64]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800bb4c:	891b      	ldrh	r3, [r3, #8]
 800bb4e:	ee07 3a90 	vmov	s15, r3
 800bb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb56:	ee17 0a90 	vmov	r0, s15
 800bb5a:	f7f4 fcf5 	bl	8000548 <__aeabi_f2d>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	460b      	mov	r3, r1
 800bb62:	4620      	mov	r0, r4
 800bb64:	4629      	mov	r1, r5
 800bb66:	f7f4 fe71 	bl	800084c <__aeabi_ddiv>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4610      	mov	r0, r2
 800bb70:	4619      	mov	r1, r3
 800bb72:	f7f5 f839 	bl	8000be8 <__aeabi_d2f>
 800bb76:	4603      	mov	r3, r0
 800bb78:	4a04      	ldr	r2, [pc, #16]	; (800bb8c <HAL_TIM_IC_CaptureCallback+0x190>)
 800bb7a:	60d3      	str	r3, [r2, #12]
}
 800bb7c:	bf00      	nop
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bdb0      	pop	{r4, r5, r7, pc}
 800bb84:	200044dc 	.word	0x200044dc
 800bb88:	40020800 	.word	0x40020800
 800bb8c:	2000215c 	.word	0x2000215c
 800bb90:	ffffc350 	.word	0xffffc350
 800bb94:	40590000 	.word	0x40590000

0800bb98 <Reset_Handler>:
 800bb98:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bbd0 <LoopFillZerobss+0x12>
 800bb9c:	480d      	ldr	r0, [pc, #52]	; (800bbd4 <LoopFillZerobss+0x16>)
 800bb9e:	490e      	ldr	r1, [pc, #56]	; (800bbd8 <LoopFillZerobss+0x1a>)
 800bba0:	4a0e      	ldr	r2, [pc, #56]	; (800bbdc <LoopFillZerobss+0x1e>)
 800bba2:	2300      	movs	r3, #0
 800bba4:	e002      	b.n	800bbac <LoopCopyDataInit>

0800bba6 <CopyDataInit>:
 800bba6:	58d4      	ldr	r4, [r2, r3]
 800bba8:	50c4      	str	r4, [r0, r3]
 800bbaa:	3304      	adds	r3, #4

0800bbac <LoopCopyDataInit>:
 800bbac:	18c4      	adds	r4, r0, r3
 800bbae:	428c      	cmp	r4, r1
 800bbb0:	d3f9      	bcc.n	800bba6 <CopyDataInit>
 800bbb2:	4a0b      	ldr	r2, [pc, #44]	; (800bbe0 <LoopFillZerobss+0x22>)
 800bbb4:	4c0b      	ldr	r4, [pc, #44]	; (800bbe4 <LoopFillZerobss+0x26>)
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	e001      	b.n	800bbbe <LoopFillZerobss>

0800bbba <FillZerobss>:
 800bbba:	6013      	str	r3, [r2, #0]
 800bbbc:	3204      	adds	r2, #4

0800bbbe <LoopFillZerobss>:
 800bbbe:	42a2      	cmp	r2, r4
 800bbc0:	d3fb      	bcc.n	800bbba <FillZerobss>
 800bbc2:	f7ff fdd1 	bl	800b768 <SystemInit>
 800bbc6:	f012 fd7d 	bl	801e6c4 <__libc_init_array>
 800bbca:	f7ff fa23 	bl	800b014 <main>
 800bbce:	4770      	bx	lr
 800bbd0:	20020000 	.word	0x20020000
 800bbd4:	20000000 	.word	0x20000000
 800bbd8:	200002f4 	.word	0x200002f4
 800bbdc:	08022b4c 	.word	0x08022b4c
 800bbe0:	200002f4 	.word	0x200002f4
 800bbe4:	2000a1cc 	.word	0x2000a1cc

0800bbe8 <ADC_IRQHandler>:
 800bbe8:	e7fe      	b.n	800bbe8 <ADC_IRQHandler>
	...

0800bbec <HAL_Init>:
 800bbec:	b580      	push	{r7, lr}
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	4b0e      	ldr	r3, [pc, #56]	; (800bc2c <HAL_Init+0x40>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a0d      	ldr	r2, [pc, #52]	; (800bc2c <HAL_Init+0x40>)
 800bbf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bbfa:	6013      	str	r3, [r2, #0]
 800bbfc:	4b0b      	ldr	r3, [pc, #44]	; (800bc2c <HAL_Init+0x40>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a0a      	ldr	r2, [pc, #40]	; (800bc2c <HAL_Init+0x40>)
 800bc02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bc06:	6013      	str	r3, [r2, #0]
 800bc08:	4b08      	ldr	r3, [pc, #32]	; (800bc2c <HAL_Init+0x40>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a07      	ldr	r2, [pc, #28]	; (800bc2c <HAL_Init+0x40>)
 800bc0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc12:	6013      	str	r3, [r2, #0]
 800bc14:	2003      	movs	r0, #3
 800bc16:	f001 fb5c 	bl	800d2d2 <HAL_NVIC_SetPriorityGrouping>
 800bc1a:	200f      	movs	r0, #15
 800bc1c:	f7ff fbd2 	bl	800b3c4 <HAL_InitTick>
 800bc20:	f7ff fba4 	bl	800b36c <HAL_MspInit>
 800bc24:	2300      	movs	r3, #0
 800bc26:	4618      	mov	r0, r3
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	40023c00 	.word	0x40023c00

0800bc30 <HAL_IncTick>:
 800bc30:	b480      	push	{r7}
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	4b06      	ldr	r3, [pc, #24]	; (800bc50 <HAL_IncTick+0x20>)
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	461a      	mov	r2, r3
 800bc3a:	4b06      	ldr	r3, [pc, #24]	; (800bc54 <HAL_IncTick+0x24>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4413      	add	r3, r2
 800bc40:	4a04      	ldr	r2, [pc, #16]	; (800bc54 <HAL_IncTick+0x24>)
 800bc42:	6013      	str	r3, [r2, #0]
 800bc44:	bf00      	nop
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	20000020 	.word	0x20000020
 800bc54:	20004524 	.word	0x20004524

0800bc58 <HAL_GetTick>:
 800bc58:	b480      	push	{r7}
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	4b03      	ldr	r3, [pc, #12]	; (800bc6c <HAL_GetTick+0x14>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4618      	mov	r0, r3
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr
 800bc6a:	bf00      	nop
 800bc6c:	20004524 	.word	0x20004524

0800bc70 <HAL_Delay>:
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	f7ff ffee 	bl	800bc58 <HAL_GetTick>
 800bc7c:	60b8      	str	r0, [r7, #8]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	60fb      	str	r3, [r7, #12]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc88:	d005      	beq.n	800bc96 <HAL_Delay+0x26>
 800bc8a:	4b0a      	ldr	r3, [pc, #40]	; (800bcb4 <HAL_Delay+0x44>)
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	461a      	mov	r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	4413      	add	r3, r2
 800bc94:	60fb      	str	r3, [r7, #12]
 800bc96:	bf00      	nop
 800bc98:	f7ff ffde 	bl	800bc58 <HAL_GetTick>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d8f7      	bhi.n	800bc98 <HAL_Delay+0x28>
 800bca8:	bf00      	nop
 800bcaa:	bf00      	nop
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	20000020 	.word	0x20000020

0800bcb8 <HAL_ADC_Init>:
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	73fb      	strb	r3, [r7, #15]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d101      	bne.n	800bcce <HAL_ADC_Init+0x16>
 800bcca:	2301      	movs	r3, #1
 800bccc:	e033      	b.n	800bd36 <HAL_ADC_Init+0x7e>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d109      	bne.n	800bcea <HAL_ADC_Init+0x32>
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f7fb fdec 	bl	80078b4 <HAL_ADC_MspInit>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	645a      	str	r2, [r3, #68]	; 0x44
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcee:	f003 0310 	and.w	r3, r3, #16
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d118      	bne.n	800bd28 <HAL_ADC_Init+0x70>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800bcfe:	f023 0302 	bic.w	r3, r3, #2
 800bd02:	f043 0202 	orr.w	r2, r3, #2
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	641a      	str	r2, [r3, #64]	; 0x40
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 fa5e 	bl	800c1cc <ADC_Init>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	645a      	str	r2, [r3, #68]	; 0x44
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1a:	f023 0303 	bic.w	r3, r3, #3
 800bd1e:	f043 0201 	orr.w	r2, r3, #1
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	641a      	str	r2, [r3, #64]	; 0x40
 800bd26:	e001      	b.n	800bd2c <HAL_ADC_Init+0x74>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	73fb      	strb	r3, [r7, #15]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	4618      	mov	r0, r3
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
	...

0800bd40 <HAL_ADC_Start_DMA>:
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	613b      	str	r3, [r7, #16]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d101      	bne.n	800bd5e <HAL_ADC_Start_DMA+0x1e>
 800bd5a:	2302      	movs	r3, #2
 800bd5c:	e0e9      	b.n	800bf32 <HAL_ADC_Start_DMA+0x1f2>
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2201      	movs	r2, #1
 800bd62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	689b      	ldr	r3, [r3, #8]
 800bd6c:	f003 0301 	and.w	r3, r3, #1
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d018      	beq.n	800bda6 <HAL_ADC_Start_DMA+0x66>
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	689a      	ldr	r2, [r3, #8]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f042 0201 	orr.w	r2, r2, #1
 800bd82:	609a      	str	r2, [r3, #8]
 800bd84:	4b6d      	ldr	r3, [pc, #436]	; (800bf3c <HAL_ADC_Start_DMA+0x1fc>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a6d      	ldr	r2, [pc, #436]	; (800bf40 <HAL_ADC_Start_DMA+0x200>)
 800bd8a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd8e:	0c9a      	lsrs	r2, r3, #18
 800bd90:	4613      	mov	r3, r2
 800bd92:	005b      	lsls	r3, r3, #1
 800bd94:	4413      	add	r3, r2
 800bd96:	613b      	str	r3, [r7, #16]
 800bd98:	e002      	b.n	800bda0 <HAL_ADC_Start_DMA+0x60>
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	613b      	str	r3, [r7, #16]
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1f9      	bne.n	800bd9a <HAL_ADC_Start_DMA+0x5a>
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdb4:	d107      	bne.n	800bdc6 <HAL_ADC_Start_DMA+0x86>
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	689a      	ldr	r2, [r3, #8]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bdc4:	609a      	str	r2, [r3, #8]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	f003 0301 	and.w	r3, r3, #1
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	f040 80a1 	bne.w	800bf18 <HAL_ADC_Start_DMA+0x1d8>
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdda:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800bdde:	f023 0301 	bic.w	r3, r3, #1
 800bde2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	641a      	str	r2, [r3, #64]	; 0x40
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d007      	beq.n	800be08 <HAL_ADC_Start_DMA+0xc8>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800be00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	641a      	str	r2, [r3, #64]	; 0x40
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800be10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be14:	d106      	bne.n	800be24 <HAL_ADC_Start_DMA+0xe4>
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be1a:	f023 0206 	bic.w	r2, r3, #6
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	645a      	str	r2, [r3, #68]	; 0x44
 800be22:	e002      	b.n	800be2a <HAL_ADC_Start_DMA+0xea>
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	645a      	str	r2, [r3, #68]	; 0x44
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800be32:	4b44      	ldr	r3, [pc, #272]	; (800bf44 <HAL_ADC_Start_DMA+0x204>)
 800be34:	617b      	str	r3, [r7, #20]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3a:	4a43      	ldr	r2, [pc, #268]	; (800bf48 <HAL_ADC_Start_DMA+0x208>)
 800be3c:	63da      	str	r2, [r3, #60]	; 0x3c
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be42:	4a42      	ldr	r2, [pc, #264]	; (800bf4c <HAL_ADC_Start_DMA+0x20c>)
 800be44:	641a      	str	r2, [r3, #64]	; 0x40
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be4a:	4a41      	ldr	r2, [pc, #260]	; (800bf50 <HAL_ADC_Start_DMA+0x210>)
 800be4c:	64da      	str	r2, [r3, #76]	; 0x4c
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800be56:	601a      	str	r2, [r3, #0]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	685a      	ldr	r2, [r3, #4]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800be66:	605a      	str	r2, [r3, #4]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	689a      	ldr	r2, [r3, #8]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be76:	609a      	str	r2, [r3, #8]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	334c      	adds	r3, #76	; 0x4c
 800be82:	4619      	mov	r1, r3
 800be84:	68ba      	ldr	r2, [r7, #8]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f001 fb06 	bl	800d498 <HAL_DMA_Start_IT>
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	f003 031f 	and.w	r3, r3, #31
 800be94:	2b00      	cmp	r3, #0
 800be96:	d12a      	bne.n	800beee <HAL_ADC_Start_DMA+0x1ae>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4a2d      	ldr	r2, [pc, #180]	; (800bf54 <HAL_ADC_Start_DMA+0x214>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d015      	beq.n	800bece <HAL_ADC_Start_DMA+0x18e>
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a2c      	ldr	r2, [pc, #176]	; (800bf58 <HAL_ADC_Start_DMA+0x218>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d105      	bne.n	800beb8 <HAL_ADC_Start_DMA+0x178>
 800beac:	4b25      	ldr	r3, [pc, #148]	; (800bf44 <HAL_ADC_Start_DMA+0x204>)
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	f003 031f 	and.w	r3, r3, #31
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d00a      	beq.n	800bece <HAL_ADC_Start_DMA+0x18e>
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a27      	ldr	r2, [pc, #156]	; (800bf5c <HAL_ADC_Start_DMA+0x21c>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d136      	bne.n	800bf30 <HAL_ADC_Start_DMA+0x1f0>
 800bec2:	4b20      	ldr	r3, [pc, #128]	; (800bf44 <HAL_ADC_Start_DMA+0x204>)
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	f003 0310 	and.w	r3, r3, #16
 800beca:	2b00      	cmp	r3, #0
 800becc:	d130      	bne.n	800bf30 <HAL_ADC_Start_DMA+0x1f0>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d129      	bne.n	800bf30 <HAL_ADC_Start_DMA+0x1f0>
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	689a      	ldr	r2, [r3, #8]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800beea:	609a      	str	r2, [r3, #8]
 800beec:	e020      	b.n	800bf30 <HAL_ADC_Start_DMA+0x1f0>
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4a18      	ldr	r2, [pc, #96]	; (800bf54 <HAL_ADC_Start_DMA+0x214>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d11b      	bne.n	800bf30 <HAL_ADC_Start_DMA+0x1f0>
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d114      	bne.n	800bf30 <HAL_ADC_Start_DMA+0x1f0>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	689a      	ldr	r2, [r3, #8]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bf14:	609a      	str	r2, [r3, #8]
 800bf16:	e00b      	b.n	800bf30 <HAL_ADC_Start_DMA+0x1f0>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1c:	f043 0210 	orr.w	r2, r3, #16
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	641a      	str	r2, [r3, #64]	; 0x40
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf28:	f043 0201 	orr.w	r2, r3, #1
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	645a      	str	r2, [r3, #68]	; 0x44
 800bf30:	2300      	movs	r3, #0
 800bf32:	4618      	mov	r0, r3
 800bf34:	3718      	adds	r7, #24
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	20000018 	.word	0x20000018
 800bf40:	431bde83 	.word	0x431bde83
 800bf44:	40012300 	.word	0x40012300
 800bf48:	0800c3c5 	.word	0x0800c3c5
 800bf4c:	0800c47f 	.word	0x0800c47f
 800bf50:	0800c49b 	.word	0x0800c49b
 800bf54:	40012000 	.word	0x40012000
 800bf58:	40012100 	.word	0x40012100
 800bf5c:	40012200 	.word	0x40012200

0800bf60 <HAL_ADC_ConvHalfCpltCallback>:
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <HAL_ADC_ErrorCallback>:
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	bf00      	nop
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <HAL_ADC_ConfigChannel>:
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
 800bf92:	2300      	movs	r3, #0
 800bf94:	60bb      	str	r3, [r7, #8]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d101      	bne.n	800bfa4 <HAL_ADC_ConfigChannel+0x1c>
 800bfa0:	2302      	movs	r3, #2
 800bfa2:	e105      	b.n	800c1b0 <HAL_ADC_ConfigChannel+0x228>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2b09      	cmp	r3, #9
 800bfb2:	d925      	bls.n	800c000 <HAL_ADC_ConfigChannel+0x78>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	68d9      	ldr	r1, [r3, #12]
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	005b      	lsls	r3, r3, #1
 800bfc6:	4413      	add	r3, r2
 800bfc8:	3b1e      	subs	r3, #30
 800bfca:	2207      	movs	r2, #7
 800bfcc:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd0:	43da      	mvns	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	400a      	ands	r2, r1
 800bfd8:	60da      	str	r2, [r3, #12]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68d9      	ldr	r1, [r3, #12]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	689a      	ldr	r2, [r3, #8]
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	4618      	mov	r0, r3
 800bfec:	4603      	mov	r3, r0
 800bfee:	005b      	lsls	r3, r3, #1
 800bff0:	4403      	add	r3, r0
 800bff2:	3b1e      	subs	r3, #30
 800bff4:	409a      	lsls	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	430a      	orrs	r2, r1
 800bffc:	60da      	str	r2, [r3, #12]
 800bffe:	e022      	b.n	800c046 <HAL_ADC_ConfigChannel+0xbe>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	6919      	ldr	r1, [r3, #16]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	461a      	mov	r2, r3
 800c00e:	4613      	mov	r3, r2
 800c010:	005b      	lsls	r3, r3, #1
 800c012:	4413      	add	r3, r2
 800c014:	2207      	movs	r2, #7
 800c016:	fa02 f303 	lsl.w	r3, r2, r3
 800c01a:	43da      	mvns	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	400a      	ands	r2, r1
 800c022:	611a      	str	r2, [r3, #16]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	6919      	ldr	r1, [r3, #16]
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	689a      	ldr	r2, [r3, #8]
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	b29b      	uxth	r3, r3
 800c034:	4618      	mov	r0, r3
 800c036:	4603      	mov	r3, r0
 800c038:	005b      	lsls	r3, r3, #1
 800c03a:	4403      	add	r3, r0
 800c03c:	409a      	lsls	r2, r3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	430a      	orrs	r2, r1
 800c044:	611a      	str	r2, [r3, #16]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	2b06      	cmp	r3, #6
 800c04c:	d824      	bhi.n	800c098 <HAL_ADC_ConfigChannel+0x110>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	685a      	ldr	r2, [r3, #4]
 800c058:	4613      	mov	r3, r2
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	3b05      	subs	r3, #5
 800c060:	221f      	movs	r2, #31
 800c062:	fa02 f303 	lsl.w	r3, r2, r3
 800c066:	43da      	mvns	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	400a      	ands	r2, r1
 800c06e:	635a      	str	r2, [r3, #52]	; 0x34
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	4618      	mov	r0, r3
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	685a      	ldr	r2, [r3, #4]
 800c082:	4613      	mov	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	3b05      	subs	r3, #5
 800c08a:	fa00 f203 	lsl.w	r2, r0, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	430a      	orrs	r2, r1
 800c094:	635a      	str	r2, [r3, #52]	; 0x34
 800c096:	e04c      	b.n	800c132 <HAL_ADC_ConfigChannel+0x1aa>
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	2b0c      	cmp	r3, #12
 800c09e:	d824      	bhi.n	800c0ea <HAL_ADC_ConfigChannel+0x162>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	685a      	ldr	r2, [r3, #4]
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	4413      	add	r3, r2
 800c0b0:	3b23      	subs	r3, #35	; 0x23
 800c0b2:	221f      	movs	r2, #31
 800c0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b8:	43da      	mvns	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	400a      	ands	r2, r1
 800c0c0:	631a      	str	r2, [r3, #48]	; 0x30
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	685a      	ldr	r2, [r3, #4]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	4413      	add	r3, r2
 800c0da:	3b23      	subs	r3, #35	; 0x23
 800c0dc:	fa00 f203 	lsl.w	r2, r0, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	430a      	orrs	r2, r1
 800c0e6:	631a      	str	r2, [r3, #48]	; 0x30
 800c0e8:	e023      	b.n	800c132 <HAL_ADC_ConfigChannel+0x1aa>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	685a      	ldr	r2, [r3, #4]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4413      	add	r3, r2
 800c0fa:	3b41      	subs	r3, #65	; 0x41
 800c0fc:	221f      	movs	r2, #31
 800c0fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c102:	43da      	mvns	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	400a      	ands	r2, r1
 800c10a:	62da      	str	r2, [r3, #44]	; 0x2c
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	b29b      	uxth	r3, r3
 800c118:	4618      	mov	r0, r3
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	4613      	mov	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4413      	add	r3, r2
 800c124:	3b41      	subs	r3, #65	; 0x41
 800c126:	fa00 f203 	lsl.w	r2, r0, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	430a      	orrs	r2, r1
 800c130:	62da      	str	r2, [r3, #44]	; 0x2c
 800c132:	4b22      	ldr	r3, [pc, #136]	; (800c1bc <HAL_ADC_ConfigChannel+0x234>)
 800c134:	60fb      	str	r3, [r7, #12]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a21      	ldr	r2, [pc, #132]	; (800c1c0 <HAL_ADC_ConfigChannel+0x238>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d109      	bne.n	800c154 <HAL_ADC_ConfigChannel+0x1cc>
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2b12      	cmp	r3, #18
 800c146:	d105      	bne.n	800c154 <HAL_ADC_ConfigChannel+0x1cc>
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	605a      	str	r2, [r3, #4]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a19      	ldr	r2, [pc, #100]	; (800c1c0 <HAL_ADC_ConfigChannel+0x238>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d123      	bne.n	800c1a6 <HAL_ADC_ConfigChannel+0x21e>
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2b10      	cmp	r3, #16
 800c164:	d003      	beq.n	800c16e <HAL_ADC_ConfigChannel+0x1e6>
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2b11      	cmp	r3, #17
 800c16c:	d11b      	bne.n	800c1a6 <HAL_ADC_ConfigChannel+0x21e>
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	605a      	str	r2, [r3, #4]
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2b10      	cmp	r3, #16
 800c180:	d111      	bne.n	800c1a6 <HAL_ADC_ConfigChannel+0x21e>
 800c182:	4b10      	ldr	r3, [pc, #64]	; (800c1c4 <HAL_ADC_ConfigChannel+0x23c>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a10      	ldr	r2, [pc, #64]	; (800c1c8 <HAL_ADC_ConfigChannel+0x240>)
 800c188:	fba2 2303 	umull	r2, r3, r2, r3
 800c18c:	0c9a      	lsrs	r2, r3, #18
 800c18e:	4613      	mov	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4413      	add	r3, r2
 800c194:	005b      	lsls	r3, r3, #1
 800c196:	60bb      	str	r3, [r7, #8]
 800c198:	e002      	b.n	800c1a0 <HAL_ADC_ConfigChannel+0x218>
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	3b01      	subs	r3, #1
 800c19e:	60bb      	str	r3, [r7, #8]
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d1f9      	bne.n	800c19a <HAL_ADC_ConfigChannel+0x212>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3714      	adds	r7, #20
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr
 800c1bc:	40012300 	.word	0x40012300
 800c1c0:	40012000 	.word	0x40012000
 800c1c4:	20000018 	.word	0x20000018
 800c1c8:	431bde83 	.word	0x431bde83

0800c1cc <ADC_Init>:
 800c1cc:	b480      	push	{r7}
 800c1ce:	b085      	sub	sp, #20
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	4b79      	ldr	r3, [pc, #484]	; (800c3bc <ADC_Init+0x1f0>)
 800c1d6:	60fb      	str	r3, [r7, #12]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	605a      	str	r2, [r3, #4]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	685a      	ldr	r2, [r3, #4]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	431a      	orrs	r2, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	605a      	str	r2, [r3, #4]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	685a      	ldr	r2, [r3, #4]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c200:	605a      	str	r2, [r3, #4]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	6859      	ldr	r1, [r3, #4]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	021a      	lsls	r2, r3, #8
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	430a      	orrs	r2, r1
 800c214:	605a      	str	r2, [r3, #4]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	685a      	ldr	r2, [r3, #4]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c224:	605a      	str	r2, [r3, #4]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	6859      	ldr	r1, [r3, #4]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	689a      	ldr	r2, [r3, #8]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	430a      	orrs	r2, r1
 800c236:	605a      	str	r2, [r3, #4]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	689a      	ldr	r2, [r3, #8]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c246:	609a      	str	r2, [r3, #8]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	6899      	ldr	r1, [r3, #8]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	68da      	ldr	r2, [r3, #12]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	430a      	orrs	r2, r1
 800c258:	609a      	str	r2, [r3, #8]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c25e:	4a58      	ldr	r2, [pc, #352]	; (800c3c0 <ADC_Init+0x1f4>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d022      	beq.n	800c2aa <ADC_Init+0xde>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	689a      	ldr	r2, [r3, #8]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c272:	609a      	str	r2, [r3, #8]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6899      	ldr	r1, [r3, #8]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	430a      	orrs	r2, r1
 800c284:	609a      	str	r2, [r3, #8]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	689a      	ldr	r2, [r3, #8]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c294:	609a      	str	r2, [r3, #8]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	6899      	ldr	r1, [r3, #8]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	430a      	orrs	r2, r1
 800c2a6:	609a      	str	r2, [r3, #8]
 800c2a8:	e00f      	b.n	800c2ca <ADC_Init+0xfe>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	689a      	ldr	r2, [r3, #8]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c2b8:	609a      	str	r2, [r3, #8]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	689a      	ldr	r2, [r3, #8]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c2c8:	609a      	str	r2, [r3, #8]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	689a      	ldr	r2, [r3, #8]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f022 0202 	bic.w	r2, r2, #2
 800c2d8:	609a      	str	r2, [r3, #8]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	6899      	ldr	r1, [r3, #8]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	7e1b      	ldrb	r3, [r3, #24]
 800c2e4:	005a      	lsls	r2, r3, #1
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	430a      	orrs	r2, r1
 800c2ec:	609a      	str	r2, [r3, #8]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d01b      	beq.n	800c330 <ADC_Init+0x164>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	685a      	ldr	r2, [r3, #4]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c306:	605a      	str	r2, [r3, #4]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	685a      	ldr	r2, [r3, #4]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800c316:	605a      	str	r2, [r3, #4]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	6859      	ldr	r1, [r3, #4]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c322:	3b01      	subs	r3, #1
 800c324:	035a      	lsls	r2, r3, #13
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	430a      	orrs	r2, r1
 800c32c:	605a      	str	r2, [r3, #4]
 800c32e:	e007      	b.n	800c340 <ADC_Init+0x174>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	685a      	ldr	r2, [r3, #4]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c33e:	605a      	str	r2, [r3, #4]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800c34e:	62da      	str	r2, [r3, #44]	; 0x2c
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	69db      	ldr	r3, [r3, #28]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	051a      	lsls	r2, r3, #20
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	430a      	orrs	r2, r1
 800c364:	62da      	str	r2, [r3, #44]	; 0x2c
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	689a      	ldr	r2, [r3, #8]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c374:	609a      	str	r2, [r3, #8]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	6899      	ldr	r1, [r3, #8]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c382:	025a      	lsls	r2, r3, #9
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	430a      	orrs	r2, r1
 800c38a:	609a      	str	r2, [r3, #8]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	689a      	ldr	r2, [r3, #8]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c39a:	609a      	str	r2, [r3, #8]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	6899      	ldr	r1, [r3, #8]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	695b      	ldr	r3, [r3, #20]
 800c3a6:	029a      	lsls	r2, r3, #10
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	430a      	orrs	r2, r1
 800c3ae:	609a      	str	r2, [r3, #8]
 800c3b0:	bf00      	nop
 800c3b2:	3714      	adds	r7, #20
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	40012300 	.word	0x40012300
 800c3c0:	0f000001 	.word	0x0f000001

0800c3c4 <ADC_DMAConvCplt>:
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d0:	60fb      	str	r3, [r7, #12]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d13c      	bne.n	800c458 <ADC_DMAConvCplt+0x94>
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	641a      	str	r2, [r3, #64]	; 0x40
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d12b      	bne.n	800c450 <ADC_DMAConvCplt+0x8c>
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	7e1b      	ldrb	r3, [r3, #24]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d127      	bne.n	800c450 <ADC_DMAConvCplt+0x8c>
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c406:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d006      	beq.n	800c41c <ADC_DMAConvCplt+0x58>
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d119      	bne.n	800c450 <ADC_DMAConvCplt+0x8c>
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	685a      	ldr	r2, [r3, #4]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f022 0220 	bic.w	r2, r2, #32
 800c42a:	605a      	str	r2, [r3, #4]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c430:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	641a      	str	r2, [r3, #64]	; 0x40
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c43c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c440:	2b00      	cmp	r3, #0
 800c442:	d105      	bne.n	800c450 <ADC_DMAConvCplt+0x8c>
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c448:	f043 0201 	orr.w	r2, r3, #1
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	641a      	str	r2, [r3, #64]	; 0x40
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f7fb faa9 	bl	80079a8 <HAL_ADC_ConvCpltCallback>
 800c456:	e00e      	b.n	800c476 <ADC_DMAConvCplt+0xb2>
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45c:	f003 0310 	and.w	r3, r3, #16
 800c460:	2b00      	cmp	r3, #0
 800c462:	d003      	beq.n	800c46c <ADC_DMAConvCplt+0xa8>
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f7ff fd85 	bl	800bf74 <HAL_ADC_ErrorCallback>
 800c46a:	e004      	b.n	800c476 <ADC_DMAConvCplt+0xb2>
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	4798      	blx	r3
 800c476:	bf00      	nop
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <ADC_DMAHalfConvCplt>:
 800c47e:	b580      	push	{r7, lr}
 800c480:	b084      	sub	sp, #16
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48a:	60fb      	str	r3, [r7, #12]
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f7ff fd67 	bl	800bf60 <HAL_ADC_ConvHalfCpltCallback>
 800c492:	bf00      	nop
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <ADC_DMAError>:
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b084      	sub	sp, #16
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a6:	60fb      	str	r3, [r7, #12]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2240      	movs	r2, #64	; 0x40
 800c4ac:	641a      	str	r2, [r3, #64]	; 0x40
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4b2:	f043 0204 	orr.w	r2, r3, #4
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	645a      	str	r2, [r3, #68]	; 0x44
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f7ff fd5a 	bl	800bf74 <HAL_ADC_ErrorCallback>
 800c4c0:	bf00      	nop
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <HAL_CAN_Init>:
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <HAL_CAN_Init+0x12>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e0ed      	b.n	800c6b6 <HAL_CAN_Init+0x1ee>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d102      	bne.n	800c4ec <HAL_CAN_Init+0x24>
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f7fc fd0c 	bl	8008f04 <HAL_CAN_MspInit>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f042 0201 	orr.w	r2, r2, #1
 800c4fa:	601a      	str	r2, [r3, #0]
 800c4fc:	f7ff fbac 	bl	800bc58 <HAL_GetTick>
 800c500:	60f8      	str	r0, [r7, #12]
 800c502:	e012      	b.n	800c52a <HAL_CAN_Init+0x62>
 800c504:	f7ff fba8 	bl	800bc58 <HAL_GetTick>
 800c508:	4602      	mov	r2, r0
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	1ad3      	subs	r3, r2, r3
 800c50e:	2b0a      	cmp	r3, #10
 800c510:	d90b      	bls.n	800c52a <HAL_CAN_Init+0x62>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c516:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	625a      	str	r2, [r3, #36]	; 0x24
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2205      	movs	r2, #5
 800c522:	f883 2020 	strb.w	r2, [r3, #32]
 800c526:	2301      	movs	r3, #1
 800c528:	e0c5      	b.n	800c6b6 <HAL_CAN_Init+0x1ee>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	f003 0301 	and.w	r3, r3, #1
 800c534:	2b00      	cmp	r3, #0
 800c536:	d0e5      	beq.n	800c504 <HAL_CAN_Init+0x3c>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f022 0202 	bic.w	r2, r2, #2
 800c546:	601a      	str	r2, [r3, #0]
 800c548:	f7ff fb86 	bl	800bc58 <HAL_GetTick>
 800c54c:	60f8      	str	r0, [r7, #12]
 800c54e:	e012      	b.n	800c576 <HAL_CAN_Init+0xae>
 800c550:	f7ff fb82 	bl	800bc58 <HAL_GetTick>
 800c554:	4602      	mov	r2, r0
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	1ad3      	subs	r3, r2, r3
 800c55a:	2b0a      	cmp	r3, #10
 800c55c:	d90b      	bls.n	800c576 <HAL_CAN_Init+0xae>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c562:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	625a      	str	r2, [r3, #36]	; 0x24
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2205      	movs	r2, #5
 800c56e:	f883 2020 	strb.w	r2, [r3, #32]
 800c572:	2301      	movs	r3, #1
 800c574:	e09f      	b.n	800c6b6 <HAL_CAN_Init+0x1ee>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	f003 0302 	and.w	r3, r3, #2
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1e5      	bne.n	800c550 <HAL_CAN_Init+0x88>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	7e1b      	ldrb	r3, [r3, #24]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d108      	bne.n	800c59e <HAL_CAN_Init+0xd6>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	e007      	b.n	800c5ae <HAL_CAN_Init+0xe6>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5ac:	601a      	str	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	7e5b      	ldrb	r3, [r3, #25]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d108      	bne.n	800c5c8 <HAL_CAN_Init+0x100>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5c4:	601a      	str	r2, [r3, #0]
 800c5c6:	e007      	b.n	800c5d8 <HAL_CAN_Init+0x110>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5d6:	601a      	str	r2, [r3, #0]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	7e9b      	ldrb	r3, [r3, #26]
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d108      	bne.n	800c5f2 <HAL_CAN_Init+0x12a>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f042 0220 	orr.w	r2, r2, #32
 800c5ee:	601a      	str	r2, [r3, #0]
 800c5f0:	e007      	b.n	800c602 <HAL_CAN_Init+0x13a>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f022 0220 	bic.w	r2, r2, #32
 800c600:	601a      	str	r2, [r3, #0]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	7edb      	ldrb	r3, [r3, #27]
 800c606:	2b01      	cmp	r3, #1
 800c608:	d108      	bne.n	800c61c <HAL_CAN_Init+0x154>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f022 0210 	bic.w	r2, r2, #16
 800c618:	601a      	str	r2, [r3, #0]
 800c61a:	e007      	b.n	800c62c <HAL_CAN_Init+0x164>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f042 0210 	orr.w	r2, r2, #16
 800c62a:	601a      	str	r2, [r3, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7f1b      	ldrb	r3, [r3, #28]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d108      	bne.n	800c646 <HAL_CAN_Init+0x17e>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f042 0208 	orr.w	r2, r2, #8
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	e007      	b.n	800c656 <HAL_CAN_Init+0x18e>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f022 0208 	bic.w	r2, r2, #8
 800c654:	601a      	str	r2, [r3, #0]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	7f5b      	ldrb	r3, [r3, #29]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d108      	bne.n	800c670 <HAL_CAN_Init+0x1a8>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f042 0204 	orr.w	r2, r2, #4
 800c66c:	601a      	str	r2, [r3, #0]
 800c66e:	e007      	b.n	800c680 <HAL_CAN_Init+0x1b8>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f022 0204 	bic.w	r2, r2, #4
 800c67e:	601a      	str	r2, [r3, #0]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	689a      	ldr	r2, [r3, #8]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	431a      	orrs	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	431a      	orrs	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	695b      	ldr	r3, [r3, #20]
 800c694:	ea42 0103 	orr.w	r1, r2, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	1e5a      	subs	r2, r3, #1
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	430a      	orrs	r2, r1
 800c6a4:	61da      	str	r2, [r3, #28]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	625a      	str	r2, [r3, #36]	; 0x24
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	f883 2020 	strb.w	r2, [r3, #32]
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
	...

0800c6c0 <HAL_CAN_ConfigFilter>:
 800c6c0:	b480      	push	{r7}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	617b      	str	r3, [r7, #20]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6d6:	74fb      	strb	r3, [r7, #19]
 800c6d8:	7cfb      	ldrb	r3, [r7, #19]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d003      	beq.n	800c6e6 <HAL_CAN_ConfigFilter+0x26>
 800c6de:	7cfb      	ldrb	r3, [r7, #19]
 800c6e0:	2b02      	cmp	r3, #2
 800c6e2:	f040 80be 	bne.w	800c862 <HAL_CAN_ConfigFilter+0x1a2>
 800c6e6:	4b65      	ldr	r3, [pc, #404]	; (800c87c <HAL_CAN_ConfigFilter+0x1bc>)
 800c6e8:	617b      	str	r3, [r7, #20]
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c6f0:	f043 0201 	orr.w	r2, r3, #1
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c700:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c714:	021b      	lsls	r3, r3, #8
 800c716:	431a      	orrs	r2, r3
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	695b      	ldr	r3, [r3, #20]
 800c722:	f003 031f 	and.w	r3, r3, #31
 800c726:	2201      	movs	r2, #1
 800c728:	fa02 f303 	lsl.w	r3, r2, r3
 800c72c:	60fb      	str	r3, [r7, #12]
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	43db      	mvns	r3, r3
 800c738:	401a      	ands	r2, r3
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	69db      	ldr	r3, [r3, #28]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d123      	bne.n	800c790 <HAL_CAN_ConfigFilter+0xd0>
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	43db      	mvns	r3, r3
 800c752:	401a      	ands	r2, r3
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	0419      	lsls	r1, r3, #16
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	b29b      	uxth	r3, r3
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	6952      	ldr	r2, [r2, #20]
 800c76a:	4319      	orrs	r1, r3
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	3248      	adds	r2, #72	; 0x48
 800c770:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	0419      	lsls	r1, r3, #16
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	b29a      	uxth	r2, r3
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	695b      	ldr	r3, [r3, #20]
 800c784:	430a      	orrs	r2, r1
 800c786:	6979      	ldr	r1, [r7, #20]
 800c788:	3348      	adds	r3, #72	; 0x48
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	440b      	add	r3, r1
 800c78e:	605a      	str	r2, [r3, #4]
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	69db      	ldr	r3, [r3, #28]
 800c794:	2b01      	cmp	r3, #1
 800c796:	d122      	bne.n	800c7de <HAL_CAN_ConfigFilter+0x11e>
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	431a      	orrs	r2, r3
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	0419      	lsls	r1, r3, #16
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	683a      	ldr	r2, [r7, #0]
 800c7b6:	6952      	ldr	r2, [r2, #20]
 800c7b8:	4319      	orrs	r1, r3
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	3248      	adds	r2, #72	; 0x48
 800c7be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	0419      	lsls	r1, r3, #16
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	695b      	ldr	r3, [r3, #20]
 800c7d2:	430a      	orrs	r2, r1
 800c7d4:	6979      	ldr	r1, [r7, #20]
 800c7d6:	3348      	adds	r3, #72	; 0x48
 800c7d8:	00db      	lsls	r3, r3, #3
 800c7da:	440b      	add	r3, r1
 800c7dc:	605a      	str	r2, [r3, #4]
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	699b      	ldr	r3, [r3, #24]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d109      	bne.n	800c7fa <HAL_CAN_ConfigFilter+0x13a>
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	43db      	mvns	r3, r3
 800c7f0:	401a      	ands	r2, r3
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c7f8:	e007      	b.n	800c80a <HAL_CAN_ConfigFilter+0x14a>
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	431a      	orrs	r2, r3
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d109      	bne.n	800c826 <HAL_CAN_ConfigFilter+0x166>
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	43db      	mvns	r3, r3
 800c81c:	401a      	ands	r2, r3
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800c824:	e007      	b.n	800c836 <HAL_CAN_ConfigFilter+0x176>
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	431a      	orrs	r2, r3
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d107      	bne.n	800c84e <HAL_CAN_ConfigFilter+0x18e>
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	431a      	orrs	r2, r3
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c854:	f023 0201 	bic.w	r2, r3, #1
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800c85e:	2300      	movs	r3, #0
 800c860:	e006      	b.n	800c870 <HAL_CAN_ConfigFilter+0x1b0>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c866:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	625a      	str	r2, [r3, #36]	; 0x24
 800c86e:	2301      	movs	r3, #1
 800c870:	4618      	mov	r0, r3
 800c872:	371c      	adds	r7, #28
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr
 800c87c:	40006400 	.word	0x40006400

0800c880 <HAL_CAN_Start>:
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	2b01      	cmp	r3, #1
 800c892:	d12e      	bne.n	800c8f2 <HAL_CAN_Start+0x72>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2202      	movs	r2, #2
 800c898:	f883 2020 	strb.w	r2, [r3, #32]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f022 0201 	bic.w	r2, r2, #1
 800c8aa:	601a      	str	r2, [r3, #0]
 800c8ac:	f7ff f9d4 	bl	800bc58 <HAL_GetTick>
 800c8b0:	60f8      	str	r0, [r7, #12]
 800c8b2:	e012      	b.n	800c8da <HAL_CAN_Start+0x5a>
 800c8b4:	f7ff f9d0 	bl	800bc58 <HAL_GetTick>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	2b0a      	cmp	r3, #10
 800c8c0:	d90b      	bls.n	800c8da <HAL_CAN_Start+0x5a>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	625a      	str	r2, [r3, #36]	; 0x24
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2205      	movs	r2, #5
 800c8d2:	f883 2020 	strb.w	r2, [r3, #32]
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e012      	b.n	800c900 <HAL_CAN_Start+0x80>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	f003 0301 	and.w	r3, r3, #1
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1e5      	bne.n	800c8b4 <HAL_CAN_Start+0x34>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	625a      	str	r2, [r3, #36]	; 0x24
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	e006      	b.n	800c900 <HAL_CAN_Start+0x80>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	625a      	str	r2, [r3, #36]	; 0x24
 800c8fe:	2301      	movs	r3, #1
 800c900:	4618      	mov	r0, r3
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <HAL_CAN_AddTxMessage>:
 800c908:	b480      	push	{r7}
 800c90a:	b089      	sub	sp, #36	; 0x24
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	607a      	str	r2, [r7, #4]
 800c914:	603b      	str	r3, [r7, #0]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c91c:	77fb      	strb	r3, [r7, #31]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	689b      	ldr	r3, [r3, #8]
 800c924:	61bb      	str	r3, [r7, #24]
 800c926:	7ffb      	ldrb	r3, [r7, #31]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d003      	beq.n	800c934 <HAL_CAN_AddTxMessage+0x2c>
 800c92c:	7ffb      	ldrb	r3, [r7, #31]
 800c92e:	2b02      	cmp	r3, #2
 800c930:	f040 80b8 	bne.w	800caa4 <HAL_CAN_AddTxMessage+0x19c>
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d10a      	bne.n	800c954 <HAL_CAN_AddTxMessage+0x4c>
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c944:	2b00      	cmp	r3, #0
 800c946:	d105      	bne.n	800c954 <HAL_CAN_AddTxMessage+0x4c>
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c94e:	2b00      	cmp	r3, #0
 800c950:	f000 80a0 	beq.w	800ca94 <HAL_CAN_AddTxMessage+0x18c>
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	0e1b      	lsrs	r3, r3, #24
 800c958:	f003 0303 	and.w	r3, r3, #3
 800c95c:	617b      	str	r3, [r7, #20]
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	2b02      	cmp	r3, #2
 800c962:	d907      	bls.n	800c974 <HAL_CAN_AddTxMessage+0x6c>
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c968:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	625a      	str	r2, [r3, #36]	; 0x24
 800c970:	2301      	movs	r3, #1
 800c972:	e09e      	b.n	800cab2 <HAL_CAN_AddTxMessage+0x1aa>
 800c974:	2201      	movs	r2, #1
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	409a      	lsls	r2, r3
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d10d      	bne.n	800c9a2 <HAL_CAN_AddTxMessage+0x9a>
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	055a      	lsls	r2, r3, #21
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	68f9      	ldr	r1, [r7, #12]
 800c992:	6809      	ldr	r1, [r1, #0]
 800c994:	431a      	orrs	r2, r3
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	3318      	adds	r3, #24
 800c99a:	011b      	lsls	r3, r3, #4
 800c99c:	440b      	add	r3, r1
 800c99e:	601a      	str	r2, [r3, #0]
 800c9a0:	e00f      	b.n	800c9c2 <HAL_CAN_AddTxMessage+0xba>
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	00da      	lsls	r2, r3, #3
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	431a      	orrs	r2, r3
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	68f9      	ldr	r1, [r7, #12]
 800c9b4:	6809      	ldr	r1, [r1, #0]
 800c9b6:	431a      	orrs	r2, r3
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	3318      	adds	r3, #24
 800c9bc:	011b      	lsls	r3, r3, #4
 800c9be:	440b      	add	r3, r1
 800c9c0:	601a      	str	r2, [r3, #0]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6819      	ldr	r1, [r3, #0]
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	691a      	ldr	r2, [r3, #16]
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	3318      	adds	r3, #24
 800c9ce:	011b      	lsls	r3, r3, #4
 800c9d0:	440b      	add	r3, r1
 800c9d2:	3304      	adds	r3, #4
 800c9d4:	601a      	str	r2, [r3, #0]
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	7d1b      	ldrb	r3, [r3, #20]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d111      	bne.n	800ca02 <HAL_CAN_AddTxMessage+0xfa>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	3318      	adds	r3, #24
 800c9e6:	011b      	lsls	r3, r3, #4
 800c9e8:	4413      	add	r3, r2
 800c9ea:	3304      	adds	r3, #4
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	6811      	ldr	r1, [r2, #0]
 800c9f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	3318      	adds	r3, #24
 800c9fa:	011b      	lsls	r3, r3, #4
 800c9fc:	440b      	add	r3, r1
 800c9fe:	3304      	adds	r3, #4
 800ca00:	601a      	str	r2, [r3, #0]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	3307      	adds	r3, #7
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	061a      	lsls	r2, r3, #24
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	3306      	adds	r3, #6
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	041b      	lsls	r3, r3, #16
 800ca12:	431a      	orrs	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	3305      	adds	r3, #5
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	021b      	lsls	r3, r3, #8
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	3204      	adds	r2, #4
 800ca22:	7812      	ldrb	r2, [r2, #0]
 800ca24:	4610      	mov	r0, r2
 800ca26:	68fa      	ldr	r2, [r7, #12]
 800ca28:	6811      	ldr	r1, [r2, #0]
 800ca2a:	ea43 0200 	orr.w	r2, r3, r0
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	011b      	lsls	r3, r3, #4
 800ca32:	440b      	add	r3, r1
 800ca34:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800ca38:	601a      	str	r2, [r3, #0]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	3303      	adds	r3, #3
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	061a      	lsls	r2, r3, #24
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	3302      	adds	r3, #2
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	041b      	lsls	r3, r3, #16
 800ca4a:	431a      	orrs	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	021b      	lsls	r3, r3, #8
 800ca54:	4313      	orrs	r3, r2
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	7812      	ldrb	r2, [r2, #0]
 800ca5a:	4610      	mov	r0, r2
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	6811      	ldr	r1, [r2, #0]
 800ca60:	ea43 0200 	orr.w	r2, r3, r0
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	011b      	lsls	r3, r3, #4
 800ca68:	440b      	add	r3, r1
 800ca6a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800ca6e:	601a      	str	r2, [r3, #0]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	3318      	adds	r3, #24
 800ca78:	011b      	lsls	r3, r3, #4
 800ca7a:	4413      	add	r3, r2
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	6811      	ldr	r1, [r2, #0]
 800ca82:	f043 0201 	orr.w	r2, r3, #1
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	3318      	adds	r3, #24
 800ca8a:	011b      	lsls	r3, r3, #4
 800ca8c:	440b      	add	r3, r1
 800ca8e:	601a      	str	r2, [r3, #0]
 800ca90:	2300      	movs	r3, #0
 800ca92:	e00e      	b.n	800cab2 <HAL_CAN_AddTxMessage+0x1aa>
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca98:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	625a      	str	r2, [r3, #36]	; 0x24
 800caa0:	2301      	movs	r3, #1
 800caa2:	e006      	b.n	800cab2 <HAL_CAN_AddTxMessage+0x1aa>
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	625a      	str	r2, [r3, #36]	; 0x24
 800cab0:	2301      	movs	r3, #1
 800cab2:	4618      	mov	r0, r3
 800cab4:	3724      	adds	r7, #36	; 0x24
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr

0800cabe <HAL_CAN_GetRxMessage>:
 800cabe:	b480      	push	{r7}
 800cac0:	b087      	sub	sp, #28
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	60f8      	str	r0, [r7, #12]
 800cac6:	60b9      	str	r1, [r7, #8]
 800cac8:	607a      	str	r2, [r7, #4]
 800caca:	603b      	str	r3, [r7, #0]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cad2:	75fb      	strb	r3, [r7, #23]
 800cad4:	7dfb      	ldrb	r3, [r7, #23]
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d003      	beq.n	800cae2 <HAL_CAN_GetRxMessage+0x24>
 800cada:	7dfb      	ldrb	r3, [r7, #23]
 800cadc:	2b02      	cmp	r3, #2
 800cade:	f040 80f3 	bne.w	800ccc8 <HAL_CAN_GetRxMessage+0x20a>
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10e      	bne.n	800cb06 <HAL_CAN_GetRxMessage+0x48>
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	f003 0303 	and.w	r3, r3, #3
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d116      	bne.n	800cb24 <HAL_CAN_GetRxMessage+0x66>
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	625a      	str	r2, [r3, #36]	; 0x24
 800cb02:	2301      	movs	r3, #1
 800cb04:	e0e7      	b.n	800ccd6 <HAL_CAN_GetRxMessage+0x218>
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	691b      	ldr	r3, [r3, #16]
 800cb0c:	f003 0303 	and.w	r3, r3, #3
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d107      	bne.n	800cb24 <HAL_CAN_GetRxMessage+0x66>
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	625a      	str	r2, [r3, #36]	; 0x24
 800cb20:	2301      	movs	r3, #1
 800cb22:	e0d8      	b.n	800ccd6 <HAL_CAN_GetRxMessage+0x218>
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	331b      	adds	r3, #27
 800cb2c:	011b      	lsls	r3, r3, #4
 800cb2e:	4413      	add	r3, r2
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 0204 	and.w	r2, r3, #4
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	609a      	str	r2, [r3, #8]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10c      	bne.n	800cb5c <HAL_CAN_GetRxMessage+0x9e>
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	331b      	adds	r3, #27
 800cb4a:	011b      	lsls	r3, r3, #4
 800cb4c:	4413      	add	r3, r2
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	0d5b      	lsrs	r3, r3, #21
 800cb52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	601a      	str	r2, [r3, #0]
 800cb5a:	e00b      	b.n	800cb74 <HAL_CAN_GetRxMessage+0xb6>
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	331b      	adds	r3, #27
 800cb64:	011b      	lsls	r3, r3, #4
 800cb66:	4413      	add	r3, r2
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	08db      	lsrs	r3, r3, #3
 800cb6c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	605a      	str	r2, [r3, #4]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	331b      	adds	r3, #27
 800cb7c:	011b      	lsls	r3, r3, #4
 800cb7e:	4413      	add	r3, r2
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f003 0202 	and.w	r2, r3, #2
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	60da      	str	r2, [r3, #12]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	331b      	adds	r3, #27
 800cb92:	011b      	lsls	r3, r3, #4
 800cb94:	4413      	add	r3, r2
 800cb96:	3304      	adds	r3, #4
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f003 020f 	and.w	r2, r3, #15
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	611a      	str	r2, [r3, #16]
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	331b      	adds	r3, #27
 800cbaa:	011b      	lsls	r3, r3, #4
 800cbac:	4413      	add	r3, r2
 800cbae:	3304      	adds	r3, #4
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	0a1b      	lsrs	r3, r3, #8
 800cbb4:	b2da      	uxtb	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	619a      	str	r2, [r3, #24]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	331b      	adds	r3, #27
 800cbc2:	011b      	lsls	r3, r3, #4
 800cbc4:	4413      	add	r3, r2
 800cbc6:	3304      	adds	r3, #4
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	0c1b      	lsrs	r3, r3, #16
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	615a      	str	r2, [r3, #20]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681a      	ldr	r2, [r3, #0]
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	011b      	lsls	r3, r3, #4
 800cbda:	4413      	add	r3, r2
 800cbdc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	b2da      	uxtb	r2, r3
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	701a      	strb	r2, [r3, #0]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	011b      	lsls	r3, r3, #4
 800cbf0:	4413      	add	r3, r2
 800cbf2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	0a1a      	lsrs	r2, r3, #8
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	b2d2      	uxtb	r2, r2
 800cc00:	701a      	strb	r2, [r3, #0]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	011b      	lsls	r3, r3, #4
 800cc0a:	4413      	add	r3, r2
 800cc0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	0c1a      	lsrs	r2, r3, #16
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	3302      	adds	r3, #2
 800cc18:	b2d2      	uxtb	r2, r2
 800cc1a:	701a      	strb	r2, [r3, #0]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	011b      	lsls	r3, r3, #4
 800cc24:	4413      	add	r3, r2
 800cc26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	0e1a      	lsrs	r2, r3, #24
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	3303      	adds	r3, #3
 800cc32:	b2d2      	uxtb	r2, r2
 800cc34:	701a      	strb	r2, [r3, #0]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	011b      	lsls	r3, r3, #4
 800cc3e:	4413      	add	r3, r2
 800cc40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	3304      	adds	r3, #4
 800cc4a:	b2d2      	uxtb	r2, r2
 800cc4c:	701a      	strb	r2, [r3, #0]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	011b      	lsls	r3, r3, #4
 800cc56:	4413      	add	r3, r2
 800cc58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	0a1a      	lsrs	r2, r3, #8
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	3305      	adds	r3, #5
 800cc64:	b2d2      	uxtb	r2, r2
 800cc66:	701a      	strb	r2, [r3, #0]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	011b      	lsls	r3, r3, #4
 800cc70:	4413      	add	r3, r2
 800cc72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	0c1a      	lsrs	r2, r3, #16
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	3306      	adds	r3, #6
 800cc7e:	b2d2      	uxtb	r2, r2
 800cc80:	701a      	strb	r2, [r3, #0]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	011b      	lsls	r3, r3, #4
 800cc8a:	4413      	add	r3, r2
 800cc8c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	0e1a      	lsrs	r2, r3, #24
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	3307      	adds	r3, #7
 800cc98:	b2d2      	uxtb	r2, r2
 800cc9a:	701a      	strb	r2, [r3, #0]
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d108      	bne.n	800ccb4 <HAL_CAN_GetRxMessage+0x1f6>
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	68da      	ldr	r2, [r3, #12]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f042 0220 	orr.w	r2, r2, #32
 800ccb0:	60da      	str	r2, [r3, #12]
 800ccb2:	e007      	b.n	800ccc4 <HAL_CAN_GetRxMessage+0x206>
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	691a      	ldr	r2, [r3, #16]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f042 0220 	orr.w	r2, r2, #32
 800ccc2:	611a      	str	r2, [r3, #16]
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	e006      	b.n	800ccd6 <HAL_CAN_GetRxMessage+0x218>
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cccc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	625a      	str	r2, [r3, #36]	; 0x24
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	371c      	adds	r7, #28
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <HAL_CAN_ActivateNotification>:
 800cce2:	b480      	push	{r7}
 800cce4:	b085      	sub	sp, #20
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
 800ccea:	6039      	str	r1, [r7, #0]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ccf2:	73fb      	strb	r3, [r7, #15]
 800ccf4:	7bfb      	ldrb	r3, [r7, #15]
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d002      	beq.n	800cd00 <HAL_CAN_ActivateNotification+0x1e>
 800ccfa:	7bfb      	ldrb	r3, [r7, #15]
 800ccfc:	2b02      	cmp	r3, #2
 800ccfe:	d109      	bne.n	800cd14 <HAL_CAN_ActivateNotification+0x32>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	6959      	ldr	r1, [r3, #20]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	683a      	ldr	r2, [r7, #0]
 800cd0c:	430a      	orrs	r2, r1
 800cd0e:	615a      	str	r2, [r3, #20]
 800cd10:	2300      	movs	r3, #0
 800cd12:	e006      	b.n	800cd22 <HAL_CAN_ActivateNotification+0x40>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	625a      	str	r2, [r3, #36]	; 0x24
 800cd20:	2301      	movs	r3, #1
 800cd22:	4618      	mov	r0, r3
 800cd24:	3714      	adds	r7, #20
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr

0800cd2e <HAL_CAN_IRQHandler>:
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b08a      	sub	sp, #40	; 0x28
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
 800cd36:	2300      	movs	r3, #0
 800cd38:	627b      	str	r3, [r7, #36]	; 0x24
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	695b      	ldr	r3, [r3, #20]
 800cd40:	623b      	str	r3, [r7, #32]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	61fb      	str	r3, [r7, #28]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	61bb      	str	r3, [r7, #24]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	617b      	str	r3, [r7, #20]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	613b      	str	r3, [r7, #16]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	699b      	ldr	r3, [r3, #24]
 800cd68:	60fb      	str	r3, [r7, #12]
 800cd6a:	6a3b      	ldr	r3, [r7, #32]
 800cd6c:	f003 0301 	and.w	r3, r3, #1
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d07c      	beq.n	800ce6e <HAL_CAN_IRQHandler+0x140>
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	f003 0301 	and.w	r3, r3, #1
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d023      	beq.n	800cdc6 <HAL_CAN_IRQHandler+0x98>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2201      	movs	r2, #1
 800cd84:	609a      	str	r2, [r3, #8]
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	f003 0302 	and.w	r3, r3, #2
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d003      	beq.n	800cd98 <HAL_CAN_IRQHandler+0x6a>
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 f983 	bl	800d09c <HAL_CAN_TxMailbox0CompleteCallback>
 800cd96:	e016      	b.n	800cdc6 <HAL_CAN_IRQHandler+0x98>
 800cd98:	69bb      	ldr	r3, [r7, #24]
 800cd9a:	f003 0304 	and.w	r3, r3, #4
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d004      	beq.n	800cdac <HAL_CAN_IRQHandler+0x7e>
 800cda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cda8:	627b      	str	r3, [r7, #36]	; 0x24
 800cdaa:	e00c      	b.n	800cdc6 <HAL_CAN_IRQHandler+0x98>
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	f003 0308 	and.w	r3, r3, #8
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d004      	beq.n	800cdc0 <HAL_CAN_IRQHandler+0x92>
 800cdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cdbc:	627b      	str	r3, [r7, #36]	; 0x24
 800cdbe:	e002      	b.n	800cdc6 <HAL_CAN_IRQHandler+0x98>
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 f989 	bl	800d0d8 <HAL_CAN_TxMailbox0AbortCallback>
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d024      	beq.n	800ce1a <HAL_CAN_IRQHandler+0xec>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cdd8:	609a      	str	r2, [r3, #8]
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d003      	beq.n	800cdec <HAL_CAN_IRQHandler+0xbe>
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 f963 	bl	800d0b0 <HAL_CAN_TxMailbox1CompleteCallback>
 800cdea:	e016      	b.n	800ce1a <HAL_CAN_IRQHandler+0xec>
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d004      	beq.n	800ce00 <HAL_CAN_IRQHandler+0xd2>
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cdfc:	627b      	str	r3, [r7, #36]	; 0x24
 800cdfe:	e00c      	b.n	800ce1a <HAL_CAN_IRQHandler+0xec>
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d004      	beq.n	800ce14 <HAL_CAN_IRQHandler+0xe6>
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce10:	627b      	str	r3, [r7, #36]	; 0x24
 800ce12:	e002      	b.n	800ce1a <HAL_CAN_IRQHandler+0xec>
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 f969 	bl	800d0ec <HAL_CAN_TxMailbox1AbortCallback>
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d024      	beq.n	800ce6e <HAL_CAN_IRQHandler+0x140>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ce2c:	609a      	str	r2, [r3, #8]
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d003      	beq.n	800ce40 <HAL_CAN_IRQHandler+0x112>
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f943 	bl	800d0c4 <HAL_CAN_TxMailbox2CompleteCallback>
 800ce3e:	e016      	b.n	800ce6e <HAL_CAN_IRQHandler+0x140>
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d004      	beq.n	800ce54 <HAL_CAN_IRQHandler+0x126>
 800ce4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce50:	627b      	str	r3, [r7, #36]	; 0x24
 800ce52:	e00c      	b.n	800ce6e <HAL_CAN_IRQHandler+0x140>
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d004      	beq.n	800ce68 <HAL_CAN_IRQHandler+0x13a>
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce64:	627b      	str	r3, [r7, #36]	; 0x24
 800ce66:	e002      	b.n	800ce6e <HAL_CAN_IRQHandler+0x140>
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 f949 	bl	800d100 <HAL_CAN_TxMailbox2AbortCallback>
 800ce6e:	6a3b      	ldr	r3, [r7, #32]
 800ce70:	f003 0308 	and.w	r3, r3, #8
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00c      	beq.n	800ce92 <HAL_CAN_IRQHandler+0x164>
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	f003 0310 	and.w	r3, r3, #16
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d007      	beq.n	800ce92 <HAL_CAN_IRQHandler+0x164>
 800ce82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ce88:	627b      	str	r3, [r7, #36]	; 0x24
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2210      	movs	r2, #16
 800ce90:	60da      	str	r2, [r3, #12]
 800ce92:	6a3b      	ldr	r3, [r7, #32]
 800ce94:	f003 0304 	and.w	r3, r3, #4
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d00b      	beq.n	800ceb4 <HAL_CAN_IRQHandler+0x186>
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	f003 0308 	and.w	r3, r3, #8
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d006      	beq.n	800ceb4 <HAL_CAN_IRQHandler+0x186>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2208      	movs	r2, #8
 800ceac:	60da      	str	r2, [r3, #12]
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 f930 	bl	800d114 <HAL_CAN_RxFifo0FullCallback>
 800ceb4:	6a3b      	ldr	r3, [r7, #32]
 800ceb6:	f003 0302 	and.w	r3, r3, #2
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d009      	beq.n	800ced2 <HAL_CAN_IRQHandler+0x1a4>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	f003 0303 	and.w	r3, r3, #3
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d002      	beq.n	800ced2 <HAL_CAN_IRQHandler+0x1a4>
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7fc f92d 	bl	800912c <HAL_CAN_RxFifo0MsgPendingCallback>
 800ced2:	6a3b      	ldr	r3, [r7, #32]
 800ced4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00c      	beq.n	800cef6 <HAL_CAN_IRQHandler+0x1c8>
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	f003 0310 	and.w	r3, r3, #16
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d007      	beq.n	800cef6 <HAL_CAN_IRQHandler+0x1c8>
 800cee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ceec:	627b      	str	r3, [r7, #36]	; 0x24
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2210      	movs	r2, #16
 800cef4:	611a      	str	r2, [r3, #16]
 800cef6:	6a3b      	ldr	r3, [r7, #32]
 800cef8:	f003 0320 	and.w	r3, r3, #32
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d00b      	beq.n	800cf18 <HAL_CAN_IRQHandler+0x1ea>
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	f003 0308 	and.w	r3, r3, #8
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d006      	beq.n	800cf18 <HAL_CAN_IRQHandler+0x1ea>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2208      	movs	r2, #8
 800cf10:	611a      	str	r2, [r3, #16]
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 f908 	bl	800d128 <HAL_CAN_RxFifo1FullCallback>
 800cf18:	6a3b      	ldr	r3, [r7, #32]
 800cf1a:	f003 0310 	and.w	r3, r3, #16
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d009      	beq.n	800cf36 <HAL_CAN_IRQHandler+0x208>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	691b      	ldr	r3, [r3, #16]
 800cf28:	f003 0303 	and.w	r3, r3, #3
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d002      	beq.n	800cf36 <HAL_CAN_IRQHandler+0x208>
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f7fc f915 	bl	8009160 <HAL_CAN_RxFifo1MsgPendingCallback>
 800cf36:	6a3b      	ldr	r3, [r7, #32]
 800cf38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d00b      	beq.n	800cf58 <HAL_CAN_IRQHandler+0x22a>
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	f003 0310 	and.w	r3, r3, #16
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d006      	beq.n	800cf58 <HAL_CAN_IRQHandler+0x22a>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	2210      	movs	r2, #16
 800cf50:	605a      	str	r2, [r3, #4]
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 f8f2 	bl	800d13c <HAL_CAN_SleepCallback>
 800cf58:	6a3b      	ldr	r3, [r7, #32]
 800cf5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d00b      	beq.n	800cf7a <HAL_CAN_IRQHandler+0x24c>
 800cf62:	69fb      	ldr	r3, [r7, #28]
 800cf64:	f003 0308 	and.w	r3, r3, #8
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d006      	beq.n	800cf7a <HAL_CAN_IRQHandler+0x24c>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2208      	movs	r2, #8
 800cf72:	605a      	str	r2, [r3, #4]
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 f8eb 	bl	800d150 <HAL_CAN_WakeUpFromRxMsgCallback>
 800cf7a:	6a3b      	ldr	r3, [r7, #32]
 800cf7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d07b      	beq.n	800d07c <HAL_CAN_IRQHandler+0x34e>
 800cf84:	69fb      	ldr	r3, [r7, #28]
 800cf86:	f003 0304 	and.w	r3, r3, #4
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d072      	beq.n	800d074 <HAL_CAN_IRQHandler+0x346>
 800cf8e:	6a3b      	ldr	r3, [r7, #32]
 800cf90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d008      	beq.n	800cfaa <HAL_CAN_IRQHandler+0x27c>
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f003 0301 	and.w	r3, r3, #1
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d003      	beq.n	800cfaa <HAL_CAN_IRQHandler+0x27c>
 800cfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa4:	f043 0301 	orr.w	r3, r3, #1
 800cfa8:	627b      	str	r3, [r7, #36]	; 0x24
 800cfaa:	6a3b      	ldr	r3, [r7, #32]
 800cfac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d008      	beq.n	800cfc6 <HAL_CAN_IRQHandler+0x298>
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f003 0302 	and.w	r3, r3, #2
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d003      	beq.n	800cfc6 <HAL_CAN_IRQHandler+0x298>
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc0:	f043 0302 	orr.w	r3, r3, #2
 800cfc4:	627b      	str	r3, [r7, #36]	; 0x24
 800cfc6:	6a3b      	ldr	r3, [r7, #32]
 800cfc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d008      	beq.n	800cfe2 <HAL_CAN_IRQHandler+0x2b4>
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f003 0304 	and.w	r3, r3, #4
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d003      	beq.n	800cfe2 <HAL_CAN_IRQHandler+0x2b4>
 800cfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfdc:	f043 0304 	orr.w	r3, r3, #4
 800cfe0:	627b      	str	r3, [r7, #36]	; 0x24
 800cfe2:	6a3b      	ldr	r3, [r7, #32]
 800cfe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d043      	beq.n	800d074 <HAL_CAN_IRQHandler+0x346>
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d03e      	beq.n	800d074 <HAL_CAN_IRQHandler+0x346>
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cffc:	2b60      	cmp	r3, #96	; 0x60
 800cffe:	d02b      	beq.n	800d058 <HAL_CAN_IRQHandler+0x32a>
 800d000:	2b60      	cmp	r3, #96	; 0x60
 800d002:	d82e      	bhi.n	800d062 <HAL_CAN_IRQHandler+0x334>
 800d004:	2b50      	cmp	r3, #80	; 0x50
 800d006:	d022      	beq.n	800d04e <HAL_CAN_IRQHandler+0x320>
 800d008:	2b50      	cmp	r3, #80	; 0x50
 800d00a:	d82a      	bhi.n	800d062 <HAL_CAN_IRQHandler+0x334>
 800d00c:	2b40      	cmp	r3, #64	; 0x40
 800d00e:	d019      	beq.n	800d044 <HAL_CAN_IRQHandler+0x316>
 800d010:	2b40      	cmp	r3, #64	; 0x40
 800d012:	d826      	bhi.n	800d062 <HAL_CAN_IRQHandler+0x334>
 800d014:	2b30      	cmp	r3, #48	; 0x30
 800d016:	d010      	beq.n	800d03a <HAL_CAN_IRQHandler+0x30c>
 800d018:	2b30      	cmp	r3, #48	; 0x30
 800d01a:	d822      	bhi.n	800d062 <HAL_CAN_IRQHandler+0x334>
 800d01c:	2b10      	cmp	r3, #16
 800d01e:	d002      	beq.n	800d026 <HAL_CAN_IRQHandler+0x2f8>
 800d020:	2b20      	cmp	r3, #32
 800d022:	d005      	beq.n	800d030 <HAL_CAN_IRQHandler+0x302>
 800d024:	e01d      	b.n	800d062 <HAL_CAN_IRQHandler+0x334>
 800d026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d028:	f043 0308 	orr.w	r3, r3, #8
 800d02c:	627b      	str	r3, [r7, #36]	; 0x24
 800d02e:	e019      	b.n	800d064 <HAL_CAN_IRQHandler+0x336>
 800d030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d032:	f043 0310 	orr.w	r3, r3, #16
 800d036:	627b      	str	r3, [r7, #36]	; 0x24
 800d038:	e014      	b.n	800d064 <HAL_CAN_IRQHandler+0x336>
 800d03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03c:	f043 0320 	orr.w	r3, r3, #32
 800d040:	627b      	str	r3, [r7, #36]	; 0x24
 800d042:	e00f      	b.n	800d064 <HAL_CAN_IRQHandler+0x336>
 800d044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d04a:	627b      	str	r3, [r7, #36]	; 0x24
 800d04c:	e00a      	b.n	800d064 <HAL_CAN_IRQHandler+0x336>
 800d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d054:	627b      	str	r3, [r7, #36]	; 0x24
 800d056:	e005      	b.n	800d064 <HAL_CAN_IRQHandler+0x336>
 800d058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d05e:	627b      	str	r3, [r7, #36]	; 0x24
 800d060:	e000      	b.n	800d064 <HAL_CAN_IRQHandler+0x336>
 800d062:	bf00      	nop
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	699a      	ldr	r2, [r3, #24]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d072:	619a      	str	r2, [r3, #24]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2204      	movs	r2, #4
 800d07a:	605a      	str	r2, [r3, #4]
 800d07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d008      	beq.n	800d094 <HAL_CAN_IRQHandler+0x366>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d088:	431a      	orrs	r2, r3
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	625a      	str	r2, [r3, #36]	; 0x24
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 f868 	bl	800d164 <HAL_CAN_ErrorCallback>
 800d094:	bf00      	nop
 800d096:	3728      	adds	r7, #40	; 0x28
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <HAL_CAN_TxMailbox0CompleteCallback>:
 800d09c:	b480      	push	{r7}
 800d09e:	b083      	sub	sp, #12
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	bf00      	nop
 800d0a6:	370c      	adds	r7, #12
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr

0800d0b0 <HAL_CAN_TxMailbox1CompleteCallback>:
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	bf00      	nop
 800d0ba:	370c      	adds	r7, #12
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <HAL_CAN_TxMailbox2CompleteCallback>:
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	bf00      	nop
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <HAL_CAN_TxMailbox0AbortCallback>:
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	bf00      	nop
 800d0e2:	370c      	adds	r7, #12
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <HAL_CAN_TxMailbox1AbortCallback>:
 800d0ec:	b480      	push	{r7}
 800d0ee:	b083      	sub	sp, #12
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	bf00      	nop
 800d0f6:	370c      	adds	r7, #12
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr

0800d100 <HAL_CAN_TxMailbox2AbortCallback>:
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	bf00      	nop
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <HAL_CAN_RxFifo0FullCallback>:
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	bf00      	nop
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <HAL_CAN_RxFifo1FullCallback>:
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	bf00      	nop
 800d132:	370c      	adds	r7, #12
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <HAL_CAN_SleepCallback>:
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	bf00      	nop
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <HAL_CAN_WakeUpFromRxMsgCallback>:
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	bf00      	nop
 800d15a:	370c      	adds	r7, #12
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <HAL_CAN_ErrorCallback>:
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	bf00      	nop
 800d16e:	370c      	adds	r7, #12
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <__NVIC_SetPriorityGrouping>:
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f003 0307 	and.w	r3, r3, #7
 800d186:	60fb      	str	r3, [r7, #12]
 800d188:	4b0c      	ldr	r3, [pc, #48]	; (800d1bc <__NVIC_SetPriorityGrouping+0x44>)
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	60bb      	str	r3, [r7, #8]
 800d18e:	68ba      	ldr	r2, [r7, #8]
 800d190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d194:	4013      	ands	r3, r2
 800d196:	60bb      	str	r3, [r7, #8]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	021a      	lsls	r2, r3, #8
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d1a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d1a8:	60bb      	str	r3, [r7, #8]
 800d1aa:	4a04      	ldr	r2, [pc, #16]	; (800d1bc <__NVIC_SetPriorityGrouping+0x44>)
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	60d3      	str	r3, [r2, #12]
 800d1b0:	bf00      	nop
 800d1b2:	3714      	adds	r7, #20
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr
 800d1bc:	e000ed00 	.word	0xe000ed00

0800d1c0 <__NVIC_GetPriorityGrouping>:
 800d1c0:	b480      	push	{r7}
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	4b04      	ldr	r3, [pc, #16]	; (800d1d8 <__NVIC_GetPriorityGrouping+0x18>)
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	0a1b      	lsrs	r3, r3, #8
 800d1ca:	f003 0307 	and.w	r3, r3, #7
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr
 800d1d8:	e000ed00 	.word	0xe000ed00

0800d1dc <__NVIC_EnableIRQ>:
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	71fb      	strb	r3, [r7, #7]
 800d1e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	db0b      	blt.n	800d206 <__NVIC_EnableIRQ+0x2a>
 800d1ee:	79fb      	ldrb	r3, [r7, #7]
 800d1f0:	f003 021f 	and.w	r2, r3, #31
 800d1f4:	4907      	ldr	r1, [pc, #28]	; (800d214 <__NVIC_EnableIRQ+0x38>)
 800d1f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1fa:	095b      	lsrs	r3, r3, #5
 800d1fc:	2001      	movs	r0, #1
 800d1fe:	fa00 f202 	lsl.w	r2, r0, r2
 800d202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d206:	bf00      	nop
 800d208:	370c      	adds	r7, #12
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr
 800d212:	bf00      	nop
 800d214:	e000e100 	.word	0xe000e100

0800d218 <__NVIC_SetPriority>:
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	4603      	mov	r3, r0
 800d220:	6039      	str	r1, [r7, #0]
 800d222:	71fb      	strb	r3, [r7, #7]
 800d224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	db0a      	blt.n	800d242 <__NVIC_SetPriority+0x2a>
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	b2da      	uxtb	r2, r3
 800d230:	490c      	ldr	r1, [pc, #48]	; (800d264 <__NVIC_SetPriority+0x4c>)
 800d232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d236:	0112      	lsls	r2, r2, #4
 800d238:	b2d2      	uxtb	r2, r2
 800d23a:	440b      	add	r3, r1
 800d23c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800d240:	e00a      	b.n	800d258 <__NVIC_SetPriority+0x40>
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	b2da      	uxtb	r2, r3
 800d246:	4908      	ldr	r1, [pc, #32]	; (800d268 <__NVIC_SetPriority+0x50>)
 800d248:	79fb      	ldrb	r3, [r7, #7]
 800d24a:	f003 030f 	and.w	r3, r3, #15
 800d24e:	3b04      	subs	r3, #4
 800d250:	0112      	lsls	r2, r2, #4
 800d252:	b2d2      	uxtb	r2, r2
 800d254:	440b      	add	r3, r1
 800d256:	761a      	strb	r2, [r3, #24]
 800d258:	bf00      	nop
 800d25a:	370c      	adds	r7, #12
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr
 800d264:	e000e100 	.word	0xe000e100
 800d268:	e000ed00 	.word	0xe000ed00

0800d26c <NVIC_EncodePriority>:
 800d26c:	b480      	push	{r7}
 800d26e:	b089      	sub	sp, #36	; 0x24
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f003 0307 	and.w	r3, r3, #7
 800d27e:	61fb      	str	r3, [r7, #28]
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	f1c3 0307 	rsb	r3, r3, #7
 800d286:	2b04      	cmp	r3, #4
 800d288:	bf28      	it	cs
 800d28a:	2304      	movcs	r3, #4
 800d28c:	61bb      	str	r3, [r7, #24]
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	3304      	adds	r3, #4
 800d292:	2b06      	cmp	r3, #6
 800d294:	d902      	bls.n	800d29c <NVIC_EncodePriority+0x30>
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	3b03      	subs	r3, #3
 800d29a:	e000      	b.n	800d29e <NVIC_EncodePriority+0x32>
 800d29c:	2300      	movs	r3, #0
 800d29e:	617b      	str	r3, [r7, #20]
 800d2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a4:	69bb      	ldr	r3, [r7, #24]
 800d2a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2aa:	43da      	mvns	r2, r3
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	401a      	ands	r2, r3
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	409a      	lsls	r2, r3
 800d2b4:	f04f 31ff 	mov.w	r1, #4294967295
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	fa01 f303 	lsl.w	r3, r1, r3
 800d2be:	43d9      	mvns	r1, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	400b      	ands	r3, r1
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3724      	adds	r7, #36	; 0x24
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr

0800d2d2 <HAL_NVIC_SetPriorityGrouping>:
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b082      	sub	sp, #8
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7ff ff4c 	bl	800d178 <__NVIC_SetPriorityGrouping>
 800d2e0:	bf00      	nop
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <HAL_NVIC_SetPriority>:
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	607a      	str	r2, [r7, #4]
 800d2f4:	73fb      	strb	r3, [r7, #15]
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	617b      	str	r3, [r7, #20]
 800d2fa:	f7ff ff61 	bl	800d1c0 <__NVIC_GetPriorityGrouping>
 800d2fe:	6178      	str	r0, [r7, #20]
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	68b9      	ldr	r1, [r7, #8]
 800d304:	6978      	ldr	r0, [r7, #20]
 800d306:	f7ff ffb1 	bl	800d26c <NVIC_EncodePriority>
 800d30a:	4602      	mov	r2, r0
 800d30c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d310:	4611      	mov	r1, r2
 800d312:	4618      	mov	r0, r3
 800d314:	f7ff ff80 	bl	800d218 <__NVIC_SetPriority>
 800d318:	bf00      	nop
 800d31a:	3718      	adds	r7, #24
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <HAL_NVIC_EnableIRQ>:
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	4603      	mov	r3, r0
 800d328:	71fb      	strb	r3, [r7, #7]
 800d32a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d32e:	4618      	mov	r0, r3
 800d330:	f7ff ff54 	bl	800d1dc <__NVIC_EnableIRQ>
 800d334:	bf00      	nop
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <HAL_DMA_Init>:
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b086      	sub	sp, #24
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	2300      	movs	r3, #0
 800d346:	617b      	str	r3, [r7, #20]
 800d348:	f7fe fc86 	bl	800bc58 <HAL_GetTick>
 800d34c:	6138      	str	r0, [r7, #16]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d101      	bne.n	800d358 <HAL_DMA_Init+0x1c>
 800d354:	2301      	movs	r3, #1
 800d356:	e099      	b.n	800d48c <HAL_DMA_Init+0x150>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2202      	movs	r2, #2
 800d35c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f022 0201 	bic.w	r2, r2, #1
 800d376:	601a      	str	r2, [r3, #0]
 800d378:	e00f      	b.n	800d39a <HAL_DMA_Init+0x5e>
 800d37a:	f7fe fc6d 	bl	800bc58 <HAL_GetTick>
 800d37e:	4602      	mov	r2, r0
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	1ad3      	subs	r3, r2, r3
 800d384:	2b05      	cmp	r3, #5
 800d386:	d908      	bls.n	800d39a <HAL_DMA_Init+0x5e>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2220      	movs	r2, #32
 800d38c:	655a      	str	r2, [r3, #84]	; 0x54
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2203      	movs	r2, #3
 800d392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800d396:	2303      	movs	r3, #3
 800d398:	e078      	b.n	800d48c <HAL_DMA_Init+0x150>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f003 0301 	and.w	r3, r3, #1
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d1e8      	bne.n	800d37a <HAL_DMA_Init+0x3e>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	617b      	str	r3, [r7, #20]
 800d3b0:	697a      	ldr	r2, [r7, #20]
 800d3b2:	4b38      	ldr	r3, [pc, #224]	; (800d494 <HAL_DMA_Init+0x158>)
 800d3b4:	4013      	ands	r3, r2
 800d3b6:	617b      	str	r3, [r7, #20]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	685a      	ldr	r2, [r3, #4]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	431a      	orrs	r2, r3
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	431a      	orrs	r2, r3
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	691b      	ldr	r3, [r3, #16]
 800d3cc:	431a      	orrs	r2, r3
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	695b      	ldr	r3, [r3, #20]
 800d3d2:	431a      	orrs	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	699b      	ldr	r3, [r3, #24]
 800d3d8:	431a      	orrs	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	69db      	ldr	r3, [r3, #28]
 800d3de:	431a      	orrs	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a1b      	ldr	r3, [r3, #32]
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	617b      	str	r3, [r7, #20]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f0:	2b04      	cmp	r3, #4
 800d3f2:	d107      	bne.n	800d404 <HAL_DMA_Init+0xc8>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	697a      	ldr	r2, [r7, #20]
 800d400:	4313      	orrs	r3, r2
 800d402:	617b      	str	r3, [r7, #20]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	697a      	ldr	r2, [r7, #20]
 800d40a:	601a      	str	r2, [r3, #0]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	695b      	ldr	r3, [r3, #20]
 800d412:	617b      	str	r3, [r7, #20]
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	f023 0307 	bic.w	r3, r3, #7
 800d41a:	617b      	str	r3, [r7, #20]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d420:	697a      	ldr	r2, [r7, #20]
 800d422:	4313      	orrs	r3, r2
 800d424:	617b      	str	r3, [r7, #20]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d42a:	2b04      	cmp	r3, #4
 800d42c:	d117      	bne.n	800d45e <HAL_DMA_Init+0x122>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d432:	697a      	ldr	r2, [r7, #20]
 800d434:	4313      	orrs	r3, r2
 800d436:	617b      	str	r3, [r7, #20]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00e      	beq.n	800d45e <HAL_DMA_Init+0x122>
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f000 fa6f 	bl	800d924 <DMA_CheckFifoParam>
 800d446:	4603      	mov	r3, r0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d008      	beq.n	800d45e <HAL_DMA_Init+0x122>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2240      	movs	r2, #64	; 0x40
 800d450:	655a      	str	r2, [r3, #84]	; 0x54
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2201      	movs	r2, #1
 800d456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800d45a:	2301      	movs	r3, #1
 800d45c:	e016      	b.n	800d48c <HAL_DMA_Init+0x150>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	697a      	ldr	r2, [r7, #20]
 800d464:	615a      	str	r2, [r3, #20]
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 fa26 	bl	800d8b8 <DMA_CalcBaseAndBitshift>
 800d46c:	4603      	mov	r3, r0
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d474:	223f      	movs	r2, #63	; 0x3f
 800d476:	409a      	lsls	r2, r3
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	609a      	str	r2, [r3, #8]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	655a      	str	r2, [r3, #84]	; 0x54
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2201      	movs	r2, #1
 800d486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800d48a:	2300      	movs	r3, #0
 800d48c:	4618      	mov	r0, r3
 800d48e:	3718      	adds	r7, #24
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	f010803f 	.word	0xf010803f

0800d498 <HAL_DMA_Start_IT>:
 800d498:	b580      	push	{r7, lr}
 800d49a:	b086      	sub	sp, #24
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	60b9      	str	r1, [r7, #8]
 800d4a2:	607a      	str	r2, [r7, #4]
 800d4a4:	603b      	str	r3, [r7, #0]
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	75fb      	strb	r3, [r7, #23]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4ae:	613b      	str	r3, [r7, #16]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d101      	bne.n	800d4be <HAL_DMA_Start_IT+0x26>
 800d4ba:	2302      	movs	r3, #2
 800d4bc:	e040      	b.n	800d540 <HAL_DMA_Start_IT+0xa8>
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d12f      	bne.n	800d532 <HAL_DMA_Start_IT+0x9a>
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2202      	movs	r2, #2
 800d4d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	655a      	str	r2, [r3, #84]	; 0x54
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	68b9      	ldr	r1, [r7, #8]
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f000 f9b8 	bl	800d85c <DMA_SetConfig>
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4f0:	223f      	movs	r2, #63	; 0x3f
 800d4f2:	409a      	lsls	r2, r3
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	609a      	str	r2, [r3, #8]
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f042 0216 	orr.w	r2, r2, #22
 800d506:	601a      	str	r2, [r3, #0]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d007      	beq.n	800d520 <HAL_DMA_Start_IT+0x88>
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f042 0208 	orr.w	r2, r2, #8
 800d51e:	601a      	str	r2, [r3, #0]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f042 0201 	orr.w	r2, r2, #1
 800d52e:	601a      	str	r2, [r3, #0]
 800d530:	e005      	b.n	800d53e <HAL_DMA_Start_IT+0xa6>
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2200      	movs	r2, #0
 800d536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800d53a:	2302      	movs	r3, #2
 800d53c:	75fb      	strb	r3, [r7, #23]
 800d53e:	7dfb      	ldrb	r3, [r7, #23]
 800d540:	4618      	mov	r0, r3
 800d542:	3718      	adds	r7, #24
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <HAL_DMA_IRQHandler>:
 800d548:	b580      	push	{r7, lr}
 800d54a:	b086      	sub	sp, #24
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	2300      	movs	r3, #0
 800d552:	60bb      	str	r3, [r7, #8]
 800d554:	4b8e      	ldr	r3, [pc, #568]	; (800d790 <HAL_DMA_IRQHandler+0x248>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a8e      	ldr	r2, [pc, #568]	; (800d794 <HAL_DMA_IRQHandler+0x24c>)
 800d55a:	fba2 2303 	umull	r2, r3, r2, r3
 800d55e:	0a9b      	lsrs	r3, r3, #10
 800d560:	617b      	str	r3, [r7, #20]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d566:	613b      	str	r3, [r7, #16]
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	60fb      	str	r3, [r7, #12]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d572:	2208      	movs	r2, #8
 800d574:	409a      	lsls	r2, r3
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	4013      	ands	r3, r2
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d01a      	beq.n	800d5b4 <HAL_DMA_IRQHandler+0x6c>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f003 0304 	and.w	r3, r3, #4
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d013      	beq.n	800d5b4 <HAL_DMA_IRQHandler+0x6c>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f022 0204 	bic.w	r2, r2, #4
 800d59a:	601a      	str	r2, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5a0:	2208      	movs	r2, #8
 800d5a2:	409a      	lsls	r2, r3
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	609a      	str	r2, [r3, #8]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5ac:	f043 0201 	orr.w	r2, r3, #1
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	655a      	str	r2, [r3, #84]	; 0x54
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	409a      	lsls	r2, r3
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	4013      	ands	r3, r2
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d012      	beq.n	800d5ea <HAL_DMA_IRQHandler+0xa2>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	695b      	ldr	r3, [r3, #20]
 800d5ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00b      	beq.n	800d5ea <HAL_DMA_IRQHandler+0xa2>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	409a      	lsls	r2, r3
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	609a      	str	r2, [r3, #8]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5e2:	f043 0202 	orr.w	r2, r3, #2
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	655a      	str	r2, [r3, #84]	; 0x54
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5ee:	2204      	movs	r2, #4
 800d5f0:	409a      	lsls	r2, r3
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	4013      	ands	r3, r2
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d012      	beq.n	800d620 <HAL_DMA_IRQHandler+0xd8>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f003 0302 	and.w	r3, r3, #2
 800d604:	2b00      	cmp	r3, #0
 800d606:	d00b      	beq.n	800d620 <HAL_DMA_IRQHandler+0xd8>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d60c:	2204      	movs	r2, #4
 800d60e:	409a      	lsls	r2, r3
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	609a      	str	r2, [r3, #8]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d618:	f043 0204 	orr.w	r2, r3, #4
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	655a      	str	r2, [r3, #84]	; 0x54
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d624:	2210      	movs	r2, #16
 800d626:	409a      	lsls	r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	4013      	ands	r3, r2
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d043      	beq.n	800d6b8 <HAL_DMA_IRQHandler+0x170>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f003 0308 	and.w	r3, r3, #8
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d03c      	beq.n	800d6b8 <HAL_DMA_IRQHandler+0x170>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d642:	2210      	movs	r2, #16
 800d644:	409a      	lsls	r2, r3
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	609a      	str	r2, [r3, #8]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d654:	2b00      	cmp	r3, #0
 800d656:	d018      	beq.n	800d68a <HAL_DMA_IRQHandler+0x142>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d662:	2b00      	cmp	r3, #0
 800d664:	d108      	bne.n	800d678 <HAL_DMA_IRQHandler+0x130>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d024      	beq.n	800d6b8 <HAL_DMA_IRQHandler+0x170>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	4798      	blx	r3
 800d676:	e01f      	b.n	800d6b8 <HAL_DMA_IRQHandler+0x170>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d01b      	beq.n	800d6b8 <HAL_DMA_IRQHandler+0x170>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	4798      	blx	r3
 800d688:	e016      	b.n	800d6b8 <HAL_DMA_IRQHandler+0x170>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d694:	2b00      	cmp	r3, #0
 800d696:	d107      	bne.n	800d6a8 <HAL_DMA_IRQHandler+0x160>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f022 0208 	bic.w	r2, r2, #8
 800d6a6:	601a      	str	r2, [r3, #0]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d003      	beq.n	800d6b8 <HAL_DMA_IRQHandler+0x170>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	4798      	blx	r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6bc:	2220      	movs	r2, #32
 800d6be:	409a      	lsls	r2, r3
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	4013      	ands	r3, r2
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	f000 808f 	beq.w	800d7e8 <HAL_DMA_IRQHandler+0x2a0>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f003 0310 	and.w	r3, r3, #16
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 8087 	beq.w	800d7e8 <HAL_DMA_IRQHandler+0x2a0>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6de:	2220      	movs	r2, #32
 800d6e0:	409a      	lsls	r2, r3
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	609a      	str	r2, [r3, #8]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	2b05      	cmp	r3, #5
 800d6f0:	d136      	bne.n	800d760 <HAL_DMA_IRQHandler+0x218>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f022 0216 	bic.w	r2, r2, #22
 800d700:	601a      	str	r2, [r3, #0]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	695a      	ldr	r2, [r3, #20]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d710:	615a      	str	r2, [r3, #20]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d716:	2b00      	cmp	r3, #0
 800d718:	d103      	bne.n	800d722 <HAL_DMA_IRQHandler+0x1da>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d007      	beq.n	800d732 <HAL_DMA_IRQHandler+0x1ea>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f022 0208 	bic.w	r2, r2, #8
 800d730:	601a      	str	r2, [r3, #0]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d736:	223f      	movs	r2, #63	; 0x3f
 800d738:	409a      	lsls	r2, r3
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	609a      	str	r2, [r3, #8]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2201      	movs	r2, #1
 800d742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2200      	movs	r2, #0
 800d74a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d752:	2b00      	cmp	r3, #0
 800d754:	d07e      	beq.n	800d854 <HAL_DMA_IRQHandler+0x30c>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	4798      	blx	r3
 800d75e:	e079      	b.n	800d854 <HAL_DMA_IRQHandler+0x30c>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d01d      	beq.n	800d7aa <HAL_DMA_IRQHandler+0x262>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d10d      	bne.n	800d798 <HAL_DMA_IRQHandler+0x250>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d780:	2b00      	cmp	r3, #0
 800d782:	d031      	beq.n	800d7e8 <HAL_DMA_IRQHandler+0x2a0>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	4798      	blx	r3
 800d78c:	e02c      	b.n	800d7e8 <HAL_DMA_IRQHandler+0x2a0>
 800d78e:	bf00      	nop
 800d790:	20000018 	.word	0x20000018
 800d794:	1b4e81b5 	.word	0x1b4e81b5
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d023      	beq.n	800d7e8 <HAL_DMA_IRQHandler+0x2a0>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	4798      	blx	r3
 800d7a8:	e01e      	b.n	800d7e8 <HAL_DMA_IRQHandler+0x2a0>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d10f      	bne.n	800d7d8 <HAL_DMA_IRQHandler+0x290>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f022 0210 	bic.w	r2, r2, #16
 800d7c6:	601a      	str	r2, [r3, #0]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d003      	beq.n	800d7e8 <HAL_DMA_IRQHandler+0x2a0>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	4798      	blx	r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d032      	beq.n	800d856 <HAL_DMA_IRQHandler+0x30e>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7f4:	f003 0301 	and.w	r3, r3, #1
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d022      	beq.n	800d842 <HAL_DMA_IRQHandler+0x2fa>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2205      	movs	r2, #5
 800d800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f022 0201 	bic.w	r2, r2, #1
 800d812:	601a      	str	r2, [r3, #0]
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	3301      	adds	r3, #1
 800d818:	60bb      	str	r3, [r7, #8]
 800d81a:	697a      	ldr	r2, [r7, #20]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d307      	bcc.n	800d830 <HAL_DMA_IRQHandler+0x2e8>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f003 0301 	and.w	r3, r3, #1
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1f2      	bne.n	800d814 <HAL_DMA_IRQHandler+0x2cc>
 800d82e:	e000      	b.n	800d832 <HAL_DMA_IRQHandler+0x2ea>
 800d830:	bf00      	nop
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2201      	movs	r2, #1
 800d836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d846:	2b00      	cmp	r3, #0
 800d848:	d005      	beq.n	800d856 <HAL_DMA_IRQHandler+0x30e>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	4798      	blx	r3
 800d852:	e000      	b.n	800d856 <HAL_DMA_IRQHandler+0x30e>
 800d854:	bf00      	nop
 800d856:	3718      	adds	r7, #24
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <DMA_SetConfig>:
 800d85c:	b480      	push	{r7}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	607a      	str	r2, [r7, #4]
 800d868:	603b      	str	r3, [r7, #0]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d878:	601a      	str	r2, [r3, #0]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	683a      	ldr	r2, [r7, #0]
 800d880:	605a      	str	r2, [r3, #4]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	2b40      	cmp	r3, #64	; 0x40
 800d888:	d108      	bne.n	800d89c <DMA_SetConfig+0x40>
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	609a      	str	r2, [r3, #8]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	68ba      	ldr	r2, [r7, #8]
 800d898:	60da      	str	r2, [r3, #12]
 800d89a:	e007      	b.n	800d8ac <DMA_SetConfig+0x50>
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	68ba      	ldr	r2, [r7, #8]
 800d8a2:	609a      	str	r2, [r3, #8]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	60da      	str	r2, [r3, #12]
 800d8ac:	bf00      	nop
 800d8ae:	3714      	adds	r7, #20
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <DMA_CalcBaseAndBitshift>:
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	3b10      	subs	r3, #16
 800d8c8:	4a14      	ldr	r2, [pc, #80]	; (800d91c <DMA_CalcBaseAndBitshift+0x64>)
 800d8ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d8ce:	091b      	lsrs	r3, r3, #4
 800d8d0:	60fb      	str	r3, [r7, #12]
 800d8d2:	4a13      	ldr	r2, [pc, #76]	; (800d920 <DMA_CalcBaseAndBitshift+0x68>)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	4413      	add	r3, r2
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	461a      	mov	r2, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	65da      	str	r2, [r3, #92]	; 0x5c
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2b03      	cmp	r3, #3
 800d8e4:	d909      	bls.n	800d8fa <DMA_CalcBaseAndBitshift+0x42>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d8ee:	f023 0303 	bic.w	r3, r3, #3
 800d8f2:	1d1a      	adds	r2, r3, #4
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	659a      	str	r2, [r3, #88]	; 0x58
 800d8f8:	e007      	b.n	800d90a <DMA_CalcBaseAndBitshift+0x52>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d902:	f023 0303 	bic.w	r3, r3, #3
 800d906:	687a      	ldr	r2, [r7, #4]
 800d908:	6593      	str	r3, [r2, #88]	; 0x58
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d90e:	4618      	mov	r0, r3
 800d910:	3714      	adds	r7, #20
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop
 800d91c:	aaaaaaab 	.word	0xaaaaaaab
 800d920:	08022670 	.word	0x08022670

0800d924 <DMA_CheckFifoParam>:
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	2300      	movs	r3, #0
 800d92e:	73fb      	strb	r3, [r7, #15]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d934:	60bb      	str	r3, [r7, #8]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	699b      	ldr	r3, [r3, #24]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d11f      	bne.n	800d97e <DMA_CheckFifoParam+0x5a>
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	2b03      	cmp	r3, #3
 800d942:	d856      	bhi.n	800d9f2 <DMA_CheckFifoParam+0xce>
 800d944:	a201      	add	r2, pc, #4	; (adr r2, 800d94c <DMA_CheckFifoParam+0x28>)
 800d946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d94a:	bf00      	nop
 800d94c:	0800d95d 	.word	0x0800d95d
 800d950:	0800d96f 	.word	0x0800d96f
 800d954:	0800d95d 	.word	0x0800d95d
 800d958:	0800d9f3 	.word	0x0800d9f3
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d964:	2b00      	cmp	r3, #0
 800d966:	d046      	beq.n	800d9f6 <DMA_CheckFifoParam+0xd2>
 800d968:	2301      	movs	r3, #1
 800d96a:	73fb      	strb	r3, [r7, #15]
 800d96c:	e043      	b.n	800d9f6 <DMA_CheckFifoParam+0xd2>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d972:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d976:	d140      	bne.n	800d9fa <DMA_CheckFifoParam+0xd6>
 800d978:	2301      	movs	r3, #1
 800d97a:	73fb      	strb	r3, [r7, #15]
 800d97c:	e03d      	b.n	800d9fa <DMA_CheckFifoParam+0xd6>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	699b      	ldr	r3, [r3, #24]
 800d982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d986:	d121      	bne.n	800d9cc <DMA_CheckFifoParam+0xa8>
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	2b03      	cmp	r3, #3
 800d98c:	d837      	bhi.n	800d9fe <DMA_CheckFifoParam+0xda>
 800d98e:	a201      	add	r2, pc, #4	; (adr r2, 800d994 <DMA_CheckFifoParam+0x70>)
 800d990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d994:	0800d9a5 	.word	0x0800d9a5
 800d998:	0800d9ab 	.word	0x0800d9ab
 800d99c:	0800d9a5 	.word	0x0800d9a5
 800d9a0:	0800d9bd 	.word	0x0800d9bd
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	73fb      	strb	r3, [r7, #15]
 800d9a8:	e030      	b.n	800da0c <DMA_CheckFifoParam+0xe8>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d025      	beq.n	800da02 <DMA_CheckFifoParam+0xde>
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	73fb      	strb	r3, [r7, #15]
 800d9ba:	e022      	b.n	800da02 <DMA_CheckFifoParam+0xde>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d9c4:	d11f      	bne.n	800da06 <DMA_CheckFifoParam+0xe2>
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	73fb      	strb	r3, [r7, #15]
 800d9ca:	e01c      	b.n	800da06 <DMA_CheckFifoParam+0xe2>
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	2b02      	cmp	r3, #2
 800d9d0:	d903      	bls.n	800d9da <DMA_CheckFifoParam+0xb6>
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	2b03      	cmp	r3, #3
 800d9d6:	d003      	beq.n	800d9e0 <DMA_CheckFifoParam+0xbc>
 800d9d8:	e018      	b.n	800da0c <DMA_CheckFifoParam+0xe8>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	73fb      	strb	r3, [r7, #15]
 800d9de:	e015      	b.n	800da0c <DMA_CheckFifoParam+0xe8>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d00e      	beq.n	800da0a <DMA_CheckFifoParam+0xe6>
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	73fb      	strb	r3, [r7, #15]
 800d9f0:	e00b      	b.n	800da0a <DMA_CheckFifoParam+0xe6>
 800d9f2:	bf00      	nop
 800d9f4:	e00a      	b.n	800da0c <DMA_CheckFifoParam+0xe8>
 800d9f6:	bf00      	nop
 800d9f8:	e008      	b.n	800da0c <DMA_CheckFifoParam+0xe8>
 800d9fa:	bf00      	nop
 800d9fc:	e006      	b.n	800da0c <DMA_CheckFifoParam+0xe8>
 800d9fe:	bf00      	nop
 800da00:	e004      	b.n	800da0c <DMA_CheckFifoParam+0xe8>
 800da02:	bf00      	nop
 800da04:	e002      	b.n	800da0c <DMA_CheckFifoParam+0xe8>
 800da06:	bf00      	nop
 800da08:	e000      	b.n	800da0c <DMA_CheckFifoParam+0xe8>
 800da0a:	bf00      	nop
 800da0c:	7bfb      	ldrb	r3, [r7, #15]
 800da0e:	4618      	mov	r0, r3
 800da10:	3714      	adds	r7, #20
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop

0800da1c <HAL_GPIO_Init>:
 800da1c:	b480      	push	{r7}
 800da1e:	b089      	sub	sp, #36	; 0x24
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	6039      	str	r1, [r7, #0]
 800da26:	2300      	movs	r3, #0
 800da28:	617b      	str	r3, [r7, #20]
 800da2a:	2300      	movs	r3, #0
 800da2c:	613b      	str	r3, [r7, #16]
 800da2e:	2300      	movs	r3, #0
 800da30:	61bb      	str	r3, [r7, #24]
 800da32:	2300      	movs	r3, #0
 800da34:	61fb      	str	r3, [r7, #28]
 800da36:	e16b      	b.n	800dd10 <HAL_GPIO_Init+0x2f4>
 800da38:	2201      	movs	r2, #1
 800da3a:	69fb      	ldr	r3, [r7, #28]
 800da3c:	fa02 f303 	lsl.w	r3, r2, r3
 800da40:	617b      	str	r3, [r7, #20]
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	697a      	ldr	r2, [r7, #20]
 800da48:	4013      	ands	r3, r2
 800da4a:	613b      	str	r3, [r7, #16]
 800da4c:	693a      	ldr	r2, [r7, #16]
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	429a      	cmp	r2, r3
 800da52:	f040 815a 	bne.w	800dd0a <HAL_GPIO_Init+0x2ee>
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	685b      	ldr	r3, [r3, #4]
 800da5a:	f003 0303 	and.w	r3, r3, #3
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d005      	beq.n	800da6e <HAL_GPIO_Init+0x52>
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	685b      	ldr	r3, [r3, #4]
 800da66:	f003 0303 	and.w	r3, r3, #3
 800da6a:	2b02      	cmp	r3, #2
 800da6c:	d130      	bne.n	800dad0 <HAL_GPIO_Init+0xb4>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	689b      	ldr	r3, [r3, #8]
 800da72:	61bb      	str	r3, [r7, #24]
 800da74:	69fb      	ldr	r3, [r7, #28]
 800da76:	005b      	lsls	r3, r3, #1
 800da78:	2203      	movs	r2, #3
 800da7a:	fa02 f303 	lsl.w	r3, r2, r3
 800da7e:	43db      	mvns	r3, r3
 800da80:	69ba      	ldr	r2, [r7, #24]
 800da82:	4013      	ands	r3, r2
 800da84:	61bb      	str	r3, [r7, #24]
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	68da      	ldr	r2, [r3, #12]
 800da8a:	69fb      	ldr	r3, [r7, #28]
 800da8c:	005b      	lsls	r3, r3, #1
 800da8e:	fa02 f303 	lsl.w	r3, r2, r3
 800da92:	69ba      	ldr	r2, [r7, #24]
 800da94:	4313      	orrs	r3, r2
 800da96:	61bb      	str	r3, [r7, #24]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	69ba      	ldr	r2, [r7, #24]
 800da9c:	609a      	str	r2, [r3, #8]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	61bb      	str	r3, [r7, #24]
 800daa4:	2201      	movs	r2, #1
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	fa02 f303 	lsl.w	r3, r2, r3
 800daac:	43db      	mvns	r3, r3
 800daae:	69ba      	ldr	r2, [r7, #24]
 800dab0:	4013      	ands	r3, r2
 800dab2:	61bb      	str	r3, [r7, #24]
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	091b      	lsrs	r3, r3, #4
 800daba:	f003 0201 	and.w	r2, r3, #1
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	fa02 f303 	lsl.w	r3, r2, r3
 800dac4:	69ba      	ldr	r2, [r7, #24]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	61bb      	str	r3, [r7, #24]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	69ba      	ldr	r2, [r7, #24]
 800dace:	605a      	str	r2, [r3, #4]
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	f003 0303 	and.w	r3, r3, #3
 800dad8:	2b03      	cmp	r3, #3
 800dada:	d017      	beq.n	800db0c <HAL_GPIO_Init+0xf0>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	61bb      	str	r3, [r7, #24]
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	005b      	lsls	r3, r3, #1
 800dae6:	2203      	movs	r2, #3
 800dae8:	fa02 f303 	lsl.w	r3, r2, r3
 800daec:	43db      	mvns	r3, r3
 800daee:	69ba      	ldr	r2, [r7, #24]
 800daf0:	4013      	ands	r3, r2
 800daf2:	61bb      	str	r3, [r7, #24]
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	689a      	ldr	r2, [r3, #8]
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	005b      	lsls	r3, r3, #1
 800dafc:	fa02 f303 	lsl.w	r3, r2, r3
 800db00:	69ba      	ldr	r2, [r7, #24]
 800db02:	4313      	orrs	r3, r2
 800db04:	61bb      	str	r3, [r7, #24]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	69ba      	ldr	r2, [r7, #24]
 800db0a:	60da      	str	r2, [r3, #12]
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	f003 0303 	and.w	r3, r3, #3
 800db14:	2b02      	cmp	r3, #2
 800db16:	d123      	bne.n	800db60 <HAL_GPIO_Init+0x144>
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	08da      	lsrs	r2, r3, #3
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	3208      	adds	r2, #8
 800db20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db24:	61bb      	str	r3, [r7, #24]
 800db26:	69fb      	ldr	r3, [r7, #28]
 800db28:	f003 0307 	and.w	r3, r3, #7
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	220f      	movs	r2, #15
 800db30:	fa02 f303 	lsl.w	r3, r2, r3
 800db34:	43db      	mvns	r3, r3
 800db36:	69ba      	ldr	r2, [r7, #24]
 800db38:	4013      	ands	r3, r2
 800db3a:	61bb      	str	r3, [r7, #24]
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	691a      	ldr	r2, [r3, #16]
 800db40:	69fb      	ldr	r3, [r7, #28]
 800db42:	f003 0307 	and.w	r3, r3, #7
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	fa02 f303 	lsl.w	r3, r2, r3
 800db4c:	69ba      	ldr	r2, [r7, #24]
 800db4e:	4313      	orrs	r3, r2
 800db50:	61bb      	str	r3, [r7, #24]
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	08da      	lsrs	r2, r3, #3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	3208      	adds	r2, #8
 800db5a:	69b9      	ldr	r1, [r7, #24]
 800db5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	61bb      	str	r3, [r7, #24]
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	005b      	lsls	r3, r3, #1
 800db6a:	2203      	movs	r2, #3
 800db6c:	fa02 f303 	lsl.w	r3, r2, r3
 800db70:	43db      	mvns	r3, r3
 800db72:	69ba      	ldr	r2, [r7, #24]
 800db74:	4013      	ands	r3, r2
 800db76:	61bb      	str	r3, [r7, #24]
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	f003 0203 	and.w	r2, r3, #3
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	005b      	lsls	r3, r3, #1
 800db84:	fa02 f303 	lsl.w	r3, r2, r3
 800db88:	69ba      	ldr	r2, [r7, #24]
 800db8a:	4313      	orrs	r3, r2
 800db8c:	61bb      	str	r3, [r7, #24]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	69ba      	ldr	r2, [r7, #24]
 800db92:	601a      	str	r2, [r3, #0]
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f000 80b4 	beq.w	800dd0a <HAL_GPIO_Init+0x2ee>
 800dba2:	2300      	movs	r3, #0
 800dba4:	60fb      	str	r3, [r7, #12]
 800dba6:	4b60      	ldr	r3, [pc, #384]	; (800dd28 <HAL_GPIO_Init+0x30c>)
 800dba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbaa:	4a5f      	ldr	r2, [pc, #380]	; (800dd28 <HAL_GPIO_Init+0x30c>)
 800dbac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dbb0:	6453      	str	r3, [r2, #68]	; 0x44
 800dbb2:	4b5d      	ldr	r3, [pc, #372]	; (800dd28 <HAL_GPIO_Init+0x30c>)
 800dbb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dbba:	60fb      	str	r3, [r7, #12]
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	4a5b      	ldr	r2, [pc, #364]	; (800dd2c <HAL_GPIO_Init+0x310>)
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	089b      	lsrs	r3, r3, #2
 800dbc4:	3302      	adds	r3, #2
 800dbc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbca:	61bb      	str	r3, [r7, #24]
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	f003 0303 	and.w	r3, r3, #3
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	220f      	movs	r2, #15
 800dbd6:	fa02 f303 	lsl.w	r3, r2, r3
 800dbda:	43db      	mvns	r3, r3
 800dbdc:	69ba      	ldr	r2, [r7, #24]
 800dbde:	4013      	ands	r3, r2
 800dbe0:	61bb      	str	r3, [r7, #24]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	4a52      	ldr	r2, [pc, #328]	; (800dd30 <HAL_GPIO_Init+0x314>)
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d02b      	beq.n	800dc42 <HAL_GPIO_Init+0x226>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	4a51      	ldr	r2, [pc, #324]	; (800dd34 <HAL_GPIO_Init+0x318>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d025      	beq.n	800dc3e <HAL_GPIO_Init+0x222>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	4a50      	ldr	r2, [pc, #320]	; (800dd38 <HAL_GPIO_Init+0x31c>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d01f      	beq.n	800dc3a <HAL_GPIO_Init+0x21e>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4a4f      	ldr	r2, [pc, #316]	; (800dd3c <HAL_GPIO_Init+0x320>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d019      	beq.n	800dc36 <HAL_GPIO_Init+0x21a>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	4a4e      	ldr	r2, [pc, #312]	; (800dd40 <HAL_GPIO_Init+0x324>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d013      	beq.n	800dc32 <HAL_GPIO_Init+0x216>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4a4d      	ldr	r2, [pc, #308]	; (800dd44 <HAL_GPIO_Init+0x328>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d00d      	beq.n	800dc2e <HAL_GPIO_Init+0x212>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4a4c      	ldr	r2, [pc, #304]	; (800dd48 <HAL_GPIO_Init+0x32c>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d007      	beq.n	800dc2a <HAL_GPIO_Init+0x20e>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4a4b      	ldr	r2, [pc, #300]	; (800dd4c <HAL_GPIO_Init+0x330>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d101      	bne.n	800dc26 <HAL_GPIO_Init+0x20a>
 800dc22:	2307      	movs	r3, #7
 800dc24:	e00e      	b.n	800dc44 <HAL_GPIO_Init+0x228>
 800dc26:	2308      	movs	r3, #8
 800dc28:	e00c      	b.n	800dc44 <HAL_GPIO_Init+0x228>
 800dc2a:	2306      	movs	r3, #6
 800dc2c:	e00a      	b.n	800dc44 <HAL_GPIO_Init+0x228>
 800dc2e:	2305      	movs	r3, #5
 800dc30:	e008      	b.n	800dc44 <HAL_GPIO_Init+0x228>
 800dc32:	2304      	movs	r3, #4
 800dc34:	e006      	b.n	800dc44 <HAL_GPIO_Init+0x228>
 800dc36:	2303      	movs	r3, #3
 800dc38:	e004      	b.n	800dc44 <HAL_GPIO_Init+0x228>
 800dc3a:	2302      	movs	r3, #2
 800dc3c:	e002      	b.n	800dc44 <HAL_GPIO_Init+0x228>
 800dc3e:	2301      	movs	r3, #1
 800dc40:	e000      	b.n	800dc44 <HAL_GPIO_Init+0x228>
 800dc42:	2300      	movs	r3, #0
 800dc44:	69fa      	ldr	r2, [r7, #28]
 800dc46:	f002 0203 	and.w	r2, r2, #3
 800dc4a:	0092      	lsls	r2, r2, #2
 800dc4c:	4093      	lsls	r3, r2
 800dc4e:	69ba      	ldr	r2, [r7, #24]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	61bb      	str	r3, [r7, #24]
 800dc54:	4935      	ldr	r1, [pc, #212]	; (800dd2c <HAL_GPIO_Init+0x310>)
 800dc56:	69fb      	ldr	r3, [r7, #28]
 800dc58:	089b      	lsrs	r3, r3, #2
 800dc5a:	3302      	adds	r3, #2
 800dc5c:	69ba      	ldr	r2, [r7, #24]
 800dc5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800dc62:	4b3b      	ldr	r3, [pc, #236]	; (800dd50 <HAL_GPIO_Init+0x334>)
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	61bb      	str	r3, [r7, #24]
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	43db      	mvns	r3, r3
 800dc6c:	69ba      	ldr	r2, [r7, #24]
 800dc6e:	4013      	ands	r3, r2
 800dc70:	61bb      	str	r3, [r7, #24]
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d003      	beq.n	800dc86 <HAL_GPIO_Init+0x26a>
 800dc7e:	69ba      	ldr	r2, [r7, #24]
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	4313      	orrs	r3, r2
 800dc84:	61bb      	str	r3, [r7, #24]
 800dc86:	4a32      	ldr	r2, [pc, #200]	; (800dd50 <HAL_GPIO_Init+0x334>)
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	6093      	str	r3, [r2, #8]
 800dc8c:	4b30      	ldr	r3, [pc, #192]	; (800dd50 <HAL_GPIO_Init+0x334>)
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	61bb      	str	r3, [r7, #24]
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	43db      	mvns	r3, r3
 800dc96:	69ba      	ldr	r2, [r7, #24]
 800dc98:	4013      	ands	r3, r2
 800dc9a:	61bb      	str	r3, [r7, #24]
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d003      	beq.n	800dcb0 <HAL_GPIO_Init+0x294>
 800dca8:	69ba      	ldr	r2, [r7, #24]
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	4313      	orrs	r3, r2
 800dcae:	61bb      	str	r3, [r7, #24]
 800dcb0:	4a27      	ldr	r2, [pc, #156]	; (800dd50 <HAL_GPIO_Init+0x334>)
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	60d3      	str	r3, [r2, #12]
 800dcb6:	4b26      	ldr	r3, [pc, #152]	; (800dd50 <HAL_GPIO_Init+0x334>)
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	61bb      	str	r3, [r7, #24]
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	43db      	mvns	r3, r3
 800dcc0:	69ba      	ldr	r2, [r7, #24]
 800dcc2:	4013      	ands	r3, r2
 800dcc4:	61bb      	str	r3, [r7, #24]
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d003      	beq.n	800dcda <HAL_GPIO_Init+0x2be>
 800dcd2:	69ba      	ldr	r2, [r7, #24]
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	61bb      	str	r3, [r7, #24]
 800dcda:	4a1d      	ldr	r2, [pc, #116]	; (800dd50 <HAL_GPIO_Init+0x334>)
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	6053      	str	r3, [r2, #4]
 800dce0:	4b1b      	ldr	r3, [pc, #108]	; (800dd50 <HAL_GPIO_Init+0x334>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	61bb      	str	r3, [r7, #24]
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	43db      	mvns	r3, r3
 800dcea:	69ba      	ldr	r2, [r7, #24]
 800dcec:	4013      	ands	r3, r2
 800dcee:	61bb      	str	r3, [r7, #24]
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d003      	beq.n	800dd04 <HAL_GPIO_Init+0x2e8>
 800dcfc:	69ba      	ldr	r2, [r7, #24]
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	4313      	orrs	r3, r2
 800dd02:	61bb      	str	r3, [r7, #24]
 800dd04:	4a12      	ldr	r2, [pc, #72]	; (800dd50 <HAL_GPIO_Init+0x334>)
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	6013      	str	r3, [r2, #0]
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	61fb      	str	r3, [r7, #28]
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	2b0f      	cmp	r3, #15
 800dd14:	f67f ae90 	bls.w	800da38 <HAL_GPIO_Init+0x1c>
 800dd18:	bf00      	nop
 800dd1a:	bf00      	nop
 800dd1c:	3724      	adds	r7, #36	; 0x24
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop
 800dd28:	40023800 	.word	0x40023800
 800dd2c:	40013800 	.word	0x40013800
 800dd30:	40020000 	.word	0x40020000
 800dd34:	40020400 	.word	0x40020400
 800dd38:	40020800 	.word	0x40020800
 800dd3c:	40020c00 	.word	0x40020c00
 800dd40:	40021000 	.word	0x40021000
 800dd44:	40021400 	.word	0x40021400
 800dd48:	40021800 	.word	0x40021800
 800dd4c:	40021c00 	.word	0x40021c00
 800dd50:	40013c00 	.word	0x40013c00

0800dd54 <HAL_GPIO_ReadPin>:
 800dd54:	b480      	push	{r7}
 800dd56:	b085      	sub	sp, #20
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	807b      	strh	r3, [r7, #2]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	691a      	ldr	r2, [r3, #16]
 800dd64:	887b      	ldrh	r3, [r7, #2]
 800dd66:	4013      	ands	r3, r2
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d002      	beq.n	800dd72 <HAL_GPIO_ReadPin+0x1e>
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	73fb      	strb	r3, [r7, #15]
 800dd70:	e001      	b.n	800dd76 <HAL_GPIO_ReadPin+0x22>
 800dd72:	2300      	movs	r3, #0
 800dd74:	73fb      	strb	r3, [r7, #15]
 800dd76:	7bfb      	ldrb	r3, [r7, #15]
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3714      	adds	r7, #20
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <HAL_GPIO_WritePin>:
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	807b      	strh	r3, [r7, #2]
 800dd90:	4613      	mov	r3, r2
 800dd92:	707b      	strb	r3, [r7, #1]
 800dd94:	787b      	ldrb	r3, [r7, #1]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d003      	beq.n	800dda2 <HAL_GPIO_WritePin+0x1e>
 800dd9a:	887a      	ldrh	r2, [r7, #2]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	619a      	str	r2, [r3, #24]
 800dda0:	e003      	b.n	800ddaa <HAL_GPIO_WritePin+0x26>
 800dda2:	887b      	ldrh	r3, [r7, #2]
 800dda4:	041a      	lsls	r2, r3, #16
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	619a      	str	r2, [r3, #24]
 800ddaa:	bf00      	nop
 800ddac:	370c      	adds	r7, #12
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr

0800ddb6 <HAL_GPIO_TogglePin>:
 800ddb6:	b480      	push	{r7}
 800ddb8:	b085      	sub	sp, #20
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	807b      	strh	r3, [r7, #2]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	695b      	ldr	r3, [r3, #20]
 800ddc6:	60fb      	str	r3, [r7, #12]
 800ddc8:	887a      	ldrh	r2, [r7, #2]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	4013      	ands	r3, r2
 800ddce:	041a      	lsls	r2, r3, #16
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	43d9      	mvns	r1, r3
 800ddd4:	887b      	ldrh	r3, [r7, #2]
 800ddd6:	400b      	ands	r3, r1
 800ddd8:	431a      	orrs	r2, r3
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	619a      	str	r2, [r3, #24]
 800ddde:	bf00      	nop
 800dde0:	3714      	adds	r7, #20
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr

0800ddea <HAL_PCD_Init>:
 800ddea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddec:	b08f      	sub	sp, #60	; 0x3c
 800ddee:	af0a      	add	r7, sp, #40	; 0x28
 800ddf0:	6078      	str	r0, [r7, #4]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d101      	bne.n	800ddfc <HAL_PCD_Init+0x12>
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	e10f      	b.n	800e01c <HAL_PCD_Init+0x232>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	60bb      	str	r3, [r7, #8]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800de08:	b2db      	uxtb	r3, r3
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d106      	bne.n	800de1c <HAL_PCD_Init+0x32>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f00e f97e 	bl	801c118 <HAL_PCD_MspInit>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2203      	movs	r2, #3
 800de20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d102      	bne.n	800de36 <HAL_PCD_Init+0x4c>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2200      	movs	r2, #0
 800de34:	611a      	str	r2, [r3, #16]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4618      	mov	r0, r3
 800de3c:	f003 fc87 	bl	801174e <USB_DisableGlobalInt>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	603b      	str	r3, [r7, #0]
 800de46:	687e      	ldr	r6, [r7, #4]
 800de48:	466d      	mov	r5, sp
 800de4a:	f106 0410 	add.w	r4, r6, #16
 800de4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800de52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800de56:	e894 0003 	ldmia.w	r4, {r0, r1}
 800de5a:	e885 0003 	stmia.w	r5, {r0, r1}
 800de5e:	1d33      	adds	r3, r6, #4
 800de60:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de62:	6838      	ldr	r0, [r7, #0]
 800de64:	f003 fb5e 	bl	8011524 <USB_CoreInit>
 800de68:	4603      	mov	r3, r0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d005      	beq.n	800de7a <HAL_PCD_Init+0x90>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2202      	movs	r2, #2
 800de72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 800de76:	2301      	movs	r3, #1
 800de78:	e0d0      	b.n	800e01c <HAL_PCD_Init+0x232>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	2100      	movs	r1, #0
 800de80:	4618      	mov	r0, r3
 800de82:	f003 fc75 	bl	8011770 <USB_SetCurrentMode>
 800de86:	2300      	movs	r3, #0
 800de88:	73fb      	strb	r3, [r7, #15]
 800de8a:	e04a      	b.n	800df22 <HAL_PCD_Init+0x138>
 800de8c:	7bfa      	ldrb	r2, [r7, #15]
 800de8e:	6879      	ldr	r1, [r7, #4]
 800de90:	4613      	mov	r3, r2
 800de92:	00db      	lsls	r3, r3, #3
 800de94:	4413      	add	r3, r2
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	440b      	add	r3, r1
 800de9a:	333d      	adds	r3, #61	; 0x3d
 800de9c:	2201      	movs	r2, #1
 800de9e:	701a      	strb	r2, [r3, #0]
 800dea0:	7bfa      	ldrb	r2, [r7, #15]
 800dea2:	6879      	ldr	r1, [r7, #4]
 800dea4:	4613      	mov	r3, r2
 800dea6:	00db      	lsls	r3, r3, #3
 800dea8:	4413      	add	r3, r2
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	440b      	add	r3, r1
 800deae:	333c      	adds	r3, #60	; 0x3c
 800deb0:	7bfa      	ldrb	r2, [r7, #15]
 800deb2:	701a      	strb	r2, [r3, #0]
 800deb4:	7bfa      	ldrb	r2, [r7, #15]
 800deb6:	7bfb      	ldrb	r3, [r7, #15]
 800deb8:	b298      	uxth	r0, r3
 800deba:	6879      	ldr	r1, [r7, #4]
 800debc:	4613      	mov	r3, r2
 800debe:	00db      	lsls	r3, r3, #3
 800dec0:	4413      	add	r3, r2
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	440b      	add	r3, r1
 800dec6:	3344      	adds	r3, #68	; 0x44
 800dec8:	4602      	mov	r2, r0
 800deca:	801a      	strh	r2, [r3, #0]
 800decc:	7bfa      	ldrb	r2, [r7, #15]
 800dece:	6879      	ldr	r1, [r7, #4]
 800ded0:	4613      	mov	r3, r2
 800ded2:	00db      	lsls	r3, r3, #3
 800ded4:	4413      	add	r3, r2
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	440b      	add	r3, r1
 800deda:	3340      	adds	r3, #64	; 0x40
 800dedc:	2200      	movs	r2, #0
 800dede:	701a      	strb	r2, [r3, #0]
 800dee0:	7bfa      	ldrb	r2, [r7, #15]
 800dee2:	6879      	ldr	r1, [r7, #4]
 800dee4:	4613      	mov	r3, r2
 800dee6:	00db      	lsls	r3, r3, #3
 800dee8:	4413      	add	r3, r2
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	440b      	add	r3, r1
 800deee:	3348      	adds	r3, #72	; 0x48
 800def0:	2200      	movs	r2, #0
 800def2:	601a      	str	r2, [r3, #0]
 800def4:	7bfa      	ldrb	r2, [r7, #15]
 800def6:	6879      	ldr	r1, [r7, #4]
 800def8:	4613      	mov	r3, r2
 800defa:	00db      	lsls	r3, r3, #3
 800defc:	4413      	add	r3, r2
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	440b      	add	r3, r1
 800df02:	334c      	adds	r3, #76	; 0x4c
 800df04:	2200      	movs	r2, #0
 800df06:	601a      	str	r2, [r3, #0]
 800df08:	7bfa      	ldrb	r2, [r7, #15]
 800df0a:	6879      	ldr	r1, [r7, #4]
 800df0c:	4613      	mov	r3, r2
 800df0e:	00db      	lsls	r3, r3, #3
 800df10:	4413      	add	r3, r2
 800df12:	009b      	lsls	r3, r3, #2
 800df14:	440b      	add	r3, r1
 800df16:	3354      	adds	r3, #84	; 0x54
 800df18:	2200      	movs	r2, #0
 800df1a:	601a      	str	r2, [r3, #0]
 800df1c:	7bfb      	ldrb	r3, [r7, #15]
 800df1e:	3301      	adds	r3, #1
 800df20:	73fb      	strb	r3, [r7, #15]
 800df22:	7bfa      	ldrb	r2, [r7, #15]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d3af      	bcc.n	800de8c <HAL_PCD_Init+0xa2>
 800df2c:	2300      	movs	r3, #0
 800df2e:	73fb      	strb	r3, [r7, #15]
 800df30:	e044      	b.n	800dfbc <HAL_PCD_Init+0x1d2>
 800df32:	7bfa      	ldrb	r2, [r7, #15]
 800df34:	6879      	ldr	r1, [r7, #4]
 800df36:	4613      	mov	r3, r2
 800df38:	00db      	lsls	r3, r3, #3
 800df3a:	4413      	add	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	440b      	add	r3, r1
 800df40:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800df44:	2200      	movs	r2, #0
 800df46:	701a      	strb	r2, [r3, #0]
 800df48:	7bfa      	ldrb	r2, [r7, #15]
 800df4a:	6879      	ldr	r1, [r7, #4]
 800df4c:	4613      	mov	r3, r2
 800df4e:	00db      	lsls	r3, r3, #3
 800df50:	4413      	add	r3, r2
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	440b      	add	r3, r1
 800df56:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800df5a:	7bfa      	ldrb	r2, [r7, #15]
 800df5c:	701a      	strb	r2, [r3, #0]
 800df5e:	7bfa      	ldrb	r2, [r7, #15]
 800df60:	6879      	ldr	r1, [r7, #4]
 800df62:	4613      	mov	r3, r2
 800df64:	00db      	lsls	r3, r3, #3
 800df66:	4413      	add	r3, r2
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	440b      	add	r3, r1
 800df6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800df70:	2200      	movs	r2, #0
 800df72:	701a      	strb	r2, [r3, #0]
 800df74:	7bfa      	ldrb	r2, [r7, #15]
 800df76:	6879      	ldr	r1, [r7, #4]
 800df78:	4613      	mov	r3, r2
 800df7a:	00db      	lsls	r3, r3, #3
 800df7c:	4413      	add	r3, r2
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	440b      	add	r3, r1
 800df82:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800df86:	2200      	movs	r2, #0
 800df88:	601a      	str	r2, [r3, #0]
 800df8a:	7bfa      	ldrb	r2, [r7, #15]
 800df8c:	6879      	ldr	r1, [r7, #4]
 800df8e:	4613      	mov	r3, r2
 800df90:	00db      	lsls	r3, r3, #3
 800df92:	4413      	add	r3, r2
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	440b      	add	r3, r1
 800df98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800df9c:	2200      	movs	r2, #0
 800df9e:	601a      	str	r2, [r3, #0]
 800dfa0:	7bfa      	ldrb	r2, [r7, #15]
 800dfa2:	6879      	ldr	r1, [r7, #4]
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	00db      	lsls	r3, r3, #3
 800dfa8:	4413      	add	r3, r2
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	440b      	add	r3, r1
 800dfae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	601a      	str	r2, [r3, #0]
 800dfb6:	7bfb      	ldrb	r3, [r7, #15]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	73fb      	strb	r3, [r7, #15]
 800dfbc:	7bfa      	ldrb	r2, [r7, #15]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d3b5      	bcc.n	800df32 <HAL_PCD_Init+0x148>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	603b      	str	r3, [r7, #0]
 800dfcc:	687e      	ldr	r6, [r7, #4]
 800dfce:	466d      	mov	r5, sp
 800dfd0:	f106 0410 	add.w	r4, r6, #16
 800dfd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dfd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dfd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dfda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dfdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dfe0:	e885 0003 	stmia.w	r5, {r0, r1}
 800dfe4:	1d33      	adds	r3, r6, #4
 800dfe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dfe8:	6838      	ldr	r0, [r7, #0]
 800dfea:	f003 fc0d 	bl	8011808 <USB_DevInit>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d005      	beq.n	800e000 <HAL_PCD_Init+0x216>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2202      	movs	r2, #2
 800dff8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 800dffc:	2301      	movs	r3, #1
 800dffe:	e00d      	b.n	800e01c <HAL_PCD_Init+0x232>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2200      	movs	r2, #0
 800e004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2201      	movs	r2, #1
 800e00c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4618      	mov	r0, r3
 800e016:	f004 fd5c 	bl	8012ad2 <USB_DevDisconnect>
 800e01a:	2300      	movs	r3, #0
 800e01c:	4618      	mov	r0, r3
 800e01e:	3714      	adds	r7, #20
 800e020:	46bd      	mov	sp, r7
 800e022:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e024 <HAL_PCD_Start>:
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	60fb      	str	r3, [r7, #12]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d101      	bne.n	800e040 <HAL_PCD_Start+0x1c>
 800e03c:	2302      	movs	r3, #2
 800e03e:	e020      	b.n	800e082 <HAL_PCD_Start+0x5e>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2201      	movs	r2, #1
 800e044:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d109      	bne.n	800e064 <HAL_PCD_Start+0x40>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	699b      	ldr	r3, [r3, #24]
 800e054:	2b01      	cmp	r3, #1
 800e056:	d005      	beq.n	800e064 <HAL_PCD_Start+0x40>
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e05c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	639a      	str	r2, [r3, #56]	; 0x38
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4618      	mov	r0, r3
 800e06a:	f003 fb5f 	bl	801172c <USB_EnableGlobalInt>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	4618      	mov	r0, r3
 800e074:	f004 fd0c 	bl	8012a90 <USB_DevConnect>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2200      	movs	r2, #0
 800e07c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800e080:	2300      	movs	r3, #0
 800e082:	4618      	mov	r0, r3
 800e084:	3710      	adds	r7, #16
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}

0800e08a <HAL_PCD_IRQHandler>:
 800e08a:	b590      	push	{r4, r7, lr}
 800e08c:	b08d      	sub	sp, #52	; 0x34
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	623b      	str	r3, [r7, #32]
 800e098:	6a3b      	ldr	r3, [r7, #32]
 800e09a:	61fb      	str	r3, [r7, #28]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f004 fdca 	bl	8012c3a <USB_GetMode>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	f040 848a 	bne.w	800e9c2 <HAL_PCD_IRQHandler+0x938>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f004 fd2e 	bl	8012b14 <USB_ReadInterrupts>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	f000 8480 	beq.w	800e9c0 <HAL_PCD_IRQHandler+0x936>
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0c6:	689b      	ldr	r3, [r3, #8]
 800e0c8:	0a1b      	lsrs	r3, r3, #8
 800e0ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f004 fd1b 	bl	8012b14 <USB_ReadInterrupts>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	f003 0302 	and.w	r3, r3, #2
 800e0e4:	2b02      	cmp	r3, #2
 800e0e6:	d107      	bne.n	800e0f8 <HAL_PCD_IRQHandler+0x6e>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	695a      	ldr	r2, [r3, #20]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f002 0202 	and.w	r2, r2, #2
 800e0f6:	615a      	str	r2, [r3, #20]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f004 fd09 	bl	8012b14 <USB_ReadInterrupts>
 800e102:	4603      	mov	r3, r0
 800e104:	f003 0310 	and.w	r3, r3, #16
 800e108:	2b10      	cmp	r3, #16
 800e10a:	d161      	bne.n	800e1d0 <HAL_PCD_IRQHandler+0x146>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	699a      	ldr	r2, [r3, #24]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f022 0210 	bic.w	r2, r2, #16
 800e11a:	619a      	str	r2, [r3, #24]
 800e11c:	6a3b      	ldr	r3, [r7, #32]
 800e11e:	6a1b      	ldr	r3, [r3, #32]
 800e120:	61bb      	str	r3, [r7, #24]
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	f003 020f 	and.w	r2, r3, #15
 800e128:	4613      	mov	r3, r2
 800e12a:	00db      	lsls	r3, r3, #3
 800e12c:	4413      	add	r3, r2
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	4413      	add	r3, r2
 800e138:	3304      	adds	r3, #4
 800e13a:	617b      	str	r3, [r7, #20]
 800e13c:	69bb      	ldr	r3, [r7, #24]
 800e13e:	0c5b      	lsrs	r3, r3, #17
 800e140:	f003 030f 	and.w	r3, r3, #15
 800e144:	2b02      	cmp	r3, #2
 800e146:	d124      	bne.n	800e192 <HAL_PCD_IRQHandler+0x108>
 800e148:	69ba      	ldr	r2, [r7, #24]
 800e14a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800e14e:	4013      	ands	r3, r2
 800e150:	2b00      	cmp	r3, #0
 800e152:	d035      	beq.n	800e1c0 <HAL_PCD_IRQHandler+0x136>
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	6919      	ldr	r1, [r3, #16]
 800e158:	69bb      	ldr	r3, [r7, #24]
 800e15a:	091b      	lsrs	r3, r3, #4
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e162:	b29b      	uxth	r3, r3
 800e164:	461a      	mov	r2, r3
 800e166:	6a38      	ldr	r0, [r7, #32]
 800e168:	f004 fb40 	bl	80127ec <USB_ReadPacket>
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	691a      	ldr	r2, [r3, #16]
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	091b      	lsrs	r3, r3, #4
 800e174:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e178:	441a      	add	r2, r3
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	611a      	str	r2, [r3, #16]
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	6a1a      	ldr	r2, [r3, #32]
 800e182:	69bb      	ldr	r3, [r7, #24]
 800e184:	091b      	lsrs	r3, r3, #4
 800e186:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e18a:	441a      	add	r2, r3
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	621a      	str	r2, [r3, #32]
 800e190:	e016      	b.n	800e1c0 <HAL_PCD_IRQHandler+0x136>
 800e192:	69bb      	ldr	r3, [r7, #24]
 800e194:	0c5b      	lsrs	r3, r3, #17
 800e196:	f003 030f 	and.w	r3, r3, #15
 800e19a:	2b06      	cmp	r3, #6
 800e19c:	d110      	bne.n	800e1c0 <HAL_PCD_IRQHandler+0x136>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e1a4:	2208      	movs	r2, #8
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	6a38      	ldr	r0, [r7, #32]
 800e1aa:	f004 fb1f 	bl	80127ec <USB_ReadPacket>
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	6a1a      	ldr	r2, [r3, #32]
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	091b      	lsrs	r3, r3, #4
 800e1b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1ba:	441a      	add	r2, r3
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	621a      	str	r2, [r3, #32]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	699a      	ldr	r2, [r3, #24]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f042 0210 	orr.w	r2, r2, #16
 800e1ce:	619a      	str	r2, [r3, #24]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f004 fc9d 	bl	8012b14 <USB_ReadInterrupts>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e1e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e1e4:	f040 80a7 	bne.w	800e336 <HAL_PCD_IRQHandler+0x2ac>
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	627b      	str	r3, [r7, #36]	; 0x24
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f004 fca2 	bl	8012b3a <USB_ReadDevAllOutEpInterrupt>
 800e1f6:	62b8      	str	r0, [r7, #40]	; 0x28
 800e1f8:	e099      	b.n	800e32e <HAL_PCD_IRQHandler+0x2a4>
 800e1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fc:	f003 0301 	and.w	r3, r3, #1
 800e200:	2b00      	cmp	r3, #0
 800e202:	f000 808e 	beq.w	800e322 <HAL_PCD_IRQHandler+0x298>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e20c:	b2d2      	uxtb	r2, r2
 800e20e:	4611      	mov	r1, r2
 800e210:	4618      	mov	r0, r3
 800e212:	f004 fcc6 	bl	8012ba2 <USB_ReadDevOutEPInterrupt>
 800e216:	6138      	str	r0, [r7, #16]
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	f003 0301 	and.w	r3, r3, #1
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d00c      	beq.n	800e23c <HAL_PCD_IRQHandler+0x1b2>
 800e222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e224:	015a      	lsls	r2, r3, #5
 800e226:	69fb      	ldr	r3, [r7, #28]
 800e228:	4413      	add	r3, r2
 800e22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e22e:	461a      	mov	r2, r3
 800e230:	2301      	movs	r3, #1
 800e232:	6093      	str	r3, [r2, #8]
 800e234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 fec2 	bl	800efc0 <PCD_EP_OutXfrComplete_int>
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	f003 0308 	and.w	r3, r3, #8
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00c      	beq.n	800e260 <HAL_PCD_IRQHandler+0x1d6>
 800e246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e248:	015a      	lsls	r2, r3, #5
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	4413      	add	r3, r2
 800e24e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e252:	461a      	mov	r2, r3
 800e254:	2308      	movs	r3, #8
 800e256:	6093      	str	r3, [r2, #8]
 800e258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f000 ff98 	bl	800f190 <PCD_EP_OutSetupPacket_int>
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	f003 0310 	and.w	r3, r3, #16
 800e266:	2b00      	cmp	r3, #0
 800e268:	d008      	beq.n	800e27c <HAL_PCD_IRQHandler+0x1f2>
 800e26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26c:	015a      	lsls	r2, r3, #5
 800e26e:	69fb      	ldr	r3, [r7, #28]
 800e270:	4413      	add	r3, r2
 800e272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e276:	461a      	mov	r2, r3
 800e278:	2310      	movs	r3, #16
 800e27a:	6093      	str	r3, [r2, #8]
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	f003 0302 	and.w	r3, r3, #2
 800e282:	2b00      	cmp	r3, #0
 800e284:	d030      	beq.n	800e2e8 <HAL_PCD_IRQHandler+0x25e>
 800e286:	6a3b      	ldr	r3, [r7, #32]
 800e288:	695b      	ldr	r3, [r3, #20]
 800e28a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e28e:	2b80      	cmp	r3, #128	; 0x80
 800e290:	d109      	bne.n	800e2a6 <HAL_PCD_IRQHandler+0x21c>
 800e292:	69fb      	ldr	r3, [r7, #28]
 800e294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e298:	685b      	ldr	r3, [r3, #4]
 800e29a:	69fa      	ldr	r2, [r7, #28]
 800e29c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e2a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e2a4:	6053      	str	r3, [r2, #4]
 800e2a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	00db      	lsls	r3, r3, #3
 800e2ac:	4413      	add	r3, r2
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	3304      	adds	r3, #4
 800e2ba:	617b      	str	r3, [r7, #20]
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	78db      	ldrb	r3, [r3, #3]
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d108      	bne.n	800e2d6 <HAL_PCD_IRQHandler+0x24c>
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	70da      	strb	r2, [r3, #3]
 800e2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f00e f827 	bl	801c324 <HAL_PCD_ISOOUTIncompleteCallback>
 800e2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d8:	015a      	lsls	r2, r3, #5
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	4413      	add	r3, r2
 800e2de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	2302      	movs	r3, #2
 800e2e6:	6093      	str	r3, [r2, #8]
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	f003 0320 	and.w	r3, r3, #32
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d008      	beq.n	800e304 <HAL_PCD_IRQHandler+0x27a>
 800e2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f4:	015a      	lsls	r2, r3, #5
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	4413      	add	r3, r2
 800e2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2fe:	461a      	mov	r2, r3
 800e300:	2320      	movs	r3, #32
 800e302:	6093      	str	r3, [r2, #8]
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d009      	beq.n	800e322 <HAL_PCD_IRQHandler+0x298>
 800e30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e310:	015a      	lsls	r2, r3, #5
 800e312:	69fb      	ldr	r3, [r7, #28]
 800e314:	4413      	add	r3, r2
 800e316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e31a:	461a      	mov	r2, r3
 800e31c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e320:	6093      	str	r3, [r2, #8]
 800e322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e324:	3301      	adds	r3, #1
 800e326:	627b      	str	r3, [r7, #36]	; 0x24
 800e328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32a:	085b      	lsrs	r3, r3, #1
 800e32c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e330:	2b00      	cmp	r3, #0
 800e332:	f47f af62 	bne.w	800e1fa <HAL_PCD_IRQHandler+0x170>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4618      	mov	r0, r3
 800e33c:	f004 fbea 	bl	8012b14 <USB_ReadInterrupts>
 800e340:	4603      	mov	r3, r0
 800e342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e34a:	f040 80db 	bne.w	800e504 <HAL_PCD_IRQHandler+0x47a>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4618      	mov	r0, r3
 800e354:	f004 fc0b 	bl	8012b6e <USB_ReadDevAllInEpInterrupt>
 800e358:	62b8      	str	r0, [r7, #40]	; 0x28
 800e35a:	2300      	movs	r3, #0
 800e35c:	627b      	str	r3, [r7, #36]	; 0x24
 800e35e:	e0cd      	b.n	800e4fc <HAL_PCD_IRQHandler+0x472>
 800e360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e362:	f003 0301 	and.w	r3, r3, #1
 800e366:	2b00      	cmp	r3, #0
 800e368:	f000 80c2 	beq.w	800e4f0 <HAL_PCD_IRQHandler+0x466>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e372:	b2d2      	uxtb	r2, r2
 800e374:	4611      	mov	r1, r2
 800e376:	4618      	mov	r0, r3
 800e378:	f004 fc31 	bl	8012bde <USB_ReadDevInEPInterrupt>
 800e37c:	6138      	str	r0, [r7, #16]
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	f003 0301 	and.w	r3, r3, #1
 800e384:	2b00      	cmp	r3, #0
 800e386:	d057      	beq.n	800e438 <HAL_PCD_IRQHandler+0x3ae>
 800e388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38a:	f003 030f 	and.w	r3, r3, #15
 800e38e:	2201      	movs	r2, #1
 800e390:	fa02 f303 	lsl.w	r3, r2, r3
 800e394:	60fb      	str	r3, [r7, #12]
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e39c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	43db      	mvns	r3, r3
 800e3a2:	69f9      	ldr	r1, [r7, #28]
 800e3a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e3a8:	4013      	ands	r3, r2
 800e3aa:	634b      	str	r3, [r1, #52]	; 0x34
 800e3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ae:	015a      	lsls	r2, r3, #5
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	6093      	str	r3, [r2, #8]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	691b      	ldr	r3, [r3, #16]
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d132      	bne.n	800e42c <HAL_PCD_IRQHandler+0x3a2>
 800e3c6:	6879      	ldr	r1, [r7, #4]
 800e3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	00db      	lsls	r3, r3, #3
 800e3ce:	4413      	add	r3, r2
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	440b      	add	r3, r1
 800e3d4:	334c      	adds	r3, #76	; 0x4c
 800e3d6:	6819      	ldr	r1, [r3, #0]
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3dc:	4613      	mov	r3, r2
 800e3de:	00db      	lsls	r3, r3, #3
 800e3e0:	4413      	add	r3, r2
 800e3e2:	009b      	lsls	r3, r3, #2
 800e3e4:	4403      	add	r3, r0
 800e3e6:	3348      	adds	r3, #72	; 0x48
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4419      	add	r1, r3
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3f0:	4613      	mov	r3, r2
 800e3f2:	00db      	lsls	r3, r3, #3
 800e3f4:	4413      	add	r3, r2
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	4403      	add	r3, r0
 800e3fa:	334c      	adds	r3, #76	; 0x4c
 800e3fc:	6019      	str	r1, [r3, #0]
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e400:	2b00      	cmp	r3, #0
 800e402:	d113      	bne.n	800e42c <HAL_PCD_IRQHandler+0x3a2>
 800e404:	6879      	ldr	r1, [r7, #4]
 800e406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e408:	4613      	mov	r3, r2
 800e40a:	00db      	lsls	r3, r3, #3
 800e40c:	4413      	add	r3, r2
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	440b      	add	r3, r1
 800e412:	3354      	adds	r3, #84	; 0x54
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d108      	bne.n	800e42c <HAL_PCD_IRQHandler+0x3a2>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6818      	ldr	r0, [r3, #0]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e424:	461a      	mov	r2, r3
 800e426:	2101      	movs	r1, #1
 800e428:	f004 fc38 	bl	8012c9c <USB_EP0_OutStart>
 800e42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42e:	b2db      	uxtb	r3, r3
 800e430:	4619      	mov	r1, r3
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f00d fef1 	bl	801c21a <HAL_PCD_DataInStageCallback>
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	f003 0308 	and.w	r3, r3, #8
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d008      	beq.n	800e454 <HAL_PCD_IRQHandler+0x3ca>
 800e442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e444:	015a      	lsls	r2, r3, #5
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	4413      	add	r3, r2
 800e44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e44e:	461a      	mov	r2, r3
 800e450:	2308      	movs	r3, #8
 800e452:	6093      	str	r3, [r2, #8]
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	f003 0310 	and.w	r3, r3, #16
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d008      	beq.n	800e470 <HAL_PCD_IRQHandler+0x3e6>
 800e45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e460:	015a      	lsls	r2, r3, #5
 800e462:	69fb      	ldr	r3, [r7, #28]
 800e464:	4413      	add	r3, r2
 800e466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e46a:	461a      	mov	r2, r3
 800e46c:	2310      	movs	r3, #16
 800e46e:	6093      	str	r3, [r2, #8]
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e476:	2b00      	cmp	r3, #0
 800e478:	d008      	beq.n	800e48c <HAL_PCD_IRQHandler+0x402>
 800e47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47c:	015a      	lsls	r2, r3, #5
 800e47e:	69fb      	ldr	r3, [r7, #28]
 800e480:	4413      	add	r3, r2
 800e482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e486:	461a      	mov	r2, r3
 800e488:	2340      	movs	r3, #64	; 0x40
 800e48a:	6093      	str	r3, [r2, #8]
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	f003 0302 	and.w	r3, r3, #2
 800e492:	2b00      	cmp	r3, #0
 800e494:	d023      	beq.n	800e4de <HAL_PCD_IRQHandler+0x454>
 800e496:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e498:	6a38      	ldr	r0, [r7, #32]
 800e49a:	f003 fb19 	bl	8011ad0 <USB_FlushTxFifo>
 800e49e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4a0:	4613      	mov	r3, r2
 800e4a2:	00db      	lsls	r3, r3, #3
 800e4a4:	4413      	add	r3, r2
 800e4a6:	009b      	lsls	r3, r3, #2
 800e4a8:	3338      	adds	r3, #56	; 0x38
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	4413      	add	r3, r2
 800e4ae:	3304      	adds	r3, #4
 800e4b0:	617b      	str	r3, [r7, #20]
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	78db      	ldrb	r3, [r3, #3]
 800e4b6:	2b01      	cmp	r3, #1
 800e4b8:	d108      	bne.n	800e4cc <HAL_PCD_IRQHandler+0x442>
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	70da      	strb	r2, [r3, #3]
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f00d ff3e 	bl	801c348 <HAL_PCD_ISOINIncompleteCallback>
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	015a      	lsls	r2, r3, #5
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	4413      	add	r3, r2
 800e4d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4d8:	461a      	mov	r2, r3
 800e4da:	2302      	movs	r3, #2
 800e4dc:	6093      	str	r3, [r2, #8]
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d003      	beq.n	800e4f0 <HAL_PCD_IRQHandler+0x466>
 800e4e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 fcdb 	bl	800eea6 <PCD_WriteEmptyTxFifo>
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	627b      	str	r3, [r7, #36]	; 0x24
 800e4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f8:	085b      	lsrs	r3, r3, #1
 800e4fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	f47f af2e 	bne.w	800e360 <HAL_PCD_IRQHandler+0x2d6>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4618      	mov	r0, r3
 800e50a:	f004 fb03 	bl	8012b14 <USB_ReadInterrupts>
 800e50e:	4603      	mov	r3, r0
 800e510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e518:	d122      	bne.n	800e560 <HAL_PCD_IRQHandler+0x4d6>
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	69fa      	ldr	r2, [r7, #28]
 800e524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e528:	f023 0301 	bic.w	r3, r3, #1
 800e52c:	6053      	str	r3, [r2, #4]
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e534:	2b01      	cmp	r3, #1
 800e536:	d108      	bne.n	800e54a <HAL_PCD_IRQHandler+0x4c0>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800e540:	2100      	movs	r1, #0
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f000 fec2 	bl	800f2cc <HAL_PCDEx_LPM_Callback>
 800e548:	e002      	b.n	800e550 <HAL_PCD_IRQHandler+0x4c6>
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f00d fedc 	bl	801c308 <HAL_PCD_ResumeCallback>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	695a      	ldr	r2, [r3, #20]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e55e:	615a      	str	r2, [r3, #20]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	4618      	mov	r0, r3
 800e566:	f004 fad5 	bl	8012b14 <USB_ReadInterrupts>
 800e56a:	4603      	mov	r3, r0
 800e56c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e574:	d112      	bne.n	800e59c <HAL_PCD_IRQHandler+0x512>
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e57c:	689b      	ldr	r3, [r3, #8]
 800e57e:	f003 0301 	and.w	r3, r3, #1
 800e582:	2b01      	cmp	r3, #1
 800e584:	d102      	bne.n	800e58c <HAL_PCD_IRQHandler+0x502>
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f00d fe98 	bl	801c2bc <HAL_PCD_SuspendCallback>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	695a      	ldr	r2, [r3, #20]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800e59a:	615a      	str	r2, [r3, #20]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f004 fab7 	bl	8012b14 <USB_ReadInterrupts>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e5ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5b0:	f040 80b7 	bne.w	800e722 <HAL_PCD_IRQHandler+0x698>
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	69fa      	ldr	r2, [r7, #28]
 800e5be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e5c2:	f023 0301 	bic.w	r3, r3, #1
 800e5c6:	6053      	str	r3, [r2, #4]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2110      	movs	r1, #16
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f003 fa7e 	bl	8011ad0 <USB_FlushTxFifo>
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5d8:	e046      	b.n	800e668 <HAL_PCD_IRQHandler+0x5de>
 800e5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5dc:	015a      	lsls	r2, r3, #5
 800e5de:	69fb      	ldr	r3, [r7, #28]
 800e5e0:	4413      	add	r3, r2
 800e5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e5ec:	6093      	str	r3, [r2, #8]
 800e5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f0:	015a      	lsls	r2, r3, #5
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5fe:	0151      	lsls	r1, r2, #5
 800e600:	69fa      	ldr	r2, [r7, #28]
 800e602:	440a      	add	r2, r1
 800e604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e608:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e60c:	6013      	str	r3, [r2, #0]
 800e60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e610:	015a      	lsls	r2, r3, #5
 800e612:	69fb      	ldr	r3, [r7, #28]
 800e614:	4413      	add	r3, r2
 800e616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e61a:	461a      	mov	r2, r3
 800e61c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e620:	6093      	str	r3, [r2, #8]
 800e622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e624:	015a      	lsls	r2, r3, #5
 800e626:	69fb      	ldr	r3, [r7, #28]
 800e628:	4413      	add	r3, r2
 800e62a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e632:	0151      	lsls	r1, r2, #5
 800e634:	69fa      	ldr	r2, [r7, #28]
 800e636:	440a      	add	r2, r1
 800e638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e63c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e640:	6013      	str	r3, [r2, #0]
 800e642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e644:	015a      	lsls	r2, r3, #5
 800e646:	69fb      	ldr	r3, [r7, #28]
 800e648:	4413      	add	r3, r2
 800e64a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e652:	0151      	lsls	r1, r2, #5
 800e654:	69fa      	ldr	r2, [r7, #28]
 800e656:	440a      	add	r2, r1
 800e658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e65c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e660:	6013      	str	r3, [r2, #0]
 800e662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e664:	3301      	adds	r3, #1
 800e666:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e66e:	429a      	cmp	r2, r3
 800e670:	d3b3      	bcc.n	800e5da <HAL_PCD_IRQHandler+0x550>
 800e672:	69fb      	ldr	r3, [r7, #28]
 800e674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e678:	69db      	ldr	r3, [r3, #28]
 800e67a:	69fa      	ldr	r2, [r7, #28]
 800e67c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e680:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800e684:	61d3      	str	r3, [r2, #28]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d016      	beq.n	800e6bc <HAL_PCD_IRQHandler+0x632>
 800e68e:	69fb      	ldr	r3, [r7, #28]
 800e690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e698:	69fa      	ldr	r2, [r7, #28]
 800e69a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e69e:	f043 030b 	orr.w	r3, r3, #11
 800e6a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6ae:	69fa      	ldr	r2, [r7, #28]
 800e6b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6b4:	f043 030b 	orr.w	r3, r3, #11
 800e6b8:	6453      	str	r3, [r2, #68]	; 0x44
 800e6ba:	e015      	b.n	800e6e8 <HAL_PCD_IRQHandler+0x65e>
 800e6bc:	69fb      	ldr	r3, [r7, #28]
 800e6be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6c2:	695b      	ldr	r3, [r3, #20]
 800e6c4:	69fa      	ldr	r2, [r7, #28]
 800e6c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e6ce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800e6d2:	6153      	str	r3, [r2, #20]
 800e6d4:	69fb      	ldr	r3, [r7, #28]
 800e6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6da:	691b      	ldr	r3, [r3, #16]
 800e6dc:	69fa      	ldr	r2, [r7, #28]
 800e6de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6e2:	f043 030b 	orr.w	r3, r3, #11
 800e6e6:	6113      	str	r3, [r2, #16]
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	69fa      	ldr	r2, [r7, #28]
 800e6f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e6fa:	6013      	str	r3, [r2, #0]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6818      	ldr	r0, [r3, #0]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	691b      	ldr	r3, [r3, #16]
 800e704:	b2d9      	uxtb	r1, r3
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e70c:	461a      	mov	r2, r3
 800e70e:	f004 fac5 	bl	8012c9c <USB_EP0_OutStart>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	695a      	ldr	r2, [r3, #20]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800e720:	615a      	str	r2, [r3, #20]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4618      	mov	r0, r3
 800e728:	f004 f9f4 	bl	8012b14 <USB_ReadInterrupts>
 800e72c:	4603      	mov	r3, r0
 800e72e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e736:	d124      	bne.n	800e782 <HAL_PCD_IRQHandler+0x6f8>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4618      	mov	r0, r3
 800e73e:	f004 fa8a 	bl	8012c56 <USB_ActivateSetup>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	4618      	mov	r0, r3
 800e748:	f003 fa3f 	bl	8011bca <USB_GetDevSpeed>
 800e74c:	4603      	mov	r3, r0
 800e74e:	461a      	mov	r2, r3
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	60da      	str	r2, [r3, #12]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681c      	ldr	r4, [r3, #0]
 800e758:	f001 fa28 	bl	800fbac <HAL_RCC_GetHCLKFreq>
 800e75c:	4601      	mov	r1, r0
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	68db      	ldr	r3, [r3, #12]
 800e762:	b2db      	uxtb	r3, r3
 800e764:	461a      	mov	r2, r3
 800e766:	4620      	mov	r0, r4
 800e768:	f002 ff3e 	bl	80115e8 <USB_SetTurnaroundTime>
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f00d fd7c 	bl	801c26a <HAL_PCD_ResetCallback>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	695a      	ldr	r2, [r3, #20]
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800e780:	615a      	str	r2, [r3, #20]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	4618      	mov	r0, r3
 800e788:	f004 f9c4 	bl	8012b14 <USB_ReadInterrupts>
 800e78c:	4603      	mov	r3, r0
 800e78e:	f003 0308 	and.w	r3, r3, #8
 800e792:	2b08      	cmp	r3, #8
 800e794:	d10a      	bne.n	800e7ac <HAL_PCD_IRQHandler+0x722>
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f00d fd59 	bl	801c24e <HAL_PCD_SOFCallback>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	695a      	ldr	r2, [r3, #20]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f002 0208 	and.w	r2, r2, #8
 800e7aa:	615a      	str	r2, [r3, #20]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f004 f9af 	bl	8012b14 <USB_ReadInterrupts>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7bc:	2b80      	cmp	r3, #128	; 0x80
 800e7be:	d122      	bne.n	800e806 <HAL_PCD_IRQHandler+0x77c>
 800e7c0:	6a3b      	ldr	r3, [r7, #32]
 800e7c2:	699b      	ldr	r3, [r3, #24]
 800e7c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e7c8:	6a3b      	ldr	r3, [r7, #32]
 800e7ca:	619a      	str	r2, [r3, #24]
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	627b      	str	r3, [r7, #36]	; 0x24
 800e7d0:	e014      	b.n	800e7fc <HAL_PCD_IRQHandler+0x772>
 800e7d2:	6879      	ldr	r1, [r7, #4]
 800e7d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	00db      	lsls	r3, r3, #3
 800e7da:	4413      	add	r3, r2
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	440b      	add	r3, r1
 800e7e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d105      	bne.n	800e7f6 <HAL_PCD_IRQHandler+0x76c>
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	b2db      	uxtb	r3, r3
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 fb27 	bl	800ee44 <HAL_PCD_EP_Abort>
 800e7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e802:	429a      	cmp	r2, r3
 800e804:	d3e5      	bcc.n	800e7d2 <HAL_PCD_IRQHandler+0x748>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	4618      	mov	r0, r3
 800e80c:	f004 f982 	bl	8012b14 <USB_ReadInterrupts>
 800e810:	4603      	mov	r3, r0
 800e812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e81a:	d13b      	bne.n	800e894 <HAL_PCD_IRQHandler+0x80a>
 800e81c:	2301      	movs	r3, #1
 800e81e:	627b      	str	r3, [r7, #36]	; 0x24
 800e820:	e02b      	b.n	800e87a <HAL_PCD_IRQHandler+0x7f0>
 800e822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e824:	015a      	lsls	r2, r3, #5
 800e826:	69fb      	ldr	r3, [r7, #28]
 800e828:	4413      	add	r3, r2
 800e82a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	61bb      	str	r3, [r7, #24]
 800e832:	6879      	ldr	r1, [r7, #4]
 800e834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e836:	4613      	mov	r3, r2
 800e838:	00db      	lsls	r3, r3, #3
 800e83a:	4413      	add	r3, r2
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	440b      	add	r3, r1
 800e840:	3340      	adds	r3, #64	; 0x40
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	2b01      	cmp	r3, #1
 800e846:	d115      	bne.n	800e874 <HAL_PCD_IRQHandler+0x7ea>
 800e848:	69bb      	ldr	r3, [r7, #24]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	da12      	bge.n	800e874 <HAL_PCD_IRQHandler+0x7ea>
 800e84e:	6879      	ldr	r1, [r7, #4]
 800e850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e852:	4613      	mov	r3, r2
 800e854:	00db      	lsls	r3, r3, #3
 800e856:	4413      	add	r3, r2
 800e858:	009b      	lsls	r3, r3, #2
 800e85a:	440b      	add	r3, r1
 800e85c:	333f      	adds	r3, #63	; 0x3f
 800e85e:	2201      	movs	r2, #1
 800e860:	701a      	strb	r2, [r3, #0]
 800e862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e864:	b2db      	uxtb	r3, r3
 800e866:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	4619      	mov	r1, r3
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 fae8 	bl	800ee44 <HAL_PCD_EP_Abort>
 800e874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e876:	3301      	adds	r3, #1
 800e878:	627b      	str	r3, [r7, #36]	; 0x24
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e880:	429a      	cmp	r2, r3
 800e882:	d3ce      	bcc.n	800e822 <HAL_PCD_IRQHandler+0x798>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	695a      	ldr	r2, [r3, #20]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800e892:	615a      	str	r2, [r3, #20]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4618      	mov	r0, r3
 800e89a:	f004 f93b 	bl	8012b14 <USB_ReadInterrupts>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e8a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e8a8:	d155      	bne.n	800e956 <HAL_PCD_IRQHandler+0x8cc>
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	627b      	str	r3, [r7, #36]	; 0x24
 800e8ae:	e045      	b.n	800e93c <HAL_PCD_IRQHandler+0x8b2>
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	015a      	lsls	r2, r3, #5
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	61bb      	str	r3, [r7, #24]
 800e8c0:	6879      	ldr	r1, [r7, #4]
 800e8c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8c4:	4613      	mov	r3, r2
 800e8c6:	00db      	lsls	r3, r3, #3
 800e8c8:	4413      	add	r3, r2
 800e8ca:	009b      	lsls	r3, r3, #2
 800e8cc:	440b      	add	r3, r1
 800e8ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d12e      	bne.n	800e936 <HAL_PCD_IRQHandler+0x8ac>
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	da2b      	bge.n	800e936 <HAL_PCD_IRQHandler+0x8ac>
 800e8de:	69bb      	ldr	r3, [r7, #24]
 800e8e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800e8ea:	f003 0301 	and.w	r3, r3, #1
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d121      	bne.n	800e936 <HAL_PCD_IRQHandler+0x8ac>
 800e8f2:	6879      	ldr	r1, [r7, #4]
 800e8f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8f6:	4613      	mov	r3, r2
 800e8f8:	00db      	lsls	r3, r3, #3
 800e8fa:	4413      	add	r3, r2
 800e8fc:	009b      	lsls	r3, r3, #2
 800e8fe:	440b      	add	r3, r1
 800e900:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800e904:	2201      	movs	r2, #1
 800e906:	701a      	strb	r2, [r3, #0]
 800e908:	6a3b      	ldr	r3, [r7, #32]
 800e90a:	699b      	ldr	r3, [r3, #24]
 800e90c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e910:	6a3b      	ldr	r3, [r7, #32]
 800e912:	619a      	str	r2, [r3, #24]
 800e914:	6a3b      	ldr	r3, [r7, #32]
 800e916:	695b      	ldr	r3, [r3, #20]
 800e918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d10a      	bne.n	800e936 <HAL_PCD_IRQHandler+0x8ac>
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	69fa      	ldr	r2, [r7, #28]
 800e92a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e92e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e932:	6053      	str	r3, [r2, #4]
 800e934:	e007      	b.n	800e946 <HAL_PCD_IRQHandler+0x8bc>
 800e936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e938:	3301      	adds	r3, #1
 800e93a:	627b      	str	r3, [r7, #36]	; 0x24
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e942:	429a      	cmp	r2, r3
 800e944:	d3b4      	bcc.n	800e8b0 <HAL_PCD_IRQHandler+0x826>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	695a      	ldr	r2, [r3, #20]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800e954:	615a      	str	r2, [r3, #20]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4618      	mov	r0, r3
 800e95c:	f004 f8da 	bl	8012b14 <USB_ReadInterrupts>
 800e960:	4603      	mov	r3, r0
 800e962:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e96a:	d10a      	bne.n	800e982 <HAL_PCD_IRQHandler+0x8f8>
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f00d fcfd 	bl	801c36c <HAL_PCD_ConnectCallback>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	695a      	ldr	r2, [r3, #20]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800e980:	615a      	str	r2, [r3, #20]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4618      	mov	r0, r3
 800e988:	f004 f8c4 	bl	8012b14 <USB_ReadInterrupts>
 800e98c:	4603      	mov	r3, r0
 800e98e:	f003 0304 	and.w	r3, r3, #4
 800e992:	2b04      	cmp	r3, #4
 800e994:	d115      	bne.n	800e9c2 <HAL_PCD_IRQHandler+0x938>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	61bb      	str	r3, [r7, #24]
 800e99e:	69bb      	ldr	r3, [r7, #24]
 800e9a0:	f003 0304 	and.w	r3, r3, #4
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d002      	beq.n	800e9ae <HAL_PCD_IRQHandler+0x924>
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f00d fced 	bl	801c388 <HAL_PCD_DisconnectCallback>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	6859      	ldr	r1, [r3, #4]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	69ba      	ldr	r2, [r7, #24]
 800e9ba:	430a      	orrs	r2, r1
 800e9bc:	605a      	str	r2, [r3, #4]
 800e9be:	e000      	b.n	800e9c2 <HAL_PCD_IRQHandler+0x938>
 800e9c0:	bf00      	nop
 800e9c2:	3734      	adds	r7, #52	; 0x34
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd90      	pop	{r4, r7, pc}

0800e9c8 <HAL_PCD_SetAddress>:
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	70fb      	strb	r3, [r7, #3]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d101      	bne.n	800e9e2 <HAL_PCD_SetAddress+0x1a>
 800e9de:	2302      	movs	r3, #2
 800e9e0:	e013      	b.n	800ea0a <HAL_PCD_SetAddress+0x42>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	78fa      	ldrb	r2, [r7, #3]
 800e9ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	78fa      	ldrb	r2, [r7, #3]
 800e9f8:	4611      	mov	r1, r2
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f004 f822 	bl	8012a44 <USB_SetDevAddress>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2200      	movs	r2, #0
 800ea04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800ea08:	2300      	movs	r3, #0
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3708      	adds	r7, #8
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}

0800ea12 <HAL_PCD_EP_Open>:
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b084      	sub	sp, #16
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
 800ea1a:	4608      	mov	r0, r1
 800ea1c:	4611      	mov	r1, r2
 800ea1e:	461a      	mov	r2, r3
 800ea20:	4603      	mov	r3, r0
 800ea22:	70fb      	strb	r3, [r7, #3]
 800ea24:	460b      	mov	r3, r1
 800ea26:	803b      	strh	r3, [r7, #0]
 800ea28:	4613      	mov	r3, r2
 800ea2a:	70bb      	strb	r3, [r7, #2]
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	72fb      	strb	r3, [r7, #11]
 800ea30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	da0f      	bge.n	800ea58 <HAL_PCD_EP_Open+0x46>
 800ea38:	78fb      	ldrb	r3, [r7, #3]
 800ea3a:	f003 020f 	and.w	r2, r3, #15
 800ea3e:	4613      	mov	r3, r2
 800ea40:	00db      	lsls	r3, r3, #3
 800ea42:	4413      	add	r3, r2
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	3338      	adds	r3, #56	; 0x38
 800ea48:	687a      	ldr	r2, [r7, #4]
 800ea4a:	4413      	add	r3, r2
 800ea4c:	3304      	adds	r3, #4
 800ea4e:	60fb      	str	r3, [r7, #12]
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2201      	movs	r2, #1
 800ea54:	705a      	strb	r2, [r3, #1]
 800ea56:	e00f      	b.n	800ea78 <HAL_PCD_EP_Open+0x66>
 800ea58:	78fb      	ldrb	r3, [r7, #3]
 800ea5a:	f003 020f 	and.w	r2, r3, #15
 800ea5e:	4613      	mov	r3, r2
 800ea60:	00db      	lsls	r3, r3, #3
 800ea62:	4413      	add	r3, r2
 800ea64:	009b      	lsls	r3, r3, #2
 800ea66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	3304      	adds	r3, #4
 800ea70:	60fb      	str	r3, [r7, #12]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2200      	movs	r2, #0
 800ea76:	705a      	strb	r2, [r3, #1]
 800ea78:	78fb      	ldrb	r3, [r7, #3]
 800ea7a:	f003 030f 	and.w	r3, r3, #15
 800ea7e:	b2da      	uxtb	r2, r3
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	701a      	strb	r2, [r3, #0]
 800ea84:	883a      	ldrh	r2, [r7, #0]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	60da      	str	r2, [r3, #12]
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	78ba      	ldrb	r2, [r7, #2]
 800ea8e:	711a      	strb	r2, [r3, #4]
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	785b      	ldrb	r3, [r3, #1]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d004      	beq.n	800eaa2 <HAL_PCD_EP_Open+0x90>
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	b29a      	uxth	r2, r3
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	811a      	strh	r2, [r3, #8]
 800eaa2:	78bb      	ldrb	r3, [r7, #2]
 800eaa4:	2b02      	cmp	r3, #2
 800eaa6:	d102      	bne.n	800eaae <HAL_PCD_EP_Open+0x9c>
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	715a      	strb	r2, [r3, #5]
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d101      	bne.n	800eabc <HAL_PCD_EP_Open+0xaa>
 800eab8:	2302      	movs	r3, #2
 800eaba:	e00e      	b.n	800eada <HAL_PCD_EP_Open+0xc8>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2201      	movs	r2, #1
 800eac0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	68f9      	ldr	r1, [r7, #12]
 800eaca:	4618      	mov	r0, r3
 800eacc:	f003 f8a2 	bl	8011c14 <USB_ActivateEndpoint>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2200      	movs	r2, #0
 800ead4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800ead8:	7afb      	ldrb	r3, [r7, #11]
 800eada:	4618      	mov	r0, r3
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}

0800eae2 <HAL_PCD_EP_Close>:
 800eae2:	b580      	push	{r7, lr}
 800eae4:	b084      	sub	sp, #16
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
 800eaea:	460b      	mov	r3, r1
 800eaec:	70fb      	strb	r3, [r7, #3]
 800eaee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	da0f      	bge.n	800eb16 <HAL_PCD_EP_Close+0x34>
 800eaf6:	78fb      	ldrb	r3, [r7, #3]
 800eaf8:	f003 020f 	and.w	r2, r3, #15
 800eafc:	4613      	mov	r3, r2
 800eafe:	00db      	lsls	r3, r3, #3
 800eb00:	4413      	add	r3, r2
 800eb02:	009b      	lsls	r3, r3, #2
 800eb04:	3338      	adds	r3, #56	; 0x38
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	4413      	add	r3, r2
 800eb0a:	3304      	adds	r3, #4
 800eb0c:	60fb      	str	r3, [r7, #12]
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2201      	movs	r2, #1
 800eb12:	705a      	strb	r2, [r3, #1]
 800eb14:	e00f      	b.n	800eb36 <HAL_PCD_EP_Close+0x54>
 800eb16:	78fb      	ldrb	r3, [r7, #3]
 800eb18:	f003 020f 	and.w	r2, r3, #15
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	00db      	lsls	r3, r3, #3
 800eb20:	4413      	add	r3, r2
 800eb22:	009b      	lsls	r3, r3, #2
 800eb24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	3304      	adds	r3, #4
 800eb2e:	60fb      	str	r3, [r7, #12]
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	2200      	movs	r2, #0
 800eb34:	705a      	strb	r2, [r3, #1]
 800eb36:	78fb      	ldrb	r3, [r7, #3]
 800eb38:	f003 030f 	and.w	r3, r3, #15
 800eb3c:	b2da      	uxtb	r2, r3
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	701a      	strb	r2, [r3, #0]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d101      	bne.n	800eb50 <HAL_PCD_EP_Close+0x6e>
 800eb4c:	2302      	movs	r3, #2
 800eb4e:	e00e      	b.n	800eb6e <HAL_PCD_EP_Close+0x8c>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2201      	movs	r2, #1
 800eb54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	68f9      	ldr	r1, [r7, #12]
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f003 f8e0 	bl	8011d24 <USB_DeactivateEndpoint>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3710      	adds	r7, #16
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <HAL_PCD_EP_Receive>:
 800eb76:	b580      	push	{r7, lr}
 800eb78:	b086      	sub	sp, #24
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	60f8      	str	r0, [r7, #12]
 800eb7e:	607a      	str	r2, [r7, #4]
 800eb80:	603b      	str	r3, [r7, #0]
 800eb82:	460b      	mov	r3, r1
 800eb84:	72fb      	strb	r3, [r7, #11]
 800eb86:	7afb      	ldrb	r3, [r7, #11]
 800eb88:	f003 020f 	and.w	r2, r3, #15
 800eb8c:	4613      	mov	r3, r2
 800eb8e:	00db      	lsls	r3, r3, #3
 800eb90:	4413      	add	r3, r2
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eb98:	68fa      	ldr	r2, [r7, #12]
 800eb9a:	4413      	add	r3, r2
 800eb9c:	3304      	adds	r3, #4
 800eb9e:	617b      	str	r3, [r7, #20]
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	611a      	str	r2, [r3, #16]
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	683a      	ldr	r2, [r7, #0]
 800ebaa:	619a      	str	r2, [r3, #24]
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	621a      	str	r2, [r3, #32]
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	705a      	strb	r2, [r3, #1]
 800ebb8:	7afb      	ldrb	r3, [r7, #11]
 800ebba:	f003 030f 	and.w	r3, r3, #15
 800ebbe:	b2da      	uxtb	r2, r3
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	701a      	strb	r2, [r3, #0]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	691b      	ldr	r3, [r3, #16]
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d102      	bne.n	800ebd2 <HAL_PCD_EP_Receive+0x5c>
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	615a      	str	r2, [r3, #20]
 800ebd2:	7afb      	ldrb	r3, [r7, #11]
 800ebd4:	f003 030f 	and.w	r3, r3, #15
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d109      	bne.n	800ebf0 <HAL_PCD_EP_Receive+0x7a>
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	6818      	ldr	r0, [r3, #0]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	691b      	ldr	r3, [r3, #16]
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	6979      	ldr	r1, [r7, #20]
 800ebea:	f003 fbbf 	bl	801236c <USB_EP0StartXfer>
 800ebee:	e008      	b.n	800ec02 <HAL_PCD_EP_Receive+0x8c>
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	6818      	ldr	r0, [r3, #0]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	691b      	ldr	r3, [r3, #16]
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	6979      	ldr	r1, [r7, #20]
 800ebfe:	f003 f96d 	bl	8011edc <USB_EPStartXfer>
 800ec02:	2300      	movs	r3, #0
 800ec04:	4618      	mov	r0, r3
 800ec06:	3718      	adds	r7, #24
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <HAL_PCD_EP_GetRxCount>:
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	460b      	mov	r3, r1
 800ec16:	70fb      	strb	r3, [r7, #3]
 800ec18:	78fb      	ldrb	r3, [r7, #3]
 800ec1a:	f003 020f 	and.w	r2, r3, #15
 800ec1e:	6879      	ldr	r1, [r7, #4]
 800ec20:	4613      	mov	r3, r2
 800ec22:	00db      	lsls	r3, r3, #3
 800ec24:	4413      	add	r3, r2
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	440b      	add	r3, r1
 800ec2a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4618      	mov	r0, r3
 800ec32:	370c      	adds	r7, #12
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <HAL_PCD_EP_Transmit>:
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b086      	sub	sp, #24
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	607a      	str	r2, [r7, #4]
 800ec46:	603b      	str	r3, [r7, #0]
 800ec48:	460b      	mov	r3, r1
 800ec4a:	72fb      	strb	r3, [r7, #11]
 800ec4c:	7afb      	ldrb	r3, [r7, #11]
 800ec4e:	f003 020f 	and.w	r2, r3, #15
 800ec52:	4613      	mov	r3, r2
 800ec54:	00db      	lsls	r3, r3, #3
 800ec56:	4413      	add	r3, r2
 800ec58:	009b      	lsls	r3, r3, #2
 800ec5a:	3338      	adds	r3, #56	; 0x38
 800ec5c:	68fa      	ldr	r2, [r7, #12]
 800ec5e:	4413      	add	r3, r2
 800ec60:	3304      	adds	r3, #4
 800ec62:	617b      	str	r3, [r7, #20]
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	611a      	str	r2, [r3, #16]
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	683a      	ldr	r2, [r7, #0]
 800ec6e:	619a      	str	r2, [r3, #24]
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	2200      	movs	r2, #0
 800ec74:	621a      	str	r2, [r3, #32]
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	2201      	movs	r2, #1
 800ec7a:	705a      	strb	r2, [r3, #1]
 800ec7c:	7afb      	ldrb	r3, [r7, #11]
 800ec7e:	f003 030f 	and.w	r3, r3, #15
 800ec82:	b2da      	uxtb	r2, r3
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	701a      	strb	r2, [r3, #0]
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	691b      	ldr	r3, [r3, #16]
 800ec8c:	2b01      	cmp	r3, #1
 800ec8e:	d102      	bne.n	800ec96 <HAL_PCD_EP_Transmit+0x5a>
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	615a      	str	r2, [r3, #20]
 800ec96:	7afb      	ldrb	r3, [r7, #11]
 800ec98:	f003 030f 	and.w	r3, r3, #15
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d109      	bne.n	800ecb4 <HAL_PCD_EP_Transmit+0x78>
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	6818      	ldr	r0, [r3, #0]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	691b      	ldr	r3, [r3, #16]
 800eca8:	b2db      	uxtb	r3, r3
 800ecaa:	461a      	mov	r2, r3
 800ecac:	6979      	ldr	r1, [r7, #20]
 800ecae:	f003 fb5d 	bl	801236c <USB_EP0StartXfer>
 800ecb2:	e008      	b.n	800ecc6 <HAL_PCD_EP_Transmit+0x8a>
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	6818      	ldr	r0, [r3, #0]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	691b      	ldr	r3, [r3, #16]
 800ecbc:	b2db      	uxtb	r3, r3
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	6979      	ldr	r1, [r7, #20]
 800ecc2:	f003 f90b 	bl	8011edc <USB_EPStartXfer>
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3718      	adds	r7, #24
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <HAL_PCD_EP_SetStall>:
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	460b      	mov	r3, r1
 800ecda:	70fb      	strb	r3, [r7, #3]
 800ecdc:	78fb      	ldrb	r3, [r7, #3]
 800ecde:	f003 020f 	and.w	r2, r3, #15
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	685b      	ldr	r3, [r3, #4]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d901      	bls.n	800ecee <HAL_PCD_EP_SetStall+0x1e>
 800ecea:	2301      	movs	r3, #1
 800ecec:	e050      	b.n	800ed90 <HAL_PCD_EP_SetStall+0xc0>
 800ecee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	da0f      	bge.n	800ed16 <HAL_PCD_EP_SetStall+0x46>
 800ecf6:	78fb      	ldrb	r3, [r7, #3]
 800ecf8:	f003 020f 	and.w	r2, r3, #15
 800ecfc:	4613      	mov	r3, r2
 800ecfe:	00db      	lsls	r3, r3, #3
 800ed00:	4413      	add	r3, r2
 800ed02:	009b      	lsls	r3, r3, #2
 800ed04:	3338      	adds	r3, #56	; 0x38
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	4413      	add	r3, r2
 800ed0a:	3304      	adds	r3, #4
 800ed0c:	60fb      	str	r3, [r7, #12]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2201      	movs	r2, #1
 800ed12:	705a      	strb	r2, [r3, #1]
 800ed14:	e00d      	b.n	800ed32 <HAL_PCD_EP_SetStall+0x62>
 800ed16:	78fa      	ldrb	r2, [r7, #3]
 800ed18:	4613      	mov	r3, r2
 800ed1a:	00db      	lsls	r3, r3, #3
 800ed1c:	4413      	add	r3, r2
 800ed1e:	009b      	lsls	r3, r3, #2
 800ed20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	4413      	add	r3, r2
 800ed28:	3304      	adds	r3, #4
 800ed2a:	60fb      	str	r3, [r7, #12]
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	705a      	strb	r2, [r3, #1]
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2201      	movs	r2, #1
 800ed36:	709a      	strb	r2, [r3, #2]
 800ed38:	78fb      	ldrb	r3, [r7, #3]
 800ed3a:	f003 030f 	and.w	r3, r3, #15
 800ed3e:	b2da      	uxtb	r2, r3
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	701a      	strb	r2, [r3, #0]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d101      	bne.n	800ed52 <HAL_PCD_EP_SetStall+0x82>
 800ed4e:	2302      	movs	r3, #2
 800ed50:	e01e      	b.n	800ed90 <HAL_PCD_EP_SetStall+0xc0>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2201      	movs	r2, #1
 800ed56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	68f9      	ldr	r1, [r7, #12]
 800ed60:	4618      	mov	r0, r3
 800ed62:	f003 fd9b 	bl	801289c <USB_EPSetStall>
 800ed66:	78fb      	ldrb	r3, [r7, #3]
 800ed68:	f003 030f 	and.w	r3, r3, #15
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d10a      	bne.n	800ed86 <HAL_PCD_EP_SetStall+0xb6>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6818      	ldr	r0, [r3, #0]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	691b      	ldr	r3, [r3, #16]
 800ed78:	b2d9      	uxtb	r1, r3
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ed80:	461a      	mov	r2, r3
 800ed82:	f003 ff8b 	bl	8012c9c <USB_EP0_OutStart>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800ed8e:	2300      	movs	r3, #0
 800ed90:	4618      	mov	r0, r3
 800ed92:	3710      	adds	r7, #16
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <HAL_PCD_EP_ClrStall>:
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	460b      	mov	r3, r1
 800eda2:	70fb      	strb	r3, [r7, #3]
 800eda4:	78fb      	ldrb	r3, [r7, #3]
 800eda6:	f003 020f 	and.w	r2, r3, #15
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d901      	bls.n	800edb6 <HAL_PCD_EP_ClrStall+0x1e>
 800edb2:	2301      	movs	r3, #1
 800edb4:	e042      	b.n	800ee3c <HAL_PCD_EP_ClrStall+0xa4>
 800edb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	da0f      	bge.n	800edde <HAL_PCD_EP_ClrStall+0x46>
 800edbe:	78fb      	ldrb	r3, [r7, #3]
 800edc0:	f003 020f 	and.w	r2, r3, #15
 800edc4:	4613      	mov	r3, r2
 800edc6:	00db      	lsls	r3, r3, #3
 800edc8:	4413      	add	r3, r2
 800edca:	009b      	lsls	r3, r3, #2
 800edcc:	3338      	adds	r3, #56	; 0x38
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	4413      	add	r3, r2
 800edd2:	3304      	adds	r3, #4
 800edd4:	60fb      	str	r3, [r7, #12]
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2201      	movs	r2, #1
 800edda:	705a      	strb	r2, [r3, #1]
 800eddc:	e00f      	b.n	800edfe <HAL_PCD_EP_ClrStall+0x66>
 800edde:	78fb      	ldrb	r3, [r7, #3]
 800ede0:	f003 020f 	and.w	r2, r3, #15
 800ede4:	4613      	mov	r3, r2
 800ede6:	00db      	lsls	r3, r3, #3
 800ede8:	4413      	add	r3, r2
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	4413      	add	r3, r2
 800edf4:	3304      	adds	r3, #4
 800edf6:	60fb      	str	r3, [r7, #12]
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2200      	movs	r2, #0
 800edfc:	705a      	strb	r2, [r3, #1]
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2200      	movs	r2, #0
 800ee02:	709a      	strb	r2, [r3, #2]
 800ee04:	78fb      	ldrb	r3, [r7, #3]
 800ee06:	f003 030f 	and.w	r3, r3, #15
 800ee0a:	b2da      	uxtb	r2, r3
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	701a      	strb	r2, [r3, #0]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d101      	bne.n	800ee1e <HAL_PCD_EP_ClrStall+0x86>
 800ee1a:	2302      	movs	r3, #2
 800ee1c:	e00e      	b.n	800ee3c <HAL_PCD_EP_ClrStall+0xa4>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2201      	movs	r2, #1
 800ee22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	68f9      	ldr	r1, [r7, #12]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f003 fda3 	bl	8012978 <USB_EPClearStall>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2200      	movs	r2, #0
 800ee36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3710      	adds	r7, #16
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <HAL_PCD_EP_Abort>:
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	70fb      	strb	r3, [r7, #3]
 800ee50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	da0c      	bge.n	800ee72 <HAL_PCD_EP_Abort+0x2e>
 800ee58:	78fb      	ldrb	r3, [r7, #3]
 800ee5a:	f003 020f 	and.w	r2, r3, #15
 800ee5e:	4613      	mov	r3, r2
 800ee60:	00db      	lsls	r3, r3, #3
 800ee62:	4413      	add	r3, r2
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	3338      	adds	r3, #56	; 0x38
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	3304      	adds	r3, #4
 800ee6e:	60fb      	str	r3, [r7, #12]
 800ee70:	e00c      	b.n	800ee8c <HAL_PCD_EP_Abort+0x48>
 800ee72:	78fb      	ldrb	r3, [r7, #3]
 800ee74:	f003 020f 	and.w	r2, r3, #15
 800ee78:	4613      	mov	r3, r2
 800ee7a:	00db      	lsls	r3, r3, #3
 800ee7c:	4413      	add	r3, r2
 800ee7e:	009b      	lsls	r3, r3, #2
 800ee80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	4413      	add	r3, r2
 800ee88:	3304      	adds	r3, #4
 800ee8a:	60fb      	str	r3, [r7, #12]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	68f9      	ldr	r1, [r7, #12]
 800ee92:	4618      	mov	r0, r3
 800ee94:	f003 fbc2 	bl	801261c <USB_EPStopXfer>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	72fb      	strb	r3, [r7, #11]
 800ee9c:	7afb      	ldrb	r3, [r7, #11]
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3710      	adds	r7, #16
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}

0800eea6 <PCD_WriteEmptyTxFifo>:
 800eea6:	b580      	push	{r7, lr}
 800eea8:	b08a      	sub	sp, #40	; 0x28
 800eeaa:	af02      	add	r7, sp, #8
 800eeac:	6078      	str	r0, [r7, #4]
 800eeae:	6039      	str	r1, [r7, #0]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	617b      	str	r3, [r7, #20]
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	613b      	str	r3, [r7, #16]
 800eeba:	683a      	ldr	r2, [r7, #0]
 800eebc:	4613      	mov	r3, r2
 800eebe:	00db      	lsls	r3, r3, #3
 800eec0:	4413      	add	r3, r2
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	3338      	adds	r3, #56	; 0x38
 800eec6:	687a      	ldr	r2, [r7, #4]
 800eec8:	4413      	add	r3, r2
 800eeca:	3304      	adds	r3, #4
 800eecc:	60fb      	str	r3, [r7, #12]
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	6a1a      	ldr	r2, [r3, #32]
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	699b      	ldr	r3, [r3, #24]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d901      	bls.n	800eede <PCD_WriteEmptyTxFifo+0x38>
 800eeda:	2301      	movs	r3, #1
 800eedc:	e06c      	b.n	800efb8 <PCD_WriteEmptyTxFifo+0x112>
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	699a      	ldr	r2, [r3, #24]
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	6a1b      	ldr	r3, [r3, #32]
 800eee6:	1ad3      	subs	r3, r2, r3
 800eee8:	61fb      	str	r3, [r7, #28]
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	69fa      	ldr	r2, [r7, #28]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d902      	bls.n	800eefa <PCD_WriteEmptyTxFifo+0x54>
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	68db      	ldr	r3, [r3, #12]
 800eef8:	61fb      	str	r3, [r7, #28]
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	3303      	adds	r3, #3
 800eefe:	089b      	lsrs	r3, r3, #2
 800ef00:	61bb      	str	r3, [r7, #24]
 800ef02:	e02b      	b.n	800ef5c <PCD_WriteEmptyTxFifo+0xb6>
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	699a      	ldr	r2, [r3, #24]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	6a1b      	ldr	r3, [r3, #32]
 800ef0c:	1ad3      	subs	r3, r2, r3
 800ef0e:	61fb      	str	r3, [r7, #28]
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	69fa      	ldr	r2, [r7, #28]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d902      	bls.n	800ef20 <PCD_WriteEmptyTxFifo+0x7a>
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	61fb      	str	r3, [r7, #28]
 800ef20:	69fb      	ldr	r3, [r7, #28]
 800ef22:	3303      	adds	r3, #3
 800ef24:	089b      	lsrs	r3, r3, #2
 800ef26:	61bb      	str	r3, [r7, #24]
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	6919      	ldr	r1, [r3, #16]
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	b2da      	uxtb	r2, r3
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	b298      	uxth	r0, r3
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	691b      	ldr	r3, [r3, #16]
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	9300      	str	r3, [sp, #0]
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	6978      	ldr	r0, [r7, #20]
 800ef40:	f003 fc16 	bl	8012770 <USB_WritePacket>
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	691a      	ldr	r2, [r3, #16]
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	441a      	add	r2, r3
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	611a      	str	r2, [r3, #16]
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	6a1a      	ldr	r2, [r3, #32]
 800ef54:	69fb      	ldr	r3, [r7, #28]
 800ef56:	441a      	add	r2, r3
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	621a      	str	r2, [r3, #32]
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	015a      	lsls	r2, r3, #5
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	4413      	add	r3, r2
 800ef64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef68:	699b      	ldr	r3, [r3, #24]
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	69ba      	ldr	r2, [r7, #24]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d809      	bhi.n	800ef86 <PCD_WriteEmptyTxFifo+0xe0>
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	6a1a      	ldr	r2, [r3, #32]
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	699b      	ldr	r3, [r3, #24]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d203      	bcs.n	800ef86 <PCD_WriteEmptyTxFifo+0xe0>
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	699b      	ldr	r3, [r3, #24]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d1be      	bne.n	800ef04 <PCD_WriteEmptyTxFifo+0x5e>
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	699a      	ldr	r2, [r3, #24]
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	6a1b      	ldr	r3, [r3, #32]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d811      	bhi.n	800efb6 <PCD_WriteEmptyTxFifo+0x110>
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	f003 030f 	and.w	r3, r3, #15
 800ef98:	2201      	movs	r2, #1
 800ef9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef9e:	60bb      	str	r3, [r7, #8]
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	43db      	mvns	r3, r3
 800efac:	6939      	ldr	r1, [r7, #16]
 800efae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800efb2:	4013      	ands	r3, r2
 800efb4:	634b      	str	r3, [r1, #52]	; 0x34
 800efb6:	2300      	movs	r3, #0
 800efb8:	4618      	mov	r0, r3
 800efba:	3720      	adds	r7, #32
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <PCD_EP_OutXfrComplete_int>:
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b088      	sub	sp, #32
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	61fb      	str	r3, [r7, #28]
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	61bb      	str	r3, [r7, #24]
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	333c      	adds	r3, #60	; 0x3c
 800efd8:	3304      	adds	r3, #4
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	617b      	str	r3, [r7, #20]
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	015a      	lsls	r2, r3, #5
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	4413      	add	r3, r2
 800efe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efea:	689b      	ldr	r3, [r3, #8]
 800efec:	613b      	str	r3, [r7, #16]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	691b      	ldr	r3, [r3, #16]
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	d17b      	bne.n	800f0ee <PCD_EP_OutXfrComplete_int+0x12e>
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	f003 0308 	and.w	r3, r3, #8
 800effc:	2b00      	cmp	r3, #0
 800effe:	d015      	beq.n	800f02c <PCD_EP_OutXfrComplete_int+0x6c>
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	4a61      	ldr	r2, [pc, #388]	; (800f188 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800f004:	4293      	cmp	r3, r2
 800f006:	f240 80b9 	bls.w	800f17c <PCD_EP_OutXfrComplete_int+0x1bc>
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f010:	2b00      	cmp	r3, #0
 800f012:	f000 80b3 	beq.w	800f17c <PCD_EP_OutXfrComplete_int+0x1bc>
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	015a      	lsls	r2, r3, #5
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	4413      	add	r3, r2
 800f01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f022:	461a      	mov	r2, r3
 800f024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f028:	6093      	str	r3, [r2, #8]
 800f02a:	e0a7      	b.n	800f17c <PCD_EP_OutXfrComplete_int+0x1bc>
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	f003 0320 	and.w	r3, r3, #32
 800f032:	2b00      	cmp	r3, #0
 800f034:	d009      	beq.n	800f04a <PCD_EP_OutXfrComplete_int+0x8a>
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	015a      	lsls	r2, r3, #5
 800f03a:	69bb      	ldr	r3, [r7, #24]
 800f03c:	4413      	add	r3, r2
 800f03e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f042:	461a      	mov	r2, r3
 800f044:	2320      	movs	r3, #32
 800f046:	6093      	str	r3, [r2, #8]
 800f048:	e098      	b.n	800f17c <PCD_EP_OutXfrComplete_int+0x1bc>
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f050:	2b00      	cmp	r3, #0
 800f052:	f040 8093 	bne.w	800f17c <PCD_EP_OutXfrComplete_int+0x1bc>
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	4a4b      	ldr	r2, [pc, #300]	; (800f188 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d90f      	bls.n	800f07e <PCD_EP_OutXfrComplete_int+0xbe>
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00a      	beq.n	800f07e <PCD_EP_OutXfrComplete_int+0xbe>
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	015a      	lsls	r2, r3, #5
 800f06c:	69bb      	ldr	r3, [r7, #24]
 800f06e:	4413      	add	r3, r2
 800f070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f074:	461a      	mov	r2, r3
 800f076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f07a:	6093      	str	r3, [r2, #8]
 800f07c:	e07e      	b.n	800f17c <PCD_EP_OutXfrComplete_int+0x1bc>
 800f07e:	683a      	ldr	r2, [r7, #0]
 800f080:	4613      	mov	r3, r2
 800f082:	00db      	lsls	r3, r3, #3
 800f084:	4413      	add	r3, r2
 800f086:	009b      	lsls	r3, r3, #2
 800f088:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	4413      	add	r3, r2
 800f090:	3304      	adds	r3, #4
 800f092:	60fb      	str	r3, [r7, #12]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	69da      	ldr	r2, [r3, #28]
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	0159      	lsls	r1, r3, #5
 800f09c:	69bb      	ldr	r3, [r7, #24]
 800f09e:	440b      	add	r3, r1
 800f0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0a4:	691b      	ldr	r3, [r3, #16]
 800f0a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f0aa:	1ad2      	subs	r2, r2, r3
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	621a      	str	r2, [r3, #32]
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d114      	bne.n	800f0e0 <PCD_EP_OutXfrComplete_int+0x120>
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	699b      	ldr	r3, [r3, #24]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d109      	bne.n	800f0d2 <PCD_EP_OutXfrComplete_int+0x112>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6818      	ldr	r0, [r3, #0]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	2101      	movs	r1, #1
 800f0cc:	f003 fde6 	bl	8012c9c <USB_EP0_OutStart>
 800f0d0:	e006      	b.n	800f0e0 <PCD_EP_OutXfrComplete_int+0x120>
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	691a      	ldr	r2, [r3, #16]
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	6a1b      	ldr	r3, [r3, #32]
 800f0da:	441a      	add	r2, r3
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	611a      	str	r2, [r3, #16]
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	4619      	mov	r1, r3
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f00d f87c 	bl	801c1e4 <HAL_PCD_DataOutStageCallback>
 800f0ec:	e046      	b.n	800f17c <PCD_EP_OutXfrComplete_int+0x1bc>
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	4a26      	ldr	r2, [pc, #152]	; (800f18c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d124      	bne.n	800f140 <PCD_EP_OutXfrComplete_int+0x180>
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d00a      	beq.n	800f116 <PCD_EP_OutXfrComplete_int+0x156>
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	015a      	lsls	r2, r3, #5
 800f104:	69bb      	ldr	r3, [r7, #24]
 800f106:	4413      	add	r3, r2
 800f108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f10c:	461a      	mov	r2, r3
 800f10e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f112:	6093      	str	r3, [r2, #8]
 800f114:	e032      	b.n	800f17c <PCD_EP_OutXfrComplete_int+0x1bc>
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	f003 0320 	and.w	r3, r3, #32
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d008      	beq.n	800f132 <PCD_EP_OutXfrComplete_int+0x172>
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	015a      	lsls	r2, r3, #5
 800f124:	69bb      	ldr	r3, [r7, #24]
 800f126:	4413      	add	r3, r2
 800f128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f12c:	461a      	mov	r2, r3
 800f12e:	2320      	movs	r3, #32
 800f130:	6093      	str	r3, [r2, #8]
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	b2db      	uxtb	r3, r3
 800f136:	4619      	mov	r1, r3
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f00d f853 	bl	801c1e4 <HAL_PCD_DataOutStageCallback>
 800f13e:	e01d      	b.n	800f17c <PCD_EP_OutXfrComplete_int+0x1bc>
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d114      	bne.n	800f170 <PCD_EP_OutXfrComplete_int+0x1b0>
 800f146:	6879      	ldr	r1, [r7, #4]
 800f148:	683a      	ldr	r2, [r7, #0]
 800f14a:	4613      	mov	r3, r2
 800f14c:	00db      	lsls	r3, r3, #3
 800f14e:	4413      	add	r3, r2
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	440b      	add	r3, r1
 800f154:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d108      	bne.n	800f170 <PCD_EP_OutXfrComplete_int+0x1b0>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6818      	ldr	r0, [r3, #0]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f168:	461a      	mov	r2, r3
 800f16a:	2100      	movs	r1, #0
 800f16c:	f003 fd96 	bl	8012c9c <USB_EP0_OutStart>
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	b2db      	uxtb	r3, r3
 800f174:	4619      	mov	r1, r3
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f00d f834 	bl	801c1e4 <HAL_PCD_DataOutStageCallback>
 800f17c:	2300      	movs	r3, #0
 800f17e:	4618      	mov	r0, r3
 800f180:	3720      	adds	r7, #32
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
 800f186:	bf00      	nop
 800f188:	4f54300a 	.word	0x4f54300a
 800f18c:	4f54310a 	.word	0x4f54310a

0800f190 <PCD_EP_OutSetupPacket_int>:
 800f190:	b580      	push	{r7, lr}
 800f192:	b086      	sub	sp, #24
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	617b      	str	r3, [r7, #20]
 800f1a0:	697b      	ldr	r3, [r7, #20]
 800f1a2:	613b      	str	r3, [r7, #16]
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	333c      	adds	r3, #60	; 0x3c
 800f1a8:	3304      	adds	r3, #4
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	60fb      	str	r3, [r7, #12]
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	015a      	lsls	r2, r3, #5
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1ba:	689b      	ldr	r3, [r3, #8]
 800f1bc:	60bb      	str	r3, [r7, #8]
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	4a15      	ldr	r2, [pc, #84]	; (800f218 <PCD_EP_OutSetupPacket_int+0x88>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d90e      	bls.n	800f1e4 <PCD_EP_OutSetupPacket_int+0x54>
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d009      	beq.n	800f1e4 <PCD_EP_OutSetupPacket_int+0x54>
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	015a      	lsls	r2, r3, #5
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1dc:	461a      	mov	r2, r3
 800f1de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1e2:	6093      	str	r3, [r2, #8]
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f00c ffeb 	bl	801c1c0 <HAL_PCD_SetupStageCallback>
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	4a0a      	ldr	r2, [pc, #40]	; (800f218 <PCD_EP_OutSetupPacket_int+0x88>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d90c      	bls.n	800f20c <PCD_EP_OutSetupPacket_int+0x7c>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	691b      	ldr	r3, [r3, #16]
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	d108      	bne.n	800f20c <PCD_EP_OutSetupPacket_int+0x7c>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6818      	ldr	r0, [r3, #0]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f204:	461a      	mov	r2, r3
 800f206:	2101      	movs	r1, #1
 800f208:	f003 fd48 	bl	8012c9c <USB_EP0_OutStart>
 800f20c:	2300      	movs	r3, #0
 800f20e:	4618      	mov	r0, r3
 800f210:	3718      	adds	r7, #24
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	4f54300a 	.word	0x4f54300a

0800f21c <HAL_PCDEx_SetTxFiFo>:
 800f21c:	b480      	push	{r7}
 800f21e:	b085      	sub	sp, #20
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	460b      	mov	r3, r1
 800f226:	70fb      	strb	r3, [r7, #3]
 800f228:	4613      	mov	r3, r2
 800f22a:	803b      	strh	r3, [r7, #0]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f232:	60bb      	str	r3, [r7, #8]
 800f234:	78fb      	ldrb	r3, [r7, #3]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d107      	bne.n	800f24a <HAL_PCDEx_SetTxFiFo+0x2e>
 800f23a:	883b      	ldrh	r3, [r7, #0]
 800f23c:	0419      	lsls	r1, r3, #16
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	68ba      	ldr	r2, [r7, #8]
 800f244:	430a      	orrs	r2, r1
 800f246:	629a      	str	r2, [r3, #40]	; 0x28
 800f248:	e028      	b.n	800f29c <HAL_PCDEx_SetTxFiFo+0x80>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f250:	0c1b      	lsrs	r3, r3, #16
 800f252:	68ba      	ldr	r2, [r7, #8]
 800f254:	4413      	add	r3, r2
 800f256:	60bb      	str	r3, [r7, #8]
 800f258:	2300      	movs	r3, #0
 800f25a:	73fb      	strb	r3, [r7, #15]
 800f25c:	e00d      	b.n	800f27a <HAL_PCDEx_SetTxFiFo+0x5e>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	7bfb      	ldrb	r3, [r7, #15]
 800f264:	3340      	adds	r3, #64	; 0x40
 800f266:	009b      	lsls	r3, r3, #2
 800f268:	4413      	add	r3, r2
 800f26a:	685b      	ldr	r3, [r3, #4]
 800f26c:	0c1b      	lsrs	r3, r3, #16
 800f26e:	68ba      	ldr	r2, [r7, #8]
 800f270:	4413      	add	r3, r2
 800f272:	60bb      	str	r3, [r7, #8]
 800f274:	7bfb      	ldrb	r3, [r7, #15]
 800f276:	3301      	adds	r3, #1
 800f278:	73fb      	strb	r3, [r7, #15]
 800f27a:	7bfa      	ldrb	r2, [r7, #15]
 800f27c:	78fb      	ldrb	r3, [r7, #3]
 800f27e:	3b01      	subs	r3, #1
 800f280:	429a      	cmp	r2, r3
 800f282:	d3ec      	bcc.n	800f25e <HAL_PCDEx_SetTxFiFo+0x42>
 800f284:	883b      	ldrh	r3, [r7, #0]
 800f286:	0418      	lsls	r0, r3, #16
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6819      	ldr	r1, [r3, #0]
 800f28c:	78fb      	ldrb	r3, [r7, #3]
 800f28e:	3b01      	subs	r3, #1
 800f290:	68ba      	ldr	r2, [r7, #8]
 800f292:	4302      	orrs	r2, r0
 800f294:	3340      	adds	r3, #64	; 0x40
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	440b      	add	r3, r1
 800f29a:	605a      	str	r2, [r3, #4]
 800f29c:	2300      	movs	r3, #0
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3714      	adds	r7, #20
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a8:	4770      	bx	lr

0800f2aa <HAL_PCDEx_SetRxFiFo>:
 800f2aa:	b480      	push	{r7}
 800f2ac:	b083      	sub	sp, #12
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	6078      	str	r0, [r7, #4]
 800f2b2:	460b      	mov	r3, r1
 800f2b4:	807b      	strh	r3, [r7, #2]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	887a      	ldrh	r2, [r7, #2]
 800f2bc:	625a      	str	r2, [r3, #36]	; 0x24
 800f2be:	2300      	movs	r3, #0
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	370c      	adds	r7, #12
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr

0800f2cc <HAL_PCDEx_LPM_Callback>:
 800f2cc:	b480      	push	{r7}
 800f2ce:	b083      	sub	sp, #12
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	70fb      	strb	r3, [r7, #3]
 800f2d8:	bf00      	nop
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <HAL_RCC_OscConfig>:
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b086      	sub	sp, #24
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d101      	bne.n	800f2f6 <HAL_RCC_OscConfig+0x12>
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	e267      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f003 0301 	and.w	r3, r3, #1
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d075      	beq.n	800f3ee <HAL_RCC_OscConfig+0x10a>
 800f302:	4b88      	ldr	r3, [pc, #544]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f304:	689b      	ldr	r3, [r3, #8]
 800f306:	f003 030c 	and.w	r3, r3, #12
 800f30a:	2b04      	cmp	r3, #4
 800f30c:	d00c      	beq.n	800f328 <HAL_RCC_OscConfig+0x44>
 800f30e:	4b85      	ldr	r3, [pc, #532]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f310:	689b      	ldr	r3, [r3, #8]
 800f312:	f003 030c 	and.w	r3, r3, #12
 800f316:	2b08      	cmp	r3, #8
 800f318:	d112      	bne.n	800f340 <HAL_RCC_OscConfig+0x5c>
 800f31a:	4b82      	ldr	r3, [pc, #520]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f326:	d10b      	bne.n	800f340 <HAL_RCC_OscConfig+0x5c>
 800f328:	4b7e      	ldr	r3, [pc, #504]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f330:	2b00      	cmp	r3, #0
 800f332:	d05b      	beq.n	800f3ec <HAL_RCC_OscConfig+0x108>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d157      	bne.n	800f3ec <HAL_RCC_OscConfig+0x108>
 800f33c:	2301      	movs	r3, #1
 800f33e:	e242      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f348:	d106      	bne.n	800f358 <HAL_RCC_OscConfig+0x74>
 800f34a:	4b76      	ldr	r3, [pc, #472]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	4a75      	ldr	r2, [pc, #468]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f354:	6013      	str	r3, [r2, #0]
 800f356:	e01d      	b.n	800f394 <HAL_RCC_OscConfig+0xb0>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f360:	d10c      	bne.n	800f37c <HAL_RCC_OscConfig+0x98>
 800f362:	4b70      	ldr	r3, [pc, #448]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	4a6f      	ldr	r2, [pc, #444]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f36c:	6013      	str	r3, [r2, #0]
 800f36e:	4b6d      	ldr	r3, [pc, #436]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	4a6c      	ldr	r2, [pc, #432]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f378:	6013      	str	r3, [r2, #0]
 800f37a:	e00b      	b.n	800f394 <HAL_RCC_OscConfig+0xb0>
 800f37c:	4b69      	ldr	r3, [pc, #420]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4a68      	ldr	r2, [pc, #416]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f386:	6013      	str	r3, [r2, #0]
 800f388:	4b66      	ldr	r3, [pc, #408]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	4a65      	ldr	r2, [pc, #404]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f38e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f392:	6013      	str	r3, [r2, #0]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d013      	beq.n	800f3c4 <HAL_RCC_OscConfig+0xe0>
 800f39c:	f7fc fc5c 	bl	800bc58 <HAL_GetTick>
 800f3a0:	6138      	str	r0, [r7, #16]
 800f3a2:	e008      	b.n	800f3b6 <HAL_RCC_OscConfig+0xd2>
 800f3a4:	f7fc fc58 	bl	800bc58 <HAL_GetTick>
 800f3a8:	4602      	mov	r2, r0
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	1ad3      	subs	r3, r2, r3
 800f3ae:	2b64      	cmp	r3, #100	; 0x64
 800f3b0:	d901      	bls.n	800f3b6 <HAL_RCC_OscConfig+0xd2>
 800f3b2:	2303      	movs	r3, #3
 800f3b4:	e207      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f3b6:	4b5b      	ldr	r3, [pc, #364]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d0f0      	beq.n	800f3a4 <HAL_RCC_OscConfig+0xc0>
 800f3c2:	e014      	b.n	800f3ee <HAL_RCC_OscConfig+0x10a>
 800f3c4:	f7fc fc48 	bl	800bc58 <HAL_GetTick>
 800f3c8:	6138      	str	r0, [r7, #16]
 800f3ca:	e008      	b.n	800f3de <HAL_RCC_OscConfig+0xfa>
 800f3cc:	f7fc fc44 	bl	800bc58 <HAL_GetTick>
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	1ad3      	subs	r3, r2, r3
 800f3d6:	2b64      	cmp	r3, #100	; 0x64
 800f3d8:	d901      	bls.n	800f3de <HAL_RCC_OscConfig+0xfa>
 800f3da:	2303      	movs	r3, #3
 800f3dc:	e1f3      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f3de:	4b51      	ldr	r3, [pc, #324]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d1f0      	bne.n	800f3cc <HAL_RCC_OscConfig+0xe8>
 800f3ea:	e000      	b.n	800f3ee <HAL_RCC_OscConfig+0x10a>
 800f3ec:	bf00      	nop
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f003 0302 	and.w	r3, r3, #2
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d063      	beq.n	800f4c2 <HAL_RCC_OscConfig+0x1de>
 800f3fa:	4b4a      	ldr	r3, [pc, #296]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f3fc:	689b      	ldr	r3, [r3, #8]
 800f3fe:	f003 030c 	and.w	r3, r3, #12
 800f402:	2b00      	cmp	r3, #0
 800f404:	d00b      	beq.n	800f41e <HAL_RCC_OscConfig+0x13a>
 800f406:	4b47      	ldr	r3, [pc, #284]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f408:	689b      	ldr	r3, [r3, #8]
 800f40a:	f003 030c 	and.w	r3, r3, #12
 800f40e:	2b08      	cmp	r3, #8
 800f410:	d11c      	bne.n	800f44c <HAL_RCC_OscConfig+0x168>
 800f412:	4b44      	ldr	r3, [pc, #272]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d116      	bne.n	800f44c <HAL_RCC_OscConfig+0x168>
 800f41e:	4b41      	ldr	r3, [pc, #260]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f003 0302 	and.w	r3, r3, #2
 800f426:	2b00      	cmp	r3, #0
 800f428:	d005      	beq.n	800f436 <HAL_RCC_OscConfig+0x152>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d001      	beq.n	800f436 <HAL_RCC_OscConfig+0x152>
 800f432:	2301      	movs	r3, #1
 800f434:	e1c7      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f436:	4b3b      	ldr	r3, [pc, #236]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	691b      	ldr	r3, [r3, #16]
 800f442:	00db      	lsls	r3, r3, #3
 800f444:	4937      	ldr	r1, [pc, #220]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f446:	4313      	orrs	r3, r2
 800f448:	600b      	str	r3, [r1, #0]
 800f44a:	e03a      	b.n	800f4c2 <HAL_RCC_OscConfig+0x1de>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	68db      	ldr	r3, [r3, #12]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d020      	beq.n	800f496 <HAL_RCC_OscConfig+0x1b2>
 800f454:	4b34      	ldr	r3, [pc, #208]	; (800f528 <HAL_RCC_OscConfig+0x244>)
 800f456:	2201      	movs	r2, #1
 800f458:	601a      	str	r2, [r3, #0]
 800f45a:	f7fc fbfd 	bl	800bc58 <HAL_GetTick>
 800f45e:	6138      	str	r0, [r7, #16]
 800f460:	e008      	b.n	800f474 <HAL_RCC_OscConfig+0x190>
 800f462:	f7fc fbf9 	bl	800bc58 <HAL_GetTick>
 800f466:	4602      	mov	r2, r0
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	1ad3      	subs	r3, r2, r3
 800f46c:	2b02      	cmp	r3, #2
 800f46e:	d901      	bls.n	800f474 <HAL_RCC_OscConfig+0x190>
 800f470:	2303      	movs	r3, #3
 800f472:	e1a8      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f474:	4b2b      	ldr	r3, [pc, #172]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	f003 0302 	and.w	r3, r3, #2
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d0f0      	beq.n	800f462 <HAL_RCC_OscConfig+0x17e>
 800f480:	4b28      	ldr	r3, [pc, #160]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	691b      	ldr	r3, [r3, #16]
 800f48c:	00db      	lsls	r3, r3, #3
 800f48e:	4925      	ldr	r1, [pc, #148]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f490:	4313      	orrs	r3, r2
 800f492:	600b      	str	r3, [r1, #0]
 800f494:	e015      	b.n	800f4c2 <HAL_RCC_OscConfig+0x1de>
 800f496:	4b24      	ldr	r3, [pc, #144]	; (800f528 <HAL_RCC_OscConfig+0x244>)
 800f498:	2200      	movs	r2, #0
 800f49a:	601a      	str	r2, [r3, #0]
 800f49c:	f7fc fbdc 	bl	800bc58 <HAL_GetTick>
 800f4a0:	6138      	str	r0, [r7, #16]
 800f4a2:	e008      	b.n	800f4b6 <HAL_RCC_OscConfig+0x1d2>
 800f4a4:	f7fc fbd8 	bl	800bc58 <HAL_GetTick>
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	1ad3      	subs	r3, r2, r3
 800f4ae:	2b02      	cmp	r3, #2
 800f4b0:	d901      	bls.n	800f4b6 <HAL_RCC_OscConfig+0x1d2>
 800f4b2:	2303      	movs	r3, #3
 800f4b4:	e187      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f4b6:	4b1b      	ldr	r3, [pc, #108]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	f003 0302 	and.w	r3, r3, #2
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d1f0      	bne.n	800f4a4 <HAL_RCC_OscConfig+0x1c0>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f003 0308 	and.w	r3, r3, #8
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d036      	beq.n	800f53c <HAL_RCC_OscConfig+0x258>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	695b      	ldr	r3, [r3, #20]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d016      	beq.n	800f504 <HAL_RCC_OscConfig+0x220>
 800f4d6:	4b15      	ldr	r3, [pc, #84]	; (800f52c <HAL_RCC_OscConfig+0x248>)
 800f4d8:	2201      	movs	r2, #1
 800f4da:	601a      	str	r2, [r3, #0]
 800f4dc:	f7fc fbbc 	bl	800bc58 <HAL_GetTick>
 800f4e0:	6138      	str	r0, [r7, #16]
 800f4e2:	e008      	b.n	800f4f6 <HAL_RCC_OscConfig+0x212>
 800f4e4:	f7fc fbb8 	bl	800bc58 <HAL_GetTick>
 800f4e8:	4602      	mov	r2, r0
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	1ad3      	subs	r3, r2, r3
 800f4ee:	2b02      	cmp	r3, #2
 800f4f0:	d901      	bls.n	800f4f6 <HAL_RCC_OscConfig+0x212>
 800f4f2:	2303      	movs	r3, #3
 800f4f4:	e167      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f4f6:	4b0b      	ldr	r3, [pc, #44]	; (800f524 <HAL_RCC_OscConfig+0x240>)
 800f4f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4fa:	f003 0302 	and.w	r3, r3, #2
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d0f0      	beq.n	800f4e4 <HAL_RCC_OscConfig+0x200>
 800f502:	e01b      	b.n	800f53c <HAL_RCC_OscConfig+0x258>
 800f504:	4b09      	ldr	r3, [pc, #36]	; (800f52c <HAL_RCC_OscConfig+0x248>)
 800f506:	2200      	movs	r2, #0
 800f508:	601a      	str	r2, [r3, #0]
 800f50a:	f7fc fba5 	bl	800bc58 <HAL_GetTick>
 800f50e:	6138      	str	r0, [r7, #16]
 800f510:	e00e      	b.n	800f530 <HAL_RCC_OscConfig+0x24c>
 800f512:	f7fc fba1 	bl	800bc58 <HAL_GetTick>
 800f516:	4602      	mov	r2, r0
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	1ad3      	subs	r3, r2, r3
 800f51c:	2b02      	cmp	r3, #2
 800f51e:	d907      	bls.n	800f530 <HAL_RCC_OscConfig+0x24c>
 800f520:	2303      	movs	r3, #3
 800f522:	e150      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f524:	40023800 	.word	0x40023800
 800f528:	42470000 	.word	0x42470000
 800f52c:	42470e80 	.word	0x42470e80
 800f530:	4b88      	ldr	r3, [pc, #544]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f534:	f003 0302 	and.w	r3, r3, #2
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d1ea      	bne.n	800f512 <HAL_RCC_OscConfig+0x22e>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	f003 0304 	and.w	r3, r3, #4
 800f544:	2b00      	cmp	r3, #0
 800f546:	f000 8097 	beq.w	800f678 <HAL_RCC_OscConfig+0x394>
 800f54a:	2300      	movs	r3, #0
 800f54c:	75fb      	strb	r3, [r7, #23]
 800f54e:	4b81      	ldr	r3, [pc, #516]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f556:	2b00      	cmp	r3, #0
 800f558:	d10f      	bne.n	800f57a <HAL_RCC_OscConfig+0x296>
 800f55a:	2300      	movs	r3, #0
 800f55c:	60bb      	str	r3, [r7, #8]
 800f55e:	4b7d      	ldr	r3, [pc, #500]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f562:	4a7c      	ldr	r2, [pc, #496]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f568:	6413      	str	r3, [r2, #64]	; 0x40
 800f56a:	4b7a      	ldr	r3, [pc, #488]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f56e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f572:	60bb      	str	r3, [r7, #8]
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	2301      	movs	r3, #1
 800f578:	75fb      	strb	r3, [r7, #23]
 800f57a:	4b77      	ldr	r3, [pc, #476]	; (800f758 <HAL_RCC_OscConfig+0x474>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f582:	2b00      	cmp	r3, #0
 800f584:	d118      	bne.n	800f5b8 <HAL_RCC_OscConfig+0x2d4>
 800f586:	4b74      	ldr	r3, [pc, #464]	; (800f758 <HAL_RCC_OscConfig+0x474>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	4a73      	ldr	r2, [pc, #460]	; (800f758 <HAL_RCC_OscConfig+0x474>)
 800f58c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f590:	6013      	str	r3, [r2, #0]
 800f592:	f7fc fb61 	bl	800bc58 <HAL_GetTick>
 800f596:	6138      	str	r0, [r7, #16]
 800f598:	e008      	b.n	800f5ac <HAL_RCC_OscConfig+0x2c8>
 800f59a:	f7fc fb5d 	bl	800bc58 <HAL_GetTick>
 800f59e:	4602      	mov	r2, r0
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	1ad3      	subs	r3, r2, r3
 800f5a4:	2b02      	cmp	r3, #2
 800f5a6:	d901      	bls.n	800f5ac <HAL_RCC_OscConfig+0x2c8>
 800f5a8:	2303      	movs	r3, #3
 800f5aa:	e10c      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f5ac:	4b6a      	ldr	r3, [pc, #424]	; (800f758 <HAL_RCC_OscConfig+0x474>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d0f0      	beq.n	800f59a <HAL_RCC_OscConfig+0x2b6>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	689b      	ldr	r3, [r3, #8]
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	d106      	bne.n	800f5ce <HAL_RCC_OscConfig+0x2ea>
 800f5c0:	4b64      	ldr	r3, [pc, #400]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f5c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5c4:	4a63      	ldr	r2, [pc, #396]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f5c6:	f043 0301 	orr.w	r3, r3, #1
 800f5ca:	6713      	str	r3, [r2, #112]	; 0x70
 800f5cc:	e01c      	b.n	800f608 <HAL_RCC_OscConfig+0x324>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	689b      	ldr	r3, [r3, #8]
 800f5d2:	2b05      	cmp	r3, #5
 800f5d4:	d10c      	bne.n	800f5f0 <HAL_RCC_OscConfig+0x30c>
 800f5d6:	4b5f      	ldr	r3, [pc, #380]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5da:	4a5e      	ldr	r2, [pc, #376]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f5dc:	f043 0304 	orr.w	r3, r3, #4
 800f5e0:	6713      	str	r3, [r2, #112]	; 0x70
 800f5e2:	4b5c      	ldr	r3, [pc, #368]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5e6:	4a5b      	ldr	r2, [pc, #364]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f5e8:	f043 0301 	orr.w	r3, r3, #1
 800f5ec:	6713      	str	r3, [r2, #112]	; 0x70
 800f5ee:	e00b      	b.n	800f608 <HAL_RCC_OscConfig+0x324>
 800f5f0:	4b58      	ldr	r3, [pc, #352]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f5f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5f4:	4a57      	ldr	r2, [pc, #348]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f5f6:	f023 0301 	bic.w	r3, r3, #1
 800f5fa:	6713      	str	r3, [r2, #112]	; 0x70
 800f5fc:	4b55      	ldr	r3, [pc, #340]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f5fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f600:	4a54      	ldr	r2, [pc, #336]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f602:	f023 0304 	bic.w	r3, r3, #4
 800f606:	6713      	str	r3, [r2, #112]	; 0x70
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	689b      	ldr	r3, [r3, #8]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d015      	beq.n	800f63c <HAL_RCC_OscConfig+0x358>
 800f610:	f7fc fb22 	bl	800bc58 <HAL_GetTick>
 800f614:	6138      	str	r0, [r7, #16]
 800f616:	e00a      	b.n	800f62e <HAL_RCC_OscConfig+0x34a>
 800f618:	f7fc fb1e 	bl	800bc58 <HAL_GetTick>
 800f61c:	4602      	mov	r2, r0
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	1ad3      	subs	r3, r2, r3
 800f622:	f241 3288 	movw	r2, #5000	; 0x1388
 800f626:	4293      	cmp	r3, r2
 800f628:	d901      	bls.n	800f62e <HAL_RCC_OscConfig+0x34a>
 800f62a:	2303      	movs	r3, #3
 800f62c:	e0cb      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f62e:	4b49      	ldr	r3, [pc, #292]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f632:	f003 0302 	and.w	r3, r3, #2
 800f636:	2b00      	cmp	r3, #0
 800f638:	d0ee      	beq.n	800f618 <HAL_RCC_OscConfig+0x334>
 800f63a:	e014      	b.n	800f666 <HAL_RCC_OscConfig+0x382>
 800f63c:	f7fc fb0c 	bl	800bc58 <HAL_GetTick>
 800f640:	6138      	str	r0, [r7, #16]
 800f642:	e00a      	b.n	800f65a <HAL_RCC_OscConfig+0x376>
 800f644:	f7fc fb08 	bl	800bc58 <HAL_GetTick>
 800f648:	4602      	mov	r2, r0
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	1ad3      	subs	r3, r2, r3
 800f64e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f652:	4293      	cmp	r3, r2
 800f654:	d901      	bls.n	800f65a <HAL_RCC_OscConfig+0x376>
 800f656:	2303      	movs	r3, #3
 800f658:	e0b5      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f65a:	4b3e      	ldr	r3, [pc, #248]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f65e:	f003 0302 	and.w	r3, r3, #2
 800f662:	2b00      	cmp	r3, #0
 800f664:	d1ee      	bne.n	800f644 <HAL_RCC_OscConfig+0x360>
 800f666:	7dfb      	ldrb	r3, [r7, #23]
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d105      	bne.n	800f678 <HAL_RCC_OscConfig+0x394>
 800f66c:	4b39      	ldr	r3, [pc, #228]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f670:	4a38      	ldr	r2, [pc, #224]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f676:	6413      	str	r3, [r2, #64]	; 0x40
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	699b      	ldr	r3, [r3, #24]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	f000 80a1 	beq.w	800f7c4 <HAL_RCC_OscConfig+0x4e0>
 800f682:	4b34      	ldr	r3, [pc, #208]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f684:	689b      	ldr	r3, [r3, #8]
 800f686:	f003 030c 	and.w	r3, r3, #12
 800f68a:	2b08      	cmp	r3, #8
 800f68c:	d05c      	beq.n	800f748 <HAL_RCC_OscConfig+0x464>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	699b      	ldr	r3, [r3, #24]
 800f692:	2b02      	cmp	r3, #2
 800f694:	d141      	bne.n	800f71a <HAL_RCC_OscConfig+0x436>
 800f696:	4b31      	ldr	r3, [pc, #196]	; (800f75c <HAL_RCC_OscConfig+0x478>)
 800f698:	2200      	movs	r2, #0
 800f69a:	601a      	str	r2, [r3, #0]
 800f69c:	f7fc fadc 	bl	800bc58 <HAL_GetTick>
 800f6a0:	6138      	str	r0, [r7, #16]
 800f6a2:	e008      	b.n	800f6b6 <HAL_RCC_OscConfig+0x3d2>
 800f6a4:	f7fc fad8 	bl	800bc58 <HAL_GetTick>
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	1ad3      	subs	r3, r2, r3
 800f6ae:	2b02      	cmp	r3, #2
 800f6b0:	d901      	bls.n	800f6b6 <HAL_RCC_OscConfig+0x3d2>
 800f6b2:	2303      	movs	r3, #3
 800f6b4:	e087      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f6b6:	4b27      	ldr	r3, [pc, #156]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d1f0      	bne.n	800f6a4 <HAL_RCC_OscConfig+0x3c0>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	69da      	ldr	r2, [r3, #28]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6a1b      	ldr	r3, [r3, #32]
 800f6ca:	431a      	orrs	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d0:	019b      	lsls	r3, r3, #6
 800f6d2:	431a      	orrs	r2, r3
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6d8:	085b      	lsrs	r3, r3, #1
 800f6da:	3b01      	subs	r3, #1
 800f6dc:	041b      	lsls	r3, r3, #16
 800f6de:	431a      	orrs	r2, r3
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6e4:	061b      	lsls	r3, r3, #24
 800f6e6:	491b      	ldr	r1, [pc, #108]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f6e8:	4313      	orrs	r3, r2
 800f6ea:	604b      	str	r3, [r1, #4]
 800f6ec:	4b1b      	ldr	r3, [pc, #108]	; (800f75c <HAL_RCC_OscConfig+0x478>)
 800f6ee:	2201      	movs	r2, #1
 800f6f0:	601a      	str	r2, [r3, #0]
 800f6f2:	f7fc fab1 	bl	800bc58 <HAL_GetTick>
 800f6f6:	6138      	str	r0, [r7, #16]
 800f6f8:	e008      	b.n	800f70c <HAL_RCC_OscConfig+0x428>
 800f6fa:	f7fc faad 	bl	800bc58 <HAL_GetTick>
 800f6fe:	4602      	mov	r2, r0
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	1ad3      	subs	r3, r2, r3
 800f704:	2b02      	cmp	r3, #2
 800f706:	d901      	bls.n	800f70c <HAL_RCC_OscConfig+0x428>
 800f708:	2303      	movs	r3, #3
 800f70a:	e05c      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f70c:	4b11      	ldr	r3, [pc, #68]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f714:	2b00      	cmp	r3, #0
 800f716:	d0f0      	beq.n	800f6fa <HAL_RCC_OscConfig+0x416>
 800f718:	e054      	b.n	800f7c4 <HAL_RCC_OscConfig+0x4e0>
 800f71a:	4b10      	ldr	r3, [pc, #64]	; (800f75c <HAL_RCC_OscConfig+0x478>)
 800f71c:	2200      	movs	r2, #0
 800f71e:	601a      	str	r2, [r3, #0]
 800f720:	f7fc fa9a 	bl	800bc58 <HAL_GetTick>
 800f724:	6138      	str	r0, [r7, #16]
 800f726:	e008      	b.n	800f73a <HAL_RCC_OscConfig+0x456>
 800f728:	f7fc fa96 	bl	800bc58 <HAL_GetTick>
 800f72c:	4602      	mov	r2, r0
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	1ad3      	subs	r3, r2, r3
 800f732:	2b02      	cmp	r3, #2
 800f734:	d901      	bls.n	800f73a <HAL_RCC_OscConfig+0x456>
 800f736:	2303      	movs	r3, #3
 800f738:	e045      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f73a:	4b06      	ldr	r3, [pc, #24]	; (800f754 <HAL_RCC_OscConfig+0x470>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f742:	2b00      	cmp	r3, #0
 800f744:	d1f0      	bne.n	800f728 <HAL_RCC_OscConfig+0x444>
 800f746:	e03d      	b.n	800f7c4 <HAL_RCC_OscConfig+0x4e0>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	699b      	ldr	r3, [r3, #24]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d107      	bne.n	800f760 <HAL_RCC_OscConfig+0x47c>
 800f750:	2301      	movs	r3, #1
 800f752:	e038      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f754:	40023800 	.word	0x40023800
 800f758:	40007000 	.word	0x40007000
 800f75c:	42470060 	.word	0x42470060
 800f760:	4b1b      	ldr	r3, [pc, #108]	; (800f7d0 <HAL_RCC_OscConfig+0x4ec>)
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	60fb      	str	r3, [r7, #12]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	699b      	ldr	r3, [r3, #24]
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d028      	beq.n	800f7c0 <HAL_RCC_OscConfig+0x4dc>
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	69db      	ldr	r3, [r3, #28]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d121      	bne.n	800f7c0 <HAL_RCC_OscConfig+0x4dc>
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6a1b      	ldr	r3, [r3, #32]
 800f786:	429a      	cmp	r2, r3
 800f788:	d11a      	bne.n	800f7c0 <HAL_RCC_OscConfig+0x4dc>
 800f78a:	68fa      	ldr	r2, [r7, #12]
 800f78c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f790:	4013      	ands	r3, r2
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f796:	0192      	lsls	r2, r2, #6
 800f798:	4293      	cmp	r3, r2
 800f79a:	d111      	bne.n	800f7c0 <HAL_RCC_OscConfig+0x4dc>
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7a6:	085b      	lsrs	r3, r3, #1
 800f7a8:	3b01      	subs	r3, #1
 800f7aa:	041b      	lsls	r3, r3, #16
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d107      	bne.n	800f7c0 <HAL_RCC_OscConfig+0x4dc>
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ba:	061b      	lsls	r3, r3, #24
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d001      	beq.n	800f7c4 <HAL_RCC_OscConfig+0x4e0>
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	e000      	b.n	800f7c6 <HAL_RCC_OscConfig+0x4e2>
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3718      	adds	r7, #24
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	40023800 	.word	0x40023800

0800f7d4 <HAL_RCC_ClockConfig>:
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b084      	sub	sp, #16
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	6039      	str	r1, [r7, #0]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d101      	bne.n	800f7e8 <HAL_RCC_ClockConfig+0x14>
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	e0cc      	b.n	800f982 <HAL_RCC_ClockConfig+0x1ae>
 800f7e8:	4b68      	ldr	r3, [pc, #416]	; (800f98c <HAL_RCC_ClockConfig+0x1b8>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f003 0307 	and.w	r3, r3, #7
 800f7f0:	683a      	ldr	r2, [r7, #0]
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d90c      	bls.n	800f810 <HAL_RCC_ClockConfig+0x3c>
 800f7f6:	4b65      	ldr	r3, [pc, #404]	; (800f98c <HAL_RCC_ClockConfig+0x1b8>)
 800f7f8:	683a      	ldr	r2, [r7, #0]
 800f7fa:	b2d2      	uxtb	r2, r2
 800f7fc:	701a      	strb	r2, [r3, #0]
 800f7fe:	4b63      	ldr	r3, [pc, #396]	; (800f98c <HAL_RCC_ClockConfig+0x1b8>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f003 0307 	and.w	r3, r3, #7
 800f806:	683a      	ldr	r2, [r7, #0]
 800f808:	429a      	cmp	r2, r3
 800f80a:	d001      	beq.n	800f810 <HAL_RCC_ClockConfig+0x3c>
 800f80c:	2301      	movs	r3, #1
 800f80e:	e0b8      	b.n	800f982 <HAL_RCC_ClockConfig+0x1ae>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f003 0302 	and.w	r3, r3, #2
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d020      	beq.n	800f85e <HAL_RCC_ClockConfig+0x8a>
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	f003 0304 	and.w	r3, r3, #4
 800f824:	2b00      	cmp	r3, #0
 800f826:	d005      	beq.n	800f834 <HAL_RCC_ClockConfig+0x60>
 800f828:	4b59      	ldr	r3, [pc, #356]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f82a:	689b      	ldr	r3, [r3, #8]
 800f82c:	4a58      	ldr	r2, [pc, #352]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f82e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f832:	6093      	str	r3, [r2, #8]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f003 0308 	and.w	r3, r3, #8
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d005      	beq.n	800f84c <HAL_RCC_ClockConfig+0x78>
 800f840:	4b53      	ldr	r3, [pc, #332]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f842:	689b      	ldr	r3, [r3, #8]
 800f844:	4a52      	ldr	r2, [pc, #328]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f84a:	6093      	str	r3, [r2, #8]
 800f84c:	4b50      	ldr	r3, [pc, #320]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f84e:	689b      	ldr	r3, [r3, #8]
 800f850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	689b      	ldr	r3, [r3, #8]
 800f858:	494d      	ldr	r1, [pc, #308]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f85a:	4313      	orrs	r3, r2
 800f85c:	608b      	str	r3, [r1, #8]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f003 0301 	and.w	r3, r3, #1
 800f866:	2b00      	cmp	r3, #0
 800f868:	d044      	beq.n	800f8f4 <HAL_RCC_ClockConfig+0x120>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d107      	bne.n	800f882 <HAL_RCC_ClockConfig+0xae>
 800f872:	4b47      	ldr	r3, [pc, #284]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d119      	bne.n	800f8b2 <HAL_RCC_ClockConfig+0xde>
 800f87e:	2301      	movs	r3, #1
 800f880:	e07f      	b.n	800f982 <HAL_RCC_ClockConfig+0x1ae>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	2b02      	cmp	r3, #2
 800f888:	d003      	beq.n	800f892 <HAL_RCC_ClockConfig+0xbe>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	2b03      	cmp	r3, #3
 800f890:	d107      	bne.n	800f8a2 <HAL_RCC_ClockConfig+0xce>
 800f892:	4b3f      	ldr	r3, [pc, #252]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d109      	bne.n	800f8b2 <HAL_RCC_ClockConfig+0xde>
 800f89e:	2301      	movs	r3, #1
 800f8a0:	e06f      	b.n	800f982 <HAL_RCC_ClockConfig+0x1ae>
 800f8a2:	4b3b      	ldr	r3, [pc, #236]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f003 0302 	and.w	r3, r3, #2
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d101      	bne.n	800f8b2 <HAL_RCC_ClockConfig+0xde>
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	e067      	b.n	800f982 <HAL_RCC_ClockConfig+0x1ae>
 800f8b2:	4b37      	ldr	r3, [pc, #220]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f8b4:	689b      	ldr	r3, [r3, #8]
 800f8b6:	f023 0203 	bic.w	r2, r3, #3
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	4934      	ldr	r1, [pc, #208]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	608b      	str	r3, [r1, #8]
 800f8c4:	f7fc f9c8 	bl	800bc58 <HAL_GetTick>
 800f8c8:	60f8      	str	r0, [r7, #12]
 800f8ca:	e00a      	b.n	800f8e2 <HAL_RCC_ClockConfig+0x10e>
 800f8cc:	f7fc f9c4 	bl	800bc58 <HAL_GetTick>
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	1ad3      	subs	r3, r2, r3
 800f8d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d901      	bls.n	800f8e2 <HAL_RCC_ClockConfig+0x10e>
 800f8de:	2303      	movs	r3, #3
 800f8e0:	e04f      	b.n	800f982 <HAL_RCC_ClockConfig+0x1ae>
 800f8e2:	4b2b      	ldr	r3, [pc, #172]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f8e4:	689b      	ldr	r3, [r3, #8]
 800f8e6:	f003 020c 	and.w	r2, r3, #12
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	009b      	lsls	r3, r3, #2
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d1eb      	bne.n	800f8cc <HAL_RCC_ClockConfig+0xf8>
 800f8f4:	4b25      	ldr	r3, [pc, #148]	; (800f98c <HAL_RCC_ClockConfig+0x1b8>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	f003 0307 	and.w	r3, r3, #7
 800f8fc:	683a      	ldr	r2, [r7, #0]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d20c      	bcs.n	800f91c <HAL_RCC_ClockConfig+0x148>
 800f902:	4b22      	ldr	r3, [pc, #136]	; (800f98c <HAL_RCC_ClockConfig+0x1b8>)
 800f904:	683a      	ldr	r2, [r7, #0]
 800f906:	b2d2      	uxtb	r2, r2
 800f908:	701a      	strb	r2, [r3, #0]
 800f90a:	4b20      	ldr	r3, [pc, #128]	; (800f98c <HAL_RCC_ClockConfig+0x1b8>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	f003 0307 	and.w	r3, r3, #7
 800f912:	683a      	ldr	r2, [r7, #0]
 800f914:	429a      	cmp	r2, r3
 800f916:	d001      	beq.n	800f91c <HAL_RCC_ClockConfig+0x148>
 800f918:	2301      	movs	r3, #1
 800f91a:	e032      	b.n	800f982 <HAL_RCC_ClockConfig+0x1ae>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f003 0304 	and.w	r3, r3, #4
 800f924:	2b00      	cmp	r3, #0
 800f926:	d008      	beq.n	800f93a <HAL_RCC_ClockConfig+0x166>
 800f928:	4b19      	ldr	r3, [pc, #100]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f92a:	689b      	ldr	r3, [r3, #8]
 800f92c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	4916      	ldr	r1, [pc, #88]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f936:	4313      	orrs	r3, r2
 800f938:	608b      	str	r3, [r1, #8]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f003 0308 	and.w	r3, r3, #8
 800f942:	2b00      	cmp	r3, #0
 800f944:	d009      	beq.n	800f95a <HAL_RCC_ClockConfig+0x186>
 800f946:	4b12      	ldr	r3, [pc, #72]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f948:	689b      	ldr	r3, [r3, #8]
 800f94a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	691b      	ldr	r3, [r3, #16]
 800f952:	00db      	lsls	r3, r3, #3
 800f954:	490e      	ldr	r1, [pc, #56]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f956:	4313      	orrs	r3, r2
 800f958:	608b      	str	r3, [r1, #8]
 800f95a:	f000 f821 	bl	800f9a0 <HAL_RCC_GetSysClockFreq>
 800f95e:	4602      	mov	r2, r0
 800f960:	4b0b      	ldr	r3, [pc, #44]	; (800f990 <HAL_RCC_ClockConfig+0x1bc>)
 800f962:	689b      	ldr	r3, [r3, #8]
 800f964:	091b      	lsrs	r3, r3, #4
 800f966:	f003 030f 	and.w	r3, r3, #15
 800f96a:	490a      	ldr	r1, [pc, #40]	; (800f994 <HAL_RCC_ClockConfig+0x1c0>)
 800f96c:	5ccb      	ldrb	r3, [r1, r3]
 800f96e:	fa22 f303 	lsr.w	r3, r2, r3
 800f972:	4a09      	ldr	r2, [pc, #36]	; (800f998 <HAL_RCC_ClockConfig+0x1c4>)
 800f974:	6013      	str	r3, [r2, #0]
 800f976:	4b09      	ldr	r3, [pc, #36]	; (800f99c <HAL_RCC_ClockConfig+0x1c8>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7fb fd22 	bl	800b3c4 <HAL_InitTick>
 800f980:	2300      	movs	r3, #0
 800f982:	4618      	mov	r0, r3
 800f984:	3710      	adds	r7, #16
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	40023c00 	.word	0x40023c00
 800f990:	40023800 	.word	0x40023800
 800f994:	08022658 	.word	0x08022658
 800f998:	20000018 	.word	0x20000018
 800f99c:	2000001c 	.word	0x2000001c

0800f9a0 <HAL_RCC_GetSysClockFreq>:
 800f9a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f9a4:	b094      	sub	sp, #80	; 0x50
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	647b      	str	r3, [r7, #68]	; 0x44
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	643b      	str	r3, [r7, #64]	; 0x40
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9b8:	4b79      	ldr	r3, [pc, #484]	; (800fba0 <HAL_RCC_GetSysClockFreq+0x200>)
 800f9ba:	689b      	ldr	r3, [r3, #8]
 800f9bc:	f003 030c 	and.w	r3, r3, #12
 800f9c0:	2b08      	cmp	r3, #8
 800f9c2:	d00d      	beq.n	800f9e0 <HAL_RCC_GetSysClockFreq+0x40>
 800f9c4:	2b08      	cmp	r3, #8
 800f9c6:	f200 80e1 	bhi.w	800fb8c <HAL_RCC_GetSysClockFreq+0x1ec>
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d002      	beq.n	800f9d4 <HAL_RCC_GetSysClockFreq+0x34>
 800f9ce:	2b04      	cmp	r3, #4
 800f9d0:	d003      	beq.n	800f9da <HAL_RCC_GetSysClockFreq+0x3a>
 800f9d2:	e0db      	b.n	800fb8c <HAL_RCC_GetSysClockFreq+0x1ec>
 800f9d4:	4b73      	ldr	r3, [pc, #460]	; (800fba4 <HAL_RCC_GetSysClockFreq+0x204>)
 800f9d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9d8:	e0db      	b.n	800fb92 <HAL_RCC_GetSysClockFreq+0x1f2>
 800f9da:	4b73      	ldr	r3, [pc, #460]	; (800fba8 <HAL_RCC_GetSysClockFreq+0x208>)
 800f9dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9de:	e0d8      	b.n	800fb92 <HAL_RCC_GetSysClockFreq+0x1f2>
 800f9e0:	4b6f      	ldr	r3, [pc, #444]	; (800fba0 <HAL_RCC_GetSysClockFreq+0x200>)
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f9e8:	647b      	str	r3, [r7, #68]	; 0x44
 800f9ea:	4b6d      	ldr	r3, [pc, #436]	; (800fba0 <HAL_RCC_GetSysClockFreq+0x200>)
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d063      	beq.n	800fabe <HAL_RCC_GetSysClockFreq+0x11e>
 800f9f6:	4b6a      	ldr	r3, [pc, #424]	; (800fba0 <HAL_RCC_GetSysClockFreq+0x200>)
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	099b      	lsrs	r3, r3, #6
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa00:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fa02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa08:	633b      	str	r3, [r7, #48]	; 0x30
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	637b      	str	r3, [r7, #52]	; 0x34
 800fa0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800fa12:	4622      	mov	r2, r4
 800fa14:	462b      	mov	r3, r5
 800fa16:	f04f 0000 	mov.w	r0, #0
 800fa1a:	f04f 0100 	mov.w	r1, #0
 800fa1e:	0159      	lsls	r1, r3, #5
 800fa20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fa24:	0150      	lsls	r0, r2, #5
 800fa26:	4602      	mov	r2, r0
 800fa28:	460b      	mov	r3, r1
 800fa2a:	4621      	mov	r1, r4
 800fa2c:	1a51      	subs	r1, r2, r1
 800fa2e:	6139      	str	r1, [r7, #16]
 800fa30:	4629      	mov	r1, r5
 800fa32:	eb63 0301 	sbc.w	r3, r3, r1
 800fa36:	617b      	str	r3, [r7, #20]
 800fa38:	f04f 0200 	mov.w	r2, #0
 800fa3c:	f04f 0300 	mov.w	r3, #0
 800fa40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800fa44:	4659      	mov	r1, fp
 800fa46:	018b      	lsls	r3, r1, #6
 800fa48:	4651      	mov	r1, sl
 800fa4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800fa4e:	4651      	mov	r1, sl
 800fa50:	018a      	lsls	r2, r1, #6
 800fa52:	4651      	mov	r1, sl
 800fa54:	ebb2 0801 	subs.w	r8, r2, r1
 800fa58:	4659      	mov	r1, fp
 800fa5a:	eb63 0901 	sbc.w	r9, r3, r1
 800fa5e:	f04f 0200 	mov.w	r2, #0
 800fa62:	f04f 0300 	mov.w	r3, #0
 800fa66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800fa6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800fa6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800fa72:	4690      	mov	r8, r2
 800fa74:	4699      	mov	r9, r3
 800fa76:	4623      	mov	r3, r4
 800fa78:	eb18 0303 	adds.w	r3, r8, r3
 800fa7c:	60bb      	str	r3, [r7, #8]
 800fa7e:	462b      	mov	r3, r5
 800fa80:	eb49 0303 	adc.w	r3, r9, r3
 800fa84:	60fb      	str	r3, [r7, #12]
 800fa86:	f04f 0200 	mov.w	r2, #0
 800fa8a:	f04f 0300 	mov.w	r3, #0
 800fa8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800fa92:	4629      	mov	r1, r5
 800fa94:	024b      	lsls	r3, r1, #9
 800fa96:	4621      	mov	r1, r4
 800fa98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800fa9c:	4621      	mov	r1, r4
 800fa9e:	024a      	lsls	r2, r1, #9
 800faa0:	4610      	mov	r0, r2
 800faa2:	4619      	mov	r1, r3
 800faa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faa6:	2200      	movs	r2, #0
 800faa8:	62bb      	str	r3, [r7, #40]	; 0x28
 800faaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800faac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fab0:	f7f1 f8ea 	bl	8000c88 <__aeabi_uldivmod>
 800fab4:	4602      	mov	r2, r0
 800fab6:	460b      	mov	r3, r1
 800fab8:	4613      	mov	r3, r2
 800faba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fabc:	e058      	b.n	800fb70 <HAL_RCC_GetSysClockFreq+0x1d0>
 800fabe:	4b38      	ldr	r3, [pc, #224]	; (800fba0 <HAL_RCC_GetSysClockFreq+0x200>)
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	099b      	lsrs	r3, r3, #6
 800fac4:	2200      	movs	r2, #0
 800fac6:	4618      	mov	r0, r3
 800fac8:	4611      	mov	r1, r2
 800faca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800face:	623b      	str	r3, [r7, #32]
 800fad0:	2300      	movs	r3, #0
 800fad2:	627b      	str	r3, [r7, #36]	; 0x24
 800fad4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800fad8:	4642      	mov	r2, r8
 800fada:	464b      	mov	r3, r9
 800fadc:	f04f 0000 	mov.w	r0, #0
 800fae0:	f04f 0100 	mov.w	r1, #0
 800fae4:	0159      	lsls	r1, r3, #5
 800fae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800faea:	0150      	lsls	r0, r2, #5
 800faec:	4602      	mov	r2, r0
 800faee:	460b      	mov	r3, r1
 800faf0:	4641      	mov	r1, r8
 800faf2:	ebb2 0a01 	subs.w	sl, r2, r1
 800faf6:	4649      	mov	r1, r9
 800faf8:	eb63 0b01 	sbc.w	fp, r3, r1
 800fafc:	f04f 0200 	mov.w	r2, #0
 800fb00:	f04f 0300 	mov.w	r3, #0
 800fb04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800fb08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800fb0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800fb10:	ebb2 040a 	subs.w	r4, r2, sl
 800fb14:	eb63 050b 	sbc.w	r5, r3, fp
 800fb18:	f04f 0200 	mov.w	r2, #0
 800fb1c:	f04f 0300 	mov.w	r3, #0
 800fb20:	00eb      	lsls	r3, r5, #3
 800fb22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800fb26:	00e2      	lsls	r2, r4, #3
 800fb28:	4614      	mov	r4, r2
 800fb2a:	461d      	mov	r5, r3
 800fb2c:	4643      	mov	r3, r8
 800fb2e:	18e3      	adds	r3, r4, r3
 800fb30:	603b      	str	r3, [r7, #0]
 800fb32:	464b      	mov	r3, r9
 800fb34:	eb45 0303 	adc.w	r3, r5, r3
 800fb38:	607b      	str	r3, [r7, #4]
 800fb3a:	f04f 0200 	mov.w	r2, #0
 800fb3e:	f04f 0300 	mov.w	r3, #0
 800fb42:	e9d7 4500 	ldrd	r4, r5, [r7]
 800fb46:	4629      	mov	r1, r5
 800fb48:	028b      	lsls	r3, r1, #10
 800fb4a:	4621      	mov	r1, r4
 800fb4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800fb50:	4621      	mov	r1, r4
 800fb52:	028a      	lsls	r2, r1, #10
 800fb54:	4610      	mov	r0, r2
 800fb56:	4619      	mov	r1, r3
 800fb58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	61bb      	str	r3, [r7, #24]
 800fb5e:	61fa      	str	r2, [r7, #28]
 800fb60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fb64:	f7f1 f890 	bl	8000c88 <__aeabi_uldivmod>
 800fb68:	4602      	mov	r2, r0
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	4613      	mov	r3, r2
 800fb6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb70:	4b0b      	ldr	r3, [pc, #44]	; (800fba0 <HAL_RCC_GetSysClockFreq+0x200>)
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	0c1b      	lsrs	r3, r3, #16
 800fb76:	f003 0303 	and.w	r3, r3, #3
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	005b      	lsls	r3, r3, #1
 800fb7e:	643b      	str	r3, [r7, #64]	; 0x40
 800fb80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fb82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb84:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb88:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb8a:	e002      	b.n	800fb92 <HAL_RCC_GetSysClockFreq+0x1f2>
 800fb8c:	4b05      	ldr	r3, [pc, #20]	; (800fba4 <HAL_RCC_GetSysClockFreq+0x204>)
 800fb8e:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb90:	bf00      	nop
 800fb92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb94:	4618      	mov	r0, r3
 800fb96:	3750      	adds	r7, #80	; 0x50
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fb9e:	bf00      	nop
 800fba0:	40023800 	.word	0x40023800
 800fba4:	00f42400 	.word	0x00f42400
 800fba8:	007a1200 	.word	0x007a1200

0800fbac <HAL_RCC_GetHCLKFreq>:
 800fbac:	b480      	push	{r7}
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	4b03      	ldr	r3, [pc, #12]	; (800fbc0 <HAL_RCC_GetHCLKFreq+0x14>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbc:	4770      	bx	lr
 800fbbe:	bf00      	nop
 800fbc0:	20000018 	.word	0x20000018

0800fbc4 <HAL_RCC_GetPCLK1Freq>:
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	f7ff fff0 	bl	800fbac <HAL_RCC_GetHCLKFreq>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	4b05      	ldr	r3, [pc, #20]	; (800fbe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800fbd0:	689b      	ldr	r3, [r3, #8]
 800fbd2:	0a9b      	lsrs	r3, r3, #10
 800fbd4:	f003 0307 	and.w	r3, r3, #7
 800fbd8:	4903      	ldr	r1, [pc, #12]	; (800fbe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fbda:	5ccb      	ldrb	r3, [r1, r3]
 800fbdc:	fa22 f303 	lsr.w	r3, r2, r3
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	40023800 	.word	0x40023800
 800fbe8:	08022668 	.word	0x08022668

0800fbec <HAL_RCC_GetClockConfig>:
 800fbec:	b480      	push	{r7}
 800fbee:	b083      	sub	sp, #12
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	220f      	movs	r2, #15
 800fbfa:	601a      	str	r2, [r3, #0]
 800fbfc:	4b12      	ldr	r3, [pc, #72]	; (800fc48 <HAL_RCC_GetClockConfig+0x5c>)
 800fbfe:	689b      	ldr	r3, [r3, #8]
 800fc00:	f003 0203 	and.w	r2, r3, #3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	605a      	str	r2, [r3, #4]
 800fc08:	4b0f      	ldr	r3, [pc, #60]	; (800fc48 <HAL_RCC_GetClockConfig+0x5c>)
 800fc0a:	689b      	ldr	r3, [r3, #8]
 800fc0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	609a      	str	r2, [r3, #8]
 800fc14:	4b0c      	ldr	r3, [pc, #48]	; (800fc48 <HAL_RCC_GetClockConfig+0x5c>)
 800fc16:	689b      	ldr	r3, [r3, #8]
 800fc18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	60da      	str	r2, [r3, #12]
 800fc20:	4b09      	ldr	r3, [pc, #36]	; (800fc48 <HAL_RCC_GetClockConfig+0x5c>)
 800fc22:	689b      	ldr	r3, [r3, #8]
 800fc24:	08db      	lsrs	r3, r3, #3
 800fc26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	611a      	str	r2, [r3, #16]
 800fc2e:	4b07      	ldr	r3, [pc, #28]	; (800fc4c <HAL_RCC_GetClockConfig+0x60>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f003 0207 	and.w	r2, r3, #7
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	601a      	str	r2, [r3, #0]
 800fc3a:	bf00      	nop
 800fc3c:	370c      	adds	r7, #12
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr
 800fc46:	bf00      	nop
 800fc48:	40023800 	.word	0x40023800
 800fc4c:	40023c00 	.word	0x40023c00

0800fc50 <HAL_SPI_Init>:
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d101      	bne.n	800fc62 <HAL_SPI_Init+0x12>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e07b      	b.n	800fd5a <HAL_SPI_Init+0x10a>
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d108      	bne.n	800fc7c <HAL_SPI_Init+0x2c>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fc72:	d009      	beq.n	800fc88 <HAL_SPI_Init+0x38>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	61da      	str	r2, [r3, #28]
 800fc7a:	e005      	b.n	800fc88 <HAL_SPI_Init+0x38>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	611a      	str	r2, [r3, #16]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2200      	movs	r2, #0
 800fc86:	615a      	str	r2, [r3, #20]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	629a      	str	r2, [r3, #40]	; 0x28
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d106      	bne.n	800fca8 <HAL_SPI_Init+0x58>
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f7fb fac4 	bl	800b230 <HAL_SPI_MspInit>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2202      	movs	r2, #2
 800fcac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	681a      	ldr	r2, [r3, #0]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fcbe:	601a      	str	r2, [r3, #0]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	689b      	ldr	r3, [r3, #8]
 800fccc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800fcd0:	431a      	orrs	r2, r3
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	68db      	ldr	r3, [r3, #12]
 800fcd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fcda:	431a      	orrs	r2, r3
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	691b      	ldr	r3, [r3, #16]
 800fce0:	f003 0302 	and.w	r3, r3, #2
 800fce4:	431a      	orrs	r2, r3
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	695b      	ldr	r3, [r3, #20]
 800fcea:	f003 0301 	and.w	r3, r3, #1
 800fcee:	431a      	orrs	r2, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	699b      	ldr	r3, [r3, #24]
 800fcf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fcf8:	431a      	orrs	r2, r3
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	69db      	ldr	r3, [r3, #28]
 800fcfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fd02:	431a      	orrs	r2, r3
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	6a1b      	ldr	r3, [r3, #32]
 800fd08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd0c:	ea42 0103 	orr.w	r1, r2, r3
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	430a      	orrs	r2, r1
 800fd1e:	601a      	str	r2, [r3, #0]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	699b      	ldr	r3, [r3, #24]
 800fd24:	0c1b      	lsrs	r3, r3, #16
 800fd26:	f003 0104 	and.w	r1, r3, #4
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd2e:	f003 0210 	and.w	r2, r3, #16
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	430a      	orrs	r2, r1
 800fd38:	605a      	str	r2, [r3, #4]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	69da      	ldr	r2, [r3, #28]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fd48:	61da      	str	r2, [r3, #28]
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	655a      	str	r2, [r3, #84]	; 0x54
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2201      	movs	r2, #1
 800fd54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800fd58:	2300      	movs	r3, #0
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3708      	adds	r7, #8
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}

0800fd62 <HAL_SPI_Transmit>:
 800fd62:	b580      	push	{r7, lr}
 800fd64:	b088      	sub	sp, #32
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	60f8      	str	r0, [r7, #12]
 800fd6a:	60b9      	str	r1, [r7, #8]
 800fd6c:	603b      	str	r3, [r7, #0]
 800fd6e:	4613      	mov	r3, r2
 800fd70:	80fb      	strh	r3, [r7, #6]
 800fd72:	2300      	movs	r3, #0
 800fd74:	77fb      	strb	r3, [r7, #31]
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fd7c:	2b01      	cmp	r3, #1
 800fd7e:	d101      	bne.n	800fd84 <HAL_SPI_Transmit+0x22>
 800fd80:	2302      	movs	r3, #2
 800fd82:	e126      	b.n	800ffd2 <HAL_SPI_Transmit+0x270>
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2201      	movs	r2, #1
 800fd88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800fd8c:	f7fb ff64 	bl	800bc58 <HAL_GetTick>
 800fd90:	61b8      	str	r0, [r7, #24]
 800fd92:	88fb      	ldrh	r3, [r7, #6]
 800fd94:	82fb      	strh	r3, [r7, #22]
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fd9c:	b2db      	uxtb	r3, r3
 800fd9e:	2b01      	cmp	r3, #1
 800fda0:	d002      	beq.n	800fda8 <HAL_SPI_Transmit+0x46>
 800fda2:	2302      	movs	r3, #2
 800fda4:	77fb      	strb	r3, [r7, #31]
 800fda6:	e10b      	b.n	800ffc0 <HAL_SPI_Transmit+0x25e>
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d002      	beq.n	800fdb4 <HAL_SPI_Transmit+0x52>
 800fdae:	88fb      	ldrh	r3, [r7, #6]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d102      	bne.n	800fdba <HAL_SPI_Transmit+0x58>
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	77fb      	strb	r3, [r7, #31]
 800fdb8:	e102      	b.n	800ffc0 <HAL_SPI_Transmit+0x25e>
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	2203      	movs	r2, #3
 800fdbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	655a      	str	r2, [r3, #84]	; 0x54
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	68ba      	ldr	r2, [r7, #8]
 800fdcc:	631a      	str	r2, [r3, #48]	; 0x30
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	88fa      	ldrh	r2, [r7, #6]
 800fdd2:	869a      	strh	r2, [r3, #52]	; 0x34
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	88fa      	ldrh	r2, [r7, #6]
 800fdd8:	86da      	strh	r2, [r3, #54]	; 0x36
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2200      	movs	r2, #0
 800fdde:	639a      	str	r2, [r3, #56]	; 0x38
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	2200      	movs	r2, #0
 800fde4:	879a      	strh	r2, [r3, #60]	; 0x3c
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2200      	movs	r2, #0
 800fdea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	645a      	str	r2, [r3, #68]	; 0x44
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	641a      	str	r2, [r3, #64]	; 0x40
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe00:	d10f      	bne.n	800fe22 <HAL_SPI_Transmit+0xc0>
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	681a      	ldr	r2, [r3, #0]
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fe10:	601a      	str	r2, [r3, #0]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fe20:	601a      	str	r2, [r3, #0]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe2c:	2b40      	cmp	r3, #64	; 0x40
 800fe2e:	d007      	beq.n	800fe40 <HAL_SPI_Transmit+0xde>
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	681a      	ldr	r2, [r3, #0]
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fe3e:	601a      	str	r2, [r3, #0]
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	68db      	ldr	r3, [r3, #12]
 800fe44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe48:	d14b      	bne.n	800fee2 <HAL_SPI_Transmit+0x180>
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d002      	beq.n	800fe58 <HAL_SPI_Transmit+0xf6>
 800fe52:	8afb      	ldrh	r3, [r7, #22]
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d13e      	bne.n	800fed6 <HAL_SPI_Transmit+0x174>
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe5c:	881a      	ldrh	r2, [r3, #0]
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	60da      	str	r2, [r3, #12]
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe68:	1c9a      	adds	r2, r3, #2
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	631a      	str	r2, [r3, #48]	; 0x30
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fe72:	b29b      	uxth	r3, r3
 800fe74:	3b01      	subs	r3, #1
 800fe76:	b29a      	uxth	r2, r3
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	86da      	strh	r2, [r3, #54]	; 0x36
 800fe7c:	e02b      	b.n	800fed6 <HAL_SPI_Transmit+0x174>
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	689b      	ldr	r3, [r3, #8]
 800fe84:	f003 0302 	and.w	r3, r3, #2
 800fe88:	2b02      	cmp	r3, #2
 800fe8a:	d112      	bne.n	800feb2 <HAL_SPI_Transmit+0x150>
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe90:	881a      	ldrh	r2, [r3, #0]
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	60da      	str	r2, [r3, #12]
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe9c:	1c9a      	adds	r2, r3, #2
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	631a      	str	r2, [r3, #48]	; 0x30
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	3b01      	subs	r3, #1
 800feaa:	b29a      	uxth	r2, r3
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	86da      	strh	r2, [r3, #54]	; 0x36
 800feb0:	e011      	b.n	800fed6 <HAL_SPI_Transmit+0x174>
 800feb2:	f7fb fed1 	bl	800bc58 <HAL_GetTick>
 800feb6:	4602      	mov	r2, r0
 800feb8:	69bb      	ldr	r3, [r7, #24]
 800feba:	1ad3      	subs	r3, r2, r3
 800febc:	683a      	ldr	r2, [r7, #0]
 800febe:	429a      	cmp	r2, r3
 800fec0:	d803      	bhi.n	800feca <HAL_SPI_Transmit+0x168>
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fec8:	d102      	bne.n	800fed0 <HAL_SPI_Transmit+0x16e>
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d102      	bne.n	800fed6 <HAL_SPI_Transmit+0x174>
 800fed0:	2303      	movs	r3, #3
 800fed2:	77fb      	strb	r3, [r7, #31]
 800fed4:	e074      	b.n	800ffc0 <HAL_SPI_Transmit+0x25e>
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800feda:	b29b      	uxth	r3, r3
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d1ce      	bne.n	800fe7e <HAL_SPI_Transmit+0x11c>
 800fee0:	e04c      	b.n	800ff7c <HAL_SPI_Transmit+0x21a>
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	685b      	ldr	r3, [r3, #4]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d002      	beq.n	800fef0 <HAL_SPI_Transmit+0x18e>
 800feea:	8afb      	ldrh	r3, [r7, #22]
 800feec:	2b01      	cmp	r3, #1
 800feee:	d140      	bne.n	800ff72 <HAL_SPI_Transmit+0x210>
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	330c      	adds	r3, #12
 800fefa:	7812      	ldrb	r2, [r2, #0]
 800fefc:	701a      	strb	r2, [r3, #0]
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff02:	1c5a      	adds	r2, r3, #1
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	631a      	str	r2, [r3, #48]	; 0x30
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ff0c:	b29b      	uxth	r3, r3
 800ff0e:	3b01      	subs	r3, #1
 800ff10:	b29a      	uxth	r2, r3
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	86da      	strh	r2, [r3, #54]	; 0x36
 800ff16:	e02c      	b.n	800ff72 <HAL_SPI_Transmit+0x210>
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	689b      	ldr	r3, [r3, #8]
 800ff1e:	f003 0302 	and.w	r3, r3, #2
 800ff22:	2b02      	cmp	r3, #2
 800ff24:	d113      	bne.n	800ff4e <HAL_SPI_Transmit+0x1ec>
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	330c      	adds	r3, #12
 800ff30:	7812      	ldrb	r2, [r2, #0]
 800ff32:	701a      	strb	r2, [r3, #0]
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff38:	1c5a      	adds	r2, r3, #1
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	631a      	str	r2, [r3, #48]	; 0x30
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ff42:	b29b      	uxth	r3, r3
 800ff44:	3b01      	subs	r3, #1
 800ff46:	b29a      	uxth	r2, r3
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	86da      	strh	r2, [r3, #54]	; 0x36
 800ff4c:	e011      	b.n	800ff72 <HAL_SPI_Transmit+0x210>
 800ff4e:	f7fb fe83 	bl	800bc58 <HAL_GetTick>
 800ff52:	4602      	mov	r2, r0
 800ff54:	69bb      	ldr	r3, [r7, #24]
 800ff56:	1ad3      	subs	r3, r2, r3
 800ff58:	683a      	ldr	r2, [r7, #0]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d803      	bhi.n	800ff66 <HAL_SPI_Transmit+0x204>
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff64:	d102      	bne.n	800ff6c <HAL_SPI_Transmit+0x20a>
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d102      	bne.n	800ff72 <HAL_SPI_Transmit+0x210>
 800ff6c:	2303      	movs	r3, #3
 800ff6e:	77fb      	strb	r3, [r7, #31]
 800ff70:	e026      	b.n	800ffc0 <HAL_SPI_Transmit+0x25e>
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ff76:	b29b      	uxth	r3, r3
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d1cd      	bne.n	800ff18 <HAL_SPI_Transmit+0x1b6>
 800ff7c:	69ba      	ldr	r2, [r7, #24]
 800ff7e:	6839      	ldr	r1, [r7, #0]
 800ff80:	68f8      	ldr	r0, [r7, #12]
 800ff82:	f000 fa63 	bl	801044c <SPI_EndRxTxTransaction>
 800ff86:	4603      	mov	r3, r0
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d002      	beq.n	800ff92 <HAL_SPI_Transmit+0x230>
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	2220      	movs	r2, #32
 800ff90:	655a      	str	r2, [r3, #84]	; 0x54
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	689b      	ldr	r3, [r3, #8]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d10a      	bne.n	800ffb0 <HAL_SPI_Transmit+0x24e>
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	613b      	str	r3, [r7, #16]
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	613b      	str	r3, [r7, #16]
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	689b      	ldr	r3, [r3, #8]
 800ffac:	613b      	str	r3, [r7, #16]
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d002      	beq.n	800ffbe <HAL_SPI_Transmit+0x25c>
 800ffb8:	2301      	movs	r3, #1
 800ffba:	77fb      	strb	r3, [r7, #31]
 800ffbc:	e000      	b.n	800ffc0 <HAL_SPI_Transmit+0x25e>
 800ffbe:	bf00      	nop
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	2200      	movs	r2, #0
 800ffcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800ffd0:	7ffb      	ldrb	r3, [r7, #31]
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	3720      	adds	r7, #32
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}

0800ffda <HAL_SPI_TransmitReceive>:
 800ffda:	b580      	push	{r7, lr}
 800ffdc:	b08c      	sub	sp, #48	; 0x30
 800ffde:	af00      	add	r7, sp, #0
 800ffe0:	60f8      	str	r0, [r7, #12]
 800ffe2:	60b9      	str	r1, [r7, #8]
 800ffe4:	607a      	str	r2, [r7, #4]
 800ffe6:	807b      	strh	r3, [r7, #2]
 800ffe8:	2301      	movs	r3, #1
 800ffea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffec:	2300      	movs	r3, #0
 800ffee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	d101      	bne.n	8010000 <HAL_SPI_TransmitReceive+0x26>
 800fffc:	2302      	movs	r3, #2
 800fffe:	e18a      	b.n	8010316 <HAL_SPI_TransmitReceive+0x33c>
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	2201      	movs	r2, #1
 8010004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8010008:	f7fb fe26 	bl	800bc58 <HAL_GetTick>
 801000c:	6278      	str	r0, [r7, #36]	; 0x24
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	685b      	ldr	r3, [r3, #4]
 801001c:	61fb      	str	r3, [r7, #28]
 801001e:	887b      	ldrh	r3, [r7, #2]
 8010020:	837b      	strh	r3, [r7, #26]
 8010022:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010026:	2b01      	cmp	r3, #1
 8010028:	d00f      	beq.n	801004a <HAL_SPI_TransmitReceive+0x70>
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010030:	d107      	bne.n	8010042 <HAL_SPI_TransmitReceive+0x68>
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	689b      	ldr	r3, [r3, #8]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d103      	bne.n	8010042 <HAL_SPI_TransmitReceive+0x68>
 801003a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801003e:	2b04      	cmp	r3, #4
 8010040:	d003      	beq.n	801004a <HAL_SPI_TransmitReceive+0x70>
 8010042:	2302      	movs	r3, #2
 8010044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010048:	e15b      	b.n	8010302 <HAL_SPI_TransmitReceive+0x328>
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d005      	beq.n	801005c <HAL_SPI_TransmitReceive+0x82>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d002      	beq.n	801005c <HAL_SPI_TransmitReceive+0x82>
 8010056:	887b      	ldrh	r3, [r7, #2]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d103      	bne.n	8010064 <HAL_SPI_TransmitReceive+0x8a>
 801005c:	2301      	movs	r3, #1
 801005e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010062:	e14e      	b.n	8010302 <HAL_SPI_TransmitReceive+0x328>
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801006a:	b2db      	uxtb	r3, r3
 801006c:	2b04      	cmp	r3, #4
 801006e:	d003      	beq.n	8010078 <HAL_SPI_TransmitReceive+0x9e>
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	2205      	movs	r2, #5
 8010074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	2200      	movs	r2, #0
 801007c:	655a      	str	r2, [r3, #84]	; 0x54
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	687a      	ldr	r2, [r7, #4]
 8010082:	639a      	str	r2, [r3, #56]	; 0x38
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	887a      	ldrh	r2, [r7, #2]
 8010088:	87da      	strh	r2, [r3, #62]	; 0x3e
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	887a      	ldrh	r2, [r7, #2]
 801008e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	68ba      	ldr	r2, [r7, #8]
 8010094:	631a      	str	r2, [r3, #48]	; 0x30
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	887a      	ldrh	r2, [r7, #2]
 801009a:	86da      	strh	r2, [r3, #54]	; 0x36
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	887a      	ldrh	r2, [r7, #2]
 80100a0:	869a      	strh	r2, [r3, #52]	; 0x34
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2200      	movs	r2, #0
 80100a6:	641a      	str	r2, [r3, #64]	; 0x40
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	2200      	movs	r2, #0
 80100ac:	645a      	str	r2, [r3, #68]	; 0x44
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100b8:	2b40      	cmp	r3, #64	; 0x40
 80100ba:	d007      	beq.n	80100cc <HAL_SPI_TransmitReceive+0xf2>
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80100ca:	601a      	str	r2, [r3, #0]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	68db      	ldr	r3, [r3, #12]
 80100d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80100d4:	d178      	bne.n	80101c8 <HAL_SPI_TransmitReceive+0x1ee>
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d002      	beq.n	80100e4 <HAL_SPI_TransmitReceive+0x10a>
 80100de:	8b7b      	ldrh	r3, [r7, #26]
 80100e0:	2b01      	cmp	r3, #1
 80100e2:	d166      	bne.n	80101b2 <HAL_SPI_TransmitReceive+0x1d8>
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100e8:	881a      	ldrh	r2, [r3, #0]
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	60da      	str	r2, [r3, #12]
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100f4:	1c9a      	adds	r2, r3, #2
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	631a      	str	r2, [r3, #48]	; 0x30
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80100fe:	b29b      	uxth	r3, r3
 8010100:	3b01      	subs	r3, #1
 8010102:	b29a      	uxth	r2, r3
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	86da      	strh	r2, [r3, #54]	; 0x36
 8010108:	e053      	b.n	80101b2 <HAL_SPI_TransmitReceive+0x1d8>
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	689b      	ldr	r3, [r3, #8]
 8010110:	f003 0302 	and.w	r3, r3, #2
 8010114:	2b02      	cmp	r3, #2
 8010116:	d11b      	bne.n	8010150 <HAL_SPI_TransmitReceive+0x176>
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801011c:	b29b      	uxth	r3, r3
 801011e:	2b00      	cmp	r3, #0
 8010120:	d016      	beq.n	8010150 <HAL_SPI_TransmitReceive+0x176>
 8010122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010124:	2b01      	cmp	r3, #1
 8010126:	d113      	bne.n	8010150 <HAL_SPI_TransmitReceive+0x176>
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801012c:	881a      	ldrh	r2, [r3, #0]
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	60da      	str	r2, [r3, #12]
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010138:	1c9a      	adds	r2, r3, #2
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	631a      	str	r2, [r3, #48]	; 0x30
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010142:	b29b      	uxth	r3, r3
 8010144:	3b01      	subs	r3, #1
 8010146:	b29a      	uxth	r2, r3
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	86da      	strh	r2, [r3, #54]	; 0x36
 801014c:	2300      	movs	r3, #0
 801014e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	689b      	ldr	r3, [r3, #8]
 8010156:	f003 0301 	and.w	r3, r3, #1
 801015a:	2b01      	cmp	r3, #1
 801015c:	d119      	bne.n	8010192 <HAL_SPI_TransmitReceive+0x1b8>
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010162:	b29b      	uxth	r3, r3
 8010164:	2b00      	cmp	r3, #0
 8010166:	d014      	beq.n	8010192 <HAL_SPI_TransmitReceive+0x1b8>
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	68da      	ldr	r2, [r3, #12]
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010172:	b292      	uxth	r2, r2
 8010174:	801a      	strh	r2, [r3, #0]
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801017a:	1c9a      	adds	r2, r3, #2
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	639a      	str	r2, [r3, #56]	; 0x38
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010184:	b29b      	uxth	r3, r3
 8010186:	3b01      	subs	r3, #1
 8010188:	b29a      	uxth	r2, r3
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801018e:	2301      	movs	r3, #1
 8010190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010192:	f7fb fd61 	bl	800bc58 <HAL_GetTick>
 8010196:	4602      	mov	r2, r0
 8010198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019a:	1ad3      	subs	r3, r2, r3
 801019c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801019e:	429a      	cmp	r2, r3
 80101a0:	d807      	bhi.n	80101b2 <HAL_SPI_TransmitReceive+0x1d8>
 80101a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101a8:	d003      	beq.n	80101b2 <HAL_SPI_TransmitReceive+0x1d8>
 80101aa:	2303      	movs	r3, #3
 80101ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80101b0:	e0a7      	b.n	8010302 <HAL_SPI_TransmitReceive+0x328>
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d1a6      	bne.n	801010a <HAL_SPI_TransmitReceive+0x130>
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d1a1      	bne.n	801010a <HAL_SPI_TransmitReceive+0x130>
 80101c6:	e07c      	b.n	80102c2 <HAL_SPI_TransmitReceive+0x2e8>
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d002      	beq.n	80101d6 <HAL_SPI_TransmitReceive+0x1fc>
 80101d0:	8b7b      	ldrh	r3, [r7, #26]
 80101d2:	2b01      	cmp	r3, #1
 80101d4:	d16b      	bne.n	80102ae <HAL_SPI_TransmitReceive+0x2d4>
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	330c      	adds	r3, #12
 80101e0:	7812      	ldrb	r2, [r2, #0]
 80101e2:	701a      	strb	r2, [r3, #0]
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101e8:	1c5a      	adds	r2, r3, #1
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	631a      	str	r2, [r3, #48]	; 0x30
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80101f2:	b29b      	uxth	r3, r3
 80101f4:	3b01      	subs	r3, #1
 80101f6:	b29a      	uxth	r2, r3
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80101fc:	e057      	b.n	80102ae <HAL_SPI_TransmitReceive+0x2d4>
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	689b      	ldr	r3, [r3, #8]
 8010204:	f003 0302 	and.w	r3, r3, #2
 8010208:	2b02      	cmp	r3, #2
 801020a:	d11c      	bne.n	8010246 <HAL_SPI_TransmitReceive+0x26c>
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010210:	b29b      	uxth	r3, r3
 8010212:	2b00      	cmp	r3, #0
 8010214:	d017      	beq.n	8010246 <HAL_SPI_TransmitReceive+0x26c>
 8010216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010218:	2b01      	cmp	r3, #1
 801021a:	d114      	bne.n	8010246 <HAL_SPI_TransmitReceive+0x26c>
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	330c      	adds	r3, #12
 8010226:	7812      	ldrb	r2, [r2, #0]
 8010228:	701a      	strb	r2, [r3, #0]
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801022e:	1c5a      	adds	r2, r3, #1
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	631a      	str	r2, [r3, #48]	; 0x30
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010238:	b29b      	uxth	r3, r3
 801023a:	3b01      	subs	r3, #1
 801023c:	b29a      	uxth	r2, r3
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	86da      	strh	r2, [r3, #54]	; 0x36
 8010242:	2300      	movs	r3, #0
 8010244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	689b      	ldr	r3, [r3, #8]
 801024c:	f003 0301 	and.w	r3, r3, #1
 8010250:	2b01      	cmp	r3, #1
 8010252:	d119      	bne.n	8010288 <HAL_SPI_TransmitReceive+0x2ae>
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010258:	b29b      	uxth	r3, r3
 801025a:	2b00      	cmp	r3, #0
 801025c:	d014      	beq.n	8010288 <HAL_SPI_TransmitReceive+0x2ae>
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	68da      	ldr	r2, [r3, #12]
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010268:	b2d2      	uxtb	r2, r2
 801026a:	701a      	strb	r2, [r3, #0]
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010270:	1c5a      	adds	r2, r3, #1
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	639a      	str	r2, [r3, #56]	; 0x38
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801027a:	b29b      	uxth	r3, r3
 801027c:	3b01      	subs	r3, #1
 801027e:	b29a      	uxth	r2, r3
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010284:	2301      	movs	r3, #1
 8010286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010288:	f7fb fce6 	bl	800bc58 <HAL_GetTick>
 801028c:	4602      	mov	r2, r0
 801028e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010290:	1ad3      	subs	r3, r2, r3
 8010292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010294:	429a      	cmp	r2, r3
 8010296:	d803      	bhi.n	80102a0 <HAL_SPI_TransmitReceive+0x2c6>
 8010298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801029a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801029e:	d102      	bne.n	80102a6 <HAL_SPI_TransmitReceive+0x2cc>
 80102a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d103      	bne.n	80102ae <HAL_SPI_TransmitReceive+0x2d4>
 80102a6:	2303      	movs	r3, #3
 80102a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80102ac:	e029      	b.n	8010302 <HAL_SPI_TransmitReceive+0x328>
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80102b2:	b29b      	uxth	r3, r3
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d1a2      	bne.n	80101fe <HAL_SPI_TransmitReceive+0x224>
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80102bc:	b29b      	uxth	r3, r3
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d19d      	bne.n	80101fe <HAL_SPI_TransmitReceive+0x224>
 80102c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80102c6:	68f8      	ldr	r0, [r7, #12]
 80102c8:	f000 f8c0 	bl	801044c <SPI_EndRxTxTransaction>
 80102cc:	4603      	mov	r3, r0
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d006      	beq.n	80102e0 <HAL_SPI_TransmitReceive+0x306>
 80102d2:	2301      	movs	r3, #1
 80102d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	2220      	movs	r2, #32
 80102dc:	655a      	str	r2, [r3, #84]	; 0x54
 80102de:	e010      	b.n	8010302 <HAL_SPI_TransmitReceive+0x328>
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d10b      	bne.n	8010300 <HAL_SPI_TransmitReceive+0x326>
 80102e8:	2300      	movs	r3, #0
 80102ea:	617b      	str	r3, [r7, #20]
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	68db      	ldr	r3, [r3, #12]
 80102f2:	617b      	str	r3, [r7, #20]
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	689b      	ldr	r3, [r3, #8]
 80102fa:	617b      	str	r3, [r7, #20]
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	e000      	b.n	8010302 <HAL_SPI_TransmitReceive+0x328>
 8010300:	bf00      	nop
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2201      	movs	r2, #1
 8010306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2200      	movs	r2, #0
 801030e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8010312:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010316:	4618      	mov	r0, r3
 8010318:	3730      	adds	r7, #48	; 0x30
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}

0801031e <HAL_SPI_GetState>:
 801031e:	b480      	push	{r7}
 8010320:	b083      	sub	sp, #12
 8010322:	af00      	add	r7, sp, #0
 8010324:	6078      	str	r0, [r7, #4]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801032c:	b2db      	uxtb	r3, r3
 801032e:	4618      	mov	r0, r3
 8010330:	370c      	adds	r7, #12
 8010332:	46bd      	mov	sp, r7
 8010334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010338:	4770      	bx	lr
	...

0801033c <SPI_WaitFlagStateUntilTimeout>:
 801033c:	b580      	push	{r7, lr}
 801033e:	b088      	sub	sp, #32
 8010340:	af00      	add	r7, sp, #0
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	60b9      	str	r1, [r7, #8]
 8010346:	603b      	str	r3, [r7, #0]
 8010348:	4613      	mov	r3, r2
 801034a:	71fb      	strb	r3, [r7, #7]
 801034c:	f7fb fc84 	bl	800bc58 <HAL_GetTick>
 8010350:	4602      	mov	r2, r0
 8010352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010354:	1a9b      	subs	r3, r3, r2
 8010356:	683a      	ldr	r2, [r7, #0]
 8010358:	4413      	add	r3, r2
 801035a:	61fb      	str	r3, [r7, #28]
 801035c:	f7fb fc7c 	bl	800bc58 <HAL_GetTick>
 8010360:	61b8      	str	r0, [r7, #24]
 8010362:	4b39      	ldr	r3, [pc, #228]	; (8010448 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	015b      	lsls	r3, r3, #5
 8010368:	0d1b      	lsrs	r3, r3, #20
 801036a:	69fa      	ldr	r2, [r7, #28]
 801036c:	fb02 f303 	mul.w	r3, r2, r3
 8010370:	617b      	str	r3, [r7, #20]
 8010372:	e054      	b.n	801041e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	f1b3 3fff 	cmp.w	r3, #4294967295
 801037a:	d050      	beq.n	801041e <SPI_WaitFlagStateUntilTimeout+0xe2>
 801037c:	f7fb fc6c 	bl	800bc58 <HAL_GetTick>
 8010380:	4602      	mov	r2, r0
 8010382:	69bb      	ldr	r3, [r7, #24]
 8010384:	1ad3      	subs	r3, r2, r3
 8010386:	69fa      	ldr	r2, [r7, #28]
 8010388:	429a      	cmp	r2, r3
 801038a:	d902      	bls.n	8010392 <SPI_WaitFlagStateUntilTimeout+0x56>
 801038c:	69fb      	ldr	r3, [r7, #28]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d13d      	bne.n	801040e <SPI_WaitFlagStateUntilTimeout+0xd2>
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	685a      	ldr	r2, [r3, #4]
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80103a0:	605a      	str	r2, [r3, #4]
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80103aa:	d111      	bne.n	80103d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	689b      	ldr	r3, [r3, #8]
 80103b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80103b4:	d004      	beq.n	80103c0 <SPI_WaitFlagStateUntilTimeout+0x84>
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	689b      	ldr	r3, [r3, #8]
 80103ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80103be:	d107      	bne.n	80103d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80103ce:	601a      	str	r2, [r3, #0]
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80103d8:	d10f      	bne.n	80103fa <SPI_WaitFlagStateUntilTimeout+0xbe>
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	681a      	ldr	r2, [r3, #0]
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80103e8:	601a      	str	r2, [r3, #0]
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	681a      	ldr	r2, [r3, #0]
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80103f8:	601a      	str	r2, [r3, #0]
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2201      	movs	r2, #1
 80103fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	2200      	movs	r2, #0
 8010406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 801040a:	2303      	movs	r3, #3
 801040c:	e017      	b.n	801043e <SPI_WaitFlagStateUntilTimeout+0x102>
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d101      	bne.n	8010418 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8010414:	2300      	movs	r3, #0
 8010416:	61fb      	str	r3, [r7, #28]
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	3b01      	subs	r3, #1
 801041c:	617b      	str	r3, [r7, #20]
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	689a      	ldr	r2, [r3, #8]
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	4013      	ands	r3, r2
 8010428:	68ba      	ldr	r2, [r7, #8]
 801042a:	429a      	cmp	r2, r3
 801042c:	bf0c      	ite	eq
 801042e:	2301      	moveq	r3, #1
 8010430:	2300      	movne	r3, #0
 8010432:	b2db      	uxtb	r3, r3
 8010434:	461a      	mov	r2, r3
 8010436:	79fb      	ldrb	r3, [r7, #7]
 8010438:	429a      	cmp	r2, r3
 801043a:	d19b      	bne.n	8010374 <SPI_WaitFlagStateUntilTimeout+0x38>
 801043c:	2300      	movs	r3, #0
 801043e:	4618      	mov	r0, r3
 8010440:	3720      	adds	r7, #32
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
 8010446:	bf00      	nop
 8010448:	20000018 	.word	0x20000018

0801044c <SPI_EndRxTxTransaction>:
 801044c:	b580      	push	{r7, lr}
 801044e:	b088      	sub	sp, #32
 8010450:	af02      	add	r7, sp, #8
 8010452:	60f8      	str	r0, [r7, #12]
 8010454:	60b9      	str	r1, [r7, #8]
 8010456:	607a      	str	r2, [r7, #4]
 8010458:	4b1b      	ldr	r3, [pc, #108]	; (80104c8 <SPI_EndRxTxTransaction+0x7c>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4a1b      	ldr	r2, [pc, #108]	; (80104cc <SPI_EndRxTxTransaction+0x80>)
 801045e:	fba2 2303 	umull	r2, r3, r2, r3
 8010462:	0d5b      	lsrs	r3, r3, #21
 8010464:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010468:	fb02 f303 	mul.w	r3, r2, r3
 801046c:	617b      	str	r3, [r7, #20]
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010476:	d112      	bne.n	801049e <SPI_EndRxTxTransaction+0x52>
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	9300      	str	r3, [sp, #0]
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	2200      	movs	r2, #0
 8010480:	2180      	movs	r1, #128	; 0x80
 8010482:	68f8      	ldr	r0, [r7, #12]
 8010484:	f7ff ff5a 	bl	801033c <SPI_WaitFlagStateUntilTimeout>
 8010488:	4603      	mov	r3, r0
 801048a:	2b00      	cmp	r3, #0
 801048c:	d016      	beq.n	80104bc <SPI_EndRxTxTransaction+0x70>
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010492:	f043 0220 	orr.w	r2, r3, #32
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	655a      	str	r2, [r3, #84]	; 0x54
 801049a:	2303      	movs	r3, #3
 801049c:	e00f      	b.n	80104be <SPI_EndRxTxTransaction+0x72>
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d00a      	beq.n	80104ba <SPI_EndRxTxTransaction+0x6e>
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	3b01      	subs	r3, #1
 80104a8:	617b      	str	r3, [r7, #20]
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	689b      	ldr	r3, [r3, #8]
 80104b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104b4:	2b80      	cmp	r3, #128	; 0x80
 80104b6:	d0f2      	beq.n	801049e <SPI_EndRxTxTransaction+0x52>
 80104b8:	e000      	b.n	80104bc <SPI_EndRxTxTransaction+0x70>
 80104ba:	bf00      	nop
 80104bc:	2300      	movs	r3, #0
 80104be:	4618      	mov	r0, r3
 80104c0:	3718      	adds	r7, #24
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	20000018 	.word	0x20000018
 80104cc:	165e9f81 	.word	0x165e9f81

080104d0 <HAL_TIM_Base_Init>:
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d101      	bne.n	80104e2 <HAL_TIM_Base_Init+0x12>
 80104de:	2301      	movs	r3, #1
 80104e0:	e041      	b.n	8010566 <HAL_TIM_Base_Init+0x96>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d106      	bne.n	80104fc <HAL_TIM_Base_Init+0x2c>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2200      	movs	r2, #0
 80104f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f7fb fa0a 	bl	800b910 <HAL_TIM_Base_MspInit>
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2202      	movs	r2, #2
 8010500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681a      	ldr	r2, [r3, #0]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	3304      	adds	r3, #4
 801050c:	4619      	mov	r1, r3
 801050e:	4610      	mov	r0, r2
 8010510:	f000 fcee 	bl	8010ef0 <TIM_Base_SetConfig>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2201      	movs	r2, #1
 8010518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2201      	movs	r2, #1
 8010520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2201      	movs	r2, #1
 8010528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2201      	movs	r2, #1
 8010530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2201      	movs	r2, #1
 8010538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2201      	movs	r2, #1
 8010540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2201      	movs	r2, #1
 8010548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2201      	movs	r2, #1
 8010550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2201      	movs	r2, #1
 8010558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2201      	movs	r2, #1
 8010560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010564:	2300      	movs	r3, #0
 8010566:	4618      	mov	r0, r3
 8010568:	3708      	adds	r7, #8
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}
	...

08010570 <HAL_TIM_Base_Start_IT>:
 8010570:	b480      	push	{r7}
 8010572:	b085      	sub	sp, #20
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801057e:	b2db      	uxtb	r3, r3
 8010580:	2b01      	cmp	r3, #1
 8010582:	d001      	beq.n	8010588 <HAL_TIM_Base_Start_IT+0x18>
 8010584:	2301      	movs	r3, #1
 8010586:	e04e      	b.n	8010626 <HAL_TIM_Base_Start_IT+0xb6>
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2202      	movs	r2, #2
 801058c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	68da      	ldr	r2, [r3, #12]
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f042 0201 	orr.w	r2, r2, #1
 801059e:	60da      	str	r2, [r3, #12]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	4a23      	ldr	r2, [pc, #140]	; (8010634 <HAL_TIM_Base_Start_IT+0xc4>)
 80105a6:	4293      	cmp	r3, r2
 80105a8:	d022      	beq.n	80105f0 <HAL_TIM_Base_Start_IT+0x80>
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105b2:	d01d      	beq.n	80105f0 <HAL_TIM_Base_Start_IT+0x80>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	4a1f      	ldr	r2, [pc, #124]	; (8010638 <HAL_TIM_Base_Start_IT+0xc8>)
 80105ba:	4293      	cmp	r3, r2
 80105bc:	d018      	beq.n	80105f0 <HAL_TIM_Base_Start_IT+0x80>
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	4a1e      	ldr	r2, [pc, #120]	; (801063c <HAL_TIM_Base_Start_IT+0xcc>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d013      	beq.n	80105f0 <HAL_TIM_Base_Start_IT+0x80>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	4a1c      	ldr	r2, [pc, #112]	; (8010640 <HAL_TIM_Base_Start_IT+0xd0>)
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d00e      	beq.n	80105f0 <HAL_TIM_Base_Start_IT+0x80>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	4a1b      	ldr	r2, [pc, #108]	; (8010644 <HAL_TIM_Base_Start_IT+0xd4>)
 80105d8:	4293      	cmp	r3, r2
 80105da:	d009      	beq.n	80105f0 <HAL_TIM_Base_Start_IT+0x80>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4a19      	ldr	r2, [pc, #100]	; (8010648 <HAL_TIM_Base_Start_IT+0xd8>)
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d004      	beq.n	80105f0 <HAL_TIM_Base_Start_IT+0x80>
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	4a18      	ldr	r2, [pc, #96]	; (801064c <HAL_TIM_Base_Start_IT+0xdc>)
 80105ec:	4293      	cmp	r3, r2
 80105ee:	d111      	bne.n	8010614 <HAL_TIM_Base_Start_IT+0xa4>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	689b      	ldr	r3, [r3, #8]
 80105f6:	f003 0307 	and.w	r3, r3, #7
 80105fa:	60fb      	str	r3, [r7, #12]
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2b06      	cmp	r3, #6
 8010600:	d010      	beq.n	8010624 <HAL_TIM_Base_Start_IT+0xb4>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f042 0201 	orr.w	r2, r2, #1
 8010610:	601a      	str	r2, [r3, #0]
 8010612:	e007      	b.n	8010624 <HAL_TIM_Base_Start_IT+0xb4>
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	681a      	ldr	r2, [r3, #0]
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	f042 0201 	orr.w	r2, r2, #1
 8010622:	601a      	str	r2, [r3, #0]
 8010624:	2300      	movs	r3, #0
 8010626:	4618      	mov	r0, r3
 8010628:	3714      	adds	r7, #20
 801062a:	46bd      	mov	sp, r7
 801062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010630:	4770      	bx	lr
 8010632:	bf00      	nop
 8010634:	40010000 	.word	0x40010000
 8010638:	40000400 	.word	0x40000400
 801063c:	40000800 	.word	0x40000800
 8010640:	40000c00 	.word	0x40000c00
 8010644:	40010400 	.word	0x40010400
 8010648:	40014000 	.word	0x40014000
 801064c:	40001800 	.word	0x40001800

08010650 <HAL_TIM_IC_Init>:
 8010650:	b580      	push	{r7, lr}
 8010652:	b082      	sub	sp, #8
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d101      	bne.n	8010662 <HAL_TIM_IC_Init+0x12>
 801065e:	2301      	movs	r3, #1
 8010660:	e041      	b.n	80106e6 <HAL_TIM_IC_Init+0x96>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010668:	b2db      	uxtb	r3, r3
 801066a:	2b00      	cmp	r3, #0
 801066c:	d106      	bne.n	801067c <HAL_TIM_IC_Init+0x2c>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2200      	movs	r2, #0
 8010672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 f839 	bl	80106ee <HAL_TIM_IC_MspInit>
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2202      	movs	r2, #2
 8010680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	3304      	adds	r3, #4
 801068c:	4619      	mov	r1, r3
 801068e:	4610      	mov	r0, r2
 8010690:	f000 fc2e 	bl	8010ef0 <TIM_Base_SetConfig>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2201      	movs	r2, #1
 8010698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2201      	movs	r2, #1
 80106a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2201      	movs	r2, #1
 80106a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2201      	movs	r2, #1
 80106b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2201      	movs	r2, #1
 80106b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2201      	movs	r2, #1
 80106c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2201      	movs	r2, #1
 80106c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2201      	movs	r2, #1
 80106d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2201      	movs	r2, #1
 80106d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2201      	movs	r2, #1
 80106e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80106e4:	2300      	movs	r3, #0
 80106e6:	4618      	mov	r0, r3
 80106e8:	3708      	adds	r7, #8
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}

080106ee <HAL_TIM_IC_MspInit>:
 80106ee:	b480      	push	{r7}
 80106f0:	b083      	sub	sp, #12
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	6078      	str	r0, [r7, #4]
 80106f6:	bf00      	nop
 80106f8:	370c      	adds	r7, #12
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr
	...

08010704 <HAL_TIM_IC_Start_IT>:
 8010704:	b580      	push	{r7, lr}
 8010706:	b084      	sub	sp, #16
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6039      	str	r1, [r7, #0]
 801070e:	2300      	movs	r3, #0
 8010710:	73fb      	strb	r3, [r7, #15]
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d104      	bne.n	8010722 <HAL_TIM_IC_Start_IT+0x1e>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801071e:	b2db      	uxtb	r3, r3
 8010720:	e013      	b.n	801074a <HAL_TIM_IC_Start_IT+0x46>
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	2b04      	cmp	r3, #4
 8010726:	d104      	bne.n	8010732 <HAL_TIM_IC_Start_IT+0x2e>
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801072e:	b2db      	uxtb	r3, r3
 8010730:	e00b      	b.n	801074a <HAL_TIM_IC_Start_IT+0x46>
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	2b08      	cmp	r3, #8
 8010736:	d104      	bne.n	8010742 <HAL_TIM_IC_Start_IT+0x3e>
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801073e:	b2db      	uxtb	r3, r3
 8010740:	e003      	b.n	801074a <HAL_TIM_IC_Start_IT+0x46>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010748:	b2db      	uxtb	r3, r3
 801074a:	73bb      	strb	r3, [r7, #14]
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d104      	bne.n	801075c <HAL_TIM_IC_Start_IT+0x58>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010758:	b2db      	uxtb	r3, r3
 801075a:	e013      	b.n	8010784 <HAL_TIM_IC_Start_IT+0x80>
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	2b04      	cmp	r3, #4
 8010760:	d104      	bne.n	801076c <HAL_TIM_IC_Start_IT+0x68>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010768:	b2db      	uxtb	r3, r3
 801076a:	e00b      	b.n	8010784 <HAL_TIM_IC_Start_IT+0x80>
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	2b08      	cmp	r3, #8
 8010770:	d104      	bne.n	801077c <HAL_TIM_IC_Start_IT+0x78>
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010778:	b2db      	uxtb	r3, r3
 801077a:	e003      	b.n	8010784 <HAL_TIM_IC_Start_IT+0x80>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010782:	b2db      	uxtb	r3, r3
 8010784:	737b      	strb	r3, [r7, #13]
 8010786:	7bbb      	ldrb	r3, [r7, #14]
 8010788:	2b01      	cmp	r3, #1
 801078a:	d102      	bne.n	8010792 <HAL_TIM_IC_Start_IT+0x8e>
 801078c:	7b7b      	ldrb	r3, [r7, #13]
 801078e:	2b01      	cmp	r3, #1
 8010790:	d001      	beq.n	8010796 <HAL_TIM_IC_Start_IT+0x92>
 8010792:	2301      	movs	r3, #1
 8010794:	e0cc      	b.n	8010930 <HAL_TIM_IC_Start_IT+0x22c>
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d104      	bne.n	80107a6 <HAL_TIM_IC_Start_IT+0xa2>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2202      	movs	r2, #2
 80107a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80107a4:	e013      	b.n	80107ce <HAL_TIM_IC_Start_IT+0xca>
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	2b04      	cmp	r3, #4
 80107aa:	d104      	bne.n	80107b6 <HAL_TIM_IC_Start_IT+0xb2>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2202      	movs	r2, #2
 80107b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80107b4:	e00b      	b.n	80107ce <HAL_TIM_IC_Start_IT+0xca>
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	2b08      	cmp	r3, #8
 80107ba:	d104      	bne.n	80107c6 <HAL_TIM_IC_Start_IT+0xc2>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2202      	movs	r2, #2
 80107c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80107c4:	e003      	b.n	80107ce <HAL_TIM_IC_Start_IT+0xca>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2202      	movs	r2, #2
 80107ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d104      	bne.n	80107de <HAL_TIM_IC_Start_IT+0xda>
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2202      	movs	r2, #2
 80107d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80107dc:	e013      	b.n	8010806 <HAL_TIM_IC_Start_IT+0x102>
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	2b04      	cmp	r3, #4
 80107e2:	d104      	bne.n	80107ee <HAL_TIM_IC_Start_IT+0xea>
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2202      	movs	r2, #2
 80107e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80107ec:	e00b      	b.n	8010806 <HAL_TIM_IC_Start_IT+0x102>
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	2b08      	cmp	r3, #8
 80107f2:	d104      	bne.n	80107fe <HAL_TIM_IC_Start_IT+0xfa>
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2202      	movs	r2, #2
 80107f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80107fc:	e003      	b.n	8010806 <HAL_TIM_IC_Start_IT+0x102>
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2202      	movs	r2, #2
 8010802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	2b0c      	cmp	r3, #12
 801080a:	d841      	bhi.n	8010890 <HAL_TIM_IC_Start_IT+0x18c>
 801080c:	a201      	add	r2, pc, #4	; (adr r2, 8010814 <HAL_TIM_IC_Start_IT+0x110>)
 801080e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010812:	bf00      	nop
 8010814:	08010849 	.word	0x08010849
 8010818:	08010891 	.word	0x08010891
 801081c:	08010891 	.word	0x08010891
 8010820:	08010891 	.word	0x08010891
 8010824:	0801085b 	.word	0x0801085b
 8010828:	08010891 	.word	0x08010891
 801082c:	08010891 	.word	0x08010891
 8010830:	08010891 	.word	0x08010891
 8010834:	0801086d 	.word	0x0801086d
 8010838:	08010891 	.word	0x08010891
 801083c:	08010891 	.word	0x08010891
 8010840:	08010891 	.word	0x08010891
 8010844:	0801087f 	.word	0x0801087f
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	68da      	ldr	r2, [r3, #12]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f042 0202 	orr.w	r2, r2, #2
 8010856:	60da      	str	r2, [r3, #12]
 8010858:	e01d      	b.n	8010896 <HAL_TIM_IC_Start_IT+0x192>
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	68da      	ldr	r2, [r3, #12]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	f042 0204 	orr.w	r2, r2, #4
 8010868:	60da      	str	r2, [r3, #12]
 801086a:	e014      	b.n	8010896 <HAL_TIM_IC_Start_IT+0x192>
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	68da      	ldr	r2, [r3, #12]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f042 0208 	orr.w	r2, r2, #8
 801087a:	60da      	str	r2, [r3, #12]
 801087c:	e00b      	b.n	8010896 <HAL_TIM_IC_Start_IT+0x192>
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	68da      	ldr	r2, [r3, #12]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f042 0210 	orr.w	r2, r2, #16
 801088c:	60da      	str	r2, [r3, #12]
 801088e:	e002      	b.n	8010896 <HAL_TIM_IC_Start_IT+0x192>
 8010890:	2301      	movs	r3, #1
 8010892:	73fb      	strb	r3, [r7, #15]
 8010894:	bf00      	nop
 8010896:	7bfb      	ldrb	r3, [r7, #15]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d148      	bne.n	801092e <HAL_TIM_IC_Start_IT+0x22a>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	2201      	movs	r2, #1
 80108a2:	6839      	ldr	r1, [r7, #0]
 80108a4:	4618      	mov	r0, r3
 80108a6:	f000 fd87 	bl	80113b8 <TIM_CCxChannelCmd>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	4a22      	ldr	r2, [pc, #136]	; (8010938 <HAL_TIM_IC_Start_IT+0x234>)
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d022      	beq.n	80108fa <HAL_TIM_IC_Start_IT+0x1f6>
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108bc:	d01d      	beq.n	80108fa <HAL_TIM_IC_Start_IT+0x1f6>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	4a1e      	ldr	r2, [pc, #120]	; (801093c <HAL_TIM_IC_Start_IT+0x238>)
 80108c4:	4293      	cmp	r3, r2
 80108c6:	d018      	beq.n	80108fa <HAL_TIM_IC_Start_IT+0x1f6>
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	4a1c      	ldr	r2, [pc, #112]	; (8010940 <HAL_TIM_IC_Start_IT+0x23c>)
 80108ce:	4293      	cmp	r3, r2
 80108d0:	d013      	beq.n	80108fa <HAL_TIM_IC_Start_IT+0x1f6>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	4a1b      	ldr	r2, [pc, #108]	; (8010944 <HAL_TIM_IC_Start_IT+0x240>)
 80108d8:	4293      	cmp	r3, r2
 80108da:	d00e      	beq.n	80108fa <HAL_TIM_IC_Start_IT+0x1f6>
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4a19      	ldr	r2, [pc, #100]	; (8010948 <HAL_TIM_IC_Start_IT+0x244>)
 80108e2:	4293      	cmp	r3, r2
 80108e4:	d009      	beq.n	80108fa <HAL_TIM_IC_Start_IT+0x1f6>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	4a18      	ldr	r2, [pc, #96]	; (801094c <HAL_TIM_IC_Start_IT+0x248>)
 80108ec:	4293      	cmp	r3, r2
 80108ee:	d004      	beq.n	80108fa <HAL_TIM_IC_Start_IT+0x1f6>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	4a16      	ldr	r2, [pc, #88]	; (8010950 <HAL_TIM_IC_Start_IT+0x24c>)
 80108f6:	4293      	cmp	r3, r2
 80108f8:	d111      	bne.n	801091e <HAL_TIM_IC_Start_IT+0x21a>
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	689b      	ldr	r3, [r3, #8]
 8010900:	f003 0307 	and.w	r3, r3, #7
 8010904:	60bb      	str	r3, [r7, #8]
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	2b06      	cmp	r3, #6
 801090a:	d010      	beq.n	801092e <HAL_TIM_IC_Start_IT+0x22a>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	681a      	ldr	r2, [r3, #0]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f042 0201 	orr.w	r2, r2, #1
 801091a:	601a      	str	r2, [r3, #0]
 801091c:	e007      	b.n	801092e <HAL_TIM_IC_Start_IT+0x22a>
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	681a      	ldr	r2, [r3, #0]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f042 0201 	orr.w	r2, r2, #1
 801092c:	601a      	str	r2, [r3, #0]
 801092e:	7bfb      	ldrb	r3, [r7, #15]
 8010930:	4618      	mov	r0, r3
 8010932:	3710      	adds	r7, #16
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}
 8010938:	40010000 	.word	0x40010000
 801093c:	40000400 	.word	0x40000400
 8010940:	40000800 	.word	0x40000800
 8010944:	40000c00 	.word	0x40000c00
 8010948:	40010400 	.word	0x40010400
 801094c:	40014000 	.word	0x40014000
 8010950:	40001800 	.word	0x40001800

08010954 <HAL_TIM_IRQHandler>:
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	691b      	ldr	r3, [r3, #16]
 8010962:	f003 0302 	and.w	r3, r3, #2
 8010966:	2b02      	cmp	r3, #2
 8010968:	d122      	bne.n	80109b0 <HAL_TIM_IRQHandler+0x5c>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	f003 0302 	and.w	r3, r3, #2
 8010974:	2b02      	cmp	r3, #2
 8010976:	d11b      	bne.n	80109b0 <HAL_TIM_IRQHandler+0x5c>
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	f06f 0202 	mvn.w	r2, #2
 8010980:	611a      	str	r2, [r3, #16]
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2201      	movs	r2, #1
 8010986:	771a      	strb	r2, [r3, #28]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	699b      	ldr	r3, [r3, #24]
 801098e:	f003 0303 	and.w	r3, r3, #3
 8010992:	2b00      	cmp	r3, #0
 8010994:	d003      	beq.n	801099e <HAL_TIM_IRQHandler+0x4a>
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f7fb f830 	bl	800b9fc <HAL_TIM_IC_CaptureCallback>
 801099c:	e005      	b.n	80109aa <HAL_TIM_IRQHandler+0x56>
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f000 fa88 	bl	8010eb4 <HAL_TIM_OC_DelayElapsedCallback>
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f000 fa8f 	bl	8010ec8 <HAL_TIM_PWM_PulseFinishedCallback>
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2200      	movs	r2, #0
 80109ae:	771a      	strb	r2, [r3, #28]
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	691b      	ldr	r3, [r3, #16]
 80109b6:	f003 0304 	and.w	r3, r3, #4
 80109ba:	2b04      	cmp	r3, #4
 80109bc:	d122      	bne.n	8010a04 <HAL_TIM_IRQHandler+0xb0>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	68db      	ldr	r3, [r3, #12]
 80109c4:	f003 0304 	and.w	r3, r3, #4
 80109c8:	2b04      	cmp	r3, #4
 80109ca:	d11b      	bne.n	8010a04 <HAL_TIM_IRQHandler+0xb0>
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	f06f 0204 	mvn.w	r2, #4
 80109d4:	611a      	str	r2, [r3, #16]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	2202      	movs	r2, #2
 80109da:	771a      	strb	r2, [r3, #28]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	699b      	ldr	r3, [r3, #24]
 80109e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d003      	beq.n	80109f2 <HAL_TIM_IRQHandler+0x9e>
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f7fb f806 	bl	800b9fc <HAL_TIM_IC_CaptureCallback>
 80109f0:	e005      	b.n	80109fe <HAL_TIM_IRQHandler+0xaa>
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 fa5e 	bl	8010eb4 <HAL_TIM_OC_DelayElapsedCallback>
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f000 fa65 	bl	8010ec8 <HAL_TIM_PWM_PulseFinishedCallback>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2200      	movs	r2, #0
 8010a02:	771a      	strb	r2, [r3, #28]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	691b      	ldr	r3, [r3, #16]
 8010a0a:	f003 0308 	and.w	r3, r3, #8
 8010a0e:	2b08      	cmp	r3, #8
 8010a10:	d122      	bne.n	8010a58 <HAL_TIM_IRQHandler+0x104>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	68db      	ldr	r3, [r3, #12]
 8010a18:	f003 0308 	and.w	r3, r3, #8
 8010a1c:	2b08      	cmp	r3, #8
 8010a1e:	d11b      	bne.n	8010a58 <HAL_TIM_IRQHandler+0x104>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	f06f 0208 	mvn.w	r2, #8
 8010a28:	611a      	str	r2, [r3, #16]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2204      	movs	r2, #4
 8010a2e:	771a      	strb	r2, [r3, #28]
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	69db      	ldr	r3, [r3, #28]
 8010a36:	f003 0303 	and.w	r3, r3, #3
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d003      	beq.n	8010a46 <HAL_TIM_IRQHandler+0xf2>
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f7fa ffdc 	bl	800b9fc <HAL_TIM_IC_CaptureCallback>
 8010a44:	e005      	b.n	8010a52 <HAL_TIM_IRQHandler+0xfe>
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f000 fa34 	bl	8010eb4 <HAL_TIM_OC_DelayElapsedCallback>
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f000 fa3b 	bl	8010ec8 <HAL_TIM_PWM_PulseFinishedCallback>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2200      	movs	r2, #0
 8010a56:	771a      	strb	r2, [r3, #28]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	691b      	ldr	r3, [r3, #16]
 8010a5e:	f003 0310 	and.w	r3, r3, #16
 8010a62:	2b10      	cmp	r3, #16
 8010a64:	d122      	bne.n	8010aac <HAL_TIM_IRQHandler+0x158>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	68db      	ldr	r3, [r3, #12]
 8010a6c:	f003 0310 	and.w	r3, r3, #16
 8010a70:	2b10      	cmp	r3, #16
 8010a72:	d11b      	bne.n	8010aac <HAL_TIM_IRQHandler+0x158>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	f06f 0210 	mvn.w	r2, #16
 8010a7c:	611a      	str	r2, [r3, #16]
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2208      	movs	r2, #8
 8010a82:	771a      	strb	r2, [r3, #28]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	69db      	ldr	r3, [r3, #28]
 8010a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d003      	beq.n	8010a9a <HAL_TIM_IRQHandler+0x146>
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f7fa ffb2 	bl	800b9fc <HAL_TIM_IC_CaptureCallback>
 8010a98:	e005      	b.n	8010aa6 <HAL_TIM_IRQHandler+0x152>
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 fa0a 	bl	8010eb4 <HAL_TIM_OC_DelayElapsedCallback>
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f000 fa11 	bl	8010ec8 <HAL_TIM_PWM_PulseFinishedCallback>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	771a      	strb	r2, [r3, #28]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	691b      	ldr	r3, [r3, #16]
 8010ab2:	f003 0301 	and.w	r3, r3, #1
 8010ab6:	2b01      	cmp	r3, #1
 8010ab8:	d10e      	bne.n	8010ad8 <HAL_TIM_IRQHandler+0x184>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	f003 0301 	and.w	r3, r3, #1
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	d107      	bne.n	8010ad8 <HAL_TIM_IRQHandler+0x184>
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f06f 0201 	mvn.w	r2, #1
 8010ad0:	611a      	str	r2, [r3, #16]
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f7fa fb28 	bl	800b128 <HAL_TIM_PeriodElapsedCallback>
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	691b      	ldr	r3, [r3, #16]
 8010ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ae2:	2b80      	cmp	r3, #128	; 0x80
 8010ae4:	d10e      	bne.n	8010b04 <HAL_TIM_IRQHandler+0x1b0>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010af0:	2b80      	cmp	r3, #128	; 0x80
 8010af2:	d107      	bne.n	8010b04 <HAL_TIM_IRQHandler+0x1b0>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010afc:	611a      	str	r2, [r3, #16]
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f000 fd06 	bl	8011510 <HAL_TIMEx_BreakCallback>
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	691b      	ldr	r3, [r3, #16]
 8010b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b0e:	2b40      	cmp	r3, #64	; 0x40
 8010b10:	d10e      	bne.n	8010b30 <HAL_TIM_IRQHandler+0x1dc>
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	68db      	ldr	r3, [r3, #12]
 8010b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b1c:	2b40      	cmp	r3, #64	; 0x40
 8010b1e:	d107      	bne.n	8010b30 <HAL_TIM_IRQHandler+0x1dc>
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010b28:	611a      	str	r2, [r3, #16]
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f000 f9d6 	bl	8010edc <HAL_TIM_TriggerCallback>
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	691b      	ldr	r3, [r3, #16]
 8010b36:	f003 0320 	and.w	r3, r3, #32
 8010b3a:	2b20      	cmp	r3, #32
 8010b3c:	d10e      	bne.n	8010b5c <HAL_TIM_IRQHandler+0x208>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	68db      	ldr	r3, [r3, #12]
 8010b44:	f003 0320 	and.w	r3, r3, #32
 8010b48:	2b20      	cmp	r3, #32
 8010b4a:	d107      	bne.n	8010b5c <HAL_TIM_IRQHandler+0x208>
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f06f 0220 	mvn.w	r2, #32
 8010b54:	611a      	str	r2, [r3, #16]
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f000 fcd0 	bl	80114fc <HAL_TIMEx_CommutCallback>
 8010b5c:	bf00      	nop
 8010b5e:	3708      	adds	r7, #8
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}

08010b64 <HAL_TIM_IC_ConfigChannel>:
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b086      	sub	sp, #24
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	60f8      	str	r0, [r7, #12]
 8010b6c:	60b9      	str	r1, [r7, #8]
 8010b6e:	607a      	str	r2, [r7, #4]
 8010b70:	2300      	movs	r3, #0
 8010b72:	75fb      	strb	r3, [r7, #23]
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010b7a:	2b01      	cmp	r3, #1
 8010b7c:	d101      	bne.n	8010b82 <HAL_TIM_IC_ConfigChannel+0x1e>
 8010b7e:	2302      	movs	r3, #2
 8010b80:	e088      	b.n	8010c94 <HAL_TIM_IC_ConfigChannel+0x130>
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2201      	movs	r2, #1
 8010b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d11b      	bne.n	8010bc8 <HAL_TIM_IC_ConfigChannel+0x64>
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	6818      	ldr	r0, [r3, #0]
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	6819      	ldr	r1, [r3, #0]
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	685a      	ldr	r2, [r3, #4]
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	f000 fa46 	bl	8011030 <TIM_TI1_SetConfig>
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	699a      	ldr	r2, [r3, #24]
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f022 020c 	bic.w	r2, r2, #12
 8010bb2:	619a      	str	r2, [r3, #24]
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	6999      	ldr	r1, [r3, #24]
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	689a      	ldr	r2, [r3, #8]
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	430a      	orrs	r2, r1
 8010bc4:	619a      	str	r2, [r3, #24]
 8010bc6:	e060      	b.n	8010c8a <HAL_TIM_IC_ConfigChannel+0x126>
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2b04      	cmp	r3, #4
 8010bcc:	d11c      	bne.n	8010c08 <HAL_TIM_IC_ConfigChannel+0xa4>
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	6818      	ldr	r0, [r3, #0]
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	6819      	ldr	r1, [r3, #0]
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	685a      	ldr	r2, [r3, #4]
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	f000 faca 	bl	8011176 <TIM_TI2_SetConfig>
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	699a      	ldr	r2, [r3, #24]
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010bf0:	619a      	str	r2, [r3, #24]
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	6999      	ldr	r1, [r3, #24]
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	689b      	ldr	r3, [r3, #8]
 8010bfc:	021a      	lsls	r2, r3, #8
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	430a      	orrs	r2, r1
 8010c04:	619a      	str	r2, [r3, #24]
 8010c06:	e040      	b.n	8010c8a <HAL_TIM_IC_ConfigChannel+0x126>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2b08      	cmp	r3, #8
 8010c0c:	d11b      	bne.n	8010c46 <HAL_TIM_IC_ConfigChannel+0xe2>
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	6818      	ldr	r0, [r3, #0]
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	6819      	ldr	r1, [r3, #0]
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	685a      	ldr	r2, [r3, #4]
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	68db      	ldr	r3, [r3, #12]
 8010c1e:	f000 fb17 	bl	8011250 <TIM_TI3_SetConfig>
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	69da      	ldr	r2, [r3, #28]
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	f022 020c 	bic.w	r2, r2, #12
 8010c30:	61da      	str	r2, [r3, #28]
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	69d9      	ldr	r1, [r3, #28]
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	689a      	ldr	r2, [r3, #8]
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	430a      	orrs	r2, r1
 8010c42:	61da      	str	r2, [r3, #28]
 8010c44:	e021      	b.n	8010c8a <HAL_TIM_IC_ConfigChannel+0x126>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2b0c      	cmp	r3, #12
 8010c4a:	d11c      	bne.n	8010c86 <HAL_TIM_IC_ConfigChannel+0x122>
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	6818      	ldr	r0, [r3, #0]
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	6819      	ldr	r1, [r3, #0]
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	685a      	ldr	r2, [r3, #4]
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	68db      	ldr	r3, [r3, #12]
 8010c5c:	f000 fb34 	bl	80112c8 <TIM_TI4_SetConfig>
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	69da      	ldr	r2, [r3, #28]
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010c6e:	61da      	str	r2, [r3, #28]
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	69d9      	ldr	r1, [r3, #28]
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	689b      	ldr	r3, [r3, #8]
 8010c7a:	021a      	lsls	r2, r3, #8
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	430a      	orrs	r2, r1
 8010c82:	61da      	str	r2, [r3, #28]
 8010c84:	e001      	b.n	8010c8a <HAL_TIM_IC_ConfigChannel+0x126>
 8010c86:	2301      	movs	r3, #1
 8010c88:	75fb      	strb	r3, [r7, #23]
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010c92:	7dfb      	ldrb	r3, [r7, #23]
 8010c94:	4618      	mov	r0, r3
 8010c96:	3718      	adds	r7, #24
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <HAL_TIM_ConfigClockSource>:
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b084      	sub	sp, #16
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	73fb      	strb	r3, [r7, #15]
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010cb0:	2b01      	cmp	r3, #1
 8010cb2:	d101      	bne.n	8010cb8 <HAL_TIM_ConfigClockSource+0x1c>
 8010cb4:	2302      	movs	r3, #2
 8010cb6:	e0b4      	b.n	8010e22 <HAL_TIM_ConfigClockSource+0x186>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2201      	movs	r2, #1
 8010cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2202      	movs	r2, #2
 8010cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	689b      	ldr	r3, [r3, #8]
 8010cce:	60bb      	str	r3, [r7, #8]
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8010cd6:	60bb      	str	r3, [r7, #8]
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010cde:	60bb      	str	r3, [r7, #8]
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	68ba      	ldr	r2, [r7, #8]
 8010ce6:	609a      	str	r2, [r3, #8]
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010cf0:	d03e      	beq.n	8010d70 <HAL_TIM_ConfigClockSource+0xd4>
 8010cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010cf6:	f200 8087 	bhi.w	8010e08 <HAL_TIM_ConfigClockSource+0x16c>
 8010cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010cfe:	f000 8086 	beq.w	8010e0e <HAL_TIM_ConfigClockSource+0x172>
 8010d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d06:	d87f      	bhi.n	8010e08 <HAL_TIM_ConfigClockSource+0x16c>
 8010d08:	2b70      	cmp	r3, #112	; 0x70
 8010d0a:	d01a      	beq.n	8010d42 <HAL_TIM_ConfigClockSource+0xa6>
 8010d0c:	2b70      	cmp	r3, #112	; 0x70
 8010d0e:	d87b      	bhi.n	8010e08 <HAL_TIM_ConfigClockSource+0x16c>
 8010d10:	2b60      	cmp	r3, #96	; 0x60
 8010d12:	d050      	beq.n	8010db6 <HAL_TIM_ConfigClockSource+0x11a>
 8010d14:	2b60      	cmp	r3, #96	; 0x60
 8010d16:	d877      	bhi.n	8010e08 <HAL_TIM_ConfigClockSource+0x16c>
 8010d18:	2b50      	cmp	r3, #80	; 0x50
 8010d1a:	d03c      	beq.n	8010d96 <HAL_TIM_ConfigClockSource+0xfa>
 8010d1c:	2b50      	cmp	r3, #80	; 0x50
 8010d1e:	d873      	bhi.n	8010e08 <HAL_TIM_ConfigClockSource+0x16c>
 8010d20:	2b40      	cmp	r3, #64	; 0x40
 8010d22:	d058      	beq.n	8010dd6 <HAL_TIM_ConfigClockSource+0x13a>
 8010d24:	2b40      	cmp	r3, #64	; 0x40
 8010d26:	d86f      	bhi.n	8010e08 <HAL_TIM_ConfigClockSource+0x16c>
 8010d28:	2b30      	cmp	r3, #48	; 0x30
 8010d2a:	d064      	beq.n	8010df6 <HAL_TIM_ConfigClockSource+0x15a>
 8010d2c:	2b30      	cmp	r3, #48	; 0x30
 8010d2e:	d86b      	bhi.n	8010e08 <HAL_TIM_ConfigClockSource+0x16c>
 8010d30:	2b20      	cmp	r3, #32
 8010d32:	d060      	beq.n	8010df6 <HAL_TIM_ConfigClockSource+0x15a>
 8010d34:	2b20      	cmp	r3, #32
 8010d36:	d867      	bhi.n	8010e08 <HAL_TIM_ConfigClockSource+0x16c>
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d05c      	beq.n	8010df6 <HAL_TIM_ConfigClockSource+0x15a>
 8010d3c:	2b10      	cmp	r3, #16
 8010d3e:	d05a      	beq.n	8010df6 <HAL_TIM_ConfigClockSource+0x15a>
 8010d40:	e062      	b.n	8010e08 <HAL_TIM_ConfigClockSource+0x16c>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6818      	ldr	r0, [r3, #0]
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	6899      	ldr	r1, [r3, #8]
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	685a      	ldr	r2, [r3, #4]
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	f000 fb11 	bl	8011378 <TIM_ETR_SetConfig>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	689b      	ldr	r3, [r3, #8]
 8010d5c:	60bb      	str	r3, [r7, #8]
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010d64:	60bb      	str	r3, [r7, #8]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	68ba      	ldr	r2, [r7, #8]
 8010d6c:	609a      	str	r2, [r3, #8]
 8010d6e:	e04f      	b.n	8010e10 <HAL_TIM_ConfigClockSource+0x174>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6818      	ldr	r0, [r3, #0]
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	6899      	ldr	r1, [r3, #8]
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	685a      	ldr	r2, [r3, #4]
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	68db      	ldr	r3, [r3, #12]
 8010d80:	f000 fafa 	bl	8011378 <TIM_ETR_SetConfig>
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	689a      	ldr	r2, [r3, #8]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010d92:	609a      	str	r2, [r3, #8]
 8010d94:	e03c      	b.n	8010e10 <HAL_TIM_ConfigClockSource+0x174>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6818      	ldr	r0, [r3, #0]
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	6859      	ldr	r1, [r3, #4]
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	68db      	ldr	r3, [r3, #12]
 8010da2:	461a      	mov	r2, r3
 8010da4:	f000 f9b8 	bl	8011118 <TIM_TI1_ConfigInputStage>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2150      	movs	r1, #80	; 0x50
 8010dae:	4618      	mov	r0, r3
 8010db0:	f000 fac7 	bl	8011342 <TIM_ITRx_SetConfig>
 8010db4:	e02c      	b.n	8010e10 <HAL_TIM_ConfigClockSource+0x174>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6818      	ldr	r0, [r3, #0]
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	6859      	ldr	r1, [r3, #4]
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	68db      	ldr	r3, [r3, #12]
 8010dc2:	461a      	mov	r2, r3
 8010dc4:	f000 fa14 	bl	80111f0 <TIM_TI2_ConfigInputStage>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	2160      	movs	r1, #96	; 0x60
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f000 fab7 	bl	8011342 <TIM_ITRx_SetConfig>
 8010dd4:	e01c      	b.n	8010e10 <HAL_TIM_ConfigClockSource+0x174>
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6818      	ldr	r0, [r3, #0]
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	6859      	ldr	r1, [r3, #4]
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	68db      	ldr	r3, [r3, #12]
 8010de2:	461a      	mov	r2, r3
 8010de4:	f000 f998 	bl	8011118 <TIM_TI1_ConfigInputStage>
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	2140      	movs	r1, #64	; 0x40
 8010dee:	4618      	mov	r0, r3
 8010df0:	f000 faa7 	bl	8011342 <TIM_ITRx_SetConfig>
 8010df4:	e00c      	b.n	8010e10 <HAL_TIM_ConfigClockSource+0x174>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	4619      	mov	r1, r3
 8010e00:	4610      	mov	r0, r2
 8010e02:	f000 fa9e 	bl	8011342 <TIM_ITRx_SetConfig>
 8010e06:	e003      	b.n	8010e10 <HAL_TIM_ConfigClockSource+0x174>
 8010e08:	2301      	movs	r3, #1
 8010e0a:	73fb      	strb	r3, [r7, #15]
 8010e0c:	e000      	b.n	8010e10 <HAL_TIM_ConfigClockSource+0x174>
 8010e0e:	bf00      	nop
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2201      	movs	r2, #1
 8010e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010e20:	7bfb      	ldrb	r3, [r7, #15]
 8010e22:	4618      	mov	r0, r3
 8010e24:	3710      	adds	r7, #16
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}
	...

08010e2c <HAL_TIM_ReadCapturedValue>:
 8010e2c:	b480      	push	{r7}
 8010e2e:	b085      	sub	sp, #20
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	6039      	str	r1, [r7, #0]
 8010e36:	2300      	movs	r3, #0
 8010e38:	60fb      	str	r3, [r7, #12]
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	2b0c      	cmp	r3, #12
 8010e3e:	d831      	bhi.n	8010ea4 <HAL_TIM_ReadCapturedValue+0x78>
 8010e40:	a201      	add	r2, pc, #4	; (adr r2, 8010e48 <HAL_TIM_ReadCapturedValue+0x1c>)
 8010e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e46:	bf00      	nop
 8010e48:	08010e7d 	.word	0x08010e7d
 8010e4c:	08010ea5 	.word	0x08010ea5
 8010e50:	08010ea5 	.word	0x08010ea5
 8010e54:	08010ea5 	.word	0x08010ea5
 8010e58:	08010e87 	.word	0x08010e87
 8010e5c:	08010ea5 	.word	0x08010ea5
 8010e60:	08010ea5 	.word	0x08010ea5
 8010e64:	08010ea5 	.word	0x08010ea5
 8010e68:	08010e91 	.word	0x08010e91
 8010e6c:	08010ea5 	.word	0x08010ea5
 8010e70:	08010ea5 	.word	0x08010ea5
 8010e74:	08010ea5 	.word	0x08010ea5
 8010e78:	08010e9b 	.word	0x08010e9b
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e82:	60fb      	str	r3, [r7, #12]
 8010e84:	e00f      	b.n	8010ea6 <HAL_TIM_ReadCapturedValue+0x7a>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e8c:	60fb      	str	r3, [r7, #12]
 8010e8e:	e00a      	b.n	8010ea6 <HAL_TIM_ReadCapturedValue+0x7a>
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e96:	60fb      	str	r3, [r7, #12]
 8010e98:	e005      	b.n	8010ea6 <HAL_TIM_ReadCapturedValue+0x7a>
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ea0:	60fb      	str	r3, [r7, #12]
 8010ea2:	e000      	b.n	8010ea6 <HAL_TIM_ReadCapturedValue+0x7a>
 8010ea4:	bf00      	nop
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3714      	adds	r7, #20
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr

08010eb4 <HAL_TIM_OC_DelayElapsedCallback>:
 8010eb4:	b480      	push	{r7}
 8010eb6:	b083      	sub	sp, #12
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	bf00      	nop
 8010ebe:	370c      	adds	r7, #12
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec6:	4770      	bx	lr

08010ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8010ec8:	b480      	push	{r7}
 8010eca:	b083      	sub	sp, #12
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	bf00      	nop
 8010ed2:	370c      	adds	r7, #12
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eda:	4770      	bx	lr

08010edc <HAL_TIM_TriggerCallback>:
 8010edc:	b480      	push	{r7}
 8010ede:	b083      	sub	sp, #12
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	bf00      	nop
 8010ee6:	370c      	adds	r7, #12
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr

08010ef0 <TIM_Base_SetConfig>:
 8010ef0:	b480      	push	{r7}
 8010ef2:	b085      	sub	sp, #20
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
 8010ef8:	6039      	str	r1, [r7, #0]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	60fb      	str	r3, [r7, #12]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	4a40      	ldr	r2, [pc, #256]	; (8011004 <TIM_Base_SetConfig+0x114>)
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d013      	beq.n	8010f30 <TIM_Base_SetConfig+0x40>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f0e:	d00f      	beq.n	8010f30 <TIM_Base_SetConfig+0x40>
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	4a3d      	ldr	r2, [pc, #244]	; (8011008 <TIM_Base_SetConfig+0x118>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d00b      	beq.n	8010f30 <TIM_Base_SetConfig+0x40>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	4a3c      	ldr	r2, [pc, #240]	; (801100c <TIM_Base_SetConfig+0x11c>)
 8010f1c:	4293      	cmp	r3, r2
 8010f1e:	d007      	beq.n	8010f30 <TIM_Base_SetConfig+0x40>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	4a3b      	ldr	r2, [pc, #236]	; (8011010 <TIM_Base_SetConfig+0x120>)
 8010f24:	4293      	cmp	r3, r2
 8010f26:	d003      	beq.n	8010f30 <TIM_Base_SetConfig+0x40>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	4a3a      	ldr	r2, [pc, #232]	; (8011014 <TIM_Base_SetConfig+0x124>)
 8010f2c:	4293      	cmp	r3, r2
 8010f2e:	d108      	bne.n	8010f42 <TIM_Base_SetConfig+0x52>
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f36:	60fb      	str	r3, [r7, #12]
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	685b      	ldr	r3, [r3, #4]
 8010f3c:	68fa      	ldr	r2, [r7, #12]
 8010f3e:	4313      	orrs	r3, r2
 8010f40:	60fb      	str	r3, [r7, #12]
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	4a2f      	ldr	r2, [pc, #188]	; (8011004 <TIM_Base_SetConfig+0x114>)
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d02b      	beq.n	8010fa2 <TIM_Base_SetConfig+0xb2>
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f50:	d027      	beq.n	8010fa2 <TIM_Base_SetConfig+0xb2>
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	4a2c      	ldr	r2, [pc, #176]	; (8011008 <TIM_Base_SetConfig+0x118>)
 8010f56:	4293      	cmp	r3, r2
 8010f58:	d023      	beq.n	8010fa2 <TIM_Base_SetConfig+0xb2>
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	4a2b      	ldr	r2, [pc, #172]	; (801100c <TIM_Base_SetConfig+0x11c>)
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d01f      	beq.n	8010fa2 <TIM_Base_SetConfig+0xb2>
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	4a2a      	ldr	r2, [pc, #168]	; (8011010 <TIM_Base_SetConfig+0x120>)
 8010f66:	4293      	cmp	r3, r2
 8010f68:	d01b      	beq.n	8010fa2 <TIM_Base_SetConfig+0xb2>
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	4a29      	ldr	r2, [pc, #164]	; (8011014 <TIM_Base_SetConfig+0x124>)
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	d017      	beq.n	8010fa2 <TIM_Base_SetConfig+0xb2>
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	4a28      	ldr	r2, [pc, #160]	; (8011018 <TIM_Base_SetConfig+0x128>)
 8010f76:	4293      	cmp	r3, r2
 8010f78:	d013      	beq.n	8010fa2 <TIM_Base_SetConfig+0xb2>
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	4a27      	ldr	r2, [pc, #156]	; (801101c <TIM_Base_SetConfig+0x12c>)
 8010f7e:	4293      	cmp	r3, r2
 8010f80:	d00f      	beq.n	8010fa2 <TIM_Base_SetConfig+0xb2>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	4a26      	ldr	r2, [pc, #152]	; (8011020 <TIM_Base_SetConfig+0x130>)
 8010f86:	4293      	cmp	r3, r2
 8010f88:	d00b      	beq.n	8010fa2 <TIM_Base_SetConfig+0xb2>
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	4a25      	ldr	r2, [pc, #148]	; (8011024 <TIM_Base_SetConfig+0x134>)
 8010f8e:	4293      	cmp	r3, r2
 8010f90:	d007      	beq.n	8010fa2 <TIM_Base_SetConfig+0xb2>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	4a24      	ldr	r2, [pc, #144]	; (8011028 <TIM_Base_SetConfig+0x138>)
 8010f96:	4293      	cmp	r3, r2
 8010f98:	d003      	beq.n	8010fa2 <TIM_Base_SetConfig+0xb2>
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	4a23      	ldr	r2, [pc, #140]	; (801102c <TIM_Base_SetConfig+0x13c>)
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d108      	bne.n	8010fb4 <TIM_Base_SetConfig+0xc4>
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010fa8:	60fb      	str	r3, [r7, #12]
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	68db      	ldr	r3, [r3, #12]
 8010fae:	68fa      	ldr	r2, [r7, #12]
 8010fb0:	4313      	orrs	r3, r2
 8010fb2:	60fb      	str	r3, [r7, #12]
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	695b      	ldr	r3, [r3, #20]
 8010fbe:	4313      	orrs	r3, r2
 8010fc0:	60fb      	str	r3, [r7, #12]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	68fa      	ldr	r2, [r7, #12]
 8010fc6:	601a      	str	r2, [r3, #0]
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	689a      	ldr	r2, [r3, #8]
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	62da      	str	r2, [r3, #44]	; 0x2c
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	681a      	ldr	r2, [r3, #0]
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	4a0a      	ldr	r2, [pc, #40]	; (8011004 <TIM_Base_SetConfig+0x114>)
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	d003      	beq.n	8010fe8 <TIM_Base_SetConfig+0xf8>
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	4a0c      	ldr	r2, [pc, #48]	; (8011014 <TIM_Base_SetConfig+0x124>)
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	d103      	bne.n	8010ff0 <TIM_Base_SetConfig+0x100>
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	691a      	ldr	r2, [r3, #16]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	631a      	str	r2, [r3, #48]	; 0x30
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2201      	movs	r2, #1
 8010ff4:	615a      	str	r2, [r3, #20]
 8010ff6:	bf00      	nop
 8010ff8:	3714      	adds	r7, #20
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011000:	4770      	bx	lr
 8011002:	bf00      	nop
 8011004:	40010000 	.word	0x40010000
 8011008:	40000400 	.word	0x40000400
 801100c:	40000800 	.word	0x40000800
 8011010:	40000c00 	.word	0x40000c00
 8011014:	40010400 	.word	0x40010400
 8011018:	40014000 	.word	0x40014000
 801101c:	40014400 	.word	0x40014400
 8011020:	40014800 	.word	0x40014800
 8011024:	40001800 	.word	0x40001800
 8011028:	40001c00 	.word	0x40001c00
 801102c:	40002000 	.word	0x40002000

08011030 <TIM_TI1_SetConfig>:
 8011030:	b480      	push	{r7}
 8011032:	b087      	sub	sp, #28
 8011034:	af00      	add	r7, sp, #0
 8011036:	60f8      	str	r0, [r7, #12]
 8011038:	60b9      	str	r1, [r7, #8]
 801103a:	607a      	str	r2, [r7, #4]
 801103c:	603b      	str	r3, [r7, #0]
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	6a1b      	ldr	r3, [r3, #32]
 8011042:	f023 0201 	bic.w	r2, r3, #1
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	621a      	str	r2, [r3, #32]
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	699b      	ldr	r3, [r3, #24]
 801104e:	617b      	str	r3, [r7, #20]
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	6a1b      	ldr	r3, [r3, #32]
 8011054:	613b      	str	r3, [r7, #16]
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	4a28      	ldr	r2, [pc, #160]	; (80110fc <TIM_TI1_SetConfig+0xcc>)
 801105a:	4293      	cmp	r3, r2
 801105c:	d01b      	beq.n	8011096 <TIM_TI1_SetConfig+0x66>
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011064:	d017      	beq.n	8011096 <TIM_TI1_SetConfig+0x66>
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	4a25      	ldr	r2, [pc, #148]	; (8011100 <TIM_TI1_SetConfig+0xd0>)
 801106a:	4293      	cmp	r3, r2
 801106c:	d013      	beq.n	8011096 <TIM_TI1_SetConfig+0x66>
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	4a24      	ldr	r2, [pc, #144]	; (8011104 <TIM_TI1_SetConfig+0xd4>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d00f      	beq.n	8011096 <TIM_TI1_SetConfig+0x66>
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	4a23      	ldr	r2, [pc, #140]	; (8011108 <TIM_TI1_SetConfig+0xd8>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d00b      	beq.n	8011096 <TIM_TI1_SetConfig+0x66>
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	4a22      	ldr	r2, [pc, #136]	; (801110c <TIM_TI1_SetConfig+0xdc>)
 8011082:	4293      	cmp	r3, r2
 8011084:	d007      	beq.n	8011096 <TIM_TI1_SetConfig+0x66>
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	4a21      	ldr	r2, [pc, #132]	; (8011110 <TIM_TI1_SetConfig+0xe0>)
 801108a:	4293      	cmp	r3, r2
 801108c:	d003      	beq.n	8011096 <TIM_TI1_SetConfig+0x66>
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	4a20      	ldr	r2, [pc, #128]	; (8011114 <TIM_TI1_SetConfig+0xe4>)
 8011092:	4293      	cmp	r3, r2
 8011094:	d101      	bne.n	801109a <TIM_TI1_SetConfig+0x6a>
 8011096:	2301      	movs	r3, #1
 8011098:	e000      	b.n	801109c <TIM_TI1_SetConfig+0x6c>
 801109a:	2300      	movs	r3, #0
 801109c:	2b00      	cmp	r3, #0
 801109e:	d008      	beq.n	80110b2 <TIM_TI1_SetConfig+0x82>
 80110a0:	697b      	ldr	r3, [r7, #20]
 80110a2:	f023 0303 	bic.w	r3, r3, #3
 80110a6:	617b      	str	r3, [r7, #20]
 80110a8:	697a      	ldr	r2, [r7, #20]
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	4313      	orrs	r3, r2
 80110ae:	617b      	str	r3, [r7, #20]
 80110b0:	e003      	b.n	80110ba <TIM_TI1_SetConfig+0x8a>
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	f043 0301 	orr.w	r3, r3, #1
 80110b8:	617b      	str	r3, [r7, #20]
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80110c0:	617b      	str	r3, [r7, #20]
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	011b      	lsls	r3, r3, #4
 80110c6:	b2db      	uxtb	r3, r3
 80110c8:	697a      	ldr	r2, [r7, #20]
 80110ca:	4313      	orrs	r3, r2
 80110cc:	617b      	str	r3, [r7, #20]
 80110ce:	693b      	ldr	r3, [r7, #16]
 80110d0:	f023 030a 	bic.w	r3, r3, #10
 80110d4:	613b      	str	r3, [r7, #16]
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	f003 030a 	and.w	r3, r3, #10
 80110dc:	693a      	ldr	r2, [r7, #16]
 80110de:	4313      	orrs	r3, r2
 80110e0:	613b      	str	r3, [r7, #16]
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	697a      	ldr	r2, [r7, #20]
 80110e6:	619a      	str	r2, [r3, #24]
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	693a      	ldr	r2, [r7, #16]
 80110ec:	621a      	str	r2, [r3, #32]
 80110ee:	bf00      	nop
 80110f0:	371c      	adds	r7, #28
 80110f2:	46bd      	mov	sp, r7
 80110f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f8:	4770      	bx	lr
 80110fa:	bf00      	nop
 80110fc:	40010000 	.word	0x40010000
 8011100:	40000400 	.word	0x40000400
 8011104:	40000800 	.word	0x40000800
 8011108:	40000c00 	.word	0x40000c00
 801110c:	40010400 	.word	0x40010400
 8011110:	40014000 	.word	0x40014000
 8011114:	40001800 	.word	0x40001800

08011118 <TIM_TI1_ConfigInputStage>:
 8011118:	b480      	push	{r7}
 801111a:	b087      	sub	sp, #28
 801111c:	af00      	add	r7, sp, #0
 801111e:	60f8      	str	r0, [r7, #12]
 8011120:	60b9      	str	r1, [r7, #8]
 8011122:	607a      	str	r2, [r7, #4]
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	6a1b      	ldr	r3, [r3, #32]
 8011128:	617b      	str	r3, [r7, #20]
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	6a1b      	ldr	r3, [r3, #32]
 801112e:	f023 0201 	bic.w	r2, r3, #1
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	621a      	str	r2, [r3, #32]
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	699b      	ldr	r3, [r3, #24]
 801113a:	613b      	str	r3, [r7, #16]
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011142:	613b      	str	r3, [r7, #16]
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	011b      	lsls	r3, r3, #4
 8011148:	693a      	ldr	r2, [r7, #16]
 801114a:	4313      	orrs	r3, r2
 801114c:	613b      	str	r3, [r7, #16]
 801114e:	697b      	ldr	r3, [r7, #20]
 8011150:	f023 030a 	bic.w	r3, r3, #10
 8011154:	617b      	str	r3, [r7, #20]
 8011156:	697a      	ldr	r2, [r7, #20]
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	4313      	orrs	r3, r2
 801115c:	617b      	str	r3, [r7, #20]
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	693a      	ldr	r2, [r7, #16]
 8011162:	619a      	str	r2, [r3, #24]
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	697a      	ldr	r2, [r7, #20]
 8011168:	621a      	str	r2, [r3, #32]
 801116a:	bf00      	nop
 801116c:	371c      	adds	r7, #28
 801116e:	46bd      	mov	sp, r7
 8011170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011174:	4770      	bx	lr

08011176 <TIM_TI2_SetConfig>:
 8011176:	b480      	push	{r7}
 8011178:	b087      	sub	sp, #28
 801117a:	af00      	add	r7, sp, #0
 801117c:	60f8      	str	r0, [r7, #12]
 801117e:	60b9      	str	r1, [r7, #8]
 8011180:	607a      	str	r2, [r7, #4]
 8011182:	603b      	str	r3, [r7, #0]
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	6a1b      	ldr	r3, [r3, #32]
 8011188:	f023 0210 	bic.w	r2, r3, #16
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	621a      	str	r2, [r3, #32]
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	699b      	ldr	r3, [r3, #24]
 8011194:	617b      	str	r3, [r7, #20]
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	6a1b      	ldr	r3, [r3, #32]
 801119a:	613b      	str	r3, [r7, #16]
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80111a2:	617b      	str	r3, [r7, #20]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	021b      	lsls	r3, r3, #8
 80111a8:	697a      	ldr	r2, [r7, #20]
 80111aa:	4313      	orrs	r3, r2
 80111ac:	617b      	str	r3, [r7, #20]
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80111b4:	617b      	str	r3, [r7, #20]
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	031b      	lsls	r3, r3, #12
 80111ba:	b29b      	uxth	r3, r3
 80111bc:	697a      	ldr	r2, [r7, #20]
 80111be:	4313      	orrs	r3, r2
 80111c0:	617b      	str	r3, [r7, #20]
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80111c8:	613b      	str	r3, [r7, #16]
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	011b      	lsls	r3, r3, #4
 80111ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80111d2:	693a      	ldr	r2, [r7, #16]
 80111d4:	4313      	orrs	r3, r2
 80111d6:	613b      	str	r3, [r7, #16]
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	697a      	ldr	r2, [r7, #20]
 80111dc:	619a      	str	r2, [r3, #24]
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	693a      	ldr	r2, [r7, #16]
 80111e2:	621a      	str	r2, [r3, #32]
 80111e4:	bf00      	nop
 80111e6:	371c      	adds	r7, #28
 80111e8:	46bd      	mov	sp, r7
 80111ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ee:	4770      	bx	lr

080111f0 <TIM_TI2_ConfigInputStage>:
 80111f0:	b480      	push	{r7}
 80111f2:	b087      	sub	sp, #28
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	60f8      	str	r0, [r7, #12]
 80111f8:	60b9      	str	r1, [r7, #8]
 80111fa:	607a      	str	r2, [r7, #4]
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	6a1b      	ldr	r3, [r3, #32]
 8011200:	f023 0210 	bic.w	r2, r3, #16
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	621a      	str	r2, [r3, #32]
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	699b      	ldr	r3, [r3, #24]
 801120c:	617b      	str	r3, [r7, #20]
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	6a1b      	ldr	r3, [r3, #32]
 8011212:	613b      	str	r3, [r7, #16]
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801121a:	617b      	str	r3, [r7, #20]
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	031b      	lsls	r3, r3, #12
 8011220:	697a      	ldr	r2, [r7, #20]
 8011222:	4313      	orrs	r3, r2
 8011224:	617b      	str	r3, [r7, #20]
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801122c:	613b      	str	r3, [r7, #16]
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	011b      	lsls	r3, r3, #4
 8011232:	693a      	ldr	r2, [r7, #16]
 8011234:	4313      	orrs	r3, r2
 8011236:	613b      	str	r3, [r7, #16]
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	697a      	ldr	r2, [r7, #20]
 801123c:	619a      	str	r2, [r3, #24]
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	693a      	ldr	r2, [r7, #16]
 8011242:	621a      	str	r2, [r3, #32]
 8011244:	bf00      	nop
 8011246:	371c      	adds	r7, #28
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr

08011250 <TIM_TI3_SetConfig>:
 8011250:	b480      	push	{r7}
 8011252:	b087      	sub	sp, #28
 8011254:	af00      	add	r7, sp, #0
 8011256:	60f8      	str	r0, [r7, #12]
 8011258:	60b9      	str	r1, [r7, #8]
 801125a:	607a      	str	r2, [r7, #4]
 801125c:	603b      	str	r3, [r7, #0]
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	6a1b      	ldr	r3, [r3, #32]
 8011262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	621a      	str	r2, [r3, #32]
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	69db      	ldr	r3, [r3, #28]
 801126e:	617b      	str	r3, [r7, #20]
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	6a1b      	ldr	r3, [r3, #32]
 8011274:	613b      	str	r3, [r7, #16]
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	f023 0303 	bic.w	r3, r3, #3
 801127c:	617b      	str	r3, [r7, #20]
 801127e:	697a      	ldr	r2, [r7, #20]
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	4313      	orrs	r3, r2
 8011284:	617b      	str	r3, [r7, #20]
 8011286:	697b      	ldr	r3, [r7, #20]
 8011288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801128c:	617b      	str	r3, [r7, #20]
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	011b      	lsls	r3, r3, #4
 8011292:	b2db      	uxtb	r3, r3
 8011294:	697a      	ldr	r2, [r7, #20]
 8011296:	4313      	orrs	r3, r2
 8011298:	617b      	str	r3, [r7, #20]
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80112a0:	613b      	str	r3, [r7, #16]
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	021b      	lsls	r3, r3, #8
 80112a6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80112aa:	693a      	ldr	r2, [r7, #16]
 80112ac:	4313      	orrs	r3, r2
 80112ae:	613b      	str	r3, [r7, #16]
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	697a      	ldr	r2, [r7, #20]
 80112b4:	61da      	str	r2, [r3, #28]
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	693a      	ldr	r2, [r7, #16]
 80112ba:	621a      	str	r2, [r3, #32]
 80112bc:	bf00      	nop
 80112be:	371c      	adds	r7, #28
 80112c0:	46bd      	mov	sp, r7
 80112c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c6:	4770      	bx	lr

080112c8 <TIM_TI4_SetConfig>:
 80112c8:	b480      	push	{r7}
 80112ca:	b087      	sub	sp, #28
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	60f8      	str	r0, [r7, #12]
 80112d0:	60b9      	str	r1, [r7, #8]
 80112d2:	607a      	str	r2, [r7, #4]
 80112d4:	603b      	str	r3, [r7, #0]
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	6a1b      	ldr	r3, [r3, #32]
 80112da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	621a      	str	r2, [r3, #32]
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	69db      	ldr	r3, [r3, #28]
 80112e6:	617b      	str	r3, [r7, #20]
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	6a1b      	ldr	r3, [r3, #32]
 80112ec:	613b      	str	r3, [r7, #16]
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80112f4:	617b      	str	r3, [r7, #20]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	021b      	lsls	r3, r3, #8
 80112fa:	697a      	ldr	r2, [r7, #20]
 80112fc:	4313      	orrs	r3, r2
 80112fe:	617b      	str	r3, [r7, #20]
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011306:	617b      	str	r3, [r7, #20]
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	031b      	lsls	r3, r3, #12
 801130c:	b29b      	uxth	r3, r3
 801130e:	697a      	ldr	r2, [r7, #20]
 8011310:	4313      	orrs	r3, r2
 8011312:	617b      	str	r3, [r7, #20]
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801131a:	613b      	str	r3, [r7, #16]
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	031b      	lsls	r3, r3, #12
 8011320:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8011324:	693a      	ldr	r2, [r7, #16]
 8011326:	4313      	orrs	r3, r2
 8011328:	613b      	str	r3, [r7, #16]
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	697a      	ldr	r2, [r7, #20]
 801132e:	61da      	str	r2, [r3, #28]
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	693a      	ldr	r2, [r7, #16]
 8011334:	621a      	str	r2, [r3, #32]
 8011336:	bf00      	nop
 8011338:	371c      	adds	r7, #28
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr

08011342 <TIM_ITRx_SetConfig>:
 8011342:	b480      	push	{r7}
 8011344:	b085      	sub	sp, #20
 8011346:	af00      	add	r7, sp, #0
 8011348:	6078      	str	r0, [r7, #4]
 801134a:	6039      	str	r1, [r7, #0]
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	689b      	ldr	r3, [r3, #8]
 8011350:	60fb      	str	r3, [r7, #12]
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011358:	60fb      	str	r3, [r7, #12]
 801135a:	683a      	ldr	r2, [r7, #0]
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	4313      	orrs	r3, r2
 8011360:	f043 0307 	orr.w	r3, r3, #7
 8011364:	60fb      	str	r3, [r7, #12]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	68fa      	ldr	r2, [r7, #12]
 801136a:	609a      	str	r2, [r3, #8]
 801136c:	bf00      	nop
 801136e:	3714      	adds	r7, #20
 8011370:	46bd      	mov	sp, r7
 8011372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011376:	4770      	bx	lr

08011378 <TIM_ETR_SetConfig>:
 8011378:	b480      	push	{r7}
 801137a:	b087      	sub	sp, #28
 801137c:	af00      	add	r7, sp, #0
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	607a      	str	r2, [r7, #4]
 8011384:	603b      	str	r3, [r7, #0]
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	689b      	ldr	r3, [r3, #8]
 801138a:	617b      	str	r3, [r7, #20]
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011392:	617b      	str	r3, [r7, #20]
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	021a      	lsls	r2, r3, #8
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	431a      	orrs	r2, r3
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	4313      	orrs	r3, r2
 80113a0:	697a      	ldr	r2, [r7, #20]
 80113a2:	4313      	orrs	r3, r2
 80113a4:	617b      	str	r3, [r7, #20]
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	697a      	ldr	r2, [r7, #20]
 80113aa:	609a      	str	r2, [r3, #8]
 80113ac:	bf00      	nop
 80113ae:	371c      	adds	r7, #28
 80113b0:	46bd      	mov	sp, r7
 80113b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b6:	4770      	bx	lr

080113b8 <TIM_CCxChannelCmd>:
 80113b8:	b480      	push	{r7}
 80113ba:	b087      	sub	sp, #28
 80113bc:	af00      	add	r7, sp, #0
 80113be:	60f8      	str	r0, [r7, #12]
 80113c0:	60b9      	str	r1, [r7, #8]
 80113c2:	607a      	str	r2, [r7, #4]
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	f003 031f 	and.w	r3, r3, #31
 80113ca:	2201      	movs	r2, #1
 80113cc:	fa02 f303 	lsl.w	r3, r2, r3
 80113d0:	617b      	str	r3, [r7, #20]
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	6a1a      	ldr	r2, [r3, #32]
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	43db      	mvns	r3, r3
 80113da:	401a      	ands	r2, r3
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	621a      	str	r2, [r3, #32]
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	6a1a      	ldr	r2, [r3, #32]
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	f003 031f 	and.w	r3, r3, #31
 80113ea:	6879      	ldr	r1, [r7, #4]
 80113ec:	fa01 f303 	lsl.w	r3, r1, r3
 80113f0:	431a      	orrs	r2, r3
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	621a      	str	r2, [r3, #32]
 80113f6:	bf00      	nop
 80113f8:	371c      	adds	r7, #28
 80113fa:	46bd      	mov	sp, r7
 80113fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011400:	4770      	bx	lr
	...

08011404 <HAL_TIMEx_MasterConfigSynchronization>:
 8011404:	b480      	push	{r7}
 8011406:	b085      	sub	sp, #20
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
 801140c:	6039      	str	r1, [r7, #0]
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011414:	2b01      	cmp	r3, #1
 8011416:	d101      	bne.n	801141c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011418:	2302      	movs	r3, #2
 801141a:	e05a      	b.n	80114d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2201      	movs	r2, #1
 8011420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2202      	movs	r2, #2
 8011428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	685b      	ldr	r3, [r3, #4]
 8011432:	60fb      	str	r3, [r7, #12]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	689b      	ldr	r3, [r3, #8]
 801143a:	60bb      	str	r3, [r7, #8]
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011442:	60fb      	str	r3, [r7, #12]
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	68fa      	ldr	r2, [r7, #12]
 801144a:	4313      	orrs	r3, r2
 801144c:	60fb      	str	r3, [r7, #12]
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	68fa      	ldr	r2, [r7, #12]
 8011454:	605a      	str	r2, [r3, #4]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	4a21      	ldr	r2, [pc, #132]	; (80114e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801145c:	4293      	cmp	r3, r2
 801145e:	d022      	beq.n	80114a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011468:	d01d      	beq.n	80114a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	4a1d      	ldr	r2, [pc, #116]	; (80114e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011470:	4293      	cmp	r3, r2
 8011472:	d018      	beq.n	80114a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	4a1b      	ldr	r2, [pc, #108]	; (80114e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801147a:	4293      	cmp	r3, r2
 801147c:	d013      	beq.n	80114a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	4a1a      	ldr	r2, [pc, #104]	; (80114ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011484:	4293      	cmp	r3, r2
 8011486:	d00e      	beq.n	80114a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4a18      	ldr	r2, [pc, #96]	; (80114f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801148e:	4293      	cmp	r3, r2
 8011490:	d009      	beq.n	80114a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	4a17      	ldr	r2, [pc, #92]	; (80114f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011498:	4293      	cmp	r3, r2
 801149a:	d004      	beq.n	80114a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	4a15      	ldr	r2, [pc, #84]	; (80114f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80114a2:	4293      	cmp	r3, r2
 80114a4:	d10c      	bne.n	80114c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114ac:	60bb      	str	r3, [r7, #8]
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	68ba      	ldr	r2, [r7, #8]
 80114b4:	4313      	orrs	r3, r2
 80114b6:	60bb      	str	r3, [r7, #8]
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	68ba      	ldr	r2, [r7, #8]
 80114be:	609a      	str	r2, [r3, #8]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2201      	movs	r2, #1
 80114c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80114d0:	2300      	movs	r3, #0
 80114d2:	4618      	mov	r0, r3
 80114d4:	3714      	adds	r7, #20
 80114d6:	46bd      	mov	sp, r7
 80114d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114dc:	4770      	bx	lr
 80114de:	bf00      	nop
 80114e0:	40010000 	.word	0x40010000
 80114e4:	40000400 	.word	0x40000400
 80114e8:	40000800 	.word	0x40000800
 80114ec:	40000c00 	.word	0x40000c00
 80114f0:	40010400 	.word	0x40010400
 80114f4:	40014000 	.word	0x40014000
 80114f8:	40001800 	.word	0x40001800

080114fc <HAL_TIMEx_CommutCallback>:
 80114fc:	b480      	push	{r7}
 80114fe:	b083      	sub	sp, #12
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	bf00      	nop
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr

08011510 <HAL_TIMEx_BreakCallback>:
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
 8011518:	bf00      	nop
 801151a:	370c      	adds	r7, #12
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr

08011524 <USB_CoreInit>:
 8011524:	b084      	sub	sp, #16
 8011526:	b580      	push	{r7, lr}
 8011528:	b084      	sub	sp, #16
 801152a:	af00      	add	r7, sp, #0
 801152c:	6078      	str	r0, [r7, #4]
 801152e:	f107 001c 	add.w	r0, r7, #28
 8011532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8011536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011538:	2b01      	cmp	r3, #1
 801153a:	d122      	bne.n	8011582 <USB_CoreInit+0x5e>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011540:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	639a      	str	r2, [r3, #56]	; 0x38
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8011550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011554:	687a      	ldr	r2, [r7, #4]
 8011556:	60d3      	str	r3, [r2, #12]
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	68db      	ldr	r3, [r3, #12]
 801155c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	60da      	str	r2, [r3, #12]
 8011564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011566:	2b01      	cmp	r3, #1
 8011568:	d105      	bne.n	8011576 <USB_CoreInit+0x52>
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	68db      	ldr	r3, [r3, #12]
 801156e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	60da      	str	r2, [r3, #12]
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f001 fbee 	bl	8012d58 <USB_CoreReset>
 801157c:	4603      	mov	r3, r0
 801157e:	73fb      	strb	r3, [r7, #15]
 8011580:	e01a      	b.n	80115b8 <USB_CoreInit+0x94>
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	68db      	ldr	r3, [r3, #12]
 8011586:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	60da      	str	r2, [r3, #12]
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f001 fbe2 	bl	8012d58 <USB_CoreReset>
 8011594:	4603      	mov	r3, r0
 8011596:	73fb      	strb	r3, [r7, #15]
 8011598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801159a:	2b00      	cmp	r3, #0
 801159c:	d106      	bne.n	80115ac <USB_CoreInit+0x88>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	639a      	str	r2, [r3, #56]	; 0x38
 80115aa:	e005      	b.n	80115b8 <USB_CoreInit+0x94>
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	639a      	str	r2, [r3, #56]	; 0x38
 80115b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ba:	2b01      	cmp	r3, #1
 80115bc:	d10b      	bne.n	80115d6 <USB_CoreInit+0xb2>
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	689b      	ldr	r3, [r3, #8]
 80115c2:	f043 0206 	orr.w	r2, r3, #6
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	609a      	str	r2, [r3, #8]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	689b      	ldr	r3, [r3, #8]
 80115ce:	f043 0220 	orr.w	r2, r3, #32
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	609a      	str	r2, [r3, #8]
 80115d6:	7bfb      	ldrb	r3, [r7, #15]
 80115d8:	4618      	mov	r0, r3
 80115da:	3710      	adds	r7, #16
 80115dc:	46bd      	mov	sp, r7
 80115de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80115e2:	b004      	add	sp, #16
 80115e4:	4770      	bx	lr
	...

080115e8 <USB_SetTurnaroundTime>:
 80115e8:	b480      	push	{r7}
 80115ea:	b087      	sub	sp, #28
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	60f8      	str	r0, [r7, #12]
 80115f0:	60b9      	str	r1, [r7, #8]
 80115f2:	4613      	mov	r3, r2
 80115f4:	71fb      	strb	r3, [r7, #7]
 80115f6:	79fb      	ldrb	r3, [r7, #7]
 80115f8:	2b02      	cmp	r3, #2
 80115fa:	d165      	bne.n	80116c8 <USB_SetTurnaroundTime+0xe0>
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	4a41      	ldr	r2, [pc, #260]	; (8011704 <USB_SetTurnaroundTime+0x11c>)
 8011600:	4293      	cmp	r3, r2
 8011602:	d906      	bls.n	8011612 <USB_SetTurnaroundTime+0x2a>
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	4a40      	ldr	r2, [pc, #256]	; (8011708 <USB_SetTurnaroundTime+0x120>)
 8011608:	4293      	cmp	r3, r2
 801160a:	d202      	bcs.n	8011612 <USB_SetTurnaroundTime+0x2a>
 801160c:	230f      	movs	r3, #15
 801160e:	617b      	str	r3, [r7, #20]
 8011610:	e062      	b.n	80116d8 <USB_SetTurnaroundTime+0xf0>
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	4a3c      	ldr	r2, [pc, #240]	; (8011708 <USB_SetTurnaroundTime+0x120>)
 8011616:	4293      	cmp	r3, r2
 8011618:	d306      	bcc.n	8011628 <USB_SetTurnaroundTime+0x40>
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	4a3b      	ldr	r2, [pc, #236]	; (801170c <USB_SetTurnaroundTime+0x124>)
 801161e:	4293      	cmp	r3, r2
 8011620:	d202      	bcs.n	8011628 <USB_SetTurnaroundTime+0x40>
 8011622:	230e      	movs	r3, #14
 8011624:	617b      	str	r3, [r7, #20]
 8011626:	e057      	b.n	80116d8 <USB_SetTurnaroundTime+0xf0>
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	4a38      	ldr	r2, [pc, #224]	; (801170c <USB_SetTurnaroundTime+0x124>)
 801162c:	4293      	cmp	r3, r2
 801162e:	d306      	bcc.n	801163e <USB_SetTurnaroundTime+0x56>
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	4a37      	ldr	r2, [pc, #220]	; (8011710 <USB_SetTurnaroundTime+0x128>)
 8011634:	4293      	cmp	r3, r2
 8011636:	d202      	bcs.n	801163e <USB_SetTurnaroundTime+0x56>
 8011638:	230d      	movs	r3, #13
 801163a:	617b      	str	r3, [r7, #20]
 801163c:	e04c      	b.n	80116d8 <USB_SetTurnaroundTime+0xf0>
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	4a33      	ldr	r2, [pc, #204]	; (8011710 <USB_SetTurnaroundTime+0x128>)
 8011642:	4293      	cmp	r3, r2
 8011644:	d306      	bcc.n	8011654 <USB_SetTurnaroundTime+0x6c>
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	4a32      	ldr	r2, [pc, #200]	; (8011714 <USB_SetTurnaroundTime+0x12c>)
 801164a:	4293      	cmp	r3, r2
 801164c:	d802      	bhi.n	8011654 <USB_SetTurnaroundTime+0x6c>
 801164e:	230c      	movs	r3, #12
 8011650:	617b      	str	r3, [r7, #20]
 8011652:	e041      	b.n	80116d8 <USB_SetTurnaroundTime+0xf0>
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	4a2f      	ldr	r2, [pc, #188]	; (8011714 <USB_SetTurnaroundTime+0x12c>)
 8011658:	4293      	cmp	r3, r2
 801165a:	d906      	bls.n	801166a <USB_SetTurnaroundTime+0x82>
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	4a2e      	ldr	r2, [pc, #184]	; (8011718 <USB_SetTurnaroundTime+0x130>)
 8011660:	4293      	cmp	r3, r2
 8011662:	d802      	bhi.n	801166a <USB_SetTurnaroundTime+0x82>
 8011664:	230b      	movs	r3, #11
 8011666:	617b      	str	r3, [r7, #20]
 8011668:	e036      	b.n	80116d8 <USB_SetTurnaroundTime+0xf0>
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	4a2a      	ldr	r2, [pc, #168]	; (8011718 <USB_SetTurnaroundTime+0x130>)
 801166e:	4293      	cmp	r3, r2
 8011670:	d906      	bls.n	8011680 <USB_SetTurnaroundTime+0x98>
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	4a29      	ldr	r2, [pc, #164]	; (801171c <USB_SetTurnaroundTime+0x134>)
 8011676:	4293      	cmp	r3, r2
 8011678:	d802      	bhi.n	8011680 <USB_SetTurnaroundTime+0x98>
 801167a:	230a      	movs	r3, #10
 801167c:	617b      	str	r3, [r7, #20]
 801167e:	e02b      	b.n	80116d8 <USB_SetTurnaroundTime+0xf0>
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	4a26      	ldr	r2, [pc, #152]	; (801171c <USB_SetTurnaroundTime+0x134>)
 8011684:	4293      	cmp	r3, r2
 8011686:	d906      	bls.n	8011696 <USB_SetTurnaroundTime+0xae>
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	4a25      	ldr	r2, [pc, #148]	; (8011720 <USB_SetTurnaroundTime+0x138>)
 801168c:	4293      	cmp	r3, r2
 801168e:	d202      	bcs.n	8011696 <USB_SetTurnaroundTime+0xae>
 8011690:	2309      	movs	r3, #9
 8011692:	617b      	str	r3, [r7, #20]
 8011694:	e020      	b.n	80116d8 <USB_SetTurnaroundTime+0xf0>
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	4a21      	ldr	r2, [pc, #132]	; (8011720 <USB_SetTurnaroundTime+0x138>)
 801169a:	4293      	cmp	r3, r2
 801169c:	d306      	bcc.n	80116ac <USB_SetTurnaroundTime+0xc4>
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	4a20      	ldr	r2, [pc, #128]	; (8011724 <USB_SetTurnaroundTime+0x13c>)
 80116a2:	4293      	cmp	r3, r2
 80116a4:	d802      	bhi.n	80116ac <USB_SetTurnaroundTime+0xc4>
 80116a6:	2308      	movs	r3, #8
 80116a8:	617b      	str	r3, [r7, #20]
 80116aa:	e015      	b.n	80116d8 <USB_SetTurnaroundTime+0xf0>
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	4a1d      	ldr	r2, [pc, #116]	; (8011724 <USB_SetTurnaroundTime+0x13c>)
 80116b0:	4293      	cmp	r3, r2
 80116b2:	d906      	bls.n	80116c2 <USB_SetTurnaroundTime+0xda>
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	4a1c      	ldr	r2, [pc, #112]	; (8011728 <USB_SetTurnaroundTime+0x140>)
 80116b8:	4293      	cmp	r3, r2
 80116ba:	d202      	bcs.n	80116c2 <USB_SetTurnaroundTime+0xda>
 80116bc:	2307      	movs	r3, #7
 80116be:	617b      	str	r3, [r7, #20]
 80116c0:	e00a      	b.n	80116d8 <USB_SetTurnaroundTime+0xf0>
 80116c2:	2306      	movs	r3, #6
 80116c4:	617b      	str	r3, [r7, #20]
 80116c6:	e007      	b.n	80116d8 <USB_SetTurnaroundTime+0xf0>
 80116c8:	79fb      	ldrb	r3, [r7, #7]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d102      	bne.n	80116d4 <USB_SetTurnaroundTime+0xec>
 80116ce:	2309      	movs	r3, #9
 80116d0:	617b      	str	r3, [r7, #20]
 80116d2:	e001      	b.n	80116d8 <USB_SetTurnaroundTime+0xf0>
 80116d4:	2309      	movs	r3, #9
 80116d6:	617b      	str	r3, [r7, #20]
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	68db      	ldr	r3, [r3, #12]
 80116dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	60da      	str	r2, [r3, #12]
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	68da      	ldr	r2, [r3, #12]
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	029b      	lsls	r3, r3, #10
 80116ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80116f0:	431a      	orrs	r2, r3
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	60da      	str	r2, [r3, #12]
 80116f6:	2300      	movs	r3, #0
 80116f8:	4618      	mov	r0, r3
 80116fa:	371c      	adds	r7, #28
 80116fc:	46bd      	mov	sp, r7
 80116fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011702:	4770      	bx	lr
 8011704:	00d8acbf 	.word	0x00d8acbf
 8011708:	00e4e1c0 	.word	0x00e4e1c0
 801170c:	00f42400 	.word	0x00f42400
 8011710:	01067380 	.word	0x01067380
 8011714:	011a499f 	.word	0x011a499f
 8011718:	01312cff 	.word	0x01312cff
 801171c:	014ca43f 	.word	0x014ca43f
 8011720:	016e3600 	.word	0x016e3600
 8011724:	01a6ab1f 	.word	0x01a6ab1f
 8011728:	01e84800 	.word	0x01e84800

0801172c <USB_EnableGlobalInt>:
 801172c:	b480      	push	{r7}
 801172e:	b083      	sub	sp, #12
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	689b      	ldr	r3, [r3, #8]
 8011738:	f043 0201 	orr.w	r2, r3, #1
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	609a      	str	r2, [r3, #8]
 8011740:	2300      	movs	r3, #0
 8011742:	4618      	mov	r0, r3
 8011744:	370c      	adds	r7, #12
 8011746:	46bd      	mov	sp, r7
 8011748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174c:	4770      	bx	lr

0801174e <USB_DisableGlobalInt>:
 801174e:	b480      	push	{r7}
 8011750:	b083      	sub	sp, #12
 8011752:	af00      	add	r7, sp, #0
 8011754:	6078      	str	r0, [r7, #4]
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	689b      	ldr	r3, [r3, #8]
 801175a:	f023 0201 	bic.w	r2, r3, #1
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	609a      	str	r2, [r3, #8]
 8011762:	2300      	movs	r3, #0
 8011764:	4618      	mov	r0, r3
 8011766:	370c      	adds	r7, #12
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr

08011770 <USB_SetCurrentMode>:
 8011770:	b580      	push	{r7, lr}
 8011772:	b084      	sub	sp, #16
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	460b      	mov	r3, r1
 801177a:	70fb      	strb	r3, [r7, #3]
 801177c:	2300      	movs	r3, #0
 801177e:	60fb      	str	r3, [r7, #12]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	68db      	ldr	r3, [r3, #12]
 8011784:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	60da      	str	r2, [r3, #12]
 801178c:	78fb      	ldrb	r3, [r7, #3]
 801178e:	2b01      	cmp	r3, #1
 8011790:	d115      	bne.n	80117be <USB_SetCurrentMode+0x4e>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	68db      	ldr	r3, [r3, #12]
 8011796:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	60da      	str	r2, [r3, #12]
 801179e:	2001      	movs	r0, #1
 80117a0:	f7fa fa66 	bl	800bc70 <HAL_Delay>
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	3301      	adds	r3, #1
 80117a8:	60fb      	str	r3, [r7, #12]
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f001 fa45 	bl	8012c3a <USB_GetMode>
 80117b0:	4603      	mov	r3, r0
 80117b2:	2b01      	cmp	r3, #1
 80117b4:	d01e      	beq.n	80117f4 <USB_SetCurrentMode+0x84>
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2b31      	cmp	r3, #49	; 0x31
 80117ba:	d9f0      	bls.n	801179e <USB_SetCurrentMode+0x2e>
 80117bc:	e01a      	b.n	80117f4 <USB_SetCurrentMode+0x84>
 80117be:	78fb      	ldrb	r3, [r7, #3]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d115      	bne.n	80117f0 <USB_SetCurrentMode+0x80>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	60da      	str	r2, [r3, #12]
 80117d0:	2001      	movs	r0, #1
 80117d2:	f7fa fa4d 	bl	800bc70 <HAL_Delay>
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	3301      	adds	r3, #1
 80117da:	60fb      	str	r3, [r7, #12]
 80117dc:	6878      	ldr	r0, [r7, #4]
 80117de:	f001 fa2c 	bl	8012c3a <USB_GetMode>
 80117e2:	4603      	mov	r3, r0
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d005      	beq.n	80117f4 <USB_SetCurrentMode+0x84>
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	2b31      	cmp	r3, #49	; 0x31
 80117ec:	d9f0      	bls.n	80117d0 <USB_SetCurrentMode+0x60>
 80117ee:	e001      	b.n	80117f4 <USB_SetCurrentMode+0x84>
 80117f0:	2301      	movs	r3, #1
 80117f2:	e005      	b.n	8011800 <USB_SetCurrentMode+0x90>
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	2b32      	cmp	r3, #50	; 0x32
 80117f8:	d101      	bne.n	80117fe <USB_SetCurrentMode+0x8e>
 80117fa:	2301      	movs	r3, #1
 80117fc:	e000      	b.n	8011800 <USB_SetCurrentMode+0x90>
 80117fe:	2300      	movs	r3, #0
 8011800:	4618      	mov	r0, r3
 8011802:	3710      	adds	r7, #16
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}

08011808 <USB_DevInit>:
 8011808:	b084      	sub	sp, #16
 801180a:	b580      	push	{r7, lr}
 801180c:	b086      	sub	sp, #24
 801180e:	af00      	add	r7, sp, #0
 8011810:	6078      	str	r0, [r7, #4]
 8011812:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801181a:	2300      	movs	r3, #0
 801181c:	75fb      	strb	r3, [r7, #23]
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	60fb      	str	r3, [r7, #12]
 8011822:	2300      	movs	r3, #0
 8011824:	613b      	str	r3, [r7, #16]
 8011826:	e009      	b.n	801183c <USB_DevInit+0x34>
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	693b      	ldr	r3, [r7, #16]
 801182c:	3340      	adds	r3, #64	; 0x40
 801182e:	009b      	lsls	r3, r3, #2
 8011830:	4413      	add	r3, r2
 8011832:	2200      	movs	r2, #0
 8011834:	605a      	str	r2, [r3, #4]
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	3301      	adds	r3, #1
 801183a:	613b      	str	r3, [r7, #16]
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	2b0e      	cmp	r3, #14
 8011840:	d9f2      	bls.n	8011828 <USB_DevInit+0x20>
 8011842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011844:	2b00      	cmp	r3, #0
 8011846:	d11c      	bne.n	8011882 <USB_DevInit+0x7a>
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	68fa      	ldr	r2, [r7, #12]
 8011852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011856:	f043 0302 	orr.w	r3, r3, #2
 801185a:	6053      	str	r3, [r2, #4]
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011860:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	639a      	str	r2, [r3, #56]	; 0x38
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801186c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	639a      	str	r2, [r3, #56]	; 0x38
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011878:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	639a      	str	r2, [r3, #56]	; 0x38
 8011880:	e00b      	b.n	801189a <USB_DevInit+0x92>
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011886:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	639a      	str	r2, [r3, #56]	; 0x38
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011892:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	639a      	str	r2, [r3, #56]	; 0x38
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80118a0:	461a      	mov	r2, r3
 80118a2:	2300      	movs	r3, #0
 80118a4:	6013      	str	r3, [r2, #0]
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118ac:	4619      	mov	r1, r3
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118b4:	461a      	mov	r2, r3
 80118b6:	680b      	ldr	r3, [r1, #0]
 80118b8:	6013      	str	r3, [r2, #0]
 80118ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118bc:	2b01      	cmp	r3, #1
 80118be:	d10c      	bne.n	80118da <USB_DevInit+0xd2>
 80118c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d104      	bne.n	80118d0 <USB_DevInit+0xc8>
 80118c6:	2100      	movs	r1, #0
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f000 f965 	bl	8011b98 <USB_SetDevSpeed>
 80118ce:	e008      	b.n	80118e2 <USB_DevInit+0xda>
 80118d0:	2101      	movs	r1, #1
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f000 f960 	bl	8011b98 <USB_SetDevSpeed>
 80118d8:	e003      	b.n	80118e2 <USB_DevInit+0xda>
 80118da:	2103      	movs	r1, #3
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f000 f95b 	bl	8011b98 <USB_SetDevSpeed>
 80118e2:	2110      	movs	r1, #16
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f000 f8f3 	bl	8011ad0 <USB_FlushTxFifo>
 80118ea:	4603      	mov	r3, r0
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d001      	beq.n	80118f4 <USB_DevInit+0xec>
 80118f0:	2301      	movs	r3, #1
 80118f2:	75fb      	strb	r3, [r7, #23]
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f000 f91f 	bl	8011b38 <USB_FlushRxFifo>
 80118fa:	4603      	mov	r3, r0
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d001      	beq.n	8011904 <USB_DevInit+0xfc>
 8011900:	2301      	movs	r3, #1
 8011902:	75fb      	strb	r3, [r7, #23]
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801190a:	461a      	mov	r2, r3
 801190c:	2300      	movs	r3, #0
 801190e:	6113      	str	r3, [r2, #16]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011916:	461a      	mov	r2, r3
 8011918:	2300      	movs	r3, #0
 801191a:	6153      	str	r3, [r2, #20]
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011922:	461a      	mov	r2, r3
 8011924:	2300      	movs	r3, #0
 8011926:	61d3      	str	r3, [r2, #28]
 8011928:	2300      	movs	r3, #0
 801192a:	613b      	str	r3, [r7, #16]
 801192c:	e043      	b.n	80119b6 <USB_DevInit+0x1ae>
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	015a      	lsls	r2, r3, #5
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	4413      	add	r3, r2
 8011936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011944:	d118      	bne.n	8011978 <USB_DevInit+0x170>
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d10a      	bne.n	8011962 <USB_DevInit+0x15a>
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	015a      	lsls	r2, r3, #5
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	4413      	add	r3, r2
 8011954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011958:	461a      	mov	r2, r3
 801195a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801195e:	6013      	str	r3, [r2, #0]
 8011960:	e013      	b.n	801198a <USB_DevInit+0x182>
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	015a      	lsls	r2, r3, #5
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	4413      	add	r3, r2
 801196a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801196e:	461a      	mov	r2, r3
 8011970:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011974:	6013      	str	r3, [r2, #0]
 8011976:	e008      	b.n	801198a <USB_DevInit+0x182>
 8011978:	693b      	ldr	r3, [r7, #16]
 801197a:	015a      	lsls	r2, r3, #5
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	4413      	add	r3, r2
 8011980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011984:	461a      	mov	r2, r3
 8011986:	2300      	movs	r3, #0
 8011988:	6013      	str	r3, [r2, #0]
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	015a      	lsls	r2, r3, #5
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	4413      	add	r3, r2
 8011992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011996:	461a      	mov	r2, r3
 8011998:	2300      	movs	r3, #0
 801199a:	6113      	str	r3, [r2, #16]
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	015a      	lsls	r2, r3, #5
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	4413      	add	r3, r2
 80119a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119a8:	461a      	mov	r2, r3
 80119aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80119ae:	6093      	str	r3, [r2, #8]
 80119b0:	693b      	ldr	r3, [r7, #16]
 80119b2:	3301      	adds	r3, #1
 80119b4:	613b      	str	r3, [r7, #16]
 80119b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b8:	693a      	ldr	r2, [r7, #16]
 80119ba:	429a      	cmp	r2, r3
 80119bc:	d3b7      	bcc.n	801192e <USB_DevInit+0x126>
 80119be:	2300      	movs	r3, #0
 80119c0:	613b      	str	r3, [r7, #16]
 80119c2:	e043      	b.n	8011a4c <USB_DevInit+0x244>
 80119c4:	693b      	ldr	r3, [r7, #16]
 80119c6:	015a      	lsls	r2, r3, #5
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	4413      	add	r3, r2
 80119cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80119d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80119da:	d118      	bne.n	8011a0e <USB_DevInit+0x206>
 80119dc:	693b      	ldr	r3, [r7, #16]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d10a      	bne.n	80119f8 <USB_DevInit+0x1f0>
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	015a      	lsls	r2, r3, #5
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	4413      	add	r3, r2
 80119ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119ee:	461a      	mov	r2, r3
 80119f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80119f4:	6013      	str	r3, [r2, #0]
 80119f6:	e013      	b.n	8011a20 <USB_DevInit+0x218>
 80119f8:	693b      	ldr	r3, [r7, #16]
 80119fa:	015a      	lsls	r2, r3, #5
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	4413      	add	r3, r2
 8011a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a04:	461a      	mov	r2, r3
 8011a06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011a0a:	6013      	str	r3, [r2, #0]
 8011a0c:	e008      	b.n	8011a20 <USB_DevInit+0x218>
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	015a      	lsls	r2, r3, #5
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	4413      	add	r3, r2
 8011a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	6013      	str	r3, [r2, #0]
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	015a      	lsls	r2, r3, #5
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	4413      	add	r3, r2
 8011a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a2c:	461a      	mov	r2, r3
 8011a2e:	2300      	movs	r3, #0
 8011a30:	6113      	str	r3, [r2, #16]
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	015a      	lsls	r2, r3, #5
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	4413      	add	r3, r2
 8011a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a3e:	461a      	mov	r2, r3
 8011a40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011a44:	6093      	str	r3, [r2, #8]
 8011a46:	693b      	ldr	r3, [r7, #16]
 8011a48:	3301      	adds	r3, #1
 8011a4a:	613b      	str	r3, [r7, #16]
 8011a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a4e:	693a      	ldr	r2, [r7, #16]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d3b7      	bcc.n	80119c4 <USB_DevInit+0x1bc>
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a5a:	691b      	ldr	r3, [r3, #16]
 8011a5c:	68fa      	ldr	r2, [r7, #12]
 8011a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011a66:	6113      	str	r3, [r2, #16]
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	619a      	str	r2, [r3, #24]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011a74:	615a      	str	r2, [r3, #20]
 8011a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d105      	bne.n	8011a88 <USB_DevInit+0x280>
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	699b      	ldr	r3, [r3, #24]
 8011a80:	f043 0210 	orr.w	r2, r3, #16
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	619a      	str	r2, [r3, #24]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	699a      	ldr	r2, [r3, #24]
 8011a8c:	4b0f      	ldr	r3, [pc, #60]	; (8011acc <USB_DevInit+0x2c4>)
 8011a8e:	4313      	orrs	r3, r2
 8011a90:	687a      	ldr	r2, [r7, #4]
 8011a92:	6193      	str	r3, [r2, #24]
 8011a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d005      	beq.n	8011aa6 <USB_DevInit+0x29e>
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	699b      	ldr	r3, [r3, #24]
 8011a9e:	f043 0208 	orr.w	r2, r3, #8
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	619a      	str	r2, [r3, #24]
 8011aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011aa8:	2b01      	cmp	r3, #1
 8011aaa:	d107      	bne.n	8011abc <USB_DevInit+0x2b4>
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	699b      	ldr	r3, [r3, #24]
 8011ab0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ab4:	f043 0304 	orr.w	r3, r3, #4
 8011ab8:	687a      	ldr	r2, [r7, #4]
 8011aba:	6193      	str	r3, [r2, #24]
 8011abc:	7dfb      	ldrb	r3, [r7, #23]
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3718      	adds	r7, #24
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011ac8:	b004      	add	sp, #16
 8011aca:	4770      	bx	lr
 8011acc:	803c3800 	.word	0x803c3800

08011ad0 <USB_FlushTxFifo>:
 8011ad0:	b480      	push	{r7}
 8011ad2:	b085      	sub	sp, #20
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	6039      	str	r1, [r7, #0]
 8011ada:	2300      	movs	r3, #0
 8011adc:	60fb      	str	r3, [r7, #12]
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	3301      	adds	r3, #1
 8011ae2:	60fb      	str	r3, [r7, #12]
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	4a13      	ldr	r2, [pc, #76]	; (8011b34 <USB_FlushTxFifo+0x64>)
 8011ae8:	4293      	cmp	r3, r2
 8011aea:	d901      	bls.n	8011af0 <USB_FlushTxFifo+0x20>
 8011aec:	2303      	movs	r3, #3
 8011aee:	e01b      	b.n	8011b28 <USB_FlushTxFifo+0x58>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	691b      	ldr	r3, [r3, #16]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	daf2      	bge.n	8011ade <USB_FlushTxFifo+0xe>
 8011af8:	2300      	movs	r3, #0
 8011afa:	60fb      	str	r3, [r7, #12]
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	019b      	lsls	r3, r3, #6
 8011b00:	f043 0220 	orr.w	r2, r3, #32
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	611a      	str	r2, [r3, #16]
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	60fb      	str	r3, [r7, #12]
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	4a08      	ldr	r2, [pc, #32]	; (8011b34 <USB_FlushTxFifo+0x64>)
 8011b12:	4293      	cmp	r3, r2
 8011b14:	d901      	bls.n	8011b1a <USB_FlushTxFifo+0x4a>
 8011b16:	2303      	movs	r3, #3
 8011b18:	e006      	b.n	8011b28 <USB_FlushTxFifo+0x58>
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	691b      	ldr	r3, [r3, #16]
 8011b1e:	f003 0320 	and.w	r3, r3, #32
 8011b22:	2b20      	cmp	r3, #32
 8011b24:	d0f0      	beq.n	8011b08 <USB_FlushTxFifo+0x38>
 8011b26:	2300      	movs	r3, #0
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3714      	adds	r7, #20
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr
 8011b34:	00030d40 	.word	0x00030d40

08011b38 <USB_FlushRxFifo>:
 8011b38:	b480      	push	{r7}
 8011b3a:	b085      	sub	sp, #20
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	2300      	movs	r3, #0
 8011b42:	60fb      	str	r3, [r7, #12]
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	3301      	adds	r3, #1
 8011b48:	60fb      	str	r3, [r7, #12]
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	4a11      	ldr	r2, [pc, #68]	; (8011b94 <USB_FlushRxFifo+0x5c>)
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	d901      	bls.n	8011b56 <USB_FlushRxFifo+0x1e>
 8011b52:	2303      	movs	r3, #3
 8011b54:	e018      	b.n	8011b88 <USB_FlushRxFifo+0x50>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	691b      	ldr	r3, [r3, #16]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	daf2      	bge.n	8011b44 <USB_FlushRxFifo+0xc>
 8011b5e:	2300      	movs	r3, #0
 8011b60:	60fb      	str	r3, [r7, #12]
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2210      	movs	r2, #16
 8011b66:	611a      	str	r2, [r3, #16]
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	3301      	adds	r3, #1
 8011b6c:	60fb      	str	r3, [r7, #12]
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	4a08      	ldr	r2, [pc, #32]	; (8011b94 <USB_FlushRxFifo+0x5c>)
 8011b72:	4293      	cmp	r3, r2
 8011b74:	d901      	bls.n	8011b7a <USB_FlushRxFifo+0x42>
 8011b76:	2303      	movs	r3, #3
 8011b78:	e006      	b.n	8011b88 <USB_FlushRxFifo+0x50>
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	691b      	ldr	r3, [r3, #16]
 8011b7e:	f003 0310 	and.w	r3, r3, #16
 8011b82:	2b10      	cmp	r3, #16
 8011b84:	d0f0      	beq.n	8011b68 <USB_FlushRxFifo+0x30>
 8011b86:	2300      	movs	r3, #0
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3714      	adds	r7, #20
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr
 8011b94:	00030d40 	.word	0x00030d40

08011b98 <USB_SetDevSpeed>:
 8011b98:	b480      	push	{r7}
 8011b9a:	b085      	sub	sp, #20
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	460b      	mov	r3, r1
 8011ba2:	70fb      	strb	r3, [r7, #3]
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	60fb      	str	r3, [r7, #12]
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011bae:	681a      	ldr	r2, [r3, #0]
 8011bb0:	78fb      	ldrb	r3, [r7, #3]
 8011bb2:	68f9      	ldr	r1, [r7, #12]
 8011bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011bb8:	4313      	orrs	r3, r2
 8011bba:	600b      	str	r3, [r1, #0]
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3714      	adds	r7, #20
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc8:	4770      	bx	lr

08011bca <USB_GetDevSpeed>:
 8011bca:	b480      	push	{r7}
 8011bcc:	b087      	sub	sp, #28
 8011bce:	af00      	add	r7, sp, #0
 8011bd0:	6078      	str	r0, [r7, #4]
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	613b      	str	r3, [r7, #16]
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011bdc:	689b      	ldr	r3, [r3, #8]
 8011bde:	f003 0306 	and.w	r3, r3, #6
 8011be2:	60fb      	str	r3, [r7, #12]
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d102      	bne.n	8011bf0 <USB_GetDevSpeed+0x26>
 8011bea:	2300      	movs	r3, #0
 8011bec:	75fb      	strb	r3, [r7, #23]
 8011bee:	e00a      	b.n	8011c06 <USB_GetDevSpeed+0x3c>
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	2b02      	cmp	r3, #2
 8011bf4:	d002      	beq.n	8011bfc <USB_GetDevSpeed+0x32>
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	2b06      	cmp	r3, #6
 8011bfa:	d102      	bne.n	8011c02 <USB_GetDevSpeed+0x38>
 8011bfc:	2302      	movs	r3, #2
 8011bfe:	75fb      	strb	r3, [r7, #23]
 8011c00:	e001      	b.n	8011c06 <USB_GetDevSpeed+0x3c>
 8011c02:	230f      	movs	r3, #15
 8011c04:	75fb      	strb	r3, [r7, #23]
 8011c06:	7dfb      	ldrb	r3, [r7, #23]
 8011c08:	4618      	mov	r0, r3
 8011c0a:	371c      	adds	r7, #28
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c12:	4770      	bx	lr

08011c14 <USB_ActivateEndpoint>:
 8011c14:	b480      	push	{r7}
 8011c16:	b085      	sub	sp, #20
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6039      	str	r1, [r7, #0]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	60fb      	str	r3, [r7, #12]
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	60bb      	str	r3, [r7, #8]
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	785b      	ldrb	r3, [r3, #1]
 8011c2c:	2b01      	cmp	r3, #1
 8011c2e:	d13a      	bne.n	8011ca6 <USB_ActivateEndpoint+0x92>
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c36:	69da      	ldr	r2, [r3, #28]
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	f003 030f 	and.w	r3, r3, #15
 8011c40:	2101      	movs	r1, #1
 8011c42:	fa01 f303 	lsl.w	r3, r1, r3
 8011c46:	b29b      	uxth	r3, r3
 8011c48:	68f9      	ldr	r1, [r7, #12]
 8011c4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011c4e:	4313      	orrs	r3, r2
 8011c50:	61cb      	str	r3, [r1, #28]
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	015a      	lsls	r2, r3, #5
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	4413      	add	r3, r2
 8011c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d155      	bne.n	8011d14 <USB_ActivateEndpoint+0x100>
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	015a      	lsls	r2, r3, #5
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	4413      	add	r3, r2
 8011c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c74:	681a      	ldr	r2, [r3, #0]
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	791b      	ldrb	r3, [r3, #4]
 8011c82:	049b      	lsls	r3, r3, #18
 8011c84:	4319      	orrs	r1, r3
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	059b      	lsls	r3, r3, #22
 8011c8a:	430b      	orrs	r3, r1
 8011c8c:	4313      	orrs	r3, r2
 8011c8e:	68ba      	ldr	r2, [r7, #8]
 8011c90:	0151      	lsls	r1, r2, #5
 8011c92:	68fa      	ldr	r2, [r7, #12]
 8011c94:	440a      	add	r2, r1
 8011c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011ca2:	6013      	str	r3, [r2, #0]
 8011ca4:	e036      	b.n	8011d14 <USB_ActivateEndpoint+0x100>
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cac:	69da      	ldr	r2, [r3, #28]
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	f003 030f 	and.w	r3, r3, #15
 8011cb6:	2101      	movs	r1, #1
 8011cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8011cbc:	041b      	lsls	r3, r3, #16
 8011cbe:	68f9      	ldr	r1, [r7, #12]
 8011cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011cc4:	4313      	orrs	r3, r2
 8011cc6:	61cb      	str	r3, [r1, #28]
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	015a      	lsls	r2, r3, #5
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	4413      	add	r3, r2
 8011cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d11a      	bne.n	8011d14 <USB_ActivateEndpoint+0x100>
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	015a      	lsls	r2, r3, #5
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	4413      	add	r3, r2
 8011ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cea:	681a      	ldr	r2, [r3, #0]
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	68db      	ldr	r3, [r3, #12]
 8011cf0:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	791b      	ldrb	r3, [r3, #4]
 8011cf8:	049b      	lsls	r3, r3, #18
 8011cfa:	430b      	orrs	r3, r1
 8011cfc:	4313      	orrs	r3, r2
 8011cfe:	68ba      	ldr	r2, [r7, #8]
 8011d00:	0151      	lsls	r1, r2, #5
 8011d02:	68fa      	ldr	r2, [r7, #12]
 8011d04:	440a      	add	r2, r1
 8011d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d12:	6013      	str	r3, [r2, #0]
 8011d14:	2300      	movs	r3, #0
 8011d16:	4618      	mov	r0, r3
 8011d18:	3714      	adds	r7, #20
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d20:	4770      	bx	lr
	...

08011d24 <USB_DeactivateEndpoint>:
 8011d24:	b480      	push	{r7}
 8011d26:	b085      	sub	sp, #20
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
 8011d2c:	6039      	str	r1, [r7, #0]
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	60fb      	str	r3, [r7, #12]
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	781b      	ldrb	r3, [r3, #0]
 8011d36:	60bb      	str	r3, [r7, #8]
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	785b      	ldrb	r3, [r3, #1]
 8011d3c:	2b01      	cmp	r3, #1
 8011d3e:	d161      	bne.n	8011e04 <USB_DeactivateEndpoint+0xe0>
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	015a      	lsls	r2, r3, #5
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	4413      	add	r3, r2
 8011d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011d52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011d56:	d11f      	bne.n	8011d98 <USB_DeactivateEndpoint+0x74>
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	015a      	lsls	r2, r3, #5
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	4413      	add	r3, r2
 8011d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	68ba      	ldr	r2, [r7, #8]
 8011d68:	0151      	lsls	r1, r2, #5
 8011d6a:	68fa      	ldr	r2, [r7, #12]
 8011d6c:	440a      	add	r2, r1
 8011d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011d76:	6013      	str	r3, [r2, #0]
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	015a      	lsls	r2, r3, #5
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	4413      	add	r3, r2
 8011d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	68ba      	ldr	r2, [r7, #8]
 8011d88:	0151      	lsls	r1, r2, #5
 8011d8a:	68fa      	ldr	r2, [r7, #12]
 8011d8c:	440a      	add	r2, r1
 8011d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011d96:	6013      	str	r3, [r2, #0]
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	f003 030f 	and.w	r3, r3, #15
 8011da8:	2101      	movs	r1, #1
 8011daa:	fa01 f303 	lsl.w	r3, r1, r3
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	43db      	mvns	r3, r3
 8011db2:	68f9      	ldr	r1, [r7, #12]
 8011db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011db8:	4013      	ands	r3, r2
 8011dba:	63cb      	str	r3, [r1, #60]	; 0x3c
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011dc2:	69da      	ldr	r2, [r3, #28]
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	f003 030f 	and.w	r3, r3, #15
 8011dcc:	2101      	movs	r1, #1
 8011dce:	fa01 f303 	lsl.w	r3, r1, r3
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	43db      	mvns	r3, r3
 8011dd6:	68f9      	ldr	r1, [r7, #12]
 8011dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011ddc:	4013      	ands	r3, r2
 8011dde:	61cb      	str	r3, [r1, #28]
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	015a      	lsls	r2, r3, #5
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	4413      	add	r3, r2
 8011de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dec:	681a      	ldr	r2, [r3, #0]
 8011dee:	68bb      	ldr	r3, [r7, #8]
 8011df0:	0159      	lsls	r1, r3, #5
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	440b      	add	r3, r1
 8011df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	4b35      	ldr	r3, [pc, #212]	; (8011ed4 <USB_DeactivateEndpoint+0x1b0>)
 8011dfe:	4013      	ands	r3, r2
 8011e00:	600b      	str	r3, [r1, #0]
 8011e02:	e060      	b.n	8011ec6 <USB_DeactivateEndpoint+0x1a2>
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	015a      	lsls	r2, r3, #5
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	4413      	add	r3, r2
 8011e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011e16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011e1a:	d11f      	bne.n	8011e5c <USB_DeactivateEndpoint+0x138>
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	015a      	lsls	r2, r3, #5
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	4413      	add	r3, r2
 8011e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	68ba      	ldr	r2, [r7, #8]
 8011e2c:	0151      	lsls	r1, r2, #5
 8011e2e:	68fa      	ldr	r2, [r7, #12]
 8011e30:	440a      	add	r2, r1
 8011e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011e3a:	6013      	str	r3, [r2, #0]
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	015a      	lsls	r2, r3, #5
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	4413      	add	r3, r2
 8011e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	68ba      	ldr	r2, [r7, #8]
 8011e4c:	0151      	lsls	r1, r2, #5
 8011e4e:	68fa      	ldr	r2, [r7, #12]
 8011e50:	440a      	add	r2, r1
 8011e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011e5a:	6013      	str	r3, [r2, #0]
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	f003 030f 	and.w	r3, r3, #15
 8011e6c:	2101      	movs	r1, #1
 8011e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8011e72:	041b      	lsls	r3, r3, #16
 8011e74:	43db      	mvns	r3, r3
 8011e76:	68f9      	ldr	r1, [r7, #12]
 8011e78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011e7c:	4013      	ands	r3, r2
 8011e7e:	63cb      	str	r3, [r1, #60]	; 0x3c
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e86:	69da      	ldr	r2, [r3, #28]
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	f003 030f 	and.w	r3, r3, #15
 8011e90:	2101      	movs	r1, #1
 8011e92:	fa01 f303 	lsl.w	r3, r1, r3
 8011e96:	041b      	lsls	r3, r3, #16
 8011e98:	43db      	mvns	r3, r3
 8011e9a:	68f9      	ldr	r1, [r7, #12]
 8011e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011ea0:	4013      	ands	r3, r2
 8011ea2:	61cb      	str	r3, [r1, #28]
 8011ea4:	68bb      	ldr	r3, [r7, #8]
 8011ea6:	015a      	lsls	r2, r3, #5
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	4413      	add	r3, r2
 8011eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011eb0:	681a      	ldr	r2, [r3, #0]
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	0159      	lsls	r1, r3, #5
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	440b      	add	r3, r1
 8011eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	4b05      	ldr	r3, [pc, #20]	; (8011ed8 <USB_DeactivateEndpoint+0x1b4>)
 8011ec2:	4013      	ands	r3, r2
 8011ec4:	600b      	str	r3, [r1, #0]
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3714      	adds	r7, #20
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed2:	4770      	bx	lr
 8011ed4:	ec337800 	.word	0xec337800
 8011ed8:	eff37800 	.word	0xeff37800

08011edc <USB_EPStartXfer>:
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b08a      	sub	sp, #40	; 0x28
 8011ee0:	af02      	add	r7, sp, #8
 8011ee2:	60f8      	str	r0, [r7, #12]
 8011ee4:	60b9      	str	r1, [r7, #8]
 8011ee6:	4613      	mov	r3, r2
 8011ee8:	71fb      	strb	r3, [r7, #7]
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	61fb      	str	r3, [r7, #28]
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	781b      	ldrb	r3, [r3, #0]
 8011ef2:	61bb      	str	r3, [r7, #24]
 8011ef4:	68bb      	ldr	r3, [r7, #8]
 8011ef6:	785b      	ldrb	r3, [r3, #1]
 8011ef8:	2b01      	cmp	r3, #1
 8011efa:	f040 815c 	bne.w	80121b6 <USB_EPStartXfer+0x2da>
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	699b      	ldr	r3, [r3, #24]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d132      	bne.n	8011f6c <USB_EPStartXfer+0x90>
 8011f06:	69bb      	ldr	r3, [r7, #24]
 8011f08:	015a      	lsls	r2, r3, #5
 8011f0a:	69fb      	ldr	r3, [r7, #28]
 8011f0c:	4413      	add	r3, r2
 8011f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f12:	691b      	ldr	r3, [r3, #16]
 8011f14:	69ba      	ldr	r2, [r7, #24]
 8011f16:	0151      	lsls	r1, r2, #5
 8011f18:	69fa      	ldr	r2, [r7, #28]
 8011f1a:	440a      	add	r2, r1
 8011f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011f24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011f28:	6113      	str	r3, [r2, #16]
 8011f2a:	69bb      	ldr	r3, [r7, #24]
 8011f2c:	015a      	lsls	r2, r3, #5
 8011f2e:	69fb      	ldr	r3, [r7, #28]
 8011f30:	4413      	add	r3, r2
 8011f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f36:	691b      	ldr	r3, [r3, #16]
 8011f38:	69ba      	ldr	r2, [r7, #24]
 8011f3a:	0151      	lsls	r1, r2, #5
 8011f3c:	69fa      	ldr	r2, [r7, #28]
 8011f3e:	440a      	add	r2, r1
 8011f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011f48:	6113      	str	r3, [r2, #16]
 8011f4a:	69bb      	ldr	r3, [r7, #24]
 8011f4c:	015a      	lsls	r2, r3, #5
 8011f4e:	69fb      	ldr	r3, [r7, #28]
 8011f50:	4413      	add	r3, r2
 8011f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f56:	691b      	ldr	r3, [r3, #16]
 8011f58:	69ba      	ldr	r2, [r7, #24]
 8011f5a:	0151      	lsls	r1, r2, #5
 8011f5c:	69fa      	ldr	r2, [r7, #28]
 8011f5e:	440a      	add	r2, r1
 8011f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f64:	0cdb      	lsrs	r3, r3, #19
 8011f66:	04db      	lsls	r3, r3, #19
 8011f68:	6113      	str	r3, [r2, #16]
 8011f6a:	e074      	b.n	8012056 <USB_EPStartXfer+0x17a>
 8011f6c:	69bb      	ldr	r3, [r7, #24]
 8011f6e:	015a      	lsls	r2, r3, #5
 8011f70:	69fb      	ldr	r3, [r7, #28]
 8011f72:	4413      	add	r3, r2
 8011f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f78:	691b      	ldr	r3, [r3, #16]
 8011f7a:	69ba      	ldr	r2, [r7, #24]
 8011f7c:	0151      	lsls	r1, r2, #5
 8011f7e:	69fa      	ldr	r2, [r7, #28]
 8011f80:	440a      	add	r2, r1
 8011f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f86:	0cdb      	lsrs	r3, r3, #19
 8011f88:	04db      	lsls	r3, r3, #19
 8011f8a:	6113      	str	r3, [r2, #16]
 8011f8c:	69bb      	ldr	r3, [r7, #24]
 8011f8e:	015a      	lsls	r2, r3, #5
 8011f90:	69fb      	ldr	r3, [r7, #28]
 8011f92:	4413      	add	r3, r2
 8011f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f98:	691b      	ldr	r3, [r3, #16]
 8011f9a:	69ba      	ldr	r2, [r7, #24]
 8011f9c:	0151      	lsls	r1, r2, #5
 8011f9e:	69fa      	ldr	r2, [r7, #28]
 8011fa0:	440a      	add	r2, r1
 8011fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011fa6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011faa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011fae:	6113      	str	r3, [r2, #16]
 8011fb0:	69bb      	ldr	r3, [r7, #24]
 8011fb2:	015a      	lsls	r2, r3, #5
 8011fb4:	69fb      	ldr	r3, [r7, #28]
 8011fb6:	4413      	add	r3, r2
 8011fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fbc:	691a      	ldr	r2, [r3, #16]
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	6999      	ldr	r1, [r3, #24]
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	68db      	ldr	r3, [r3, #12]
 8011fc6:	440b      	add	r3, r1
 8011fc8:	1e59      	subs	r1, r3, #1
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	68db      	ldr	r3, [r3, #12]
 8011fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8011fd2:	04d9      	lsls	r1, r3, #19
 8011fd4:	4b9d      	ldr	r3, [pc, #628]	; (801224c <USB_EPStartXfer+0x370>)
 8011fd6:	400b      	ands	r3, r1
 8011fd8:	69b9      	ldr	r1, [r7, #24]
 8011fda:	0148      	lsls	r0, r1, #5
 8011fdc:	69f9      	ldr	r1, [r7, #28]
 8011fde:	4401      	add	r1, r0
 8011fe0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011fe4:	4313      	orrs	r3, r2
 8011fe6:	610b      	str	r3, [r1, #16]
 8011fe8:	69bb      	ldr	r3, [r7, #24]
 8011fea:	015a      	lsls	r2, r3, #5
 8011fec:	69fb      	ldr	r3, [r7, #28]
 8011fee:	4413      	add	r3, r2
 8011ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ff4:	691a      	ldr	r2, [r3, #16]
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	699b      	ldr	r3, [r3, #24]
 8011ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011ffe:	69b9      	ldr	r1, [r7, #24]
 8012000:	0148      	lsls	r0, r1, #5
 8012002:	69f9      	ldr	r1, [r7, #28]
 8012004:	4401      	add	r1, r0
 8012006:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801200a:	4313      	orrs	r3, r2
 801200c:	610b      	str	r3, [r1, #16]
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	791b      	ldrb	r3, [r3, #4]
 8012012:	2b01      	cmp	r3, #1
 8012014:	d11f      	bne.n	8012056 <USB_EPStartXfer+0x17a>
 8012016:	69bb      	ldr	r3, [r7, #24]
 8012018:	015a      	lsls	r2, r3, #5
 801201a:	69fb      	ldr	r3, [r7, #28]
 801201c:	4413      	add	r3, r2
 801201e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012022:	691b      	ldr	r3, [r3, #16]
 8012024:	69ba      	ldr	r2, [r7, #24]
 8012026:	0151      	lsls	r1, r2, #5
 8012028:	69fa      	ldr	r2, [r7, #28]
 801202a:	440a      	add	r2, r1
 801202c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012030:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012034:	6113      	str	r3, [r2, #16]
 8012036:	69bb      	ldr	r3, [r7, #24]
 8012038:	015a      	lsls	r2, r3, #5
 801203a:	69fb      	ldr	r3, [r7, #28]
 801203c:	4413      	add	r3, r2
 801203e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012042:	691b      	ldr	r3, [r3, #16]
 8012044:	69ba      	ldr	r2, [r7, #24]
 8012046:	0151      	lsls	r1, r2, #5
 8012048:	69fa      	ldr	r2, [r7, #28]
 801204a:	440a      	add	r2, r1
 801204c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012050:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012054:	6113      	str	r3, [r2, #16]
 8012056:	79fb      	ldrb	r3, [r7, #7]
 8012058:	2b01      	cmp	r3, #1
 801205a:	d14b      	bne.n	80120f4 <USB_EPStartXfer+0x218>
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	695b      	ldr	r3, [r3, #20]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d009      	beq.n	8012078 <USB_EPStartXfer+0x19c>
 8012064:	69bb      	ldr	r3, [r7, #24]
 8012066:	015a      	lsls	r2, r3, #5
 8012068:	69fb      	ldr	r3, [r7, #28]
 801206a:	4413      	add	r3, r2
 801206c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012070:	461a      	mov	r2, r3
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	695b      	ldr	r3, [r3, #20]
 8012076:	6153      	str	r3, [r2, #20]
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	791b      	ldrb	r3, [r3, #4]
 801207c:	2b01      	cmp	r3, #1
 801207e:	d128      	bne.n	80120d2 <USB_EPStartXfer+0x1f6>
 8012080:	69fb      	ldr	r3, [r7, #28]
 8012082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012086:	689b      	ldr	r3, [r3, #8]
 8012088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801208c:	2b00      	cmp	r3, #0
 801208e:	d110      	bne.n	80120b2 <USB_EPStartXfer+0x1d6>
 8012090:	69bb      	ldr	r3, [r7, #24]
 8012092:	015a      	lsls	r2, r3, #5
 8012094:	69fb      	ldr	r3, [r7, #28]
 8012096:	4413      	add	r3, r2
 8012098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	69ba      	ldr	r2, [r7, #24]
 80120a0:	0151      	lsls	r1, r2, #5
 80120a2:	69fa      	ldr	r2, [r7, #28]
 80120a4:	440a      	add	r2, r1
 80120a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80120aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80120ae:	6013      	str	r3, [r2, #0]
 80120b0:	e00f      	b.n	80120d2 <USB_EPStartXfer+0x1f6>
 80120b2:	69bb      	ldr	r3, [r7, #24]
 80120b4:	015a      	lsls	r2, r3, #5
 80120b6:	69fb      	ldr	r3, [r7, #28]
 80120b8:	4413      	add	r3, r2
 80120ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	69ba      	ldr	r2, [r7, #24]
 80120c2:	0151      	lsls	r1, r2, #5
 80120c4:	69fa      	ldr	r2, [r7, #28]
 80120c6:	440a      	add	r2, r1
 80120c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80120cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80120d0:	6013      	str	r3, [r2, #0]
 80120d2:	69bb      	ldr	r3, [r7, #24]
 80120d4:	015a      	lsls	r2, r3, #5
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	4413      	add	r3, r2
 80120da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	69ba      	ldr	r2, [r7, #24]
 80120e2:	0151      	lsls	r1, r2, #5
 80120e4:	69fa      	ldr	r2, [r7, #28]
 80120e6:	440a      	add	r2, r1
 80120e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80120ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80120f0:	6013      	str	r3, [r2, #0]
 80120f2:	e133      	b.n	801235c <USB_EPStartXfer+0x480>
 80120f4:	69bb      	ldr	r3, [r7, #24]
 80120f6:	015a      	lsls	r2, r3, #5
 80120f8:	69fb      	ldr	r3, [r7, #28]
 80120fa:	4413      	add	r3, r2
 80120fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	69ba      	ldr	r2, [r7, #24]
 8012104:	0151      	lsls	r1, r2, #5
 8012106:	69fa      	ldr	r2, [r7, #28]
 8012108:	440a      	add	r2, r1
 801210a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801210e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012112:	6013      	str	r3, [r2, #0]
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	791b      	ldrb	r3, [r3, #4]
 8012118:	2b01      	cmp	r3, #1
 801211a:	d015      	beq.n	8012148 <USB_EPStartXfer+0x26c>
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	699b      	ldr	r3, [r3, #24]
 8012120:	2b00      	cmp	r3, #0
 8012122:	f000 811b 	beq.w	801235c <USB_EPStartXfer+0x480>
 8012126:	69fb      	ldr	r3, [r7, #28]
 8012128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801212c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	f003 030f 	and.w	r3, r3, #15
 8012136:	2101      	movs	r1, #1
 8012138:	fa01 f303 	lsl.w	r3, r1, r3
 801213c:	69f9      	ldr	r1, [r7, #28]
 801213e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012142:	4313      	orrs	r3, r2
 8012144:	634b      	str	r3, [r1, #52]	; 0x34
 8012146:	e109      	b.n	801235c <USB_EPStartXfer+0x480>
 8012148:	69fb      	ldr	r3, [r7, #28]
 801214a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801214e:	689b      	ldr	r3, [r3, #8]
 8012150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012154:	2b00      	cmp	r3, #0
 8012156:	d110      	bne.n	801217a <USB_EPStartXfer+0x29e>
 8012158:	69bb      	ldr	r3, [r7, #24]
 801215a:	015a      	lsls	r2, r3, #5
 801215c:	69fb      	ldr	r3, [r7, #28]
 801215e:	4413      	add	r3, r2
 8012160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	69ba      	ldr	r2, [r7, #24]
 8012168:	0151      	lsls	r1, r2, #5
 801216a:	69fa      	ldr	r2, [r7, #28]
 801216c:	440a      	add	r2, r1
 801216e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012172:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012176:	6013      	str	r3, [r2, #0]
 8012178:	e00f      	b.n	801219a <USB_EPStartXfer+0x2be>
 801217a:	69bb      	ldr	r3, [r7, #24]
 801217c:	015a      	lsls	r2, r3, #5
 801217e:	69fb      	ldr	r3, [r7, #28]
 8012180:	4413      	add	r3, r2
 8012182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	69ba      	ldr	r2, [r7, #24]
 801218a:	0151      	lsls	r1, r2, #5
 801218c:	69fa      	ldr	r2, [r7, #28]
 801218e:	440a      	add	r2, r1
 8012190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012198:	6013      	str	r3, [r2, #0]
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	6919      	ldr	r1, [r3, #16]
 801219e:	68bb      	ldr	r3, [r7, #8]
 80121a0:	781a      	ldrb	r2, [r3, #0]
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	699b      	ldr	r3, [r3, #24]
 80121a6:	b298      	uxth	r0, r3
 80121a8:	79fb      	ldrb	r3, [r7, #7]
 80121aa:	9300      	str	r3, [sp, #0]
 80121ac:	4603      	mov	r3, r0
 80121ae:	68f8      	ldr	r0, [r7, #12]
 80121b0:	f000 fade 	bl	8012770 <USB_WritePacket>
 80121b4:	e0d2      	b.n	801235c <USB_EPStartXfer+0x480>
 80121b6:	69bb      	ldr	r3, [r7, #24]
 80121b8:	015a      	lsls	r2, r3, #5
 80121ba:	69fb      	ldr	r3, [r7, #28]
 80121bc:	4413      	add	r3, r2
 80121be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121c2:	691b      	ldr	r3, [r3, #16]
 80121c4:	69ba      	ldr	r2, [r7, #24]
 80121c6:	0151      	lsls	r1, r2, #5
 80121c8:	69fa      	ldr	r2, [r7, #28]
 80121ca:	440a      	add	r2, r1
 80121cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80121d0:	0cdb      	lsrs	r3, r3, #19
 80121d2:	04db      	lsls	r3, r3, #19
 80121d4:	6113      	str	r3, [r2, #16]
 80121d6:	69bb      	ldr	r3, [r7, #24]
 80121d8:	015a      	lsls	r2, r3, #5
 80121da:	69fb      	ldr	r3, [r7, #28]
 80121dc:	4413      	add	r3, r2
 80121de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121e2:	691b      	ldr	r3, [r3, #16]
 80121e4:	69ba      	ldr	r2, [r7, #24]
 80121e6:	0151      	lsls	r1, r2, #5
 80121e8:	69fa      	ldr	r2, [r7, #28]
 80121ea:	440a      	add	r2, r1
 80121ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80121f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80121f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80121f8:	6113      	str	r3, [r2, #16]
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	699b      	ldr	r3, [r3, #24]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d126      	bne.n	8012250 <USB_EPStartXfer+0x374>
 8012202:	69bb      	ldr	r3, [r7, #24]
 8012204:	015a      	lsls	r2, r3, #5
 8012206:	69fb      	ldr	r3, [r7, #28]
 8012208:	4413      	add	r3, r2
 801220a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801220e:	691a      	ldr	r2, [r3, #16]
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	68db      	ldr	r3, [r3, #12]
 8012214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012218:	69b9      	ldr	r1, [r7, #24]
 801221a:	0148      	lsls	r0, r1, #5
 801221c:	69f9      	ldr	r1, [r7, #28]
 801221e:	4401      	add	r1, r0
 8012220:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012224:	4313      	orrs	r3, r2
 8012226:	610b      	str	r3, [r1, #16]
 8012228:	69bb      	ldr	r3, [r7, #24]
 801222a:	015a      	lsls	r2, r3, #5
 801222c:	69fb      	ldr	r3, [r7, #28]
 801222e:	4413      	add	r3, r2
 8012230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012234:	691b      	ldr	r3, [r3, #16]
 8012236:	69ba      	ldr	r2, [r7, #24]
 8012238:	0151      	lsls	r1, r2, #5
 801223a:	69fa      	ldr	r2, [r7, #28]
 801223c:	440a      	add	r2, r1
 801223e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012242:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012246:	6113      	str	r3, [r2, #16]
 8012248:	e03a      	b.n	80122c0 <USB_EPStartXfer+0x3e4>
 801224a:	bf00      	nop
 801224c:	1ff80000 	.word	0x1ff80000
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	699a      	ldr	r2, [r3, #24]
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	68db      	ldr	r3, [r3, #12]
 8012258:	4413      	add	r3, r2
 801225a:	1e5a      	subs	r2, r3, #1
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	68db      	ldr	r3, [r3, #12]
 8012260:	fbb2 f3f3 	udiv	r3, r2, r3
 8012264:	82fb      	strh	r3, [r7, #22]
 8012266:	68bb      	ldr	r3, [r7, #8]
 8012268:	68db      	ldr	r3, [r3, #12]
 801226a:	8afa      	ldrh	r2, [r7, #22]
 801226c:	fb03 f202 	mul.w	r2, r3, r2
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	61da      	str	r2, [r3, #28]
 8012274:	69bb      	ldr	r3, [r7, #24]
 8012276:	015a      	lsls	r2, r3, #5
 8012278:	69fb      	ldr	r3, [r7, #28]
 801227a:	4413      	add	r3, r2
 801227c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012280:	691a      	ldr	r2, [r3, #16]
 8012282:	8afb      	ldrh	r3, [r7, #22]
 8012284:	04d9      	lsls	r1, r3, #19
 8012286:	4b38      	ldr	r3, [pc, #224]	; (8012368 <USB_EPStartXfer+0x48c>)
 8012288:	400b      	ands	r3, r1
 801228a:	69b9      	ldr	r1, [r7, #24]
 801228c:	0148      	lsls	r0, r1, #5
 801228e:	69f9      	ldr	r1, [r7, #28]
 8012290:	4401      	add	r1, r0
 8012292:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012296:	4313      	orrs	r3, r2
 8012298:	610b      	str	r3, [r1, #16]
 801229a:	69bb      	ldr	r3, [r7, #24]
 801229c:	015a      	lsls	r2, r3, #5
 801229e:	69fb      	ldr	r3, [r7, #28]
 80122a0:	4413      	add	r3, r2
 80122a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122a6:	691a      	ldr	r2, [r3, #16]
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	69db      	ldr	r3, [r3, #28]
 80122ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80122b0:	69b9      	ldr	r1, [r7, #24]
 80122b2:	0148      	lsls	r0, r1, #5
 80122b4:	69f9      	ldr	r1, [r7, #28]
 80122b6:	4401      	add	r1, r0
 80122b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80122bc:	4313      	orrs	r3, r2
 80122be:	610b      	str	r3, [r1, #16]
 80122c0:	79fb      	ldrb	r3, [r7, #7]
 80122c2:	2b01      	cmp	r3, #1
 80122c4:	d10d      	bne.n	80122e2 <USB_EPStartXfer+0x406>
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	691b      	ldr	r3, [r3, #16]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d009      	beq.n	80122e2 <USB_EPStartXfer+0x406>
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	6919      	ldr	r1, [r3, #16]
 80122d2:	69bb      	ldr	r3, [r7, #24]
 80122d4:	015a      	lsls	r2, r3, #5
 80122d6:	69fb      	ldr	r3, [r7, #28]
 80122d8:	4413      	add	r3, r2
 80122da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122de:	460a      	mov	r2, r1
 80122e0:	615a      	str	r2, [r3, #20]
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	791b      	ldrb	r3, [r3, #4]
 80122e6:	2b01      	cmp	r3, #1
 80122e8:	d128      	bne.n	801233c <USB_EPStartXfer+0x460>
 80122ea:	69fb      	ldr	r3, [r7, #28]
 80122ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122f0:	689b      	ldr	r3, [r3, #8]
 80122f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d110      	bne.n	801231c <USB_EPStartXfer+0x440>
 80122fa:	69bb      	ldr	r3, [r7, #24]
 80122fc:	015a      	lsls	r2, r3, #5
 80122fe:	69fb      	ldr	r3, [r7, #28]
 8012300:	4413      	add	r3, r2
 8012302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	69ba      	ldr	r2, [r7, #24]
 801230a:	0151      	lsls	r1, r2, #5
 801230c:	69fa      	ldr	r2, [r7, #28]
 801230e:	440a      	add	r2, r1
 8012310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012318:	6013      	str	r3, [r2, #0]
 801231a:	e00f      	b.n	801233c <USB_EPStartXfer+0x460>
 801231c:	69bb      	ldr	r3, [r7, #24]
 801231e:	015a      	lsls	r2, r3, #5
 8012320:	69fb      	ldr	r3, [r7, #28]
 8012322:	4413      	add	r3, r2
 8012324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	69ba      	ldr	r2, [r7, #24]
 801232c:	0151      	lsls	r1, r2, #5
 801232e:	69fa      	ldr	r2, [r7, #28]
 8012330:	440a      	add	r2, r1
 8012332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801233a:	6013      	str	r3, [r2, #0]
 801233c:	69bb      	ldr	r3, [r7, #24]
 801233e:	015a      	lsls	r2, r3, #5
 8012340:	69fb      	ldr	r3, [r7, #28]
 8012342:	4413      	add	r3, r2
 8012344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	69ba      	ldr	r2, [r7, #24]
 801234c:	0151      	lsls	r1, r2, #5
 801234e:	69fa      	ldr	r2, [r7, #28]
 8012350:	440a      	add	r2, r1
 8012352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012356:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801235a:	6013      	str	r3, [r2, #0]
 801235c:	2300      	movs	r3, #0
 801235e:	4618      	mov	r0, r3
 8012360:	3720      	adds	r7, #32
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}
 8012366:	bf00      	nop
 8012368:	1ff80000 	.word	0x1ff80000

0801236c <USB_EP0StartXfer>:
 801236c:	b480      	push	{r7}
 801236e:	b087      	sub	sp, #28
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	4613      	mov	r3, r2
 8012378:	71fb      	strb	r3, [r7, #7]
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	617b      	str	r3, [r7, #20]
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	781b      	ldrb	r3, [r3, #0]
 8012382:	613b      	str	r3, [r7, #16]
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	785b      	ldrb	r3, [r3, #1]
 8012388:	2b01      	cmp	r3, #1
 801238a:	f040 80ce 	bne.w	801252a <USB_EP0StartXfer+0x1be>
 801238e:	68bb      	ldr	r3, [r7, #8]
 8012390:	699b      	ldr	r3, [r3, #24]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d132      	bne.n	80123fc <USB_EP0StartXfer+0x90>
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	015a      	lsls	r2, r3, #5
 801239a:	697b      	ldr	r3, [r7, #20]
 801239c:	4413      	add	r3, r2
 801239e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123a2:	691b      	ldr	r3, [r3, #16]
 80123a4:	693a      	ldr	r2, [r7, #16]
 80123a6:	0151      	lsls	r1, r2, #5
 80123a8:	697a      	ldr	r2, [r7, #20]
 80123aa:	440a      	add	r2, r1
 80123ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80123b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80123b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80123b8:	6113      	str	r3, [r2, #16]
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	015a      	lsls	r2, r3, #5
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	4413      	add	r3, r2
 80123c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123c6:	691b      	ldr	r3, [r3, #16]
 80123c8:	693a      	ldr	r2, [r7, #16]
 80123ca:	0151      	lsls	r1, r2, #5
 80123cc:	697a      	ldr	r2, [r7, #20]
 80123ce:	440a      	add	r2, r1
 80123d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80123d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80123d8:	6113      	str	r3, [r2, #16]
 80123da:	693b      	ldr	r3, [r7, #16]
 80123dc:	015a      	lsls	r2, r3, #5
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	4413      	add	r3, r2
 80123e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123e6:	691b      	ldr	r3, [r3, #16]
 80123e8:	693a      	ldr	r2, [r7, #16]
 80123ea:	0151      	lsls	r1, r2, #5
 80123ec:	697a      	ldr	r2, [r7, #20]
 80123ee:	440a      	add	r2, r1
 80123f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80123f4:	0cdb      	lsrs	r3, r3, #19
 80123f6:	04db      	lsls	r3, r3, #19
 80123f8:	6113      	str	r3, [r2, #16]
 80123fa:	e04e      	b.n	801249a <USB_EP0StartXfer+0x12e>
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	015a      	lsls	r2, r3, #5
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	4413      	add	r3, r2
 8012404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012408:	691b      	ldr	r3, [r3, #16]
 801240a:	693a      	ldr	r2, [r7, #16]
 801240c:	0151      	lsls	r1, r2, #5
 801240e:	697a      	ldr	r2, [r7, #20]
 8012410:	440a      	add	r2, r1
 8012412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012416:	0cdb      	lsrs	r3, r3, #19
 8012418:	04db      	lsls	r3, r3, #19
 801241a:	6113      	str	r3, [r2, #16]
 801241c:	693b      	ldr	r3, [r7, #16]
 801241e:	015a      	lsls	r2, r3, #5
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	4413      	add	r3, r2
 8012424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012428:	691b      	ldr	r3, [r3, #16]
 801242a:	693a      	ldr	r2, [r7, #16]
 801242c:	0151      	lsls	r1, r2, #5
 801242e:	697a      	ldr	r2, [r7, #20]
 8012430:	440a      	add	r2, r1
 8012432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012436:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801243a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801243e:	6113      	str	r3, [r2, #16]
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	699a      	ldr	r2, [r3, #24]
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	68db      	ldr	r3, [r3, #12]
 8012448:	429a      	cmp	r2, r3
 801244a:	d903      	bls.n	8012454 <USB_EP0StartXfer+0xe8>
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	68da      	ldr	r2, [r3, #12]
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	619a      	str	r2, [r3, #24]
 8012454:	693b      	ldr	r3, [r7, #16]
 8012456:	015a      	lsls	r2, r3, #5
 8012458:	697b      	ldr	r3, [r7, #20]
 801245a:	4413      	add	r3, r2
 801245c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012460:	691b      	ldr	r3, [r3, #16]
 8012462:	693a      	ldr	r2, [r7, #16]
 8012464:	0151      	lsls	r1, r2, #5
 8012466:	697a      	ldr	r2, [r7, #20]
 8012468:	440a      	add	r2, r1
 801246a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801246e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012472:	6113      	str	r3, [r2, #16]
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	015a      	lsls	r2, r3, #5
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	4413      	add	r3, r2
 801247c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012480:	691a      	ldr	r2, [r3, #16]
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	699b      	ldr	r3, [r3, #24]
 8012486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801248a:	6939      	ldr	r1, [r7, #16]
 801248c:	0148      	lsls	r0, r1, #5
 801248e:	6979      	ldr	r1, [r7, #20]
 8012490:	4401      	add	r1, r0
 8012492:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012496:	4313      	orrs	r3, r2
 8012498:	610b      	str	r3, [r1, #16]
 801249a:	79fb      	ldrb	r3, [r7, #7]
 801249c:	2b01      	cmp	r3, #1
 801249e:	d11e      	bne.n	80124de <USB_EP0StartXfer+0x172>
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	695b      	ldr	r3, [r3, #20]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d009      	beq.n	80124bc <USB_EP0StartXfer+0x150>
 80124a8:	693b      	ldr	r3, [r7, #16]
 80124aa:	015a      	lsls	r2, r3, #5
 80124ac:	697b      	ldr	r3, [r7, #20]
 80124ae:	4413      	add	r3, r2
 80124b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124b4:	461a      	mov	r2, r3
 80124b6:	68bb      	ldr	r3, [r7, #8]
 80124b8:	695b      	ldr	r3, [r3, #20]
 80124ba:	6153      	str	r3, [r2, #20]
 80124bc:	693b      	ldr	r3, [r7, #16]
 80124be:	015a      	lsls	r2, r3, #5
 80124c0:	697b      	ldr	r3, [r7, #20]
 80124c2:	4413      	add	r3, r2
 80124c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	693a      	ldr	r2, [r7, #16]
 80124cc:	0151      	lsls	r1, r2, #5
 80124ce:	697a      	ldr	r2, [r7, #20]
 80124d0:	440a      	add	r2, r1
 80124d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80124da:	6013      	str	r3, [r2, #0]
 80124dc:	e097      	b.n	801260e <USB_EP0StartXfer+0x2a2>
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	015a      	lsls	r2, r3, #5
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	4413      	add	r3, r2
 80124e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	693a      	ldr	r2, [r7, #16]
 80124ee:	0151      	lsls	r1, r2, #5
 80124f0:	697a      	ldr	r2, [r7, #20]
 80124f2:	440a      	add	r2, r1
 80124f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80124fc:	6013      	str	r3, [r2, #0]
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	699b      	ldr	r3, [r3, #24]
 8012502:	2b00      	cmp	r3, #0
 8012504:	f000 8083 	beq.w	801260e <USB_EP0StartXfer+0x2a2>
 8012508:	697b      	ldr	r3, [r7, #20]
 801250a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801250e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	f003 030f 	and.w	r3, r3, #15
 8012518:	2101      	movs	r1, #1
 801251a:	fa01 f303 	lsl.w	r3, r1, r3
 801251e:	6979      	ldr	r1, [r7, #20]
 8012520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012524:	4313      	orrs	r3, r2
 8012526:	634b      	str	r3, [r1, #52]	; 0x34
 8012528:	e071      	b.n	801260e <USB_EP0StartXfer+0x2a2>
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	015a      	lsls	r2, r3, #5
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	4413      	add	r3, r2
 8012532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012536:	691b      	ldr	r3, [r3, #16]
 8012538:	693a      	ldr	r2, [r7, #16]
 801253a:	0151      	lsls	r1, r2, #5
 801253c:	697a      	ldr	r2, [r7, #20]
 801253e:	440a      	add	r2, r1
 8012540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012544:	0cdb      	lsrs	r3, r3, #19
 8012546:	04db      	lsls	r3, r3, #19
 8012548:	6113      	str	r3, [r2, #16]
 801254a:	693b      	ldr	r3, [r7, #16]
 801254c:	015a      	lsls	r2, r3, #5
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	4413      	add	r3, r2
 8012552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012556:	691b      	ldr	r3, [r3, #16]
 8012558:	693a      	ldr	r2, [r7, #16]
 801255a:	0151      	lsls	r1, r2, #5
 801255c:	697a      	ldr	r2, [r7, #20]
 801255e:	440a      	add	r2, r1
 8012560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012564:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012568:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801256c:	6113      	str	r3, [r2, #16]
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	699b      	ldr	r3, [r3, #24]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d003      	beq.n	801257e <USB_EP0StartXfer+0x212>
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	68da      	ldr	r2, [r3, #12]
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	619a      	str	r2, [r3, #24]
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	68da      	ldr	r2, [r3, #12]
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	61da      	str	r2, [r3, #28]
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	015a      	lsls	r2, r3, #5
 801258a:	697b      	ldr	r3, [r7, #20]
 801258c:	4413      	add	r3, r2
 801258e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012592:	691b      	ldr	r3, [r3, #16]
 8012594:	693a      	ldr	r2, [r7, #16]
 8012596:	0151      	lsls	r1, r2, #5
 8012598:	697a      	ldr	r2, [r7, #20]
 801259a:	440a      	add	r2, r1
 801259c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80125a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80125a4:	6113      	str	r3, [r2, #16]
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	015a      	lsls	r2, r3, #5
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	4413      	add	r3, r2
 80125ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125b2:	691a      	ldr	r2, [r3, #16]
 80125b4:	68bb      	ldr	r3, [r7, #8]
 80125b6:	69db      	ldr	r3, [r3, #28]
 80125b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80125bc:	6939      	ldr	r1, [r7, #16]
 80125be:	0148      	lsls	r0, r1, #5
 80125c0:	6979      	ldr	r1, [r7, #20]
 80125c2:	4401      	add	r1, r0
 80125c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80125c8:	4313      	orrs	r3, r2
 80125ca:	610b      	str	r3, [r1, #16]
 80125cc:	79fb      	ldrb	r3, [r7, #7]
 80125ce:	2b01      	cmp	r3, #1
 80125d0:	d10d      	bne.n	80125ee <USB_EP0StartXfer+0x282>
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	691b      	ldr	r3, [r3, #16]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d009      	beq.n	80125ee <USB_EP0StartXfer+0x282>
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	6919      	ldr	r1, [r3, #16]
 80125de:	693b      	ldr	r3, [r7, #16]
 80125e0:	015a      	lsls	r2, r3, #5
 80125e2:	697b      	ldr	r3, [r7, #20]
 80125e4:	4413      	add	r3, r2
 80125e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125ea:	460a      	mov	r2, r1
 80125ec:	615a      	str	r2, [r3, #20]
 80125ee:	693b      	ldr	r3, [r7, #16]
 80125f0:	015a      	lsls	r2, r3, #5
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	4413      	add	r3, r2
 80125f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	693a      	ldr	r2, [r7, #16]
 80125fe:	0151      	lsls	r1, r2, #5
 8012600:	697a      	ldr	r2, [r7, #20]
 8012602:	440a      	add	r2, r1
 8012604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012608:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801260c:	6013      	str	r3, [r2, #0]
 801260e:	2300      	movs	r3, #0
 8012610:	4618      	mov	r0, r3
 8012612:	371c      	adds	r7, #28
 8012614:	46bd      	mov	sp, r7
 8012616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261a:	4770      	bx	lr

0801261c <USB_EPStopXfer>:
 801261c:	b480      	push	{r7}
 801261e:	b087      	sub	sp, #28
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	6039      	str	r1, [r7, #0]
 8012626:	2300      	movs	r3, #0
 8012628:	60fb      	str	r3, [r7, #12]
 801262a:	2300      	movs	r3, #0
 801262c:	75fb      	strb	r3, [r7, #23]
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	613b      	str	r3, [r7, #16]
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	785b      	ldrb	r3, [r3, #1]
 8012636:	2b01      	cmp	r3, #1
 8012638:	d14a      	bne.n	80126d0 <USB_EPStopXfer+0xb4>
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	781b      	ldrb	r3, [r3, #0]
 801263e:	015a      	lsls	r2, r3, #5
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	4413      	add	r3, r2
 8012644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801264e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012652:	f040 8086 	bne.w	8012762 <USB_EPStopXfer+0x146>
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	015a      	lsls	r2, r3, #5
 801265c:	693b      	ldr	r3, [r7, #16]
 801265e:	4413      	add	r3, r2
 8012660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	683a      	ldr	r2, [r7, #0]
 8012668:	7812      	ldrb	r2, [r2, #0]
 801266a:	0151      	lsls	r1, r2, #5
 801266c:	693a      	ldr	r2, [r7, #16]
 801266e:	440a      	add	r2, r1
 8012670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012674:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012678:	6013      	str	r3, [r2, #0]
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	015a      	lsls	r2, r3, #5
 8012680:	693b      	ldr	r3, [r7, #16]
 8012682:	4413      	add	r3, r2
 8012684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	683a      	ldr	r2, [r7, #0]
 801268c:	7812      	ldrb	r2, [r2, #0]
 801268e:	0151      	lsls	r1, r2, #5
 8012690:	693a      	ldr	r2, [r7, #16]
 8012692:	440a      	add	r2, r1
 8012694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801269c:	6013      	str	r3, [r2, #0]
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	3301      	adds	r3, #1
 80126a2:	60fb      	str	r3, [r7, #12]
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80126aa:	4293      	cmp	r3, r2
 80126ac:	d902      	bls.n	80126b4 <USB_EPStopXfer+0x98>
 80126ae:	2301      	movs	r3, #1
 80126b0:	75fb      	strb	r3, [r7, #23]
 80126b2:	e056      	b.n	8012762 <USB_EPStopXfer+0x146>
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	015a      	lsls	r2, r3, #5
 80126ba:	693b      	ldr	r3, [r7, #16]
 80126bc:	4413      	add	r3, r2
 80126be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80126c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80126cc:	d0e7      	beq.n	801269e <USB_EPStopXfer+0x82>
 80126ce:	e048      	b.n	8012762 <USB_EPStopXfer+0x146>
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	015a      	lsls	r2, r3, #5
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	4413      	add	r3, r2
 80126da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80126e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80126e8:	d13b      	bne.n	8012762 <USB_EPStopXfer+0x146>
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	015a      	lsls	r2, r3, #5
 80126f0:	693b      	ldr	r3, [r7, #16]
 80126f2:	4413      	add	r3, r2
 80126f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	683a      	ldr	r2, [r7, #0]
 80126fc:	7812      	ldrb	r2, [r2, #0]
 80126fe:	0151      	lsls	r1, r2, #5
 8012700:	693a      	ldr	r2, [r7, #16]
 8012702:	440a      	add	r2, r1
 8012704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012708:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801270c:	6013      	str	r3, [r2, #0]
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	015a      	lsls	r2, r3, #5
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	4413      	add	r3, r2
 8012718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	683a      	ldr	r2, [r7, #0]
 8012720:	7812      	ldrb	r2, [r2, #0]
 8012722:	0151      	lsls	r1, r2, #5
 8012724:	693a      	ldr	r2, [r7, #16]
 8012726:	440a      	add	r2, r1
 8012728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801272c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012730:	6013      	str	r3, [r2, #0]
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	3301      	adds	r3, #1
 8012736:	60fb      	str	r3, [r7, #12]
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	f242 7210 	movw	r2, #10000	; 0x2710
 801273e:	4293      	cmp	r3, r2
 8012740:	d902      	bls.n	8012748 <USB_EPStopXfer+0x12c>
 8012742:	2301      	movs	r3, #1
 8012744:	75fb      	strb	r3, [r7, #23]
 8012746:	e00c      	b.n	8012762 <USB_EPStopXfer+0x146>
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	015a      	lsls	r2, r3, #5
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	4413      	add	r3, r2
 8012752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801275c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012760:	d0e7      	beq.n	8012732 <USB_EPStopXfer+0x116>
 8012762:	7dfb      	ldrb	r3, [r7, #23]
 8012764:	4618      	mov	r0, r3
 8012766:	371c      	adds	r7, #28
 8012768:	46bd      	mov	sp, r7
 801276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276e:	4770      	bx	lr

08012770 <USB_WritePacket>:
 8012770:	b480      	push	{r7}
 8012772:	b089      	sub	sp, #36	; 0x24
 8012774:	af00      	add	r7, sp, #0
 8012776:	60f8      	str	r0, [r7, #12]
 8012778:	60b9      	str	r1, [r7, #8]
 801277a:	4611      	mov	r1, r2
 801277c:	461a      	mov	r2, r3
 801277e:	460b      	mov	r3, r1
 8012780:	71fb      	strb	r3, [r7, #7]
 8012782:	4613      	mov	r3, r2
 8012784:	80bb      	strh	r3, [r7, #4]
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	617b      	str	r3, [r7, #20]
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	61fb      	str	r3, [r7, #28]
 801278e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012792:	2b00      	cmp	r3, #0
 8012794:	d123      	bne.n	80127de <USB_WritePacket+0x6e>
 8012796:	88bb      	ldrh	r3, [r7, #4]
 8012798:	3303      	adds	r3, #3
 801279a:	089b      	lsrs	r3, r3, #2
 801279c:	613b      	str	r3, [r7, #16]
 801279e:	2300      	movs	r3, #0
 80127a0:	61bb      	str	r3, [r7, #24]
 80127a2:	e018      	b.n	80127d6 <USB_WritePacket+0x66>
 80127a4:	79fb      	ldrb	r3, [r7, #7]
 80127a6:	031a      	lsls	r2, r3, #12
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	4413      	add	r3, r2
 80127ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80127b0:	461a      	mov	r2, r3
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	6013      	str	r3, [r2, #0]
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	3301      	adds	r3, #1
 80127bc:	61fb      	str	r3, [r7, #28]
 80127be:	69fb      	ldr	r3, [r7, #28]
 80127c0:	3301      	adds	r3, #1
 80127c2:	61fb      	str	r3, [r7, #28]
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	3301      	adds	r3, #1
 80127c8:	61fb      	str	r3, [r7, #28]
 80127ca:	69fb      	ldr	r3, [r7, #28]
 80127cc:	3301      	adds	r3, #1
 80127ce:	61fb      	str	r3, [r7, #28]
 80127d0:	69bb      	ldr	r3, [r7, #24]
 80127d2:	3301      	adds	r3, #1
 80127d4:	61bb      	str	r3, [r7, #24]
 80127d6:	69ba      	ldr	r2, [r7, #24]
 80127d8:	693b      	ldr	r3, [r7, #16]
 80127da:	429a      	cmp	r2, r3
 80127dc:	d3e2      	bcc.n	80127a4 <USB_WritePacket+0x34>
 80127de:	2300      	movs	r3, #0
 80127e0:	4618      	mov	r0, r3
 80127e2:	3724      	adds	r7, #36	; 0x24
 80127e4:	46bd      	mov	sp, r7
 80127e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ea:	4770      	bx	lr

080127ec <USB_ReadPacket>:
 80127ec:	b480      	push	{r7}
 80127ee:	b08b      	sub	sp, #44	; 0x2c
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	60f8      	str	r0, [r7, #12]
 80127f4:	60b9      	str	r1, [r7, #8]
 80127f6:	4613      	mov	r3, r2
 80127f8:	80fb      	strh	r3, [r7, #6]
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	61bb      	str	r3, [r7, #24]
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	627b      	str	r3, [r7, #36]	; 0x24
 8012802:	88fb      	ldrh	r3, [r7, #6]
 8012804:	089b      	lsrs	r3, r3, #2
 8012806:	b29b      	uxth	r3, r3
 8012808:	617b      	str	r3, [r7, #20]
 801280a:	88fb      	ldrh	r3, [r7, #6]
 801280c:	f003 0303 	and.w	r3, r3, #3
 8012810:	83fb      	strh	r3, [r7, #30]
 8012812:	2300      	movs	r3, #0
 8012814:	623b      	str	r3, [r7, #32]
 8012816:	e014      	b.n	8012842 <USB_ReadPacket+0x56>
 8012818:	69bb      	ldr	r3, [r7, #24]
 801281a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801281e:	681a      	ldr	r2, [r3, #0]
 8012820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012822:	601a      	str	r2, [r3, #0]
 8012824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012826:	3301      	adds	r3, #1
 8012828:	627b      	str	r3, [r7, #36]	; 0x24
 801282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801282c:	3301      	adds	r3, #1
 801282e:	627b      	str	r3, [r7, #36]	; 0x24
 8012830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012832:	3301      	adds	r3, #1
 8012834:	627b      	str	r3, [r7, #36]	; 0x24
 8012836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012838:	3301      	adds	r3, #1
 801283a:	627b      	str	r3, [r7, #36]	; 0x24
 801283c:	6a3b      	ldr	r3, [r7, #32]
 801283e:	3301      	adds	r3, #1
 8012840:	623b      	str	r3, [r7, #32]
 8012842:	6a3a      	ldr	r2, [r7, #32]
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	429a      	cmp	r2, r3
 8012848:	d3e6      	bcc.n	8012818 <USB_ReadPacket+0x2c>
 801284a:	8bfb      	ldrh	r3, [r7, #30]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d01e      	beq.n	801288e <USB_ReadPacket+0xa2>
 8012850:	2300      	movs	r3, #0
 8012852:	623b      	str	r3, [r7, #32]
 8012854:	69bb      	ldr	r3, [r7, #24]
 8012856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801285a:	461a      	mov	r2, r3
 801285c:	f107 0310 	add.w	r3, r7, #16
 8012860:	6812      	ldr	r2, [r2, #0]
 8012862:	601a      	str	r2, [r3, #0]
 8012864:	693a      	ldr	r2, [r7, #16]
 8012866:	6a3b      	ldr	r3, [r7, #32]
 8012868:	b2db      	uxtb	r3, r3
 801286a:	00db      	lsls	r3, r3, #3
 801286c:	fa22 f303 	lsr.w	r3, r2, r3
 8012870:	b2da      	uxtb	r2, r3
 8012872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012874:	701a      	strb	r2, [r3, #0]
 8012876:	6a3b      	ldr	r3, [r7, #32]
 8012878:	3301      	adds	r3, #1
 801287a:	623b      	str	r3, [r7, #32]
 801287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287e:	3301      	adds	r3, #1
 8012880:	627b      	str	r3, [r7, #36]	; 0x24
 8012882:	8bfb      	ldrh	r3, [r7, #30]
 8012884:	3b01      	subs	r3, #1
 8012886:	83fb      	strh	r3, [r7, #30]
 8012888:	8bfb      	ldrh	r3, [r7, #30]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d1ea      	bne.n	8012864 <USB_ReadPacket+0x78>
 801288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012890:	4618      	mov	r0, r3
 8012892:	372c      	adds	r7, #44	; 0x2c
 8012894:	46bd      	mov	sp, r7
 8012896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289a:	4770      	bx	lr

0801289c <USB_EPSetStall>:
 801289c:	b480      	push	{r7}
 801289e:	b085      	sub	sp, #20
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
 80128a4:	6039      	str	r1, [r7, #0]
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	60fb      	str	r3, [r7, #12]
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	60bb      	str	r3, [r7, #8]
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	785b      	ldrb	r3, [r3, #1]
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	d12c      	bne.n	8012912 <USB_EPSetStall+0x76>
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	015a      	lsls	r2, r3, #5
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	4413      	add	r3, r2
 80128c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	db12      	blt.n	80128f0 <USB_EPSetStall+0x54>
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d00f      	beq.n	80128f0 <USB_EPSetStall+0x54>
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	015a      	lsls	r2, r3, #5
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	4413      	add	r3, r2
 80128d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	68ba      	ldr	r2, [r7, #8]
 80128e0:	0151      	lsls	r1, r2, #5
 80128e2:	68fa      	ldr	r2, [r7, #12]
 80128e4:	440a      	add	r2, r1
 80128e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80128ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80128ee:	6013      	str	r3, [r2, #0]
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	015a      	lsls	r2, r3, #5
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	4413      	add	r3, r2
 80128f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	68ba      	ldr	r2, [r7, #8]
 8012900:	0151      	lsls	r1, r2, #5
 8012902:	68fa      	ldr	r2, [r7, #12]
 8012904:	440a      	add	r2, r1
 8012906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801290a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801290e:	6013      	str	r3, [r2, #0]
 8012910:	e02b      	b.n	801296a <USB_EPSetStall+0xce>
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	015a      	lsls	r2, r3, #5
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	4413      	add	r3, r2
 801291a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	2b00      	cmp	r3, #0
 8012922:	db12      	blt.n	801294a <USB_EPSetStall+0xae>
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d00f      	beq.n	801294a <USB_EPSetStall+0xae>
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	015a      	lsls	r2, r3, #5
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	4413      	add	r3, r2
 8012932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	68ba      	ldr	r2, [r7, #8]
 801293a:	0151      	lsls	r1, r2, #5
 801293c:	68fa      	ldr	r2, [r7, #12]
 801293e:	440a      	add	r2, r1
 8012940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012944:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012948:	6013      	str	r3, [r2, #0]
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	015a      	lsls	r2, r3, #5
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	4413      	add	r3, r2
 8012952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	68ba      	ldr	r2, [r7, #8]
 801295a:	0151      	lsls	r1, r2, #5
 801295c:	68fa      	ldr	r2, [r7, #12]
 801295e:	440a      	add	r2, r1
 8012960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012964:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012968:	6013      	str	r3, [r2, #0]
 801296a:	2300      	movs	r3, #0
 801296c:	4618      	mov	r0, r3
 801296e:	3714      	adds	r7, #20
 8012970:	46bd      	mov	sp, r7
 8012972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012976:	4770      	bx	lr

08012978 <USB_EPClearStall>:
 8012978:	b480      	push	{r7}
 801297a:	b085      	sub	sp, #20
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	60fb      	str	r3, [r7, #12]
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	781b      	ldrb	r3, [r3, #0]
 801298a:	60bb      	str	r3, [r7, #8]
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	785b      	ldrb	r3, [r3, #1]
 8012990:	2b01      	cmp	r3, #1
 8012992:	d128      	bne.n	80129e6 <USB_EPClearStall+0x6e>
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	015a      	lsls	r2, r3, #5
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	4413      	add	r3, r2
 801299c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	68ba      	ldr	r2, [r7, #8]
 80129a4:	0151      	lsls	r1, r2, #5
 80129a6:	68fa      	ldr	r2, [r7, #12]
 80129a8:	440a      	add	r2, r1
 80129aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80129b2:	6013      	str	r3, [r2, #0]
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	791b      	ldrb	r3, [r3, #4]
 80129b8:	2b03      	cmp	r3, #3
 80129ba:	d003      	beq.n	80129c4 <USB_EPClearStall+0x4c>
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	791b      	ldrb	r3, [r3, #4]
 80129c0:	2b02      	cmp	r3, #2
 80129c2:	d138      	bne.n	8012a36 <USB_EPClearStall+0xbe>
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	015a      	lsls	r2, r3, #5
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	4413      	add	r3, r2
 80129cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	68ba      	ldr	r2, [r7, #8]
 80129d4:	0151      	lsls	r1, r2, #5
 80129d6:	68fa      	ldr	r2, [r7, #12]
 80129d8:	440a      	add	r2, r1
 80129da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80129e2:	6013      	str	r3, [r2, #0]
 80129e4:	e027      	b.n	8012a36 <USB_EPClearStall+0xbe>
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	015a      	lsls	r2, r3, #5
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	4413      	add	r3, r2
 80129ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	68ba      	ldr	r2, [r7, #8]
 80129f6:	0151      	lsls	r1, r2, #5
 80129f8:	68fa      	ldr	r2, [r7, #12]
 80129fa:	440a      	add	r2, r1
 80129fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012a04:	6013      	str	r3, [r2, #0]
 8012a06:	683b      	ldr	r3, [r7, #0]
 8012a08:	791b      	ldrb	r3, [r3, #4]
 8012a0a:	2b03      	cmp	r3, #3
 8012a0c:	d003      	beq.n	8012a16 <USB_EPClearStall+0x9e>
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	791b      	ldrb	r3, [r3, #4]
 8012a12:	2b02      	cmp	r3, #2
 8012a14:	d10f      	bne.n	8012a36 <USB_EPClearStall+0xbe>
 8012a16:	68bb      	ldr	r3, [r7, #8]
 8012a18:	015a      	lsls	r2, r3, #5
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	4413      	add	r3, r2
 8012a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	68ba      	ldr	r2, [r7, #8]
 8012a26:	0151      	lsls	r1, r2, #5
 8012a28:	68fa      	ldr	r2, [r7, #12]
 8012a2a:	440a      	add	r2, r1
 8012a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012a34:	6013      	str	r3, [r2, #0]
 8012a36:	2300      	movs	r3, #0
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3714      	adds	r7, #20
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a42:	4770      	bx	lr

08012a44 <USB_SetDevAddress>:
 8012a44:	b480      	push	{r7}
 8012a46:	b085      	sub	sp, #20
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	460b      	mov	r3, r1
 8012a4e:	70fb      	strb	r3, [r7, #3]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	60fb      	str	r3, [r7, #12]
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	68fa      	ldr	r2, [r7, #12]
 8012a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012a62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012a66:	6013      	str	r3, [r2, #0]
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a6e:	681a      	ldr	r2, [r3, #0]
 8012a70:	78fb      	ldrb	r3, [r7, #3]
 8012a72:	011b      	lsls	r3, r3, #4
 8012a74:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012a78:	68f9      	ldr	r1, [r7, #12]
 8012a7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012a7e:	4313      	orrs	r3, r2
 8012a80:	600b      	str	r3, [r1, #0]
 8012a82:	2300      	movs	r3, #0
 8012a84:	4618      	mov	r0, r3
 8012a86:	3714      	adds	r7, #20
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8e:	4770      	bx	lr

08012a90 <USB_DevConnect>:
 8012a90:	b480      	push	{r7}
 8012a92:	b085      	sub	sp, #20
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	60fb      	str	r3, [r7, #12]
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	68fa      	ldr	r2, [r7, #12]
 8012aa6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012aaa:	f023 0303 	bic.w	r3, r3, #3
 8012aae:	6013      	str	r3, [r2, #0]
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ab6:	685b      	ldr	r3, [r3, #4]
 8012ab8:	68fa      	ldr	r2, [r7, #12]
 8012aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012abe:	f023 0302 	bic.w	r3, r3, #2
 8012ac2:	6053      	str	r3, [r2, #4]
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	3714      	adds	r7, #20
 8012aca:	46bd      	mov	sp, r7
 8012acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad0:	4770      	bx	lr

08012ad2 <USB_DevDisconnect>:
 8012ad2:	b480      	push	{r7}
 8012ad4:	b085      	sub	sp, #20
 8012ad6:	af00      	add	r7, sp, #0
 8012ad8:	6078      	str	r0, [r7, #4]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	60fb      	str	r3, [r7, #12]
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	68fa      	ldr	r2, [r7, #12]
 8012ae8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012aec:	f023 0303 	bic.w	r3, r3, #3
 8012af0:	6013      	str	r3, [r2, #0]
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012af8:	685b      	ldr	r3, [r3, #4]
 8012afa:	68fa      	ldr	r2, [r7, #12]
 8012afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012b00:	f043 0302 	orr.w	r3, r3, #2
 8012b04:	6053      	str	r3, [r2, #4]
 8012b06:	2300      	movs	r3, #0
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3714      	adds	r7, #20
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b12:	4770      	bx	lr

08012b14 <USB_ReadInterrupts>:
 8012b14:	b480      	push	{r7}
 8012b16:	b085      	sub	sp, #20
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	695b      	ldr	r3, [r3, #20]
 8012b20:	60fb      	str	r3, [r7, #12]
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	699b      	ldr	r3, [r3, #24]
 8012b26:	68fa      	ldr	r2, [r7, #12]
 8012b28:	4013      	ands	r3, r2
 8012b2a:	60fb      	str	r3, [r7, #12]
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	4618      	mov	r0, r3
 8012b30:	3714      	adds	r7, #20
 8012b32:	46bd      	mov	sp, r7
 8012b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b38:	4770      	bx	lr

08012b3a <USB_ReadDevAllOutEpInterrupt>:
 8012b3a:	b480      	push	{r7}
 8012b3c:	b085      	sub	sp, #20
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	6078      	str	r0, [r7, #4]
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	60fb      	str	r3, [r7, #12]
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b4c:	699b      	ldr	r3, [r3, #24]
 8012b4e:	60bb      	str	r3, [r7, #8]
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b56:	69db      	ldr	r3, [r3, #28]
 8012b58:	68ba      	ldr	r2, [r7, #8]
 8012b5a:	4013      	ands	r3, r2
 8012b5c:	60bb      	str	r3, [r7, #8]
 8012b5e:	68bb      	ldr	r3, [r7, #8]
 8012b60:	0c1b      	lsrs	r3, r3, #16
 8012b62:	4618      	mov	r0, r3
 8012b64:	3714      	adds	r7, #20
 8012b66:	46bd      	mov	sp, r7
 8012b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6c:	4770      	bx	lr

08012b6e <USB_ReadDevAllInEpInterrupt>:
 8012b6e:	b480      	push	{r7}
 8012b70:	b085      	sub	sp, #20
 8012b72:	af00      	add	r7, sp, #0
 8012b74:	6078      	str	r0, [r7, #4]
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	60fb      	str	r3, [r7, #12]
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b80:	699b      	ldr	r3, [r3, #24]
 8012b82:	60bb      	str	r3, [r7, #8]
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b8a:	69db      	ldr	r3, [r3, #28]
 8012b8c:	68ba      	ldr	r2, [r7, #8]
 8012b8e:	4013      	ands	r3, r2
 8012b90:	60bb      	str	r3, [r7, #8]
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	b29b      	uxth	r3, r3
 8012b96:	4618      	mov	r0, r3
 8012b98:	3714      	adds	r7, #20
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba0:	4770      	bx	lr

08012ba2 <USB_ReadDevOutEPInterrupt>:
 8012ba2:	b480      	push	{r7}
 8012ba4:	b085      	sub	sp, #20
 8012ba6:	af00      	add	r7, sp, #0
 8012ba8:	6078      	str	r0, [r7, #4]
 8012baa:	460b      	mov	r3, r1
 8012bac:	70fb      	strb	r3, [r7, #3]
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	60fb      	str	r3, [r7, #12]
 8012bb2:	78fb      	ldrb	r3, [r7, #3]
 8012bb4:	015a      	lsls	r2, r3, #5
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	4413      	add	r3, r2
 8012bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bbe:	689b      	ldr	r3, [r3, #8]
 8012bc0:	60bb      	str	r3, [r7, #8]
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bc8:	695b      	ldr	r3, [r3, #20]
 8012bca:	68ba      	ldr	r2, [r7, #8]
 8012bcc:	4013      	ands	r3, r2
 8012bce:	60bb      	str	r3, [r7, #8]
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3714      	adds	r7, #20
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bdc:	4770      	bx	lr

08012bde <USB_ReadDevInEPInterrupt>:
 8012bde:	b480      	push	{r7}
 8012be0:	b087      	sub	sp, #28
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	6078      	str	r0, [r7, #4]
 8012be6:	460b      	mov	r3, r1
 8012be8:	70fb      	strb	r3, [r7, #3]
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	617b      	str	r3, [r7, #20]
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bf4:	691b      	ldr	r3, [r3, #16]
 8012bf6:	613b      	str	r3, [r7, #16]
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c00:	60fb      	str	r3, [r7, #12]
 8012c02:	78fb      	ldrb	r3, [r7, #3]
 8012c04:	f003 030f 	and.w	r3, r3, #15
 8012c08:	68fa      	ldr	r2, [r7, #12]
 8012c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8012c0e:	01db      	lsls	r3, r3, #7
 8012c10:	b2db      	uxtb	r3, r3
 8012c12:	693a      	ldr	r2, [r7, #16]
 8012c14:	4313      	orrs	r3, r2
 8012c16:	613b      	str	r3, [r7, #16]
 8012c18:	78fb      	ldrb	r3, [r7, #3]
 8012c1a:	015a      	lsls	r2, r3, #5
 8012c1c:	697b      	ldr	r3, [r7, #20]
 8012c1e:	4413      	add	r3, r2
 8012c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c24:	689b      	ldr	r3, [r3, #8]
 8012c26:	693a      	ldr	r2, [r7, #16]
 8012c28:	4013      	ands	r3, r2
 8012c2a:	60bb      	str	r3, [r7, #8]
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	4618      	mov	r0, r3
 8012c30:	371c      	adds	r7, #28
 8012c32:	46bd      	mov	sp, r7
 8012c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c38:	4770      	bx	lr

08012c3a <USB_GetMode>:
 8012c3a:	b480      	push	{r7}
 8012c3c:	b083      	sub	sp, #12
 8012c3e:	af00      	add	r7, sp, #0
 8012c40:	6078      	str	r0, [r7, #4]
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	695b      	ldr	r3, [r3, #20]
 8012c46:	f003 0301 	and.w	r3, r3, #1
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	370c      	adds	r7, #12
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c54:	4770      	bx	lr

08012c56 <USB_ActivateSetup>:
 8012c56:	b480      	push	{r7}
 8012c58:	b085      	sub	sp, #20
 8012c5a:	af00      	add	r7, sp, #0
 8012c5c:	6078      	str	r0, [r7, #4]
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	60fb      	str	r3, [r7, #12]
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	68fa      	ldr	r2, [r7, #12]
 8012c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8012c74:	f023 0307 	bic.w	r3, r3, #7
 8012c78:	6013      	str	r3, [r2, #0]
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c80:	685b      	ldr	r3, [r3, #4]
 8012c82:	68fa      	ldr	r2, [r7, #12]
 8012c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012c8c:	6053      	str	r3, [r2, #4]
 8012c8e:	2300      	movs	r3, #0
 8012c90:	4618      	mov	r0, r3
 8012c92:	3714      	adds	r7, #20
 8012c94:	46bd      	mov	sp, r7
 8012c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9a:	4770      	bx	lr

08012c9c <USB_EP0_OutStart>:
 8012c9c:	b480      	push	{r7}
 8012c9e:	b087      	sub	sp, #28
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	60f8      	str	r0, [r7, #12]
 8012ca4:	460b      	mov	r3, r1
 8012ca6:	607a      	str	r2, [r7, #4]
 8012ca8:	72fb      	strb	r3, [r7, #11]
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	617b      	str	r3, [r7, #20]
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	333c      	adds	r3, #60	; 0x3c
 8012cb2:	3304      	adds	r3, #4
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	613b      	str	r3, [r7, #16]
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	4a26      	ldr	r2, [pc, #152]	; (8012d54 <USB_EP0_OutStart+0xb8>)
 8012cbc:	4293      	cmp	r3, r2
 8012cbe:	d90a      	bls.n	8012cd6 <USB_EP0_OutStart+0x3a>
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012cd0:	d101      	bne.n	8012cd6 <USB_EP0_OutStart+0x3a>
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	e037      	b.n	8012d46 <USB_EP0_OutStart+0xaa>
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cdc:	461a      	mov	r2, r3
 8012cde:	2300      	movs	r3, #0
 8012ce0:	6113      	str	r3, [r2, #16]
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ce8:	691b      	ldr	r3, [r3, #16]
 8012cea:	697a      	ldr	r2, [r7, #20]
 8012cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012cf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012cf4:	6113      	str	r3, [r2, #16]
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cfc:	691b      	ldr	r3, [r3, #16]
 8012cfe:	697a      	ldr	r2, [r7, #20]
 8012d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d04:	f043 0318 	orr.w	r3, r3, #24
 8012d08:	6113      	str	r3, [r2, #16]
 8012d0a:	697b      	ldr	r3, [r7, #20]
 8012d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d10:	691b      	ldr	r3, [r3, #16]
 8012d12:	697a      	ldr	r2, [r7, #20]
 8012d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d18:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012d1c:	6113      	str	r3, [r2, #16]
 8012d1e:	7afb      	ldrb	r3, [r7, #11]
 8012d20:	2b01      	cmp	r3, #1
 8012d22:	d10f      	bne.n	8012d44 <USB_EP0_OutStart+0xa8>
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	6153      	str	r3, [r2, #20]
 8012d30:	697b      	ldr	r3, [r7, #20]
 8012d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	697a      	ldr	r2, [r7, #20]
 8012d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d3e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8012d42:	6013      	str	r3, [r2, #0]
 8012d44:	2300      	movs	r3, #0
 8012d46:	4618      	mov	r0, r3
 8012d48:	371c      	adds	r7, #28
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d50:	4770      	bx	lr
 8012d52:	bf00      	nop
 8012d54:	4f54300a 	.word	0x4f54300a

08012d58 <USB_CoreReset>:
 8012d58:	b480      	push	{r7}
 8012d5a:	b085      	sub	sp, #20
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
 8012d60:	2300      	movs	r3, #0
 8012d62:	60fb      	str	r3, [r7, #12]
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	3301      	adds	r3, #1
 8012d68:	60fb      	str	r3, [r7, #12]
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	4a13      	ldr	r2, [pc, #76]	; (8012dbc <USB_CoreReset+0x64>)
 8012d6e:	4293      	cmp	r3, r2
 8012d70:	d901      	bls.n	8012d76 <USB_CoreReset+0x1e>
 8012d72:	2303      	movs	r3, #3
 8012d74:	e01b      	b.n	8012dae <USB_CoreReset+0x56>
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	691b      	ldr	r3, [r3, #16]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	daf2      	bge.n	8012d64 <USB_CoreReset+0xc>
 8012d7e:	2300      	movs	r3, #0
 8012d80:	60fb      	str	r3, [r7, #12]
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	691b      	ldr	r3, [r3, #16]
 8012d86:	f043 0201 	orr.w	r2, r3, #1
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	611a      	str	r2, [r3, #16]
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	3301      	adds	r3, #1
 8012d92:	60fb      	str	r3, [r7, #12]
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	4a09      	ldr	r2, [pc, #36]	; (8012dbc <USB_CoreReset+0x64>)
 8012d98:	4293      	cmp	r3, r2
 8012d9a:	d901      	bls.n	8012da0 <USB_CoreReset+0x48>
 8012d9c:	2303      	movs	r3, #3
 8012d9e:	e006      	b.n	8012dae <USB_CoreReset+0x56>
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	691b      	ldr	r3, [r3, #16]
 8012da4:	f003 0301 	and.w	r3, r3, #1
 8012da8:	2b01      	cmp	r3, #1
 8012daa:	d0f0      	beq.n	8012d8e <USB_CoreReset+0x36>
 8012dac:	2300      	movs	r3, #0
 8012dae:	4618      	mov	r0, r3
 8012db0:	3714      	adds	r7, #20
 8012db2:	46bd      	mov	sp, r7
 8012db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db8:	4770      	bx	lr
 8012dba:	bf00      	nop
 8012dbc:	00030d40 	.word	0x00030d40

08012dc0 <MX_FATFS_Init>:
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	4904      	ldr	r1, [pc, #16]	; (8012dd8 <MX_FATFS_Init+0x18>)
 8012dc6:	4805      	ldr	r0, [pc, #20]	; (8012ddc <MX_FATFS_Init+0x1c>)
 8012dc8:	f005 f8e4 	bl	8017f94 <FATFS_LinkDriver>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	461a      	mov	r2, r3
 8012dd0:	4b03      	ldr	r3, [pc, #12]	; (8012de0 <MX_FATFS_Init+0x20>)
 8012dd2:	701a      	strb	r2, [r3, #0]
 8012dd4:	bf00      	nop
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	2000452c 	.word	0x2000452c
 8012ddc:	20000024 	.word	0x20000024
 8012de0:	20004528 	.word	0x20004528

08012de4 <get_fattime>:
 8012de4:	b480      	push	{r7}
 8012de6:	af00      	add	r7, sp, #0
 8012de8:	2300      	movs	r3, #0
 8012dea:	4618      	mov	r0, r3
 8012dec:	46bd      	mov	sp, r7
 8012dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df2:	4770      	bx	lr

08012df4 <USER_initialize>:
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b082      	sub	sp, #8
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	71fb      	strb	r3, [r7, #7]
 8012dfe:	79fb      	ldrb	r3, [r7, #7]
 8012e00:	4618      	mov	r0, r3
 8012e02:	f7f6 fb9b 	bl	800953c <SD_disk_initialize>
 8012e06:	4603      	mov	r3, r0
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3708      	adds	r7, #8
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}

08012e10 <USER_status>:
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b082      	sub	sp, #8
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	4603      	mov	r3, r0
 8012e18:	71fb      	strb	r3, [r7, #7]
 8012e1a:	79fb      	ldrb	r3, [r7, #7]
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7f6 fc77 	bl	8009710 <SD_disk_status>
 8012e22:	4603      	mov	r3, r0
 8012e24:	4618      	mov	r0, r3
 8012e26:	3708      	adds	r7, #8
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}

08012e2c <USER_read>:
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b084      	sub	sp, #16
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	60b9      	str	r1, [r7, #8]
 8012e34:	607a      	str	r2, [r7, #4]
 8012e36:	603b      	str	r3, [r7, #0]
 8012e38:	4603      	mov	r3, r0
 8012e3a:	73fb      	strb	r3, [r7, #15]
 8012e3c:	7bf8      	ldrb	r0, [r7, #15]
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	687a      	ldr	r2, [r7, #4]
 8012e42:	68b9      	ldr	r1, [r7, #8]
 8012e44:	f7f6 fc7a 	bl	800973c <SD_disk_read>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3710      	adds	r7, #16
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}

08012e52 <USER_write>:
 8012e52:	b580      	push	{r7, lr}
 8012e54:	b084      	sub	sp, #16
 8012e56:	af00      	add	r7, sp, #0
 8012e58:	60b9      	str	r1, [r7, #8]
 8012e5a:	607a      	str	r2, [r7, #4]
 8012e5c:	603b      	str	r3, [r7, #0]
 8012e5e:	4603      	mov	r3, r0
 8012e60:	73fb      	strb	r3, [r7, #15]
 8012e62:	7bf8      	ldrb	r0, [r7, #15]
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	687a      	ldr	r2, [r7, #4]
 8012e68:	68b9      	ldr	r1, [r7, #8]
 8012e6a:	f7f6 fcd1 	bl	8009810 <SD_disk_write>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	4618      	mov	r0, r3
 8012e72:	3710      	adds	r7, #16
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd80      	pop	{r7, pc}

08012e78 <USER_ioctl>:
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b082      	sub	sp, #8
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	4603      	mov	r3, r0
 8012e80:	603a      	str	r2, [r7, #0]
 8012e82:	71fb      	strb	r3, [r7, #7]
 8012e84:	460b      	mov	r3, r1
 8012e86:	71bb      	strb	r3, [r7, #6]
 8012e88:	79b9      	ldrb	r1, [r7, #6]
 8012e8a:	79fb      	ldrb	r3, [r7, #7]
 8012e8c:	683a      	ldr	r2, [r7, #0]
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f7f6 fd42 	bl	8009918 <SD_disk_ioctl>
 8012e94:	4603      	mov	r3, r0
 8012e96:	4618      	mov	r0, r3
 8012e98:	3708      	adds	r7, #8
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}
	...

08012ea0 <USBD_CDC_Init>:
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b084      	sub	sp, #16
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
 8012ea8:	460b      	mov	r3, r1
 8012eaa:	70fb      	strb	r3, [r7, #3]
 8012eac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012eb0:	f009 fc02 	bl	801c6b8 <USBD_static_malloc>
 8012eb4:	60f8      	str	r0, [r7, #12]
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d109      	bne.n	8012ed0 <USBD_CDC_Init+0x30>
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	32b0      	adds	r2, #176	; 0xb0
 8012ec6:	2100      	movs	r1, #0
 8012ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012ecc:	2302      	movs	r3, #2
 8012ece:	e0d4      	b.n	801307a <USBD_CDC_Init+0x1da>
 8012ed0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8012ed4:	2100      	movs	r1, #0
 8012ed6:	68f8      	ldr	r0, [r7, #12]
 8012ed8:	f00b fb23 	bl	801e522 <memset>
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	32b0      	adds	r2, #176	; 0xb0
 8012ee6:	68f9      	ldr	r1, [r7, #12]
 8012ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	32b0      	adds	r2, #176	; 0xb0
 8012ef6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	7c1b      	ldrb	r3, [r3, #16]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d138      	bne.n	8012f7a <USBD_CDC_Init+0xda>
 8012f08:	4b5e      	ldr	r3, [pc, #376]	; (8013084 <USBD_CDC_Init+0x1e4>)
 8012f0a:	7819      	ldrb	r1, [r3, #0]
 8012f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012f10:	2202      	movs	r2, #2
 8012f12:	6878      	ldr	r0, [r7, #4]
 8012f14:	f009 faad 	bl	801c472 <USBD_LL_OpenEP>
 8012f18:	4b5a      	ldr	r3, [pc, #360]	; (8013084 <USBD_CDC_Init+0x1e4>)
 8012f1a:	781b      	ldrb	r3, [r3, #0]
 8012f1c:	f003 020f 	and.w	r2, r3, #15
 8012f20:	6879      	ldr	r1, [r7, #4]
 8012f22:	4613      	mov	r3, r2
 8012f24:	009b      	lsls	r3, r3, #2
 8012f26:	4413      	add	r3, r2
 8012f28:	009b      	lsls	r3, r3, #2
 8012f2a:	440b      	add	r3, r1
 8012f2c:	3324      	adds	r3, #36	; 0x24
 8012f2e:	2201      	movs	r2, #1
 8012f30:	801a      	strh	r2, [r3, #0]
 8012f32:	4b55      	ldr	r3, [pc, #340]	; (8013088 <USBD_CDC_Init+0x1e8>)
 8012f34:	7819      	ldrb	r1, [r3, #0]
 8012f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012f3a:	2202      	movs	r2, #2
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f009 fa98 	bl	801c472 <USBD_LL_OpenEP>
 8012f42:	4b51      	ldr	r3, [pc, #324]	; (8013088 <USBD_CDC_Init+0x1e8>)
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	f003 020f 	and.w	r2, r3, #15
 8012f4a:	6879      	ldr	r1, [r7, #4]
 8012f4c:	4613      	mov	r3, r2
 8012f4e:	009b      	lsls	r3, r3, #2
 8012f50:	4413      	add	r3, r2
 8012f52:	009b      	lsls	r3, r3, #2
 8012f54:	440b      	add	r3, r1
 8012f56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012f5a:	2201      	movs	r2, #1
 8012f5c:	801a      	strh	r2, [r3, #0]
 8012f5e:	4b4b      	ldr	r3, [pc, #300]	; (801308c <USBD_CDC_Init+0x1ec>)
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	f003 020f 	and.w	r2, r3, #15
 8012f66:	6879      	ldr	r1, [r7, #4]
 8012f68:	4613      	mov	r3, r2
 8012f6a:	009b      	lsls	r3, r3, #2
 8012f6c:	4413      	add	r3, r2
 8012f6e:	009b      	lsls	r3, r3, #2
 8012f70:	440b      	add	r3, r1
 8012f72:	3326      	adds	r3, #38	; 0x26
 8012f74:	2210      	movs	r2, #16
 8012f76:	801a      	strh	r2, [r3, #0]
 8012f78:	e035      	b.n	8012fe6 <USBD_CDC_Init+0x146>
 8012f7a:	4b42      	ldr	r3, [pc, #264]	; (8013084 <USBD_CDC_Init+0x1e4>)
 8012f7c:	7819      	ldrb	r1, [r3, #0]
 8012f7e:	2340      	movs	r3, #64	; 0x40
 8012f80:	2202      	movs	r2, #2
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f009 fa75 	bl	801c472 <USBD_LL_OpenEP>
 8012f88:	4b3e      	ldr	r3, [pc, #248]	; (8013084 <USBD_CDC_Init+0x1e4>)
 8012f8a:	781b      	ldrb	r3, [r3, #0]
 8012f8c:	f003 020f 	and.w	r2, r3, #15
 8012f90:	6879      	ldr	r1, [r7, #4]
 8012f92:	4613      	mov	r3, r2
 8012f94:	009b      	lsls	r3, r3, #2
 8012f96:	4413      	add	r3, r2
 8012f98:	009b      	lsls	r3, r3, #2
 8012f9a:	440b      	add	r3, r1
 8012f9c:	3324      	adds	r3, #36	; 0x24
 8012f9e:	2201      	movs	r2, #1
 8012fa0:	801a      	strh	r2, [r3, #0]
 8012fa2:	4b39      	ldr	r3, [pc, #228]	; (8013088 <USBD_CDC_Init+0x1e8>)
 8012fa4:	7819      	ldrb	r1, [r3, #0]
 8012fa6:	2340      	movs	r3, #64	; 0x40
 8012fa8:	2202      	movs	r2, #2
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f009 fa61 	bl	801c472 <USBD_LL_OpenEP>
 8012fb0:	4b35      	ldr	r3, [pc, #212]	; (8013088 <USBD_CDC_Init+0x1e8>)
 8012fb2:	781b      	ldrb	r3, [r3, #0]
 8012fb4:	f003 020f 	and.w	r2, r3, #15
 8012fb8:	6879      	ldr	r1, [r7, #4]
 8012fba:	4613      	mov	r3, r2
 8012fbc:	009b      	lsls	r3, r3, #2
 8012fbe:	4413      	add	r3, r2
 8012fc0:	009b      	lsls	r3, r3, #2
 8012fc2:	440b      	add	r3, r1
 8012fc4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012fc8:	2201      	movs	r2, #1
 8012fca:	801a      	strh	r2, [r3, #0]
 8012fcc:	4b2f      	ldr	r3, [pc, #188]	; (801308c <USBD_CDC_Init+0x1ec>)
 8012fce:	781b      	ldrb	r3, [r3, #0]
 8012fd0:	f003 020f 	and.w	r2, r3, #15
 8012fd4:	6879      	ldr	r1, [r7, #4]
 8012fd6:	4613      	mov	r3, r2
 8012fd8:	009b      	lsls	r3, r3, #2
 8012fda:	4413      	add	r3, r2
 8012fdc:	009b      	lsls	r3, r3, #2
 8012fde:	440b      	add	r3, r1
 8012fe0:	3326      	adds	r3, #38	; 0x26
 8012fe2:	2210      	movs	r2, #16
 8012fe4:	801a      	strh	r2, [r3, #0]
 8012fe6:	4b29      	ldr	r3, [pc, #164]	; (801308c <USBD_CDC_Init+0x1ec>)
 8012fe8:	7819      	ldrb	r1, [r3, #0]
 8012fea:	2308      	movs	r3, #8
 8012fec:	2203      	movs	r2, #3
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f009 fa3f 	bl	801c472 <USBD_LL_OpenEP>
 8012ff4:	4b25      	ldr	r3, [pc, #148]	; (801308c <USBD_CDC_Init+0x1ec>)
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	f003 020f 	and.w	r2, r3, #15
 8012ffc:	6879      	ldr	r1, [r7, #4]
 8012ffe:	4613      	mov	r3, r2
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	4413      	add	r3, r2
 8013004:	009b      	lsls	r3, r3, #2
 8013006:	440b      	add	r3, r1
 8013008:	3324      	adds	r3, #36	; 0x24
 801300a:	2201      	movs	r2, #1
 801300c:	801a      	strh	r2, [r3, #0]
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	2200      	movs	r2, #0
 8013012:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801301c:	687a      	ldr	r2, [r7, #4]
 801301e:	33b0      	adds	r3, #176	; 0xb0
 8013020:	009b      	lsls	r3, r3, #2
 8013022:	4413      	add	r3, r2
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	4798      	blx	r3
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	2200      	movs	r2, #0
 801302e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	2200      	movs	r2, #0
 8013036:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8013040:	2b00      	cmp	r3, #0
 8013042:	d101      	bne.n	8013048 <USBD_CDC_Init+0x1a8>
 8013044:	2302      	movs	r3, #2
 8013046:	e018      	b.n	801307a <USBD_CDC_Init+0x1da>
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	7c1b      	ldrb	r3, [r3, #16]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d10a      	bne.n	8013066 <USBD_CDC_Init+0x1c6>
 8013050:	4b0d      	ldr	r3, [pc, #52]	; (8013088 <USBD_CDC_Init+0x1e8>)
 8013052:	7819      	ldrb	r1, [r3, #0]
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801305a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f009 faf6 	bl	801c650 <USBD_LL_PrepareReceive>
 8013064:	e008      	b.n	8013078 <USBD_CDC_Init+0x1d8>
 8013066:	4b08      	ldr	r3, [pc, #32]	; (8013088 <USBD_CDC_Init+0x1e8>)
 8013068:	7819      	ldrb	r1, [r3, #0]
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013070:	2340      	movs	r3, #64	; 0x40
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f009 faec 	bl	801c650 <USBD_LL_PrepareReceive>
 8013078:	2300      	movs	r3, #0
 801307a:	4618      	mov	r0, r3
 801307c:	3710      	adds	r7, #16
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}
 8013082:	bf00      	nop
 8013084:	200000bf 	.word	0x200000bf
 8013088:	200000c0 	.word	0x200000c0
 801308c:	200000c1 	.word	0x200000c1

08013090 <USBD_CDC_DeInit>:
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	460b      	mov	r3, r1
 801309a:	70fb      	strb	r3, [r7, #3]
 801309c:	4b3a      	ldr	r3, [pc, #232]	; (8013188 <USBD_CDC_DeInit+0xf8>)
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	4619      	mov	r1, r3
 80130a2:	6878      	ldr	r0, [r7, #4]
 80130a4:	f009 fa0b 	bl	801c4be <USBD_LL_CloseEP>
 80130a8:	4b37      	ldr	r3, [pc, #220]	; (8013188 <USBD_CDC_DeInit+0xf8>)
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	f003 020f 	and.w	r2, r3, #15
 80130b0:	6879      	ldr	r1, [r7, #4]
 80130b2:	4613      	mov	r3, r2
 80130b4:	009b      	lsls	r3, r3, #2
 80130b6:	4413      	add	r3, r2
 80130b8:	009b      	lsls	r3, r3, #2
 80130ba:	440b      	add	r3, r1
 80130bc:	3324      	adds	r3, #36	; 0x24
 80130be:	2200      	movs	r2, #0
 80130c0:	801a      	strh	r2, [r3, #0]
 80130c2:	4b32      	ldr	r3, [pc, #200]	; (801318c <USBD_CDC_DeInit+0xfc>)
 80130c4:	781b      	ldrb	r3, [r3, #0]
 80130c6:	4619      	mov	r1, r3
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f009 f9f8 	bl	801c4be <USBD_LL_CloseEP>
 80130ce:	4b2f      	ldr	r3, [pc, #188]	; (801318c <USBD_CDC_DeInit+0xfc>)
 80130d0:	781b      	ldrb	r3, [r3, #0]
 80130d2:	f003 020f 	and.w	r2, r3, #15
 80130d6:	6879      	ldr	r1, [r7, #4]
 80130d8:	4613      	mov	r3, r2
 80130da:	009b      	lsls	r3, r3, #2
 80130dc:	4413      	add	r3, r2
 80130de:	009b      	lsls	r3, r3, #2
 80130e0:	440b      	add	r3, r1
 80130e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80130e6:	2200      	movs	r2, #0
 80130e8:	801a      	strh	r2, [r3, #0]
 80130ea:	4b29      	ldr	r3, [pc, #164]	; (8013190 <USBD_CDC_DeInit+0x100>)
 80130ec:	781b      	ldrb	r3, [r3, #0]
 80130ee:	4619      	mov	r1, r3
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f009 f9e4 	bl	801c4be <USBD_LL_CloseEP>
 80130f6:	4b26      	ldr	r3, [pc, #152]	; (8013190 <USBD_CDC_DeInit+0x100>)
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	f003 020f 	and.w	r2, r3, #15
 80130fe:	6879      	ldr	r1, [r7, #4]
 8013100:	4613      	mov	r3, r2
 8013102:	009b      	lsls	r3, r3, #2
 8013104:	4413      	add	r3, r2
 8013106:	009b      	lsls	r3, r3, #2
 8013108:	440b      	add	r3, r1
 801310a:	3324      	adds	r3, #36	; 0x24
 801310c:	2200      	movs	r2, #0
 801310e:	801a      	strh	r2, [r3, #0]
 8013110:	4b1f      	ldr	r3, [pc, #124]	; (8013190 <USBD_CDC_DeInit+0x100>)
 8013112:	781b      	ldrb	r3, [r3, #0]
 8013114:	f003 020f 	and.w	r2, r3, #15
 8013118:	6879      	ldr	r1, [r7, #4]
 801311a:	4613      	mov	r3, r2
 801311c:	009b      	lsls	r3, r3, #2
 801311e:	4413      	add	r3, r2
 8013120:	009b      	lsls	r3, r3, #2
 8013122:	440b      	add	r3, r1
 8013124:	3326      	adds	r3, #38	; 0x26
 8013126:	2200      	movs	r2, #0
 8013128:	801a      	strh	r2, [r3, #0]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	32b0      	adds	r2, #176	; 0xb0
 8013134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d01f      	beq.n	801317c <USBD_CDC_DeInit+0xec>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013142:	687a      	ldr	r2, [r7, #4]
 8013144:	33b0      	adds	r3, #176	; 0xb0
 8013146:	009b      	lsls	r3, r3, #2
 8013148:	4413      	add	r3, r2
 801314a:	685b      	ldr	r3, [r3, #4]
 801314c:	685b      	ldr	r3, [r3, #4]
 801314e:	4798      	blx	r3
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	32b0      	adds	r2, #176	; 0xb0
 801315a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801315e:	4618      	mov	r0, r3
 8013160:	f009 fab8 	bl	801c6d4 <USBD_static_free>
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	32b0      	adds	r2, #176	; 0xb0
 801316e:	2100      	movs	r1, #0
 8013170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2200      	movs	r2, #0
 8013178:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 801317c:	2300      	movs	r3, #0
 801317e:	4618      	mov	r0, r3
 8013180:	3708      	adds	r7, #8
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	200000bf 	.word	0x200000bf
 801318c:	200000c0 	.word	0x200000c0
 8013190:	200000c1 	.word	0x200000c1

08013194 <USBD_CDC_Setup>:
 8013194:	b580      	push	{r7, lr}
 8013196:	b086      	sub	sp, #24
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
 801319c:	6039      	str	r1, [r7, #0]
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	32b0      	adds	r2, #176	; 0xb0
 80131a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131ac:	613b      	str	r3, [r7, #16]
 80131ae:	2300      	movs	r3, #0
 80131b0:	737b      	strb	r3, [r7, #13]
 80131b2:	2300      	movs	r3, #0
 80131b4:	817b      	strh	r3, [r7, #10]
 80131b6:	2300      	movs	r3, #0
 80131b8:	75fb      	strb	r3, [r7, #23]
 80131ba:	693b      	ldr	r3, [r7, #16]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d101      	bne.n	80131c4 <USBD_CDC_Setup+0x30>
 80131c0:	2303      	movs	r3, #3
 80131c2:	e0bf      	b.n	8013344 <USBD_CDC_Setup+0x1b0>
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	781b      	ldrb	r3, [r3, #0]
 80131c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d050      	beq.n	8013272 <USBD_CDC_Setup+0xde>
 80131d0:	2b20      	cmp	r3, #32
 80131d2:	f040 80af 	bne.w	8013334 <USBD_CDC_Setup+0x1a0>
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	88db      	ldrh	r3, [r3, #6]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d03a      	beq.n	8013254 <USBD_CDC_Setup+0xc0>
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	b25b      	sxtb	r3, r3
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	da1b      	bge.n	8013220 <USBD_CDC_Setup+0x8c>
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80131ee:	687a      	ldr	r2, [r7, #4]
 80131f0:	33b0      	adds	r3, #176	; 0xb0
 80131f2:	009b      	lsls	r3, r3, #2
 80131f4:	4413      	add	r3, r2
 80131f6:	685b      	ldr	r3, [r3, #4]
 80131f8:	689b      	ldr	r3, [r3, #8]
 80131fa:	683a      	ldr	r2, [r7, #0]
 80131fc:	7850      	ldrb	r0, [r2, #1]
 80131fe:	6939      	ldr	r1, [r7, #16]
 8013200:	683a      	ldr	r2, [r7, #0]
 8013202:	88d2      	ldrh	r2, [r2, #6]
 8013204:	4798      	blx	r3
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	88db      	ldrh	r3, [r3, #6]
 801320a:	2b07      	cmp	r3, #7
 801320c:	bf28      	it	cs
 801320e:	2307      	movcs	r3, #7
 8013210:	81fb      	strh	r3, [r7, #14]
 8013212:	693b      	ldr	r3, [r7, #16]
 8013214:	89fa      	ldrh	r2, [r7, #14]
 8013216:	4619      	mov	r1, r3
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f001 fd89 	bl	8014d30 <USBD_CtlSendData>
 801321e:	e090      	b.n	8013342 <USBD_CDC_Setup+0x1ae>
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	785a      	ldrb	r2, [r3, #1]
 8013224:	693b      	ldr	r3, [r7, #16]
 8013226:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 801322a:	683b      	ldr	r3, [r7, #0]
 801322c:	88db      	ldrh	r3, [r3, #6]
 801322e:	2b3f      	cmp	r3, #63	; 0x3f
 8013230:	d803      	bhi.n	801323a <USBD_CDC_Setup+0xa6>
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	88db      	ldrh	r3, [r3, #6]
 8013236:	b2da      	uxtb	r2, r3
 8013238:	e000      	b.n	801323c <USBD_CDC_Setup+0xa8>
 801323a:	2240      	movs	r2, #64	; 0x40
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 8013242:	6939      	ldr	r1, [r7, #16]
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801324a:	461a      	mov	r2, r3
 801324c:	6878      	ldr	r0, [r7, #4]
 801324e:	f001 fd9b 	bl	8014d88 <USBD_CtlPrepareRx>
 8013252:	e076      	b.n	8013342 <USBD_CDC_Setup+0x1ae>
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801325a:	687a      	ldr	r2, [r7, #4]
 801325c:	33b0      	adds	r3, #176	; 0xb0
 801325e:	009b      	lsls	r3, r3, #2
 8013260:	4413      	add	r3, r2
 8013262:	685b      	ldr	r3, [r3, #4]
 8013264:	689b      	ldr	r3, [r3, #8]
 8013266:	683a      	ldr	r2, [r7, #0]
 8013268:	7850      	ldrb	r0, [r2, #1]
 801326a:	2200      	movs	r2, #0
 801326c:	6839      	ldr	r1, [r7, #0]
 801326e:	4798      	blx	r3
 8013270:	e067      	b.n	8013342 <USBD_CDC_Setup+0x1ae>
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	785b      	ldrb	r3, [r3, #1]
 8013276:	2b0b      	cmp	r3, #11
 8013278:	d851      	bhi.n	801331e <USBD_CDC_Setup+0x18a>
 801327a:	a201      	add	r2, pc, #4	; (adr r2, 8013280 <USBD_CDC_Setup+0xec>)
 801327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013280:	080132b1 	.word	0x080132b1
 8013284:	0801332d 	.word	0x0801332d
 8013288:	0801331f 	.word	0x0801331f
 801328c:	0801331f 	.word	0x0801331f
 8013290:	0801331f 	.word	0x0801331f
 8013294:	0801331f 	.word	0x0801331f
 8013298:	0801331f 	.word	0x0801331f
 801329c:	0801331f 	.word	0x0801331f
 80132a0:	0801331f 	.word	0x0801331f
 80132a4:	0801331f 	.word	0x0801331f
 80132a8:	080132db 	.word	0x080132db
 80132ac:	08013305 	.word	0x08013305
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132b6:	b2db      	uxtb	r3, r3
 80132b8:	2b03      	cmp	r3, #3
 80132ba:	d107      	bne.n	80132cc <USBD_CDC_Setup+0x138>
 80132bc:	f107 030a 	add.w	r3, r7, #10
 80132c0:	2202      	movs	r2, #2
 80132c2:	4619      	mov	r1, r3
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f001 fd33 	bl	8014d30 <USBD_CtlSendData>
 80132ca:	e032      	b.n	8013332 <USBD_CDC_Setup+0x19e>
 80132cc:	6839      	ldr	r1, [r7, #0]
 80132ce:	6878      	ldr	r0, [r7, #4]
 80132d0:	f001 fcbd 	bl	8014c4e <USBD_CtlError>
 80132d4:	2303      	movs	r3, #3
 80132d6:	75fb      	strb	r3, [r7, #23]
 80132d8:	e02b      	b.n	8013332 <USBD_CDC_Setup+0x19e>
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132e0:	b2db      	uxtb	r3, r3
 80132e2:	2b03      	cmp	r3, #3
 80132e4:	d107      	bne.n	80132f6 <USBD_CDC_Setup+0x162>
 80132e6:	f107 030d 	add.w	r3, r7, #13
 80132ea:	2201      	movs	r2, #1
 80132ec:	4619      	mov	r1, r3
 80132ee:	6878      	ldr	r0, [r7, #4]
 80132f0:	f001 fd1e 	bl	8014d30 <USBD_CtlSendData>
 80132f4:	e01d      	b.n	8013332 <USBD_CDC_Setup+0x19e>
 80132f6:	6839      	ldr	r1, [r7, #0]
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f001 fca8 	bl	8014c4e <USBD_CtlError>
 80132fe:	2303      	movs	r3, #3
 8013300:	75fb      	strb	r3, [r7, #23]
 8013302:	e016      	b.n	8013332 <USBD_CDC_Setup+0x19e>
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801330a:	b2db      	uxtb	r3, r3
 801330c:	2b03      	cmp	r3, #3
 801330e:	d00f      	beq.n	8013330 <USBD_CDC_Setup+0x19c>
 8013310:	6839      	ldr	r1, [r7, #0]
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f001 fc9b 	bl	8014c4e <USBD_CtlError>
 8013318:	2303      	movs	r3, #3
 801331a:	75fb      	strb	r3, [r7, #23]
 801331c:	e008      	b.n	8013330 <USBD_CDC_Setup+0x19c>
 801331e:	6839      	ldr	r1, [r7, #0]
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	f001 fc94 	bl	8014c4e <USBD_CtlError>
 8013326:	2303      	movs	r3, #3
 8013328:	75fb      	strb	r3, [r7, #23]
 801332a:	e002      	b.n	8013332 <USBD_CDC_Setup+0x19e>
 801332c:	bf00      	nop
 801332e:	e008      	b.n	8013342 <USBD_CDC_Setup+0x1ae>
 8013330:	bf00      	nop
 8013332:	e006      	b.n	8013342 <USBD_CDC_Setup+0x1ae>
 8013334:	6839      	ldr	r1, [r7, #0]
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f001 fc89 	bl	8014c4e <USBD_CtlError>
 801333c:	2303      	movs	r3, #3
 801333e:	75fb      	strb	r3, [r7, #23]
 8013340:	bf00      	nop
 8013342:	7dfb      	ldrb	r3, [r7, #23]
 8013344:	4618      	mov	r0, r3
 8013346:	3718      	adds	r7, #24
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}

0801334c <USBD_CDC_DataIn>:
 801334c:	b580      	push	{r7, lr}
 801334e:	b084      	sub	sp, #16
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	460b      	mov	r3, r1
 8013356:	70fb      	strb	r3, [r7, #3]
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801335e:	60fb      	str	r3, [r7, #12]
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	32b0      	adds	r2, #176	; 0xb0
 801336a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d101      	bne.n	8013376 <USBD_CDC_DataIn+0x2a>
 8013372:	2303      	movs	r3, #3
 8013374:	e065      	b.n	8013442 <USBD_CDC_DataIn+0xf6>
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	32b0      	adds	r2, #176	; 0xb0
 8013380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013384:	60bb      	str	r3, [r7, #8]
 8013386:	78fb      	ldrb	r3, [r7, #3]
 8013388:	f003 020f 	and.w	r2, r3, #15
 801338c:	6879      	ldr	r1, [r7, #4]
 801338e:	4613      	mov	r3, r2
 8013390:	009b      	lsls	r3, r3, #2
 8013392:	4413      	add	r3, r2
 8013394:	009b      	lsls	r3, r3, #2
 8013396:	440b      	add	r3, r1
 8013398:	3318      	adds	r3, #24
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d02f      	beq.n	8013400 <USBD_CDC_DataIn+0xb4>
 80133a0:	78fb      	ldrb	r3, [r7, #3]
 80133a2:	f003 020f 	and.w	r2, r3, #15
 80133a6:	6879      	ldr	r1, [r7, #4]
 80133a8:	4613      	mov	r3, r2
 80133aa:	009b      	lsls	r3, r3, #2
 80133ac:	4413      	add	r3, r2
 80133ae:	009b      	lsls	r3, r3, #2
 80133b0:	440b      	add	r3, r1
 80133b2:	3318      	adds	r3, #24
 80133b4:	681a      	ldr	r2, [r3, #0]
 80133b6:	78fb      	ldrb	r3, [r7, #3]
 80133b8:	f003 010f 	and.w	r1, r3, #15
 80133bc:	68f8      	ldr	r0, [r7, #12]
 80133be:	460b      	mov	r3, r1
 80133c0:	00db      	lsls	r3, r3, #3
 80133c2:	440b      	add	r3, r1
 80133c4:	009b      	lsls	r3, r3, #2
 80133c6:	4403      	add	r3, r0
 80133c8:	3348      	adds	r3, #72	; 0x48
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80133d0:	fb01 f303 	mul.w	r3, r1, r3
 80133d4:	1ad3      	subs	r3, r2, r3
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d112      	bne.n	8013400 <USBD_CDC_DataIn+0xb4>
 80133da:	78fb      	ldrb	r3, [r7, #3]
 80133dc:	f003 020f 	and.w	r2, r3, #15
 80133e0:	6879      	ldr	r1, [r7, #4]
 80133e2:	4613      	mov	r3, r2
 80133e4:	009b      	lsls	r3, r3, #2
 80133e6:	4413      	add	r3, r2
 80133e8:	009b      	lsls	r3, r3, #2
 80133ea:	440b      	add	r3, r1
 80133ec:	3318      	adds	r3, #24
 80133ee:	2200      	movs	r2, #0
 80133f0:	601a      	str	r2, [r3, #0]
 80133f2:	78f9      	ldrb	r1, [r7, #3]
 80133f4:	2300      	movs	r3, #0
 80133f6:	2200      	movs	r2, #0
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f009 f908 	bl	801c60e <USBD_LL_Transmit>
 80133fe:	e01f      	b.n	8013440 <USBD_CDC_DataIn+0xf4>
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	2200      	movs	r2, #0
 8013404:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801340e:	687a      	ldr	r2, [r7, #4]
 8013410:	33b0      	adds	r3, #176	; 0xb0
 8013412:	009b      	lsls	r3, r3, #2
 8013414:	4413      	add	r3, r2
 8013416:	685b      	ldr	r3, [r3, #4]
 8013418:	691b      	ldr	r3, [r3, #16]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d010      	beq.n	8013440 <USBD_CDC_DataIn+0xf4>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013424:	687a      	ldr	r2, [r7, #4]
 8013426:	33b0      	adds	r3, #176	; 0xb0
 8013428:	009b      	lsls	r3, r3, #2
 801342a:	4413      	add	r3, r2
 801342c:	685b      	ldr	r3, [r3, #4]
 801342e:	691b      	ldr	r3, [r3, #16]
 8013430:	68ba      	ldr	r2, [r7, #8]
 8013432:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013436:	68ba      	ldr	r2, [r7, #8]
 8013438:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801343c:	78fa      	ldrb	r2, [r7, #3]
 801343e:	4798      	blx	r3
 8013440:	2300      	movs	r3, #0
 8013442:	4618      	mov	r0, r3
 8013444:	3710      	adds	r7, #16
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}

0801344a <USBD_CDC_DataOut>:
 801344a:	b580      	push	{r7, lr}
 801344c:	b084      	sub	sp, #16
 801344e:	af00      	add	r7, sp, #0
 8013450:	6078      	str	r0, [r7, #4]
 8013452:	460b      	mov	r3, r1
 8013454:	70fb      	strb	r3, [r7, #3]
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	32b0      	adds	r2, #176	; 0xb0
 8013460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013464:	60fb      	str	r3, [r7, #12]
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	32b0      	adds	r2, #176	; 0xb0
 8013470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d101      	bne.n	801347c <USBD_CDC_DataOut+0x32>
 8013478:	2303      	movs	r3, #3
 801347a:	e01a      	b.n	80134b2 <USBD_CDC_DataOut+0x68>
 801347c:	78fb      	ldrb	r3, [r7, #3]
 801347e:	4619      	mov	r1, r3
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	f009 f906 	bl	801c692 <USBD_LL_GetRxDataSize>
 8013486:	4602      	mov	r2, r0
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013494:	687a      	ldr	r2, [r7, #4]
 8013496:	33b0      	adds	r3, #176	; 0xb0
 8013498:	009b      	lsls	r3, r3, #2
 801349a:	4413      	add	r3, r2
 801349c:	685b      	ldr	r3, [r3, #4]
 801349e:	68db      	ldr	r3, [r3, #12]
 80134a0:	68fa      	ldr	r2, [r7, #12]
 80134a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80134a6:	68fa      	ldr	r2, [r7, #12]
 80134a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80134ac:	4611      	mov	r1, r2
 80134ae:	4798      	blx	r3
 80134b0:	2300      	movs	r3, #0
 80134b2:	4618      	mov	r0, r3
 80134b4:	3710      	adds	r7, #16
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}

080134ba <USBD_CDC_EP0_RxReady>:
 80134ba:	b580      	push	{r7, lr}
 80134bc:	b084      	sub	sp, #16
 80134be:	af00      	add	r7, sp, #0
 80134c0:	6078      	str	r0, [r7, #4]
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	32b0      	adds	r2, #176	; 0xb0
 80134cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134d0:	60fb      	str	r3, [r7, #12]
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d101      	bne.n	80134dc <USBD_CDC_EP0_RxReady+0x22>
 80134d8:	2303      	movs	r3, #3
 80134da:	e025      	b.n	8013528 <USBD_CDC_EP0_RxReady+0x6e>
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80134e2:	687a      	ldr	r2, [r7, #4]
 80134e4:	33b0      	adds	r3, #176	; 0xb0
 80134e6:	009b      	lsls	r3, r3, #2
 80134e8:	4413      	add	r3, r2
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d01a      	beq.n	8013526 <USBD_CDC_EP0_RxReady+0x6c>
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80134f6:	2bff      	cmp	r3, #255	; 0xff
 80134f8:	d015      	beq.n	8013526 <USBD_CDC_EP0_RxReady+0x6c>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013500:	687a      	ldr	r2, [r7, #4]
 8013502:	33b0      	adds	r3, #176	; 0xb0
 8013504:	009b      	lsls	r3, r3, #2
 8013506:	4413      	add	r3, r2
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	689b      	ldr	r3, [r3, #8]
 801350c:	68fa      	ldr	r2, [r7, #12]
 801350e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
 8013512:	68f9      	ldr	r1, [r7, #12]
 8013514:	68fa      	ldr	r2, [r7, #12]
 8013516:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
 801351a:	b292      	uxth	r2, r2
 801351c:	4798      	blx	r3
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	22ff      	movs	r2, #255	; 0xff
 8013522:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8013526:	2300      	movs	r3, #0
 8013528:	4618      	mov	r0, r3
 801352a:	3710      	adds	r7, #16
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}

08013530 <USBD_CDC_GetFSCfgDesc>:
 8013530:	b580      	push	{r7, lr}
 8013532:	b086      	sub	sp, #24
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	2182      	movs	r1, #130	; 0x82
 801353a:	4818      	ldr	r0, [pc, #96]	; (801359c <USBD_CDC_GetFSCfgDesc+0x6c>)
 801353c:	f000 fd4f 	bl	8013fde <USBD_GetEpDesc>
 8013540:	6178      	str	r0, [r7, #20]
 8013542:	2101      	movs	r1, #1
 8013544:	4815      	ldr	r0, [pc, #84]	; (801359c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013546:	f000 fd4a 	bl	8013fde <USBD_GetEpDesc>
 801354a:	6138      	str	r0, [r7, #16]
 801354c:	2181      	movs	r1, #129	; 0x81
 801354e:	4813      	ldr	r0, [pc, #76]	; (801359c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013550:	f000 fd45 	bl	8013fde <USBD_GetEpDesc>
 8013554:	60f8      	str	r0, [r7, #12]
 8013556:	697b      	ldr	r3, [r7, #20]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d002      	beq.n	8013562 <USBD_CDC_GetFSCfgDesc+0x32>
 801355c:	697b      	ldr	r3, [r7, #20]
 801355e:	2210      	movs	r2, #16
 8013560:	719a      	strb	r2, [r3, #6]
 8013562:	693b      	ldr	r3, [r7, #16]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d006      	beq.n	8013576 <USBD_CDC_GetFSCfgDesc+0x46>
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	2200      	movs	r2, #0
 801356c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013570:	711a      	strb	r2, [r3, #4]
 8013572:	2200      	movs	r2, #0
 8013574:	715a      	strb	r2, [r3, #5]
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d006      	beq.n	801358a <USBD_CDC_GetFSCfgDesc+0x5a>
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	2200      	movs	r2, #0
 8013580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013584:	711a      	strb	r2, [r3, #4]
 8013586:	2200      	movs	r2, #0
 8013588:	715a      	strb	r2, [r3, #5]
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	2243      	movs	r2, #67	; 0x43
 801358e:	801a      	strh	r2, [r3, #0]
 8013590:	4b02      	ldr	r3, [pc, #8]	; (801359c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013592:	4618      	mov	r0, r3
 8013594:	3718      	adds	r7, #24
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}
 801359a:	bf00      	nop
 801359c:	2000007c 	.word	0x2000007c

080135a0 <USBD_CDC_GetHSCfgDesc>:
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b086      	sub	sp, #24
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	2182      	movs	r1, #130	; 0x82
 80135aa:	4818      	ldr	r0, [pc, #96]	; (801360c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80135ac:	f000 fd17 	bl	8013fde <USBD_GetEpDesc>
 80135b0:	6178      	str	r0, [r7, #20]
 80135b2:	2101      	movs	r1, #1
 80135b4:	4815      	ldr	r0, [pc, #84]	; (801360c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80135b6:	f000 fd12 	bl	8013fde <USBD_GetEpDesc>
 80135ba:	6138      	str	r0, [r7, #16]
 80135bc:	2181      	movs	r1, #129	; 0x81
 80135be:	4813      	ldr	r0, [pc, #76]	; (801360c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80135c0:	f000 fd0d 	bl	8013fde <USBD_GetEpDesc>
 80135c4:	60f8      	str	r0, [r7, #12]
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d002      	beq.n	80135d2 <USBD_CDC_GetHSCfgDesc+0x32>
 80135cc:	697b      	ldr	r3, [r7, #20]
 80135ce:	2210      	movs	r2, #16
 80135d0:	719a      	strb	r2, [r3, #6]
 80135d2:	693b      	ldr	r3, [r7, #16]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d006      	beq.n	80135e6 <USBD_CDC_GetHSCfgDesc+0x46>
 80135d8:	693b      	ldr	r3, [r7, #16]
 80135da:	2200      	movs	r2, #0
 80135dc:	711a      	strb	r2, [r3, #4]
 80135de:	2200      	movs	r2, #0
 80135e0:	f042 0202 	orr.w	r2, r2, #2
 80135e4:	715a      	strb	r2, [r3, #5]
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d006      	beq.n	80135fa <USBD_CDC_GetHSCfgDesc+0x5a>
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	2200      	movs	r2, #0
 80135f0:	711a      	strb	r2, [r3, #4]
 80135f2:	2200      	movs	r2, #0
 80135f4:	f042 0202 	orr.w	r2, r2, #2
 80135f8:	715a      	strb	r2, [r3, #5]
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	2243      	movs	r2, #67	; 0x43
 80135fe:	801a      	strh	r2, [r3, #0]
 8013600:	4b02      	ldr	r3, [pc, #8]	; (801360c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013602:	4618      	mov	r0, r3
 8013604:	3718      	adds	r7, #24
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}
 801360a:	bf00      	nop
 801360c:	2000007c 	.word	0x2000007c

08013610 <USBD_CDC_GetOtherSpeedCfgDesc>:
 8013610:	b580      	push	{r7, lr}
 8013612:	b086      	sub	sp, #24
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
 8013618:	2182      	movs	r1, #130	; 0x82
 801361a:	4818      	ldr	r0, [pc, #96]	; (801367c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801361c:	f000 fcdf 	bl	8013fde <USBD_GetEpDesc>
 8013620:	6178      	str	r0, [r7, #20]
 8013622:	2101      	movs	r1, #1
 8013624:	4815      	ldr	r0, [pc, #84]	; (801367c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013626:	f000 fcda 	bl	8013fde <USBD_GetEpDesc>
 801362a:	6138      	str	r0, [r7, #16]
 801362c:	2181      	movs	r1, #129	; 0x81
 801362e:	4813      	ldr	r0, [pc, #76]	; (801367c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013630:	f000 fcd5 	bl	8013fde <USBD_GetEpDesc>
 8013634:	60f8      	str	r0, [r7, #12]
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d002      	beq.n	8013642 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
 801363c:	697b      	ldr	r3, [r7, #20]
 801363e:	2210      	movs	r2, #16
 8013640:	719a      	strb	r2, [r3, #6]
 8013642:	693b      	ldr	r3, [r7, #16]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d006      	beq.n	8013656 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
 8013648:	693b      	ldr	r3, [r7, #16]
 801364a:	2200      	movs	r2, #0
 801364c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013650:	711a      	strb	r2, [r3, #4]
 8013652:	2200      	movs	r2, #0
 8013654:	715a      	strb	r2, [r3, #5]
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d006      	beq.n	801366a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	2200      	movs	r2, #0
 8013660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013664:	711a      	strb	r2, [r3, #4]
 8013666:	2200      	movs	r2, #0
 8013668:	715a      	strb	r2, [r3, #5]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2243      	movs	r2, #67	; 0x43
 801366e:	801a      	strh	r2, [r3, #0]
 8013670:	4b02      	ldr	r3, [pc, #8]	; (801367c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013672:	4618      	mov	r0, r3
 8013674:	3718      	adds	r7, #24
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}
 801367a:	bf00      	nop
 801367c:	2000007c 	.word	0x2000007c

08013680 <USBD_CDC_GetDeviceQualifierDescriptor>:
 8013680:	b480      	push	{r7}
 8013682:	b083      	sub	sp, #12
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	220a      	movs	r2, #10
 801368c:	801a      	strh	r2, [r3, #0]
 801368e:	4b03      	ldr	r3, [pc, #12]	; (801369c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
 8013690:	4618      	mov	r0, r3
 8013692:	370c      	adds	r7, #12
 8013694:	46bd      	mov	sp, r7
 8013696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369a:	4770      	bx	lr
 801369c:	20000038 	.word	0x20000038

080136a0 <USBD_CDC_RegisterInterface>:
 80136a0:	b480      	push	{r7}
 80136a2:	b083      	sub	sp, #12
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	6039      	str	r1, [r7, #0]
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d101      	bne.n	80136b4 <USBD_CDC_RegisterInterface+0x14>
 80136b0:	2303      	movs	r3, #3
 80136b2:	e009      	b.n	80136c8 <USBD_CDC_RegisterInterface+0x28>
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80136ba:	687a      	ldr	r2, [r7, #4]
 80136bc:	33b0      	adds	r3, #176	; 0xb0
 80136be:	009b      	lsls	r3, r3, #2
 80136c0:	4413      	add	r3, r2
 80136c2:	683a      	ldr	r2, [r7, #0]
 80136c4:	605a      	str	r2, [r3, #4]
 80136c6:	2300      	movs	r3, #0
 80136c8:	4618      	mov	r0, r3
 80136ca:	370c      	adds	r7, #12
 80136cc:	46bd      	mov	sp, r7
 80136ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d2:	4770      	bx	lr

080136d4 <USBD_CDC_SetTxBuffer>:
 80136d4:	b480      	push	{r7}
 80136d6:	b087      	sub	sp, #28
 80136d8:	af00      	add	r7, sp, #0
 80136da:	60f8      	str	r0, [r7, #12]
 80136dc:	60b9      	str	r1, [r7, #8]
 80136de:	607a      	str	r2, [r7, #4]
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	32b0      	adds	r2, #176	; 0xb0
 80136ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136ee:	617b      	str	r3, [r7, #20]
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d101      	bne.n	80136fa <USBD_CDC_SetTxBuffer+0x26>
 80136f6:	2303      	movs	r3, #3
 80136f8:	e008      	b.n	801370c <USBD_CDC_SetTxBuffer+0x38>
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	68ba      	ldr	r2, [r7, #8]
 80136fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8013702:	697b      	ldr	r3, [r7, #20]
 8013704:	687a      	ldr	r2, [r7, #4]
 8013706:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 801370a:	2300      	movs	r3, #0
 801370c:	4618      	mov	r0, r3
 801370e:	371c      	adds	r7, #28
 8013710:	46bd      	mov	sp, r7
 8013712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013716:	4770      	bx	lr

08013718 <USBD_CDC_SetRxBuffer>:
 8013718:	b480      	push	{r7}
 801371a:	b085      	sub	sp, #20
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
 8013720:	6039      	str	r1, [r7, #0]
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	32b0      	adds	r2, #176	; 0xb0
 801372c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013730:	60fb      	str	r3, [r7, #12]
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d101      	bne.n	801373c <USBD_CDC_SetRxBuffer+0x24>
 8013738:	2303      	movs	r3, #3
 801373a:	e004      	b.n	8013746 <USBD_CDC_SetRxBuffer+0x2e>
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	683a      	ldr	r2, [r7, #0]
 8013740:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8013744:	2300      	movs	r3, #0
 8013746:	4618      	mov	r0, r3
 8013748:	3714      	adds	r7, #20
 801374a:	46bd      	mov	sp, r7
 801374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013750:	4770      	bx	lr
	...

08013754 <USBD_CDC_TransmitPacket>:
 8013754:	b580      	push	{r7, lr}
 8013756:	b084      	sub	sp, #16
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	32b0      	adds	r2, #176	; 0xb0
 8013766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801376a:	60bb      	str	r3, [r7, #8]
 801376c:	2301      	movs	r3, #1
 801376e:	73fb      	strb	r3, [r7, #15]
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	32b0      	adds	r2, #176	; 0xb0
 801377a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d101      	bne.n	8013786 <USBD_CDC_TransmitPacket+0x32>
 8013782:	2303      	movs	r3, #3
 8013784:	e025      	b.n	80137d2 <USBD_CDC_TransmitPacket+0x7e>
 8013786:	68bb      	ldr	r3, [r7, #8]
 8013788:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801378c:	2b00      	cmp	r3, #0
 801378e:	d11f      	bne.n	80137d0 <USBD_CDC_TransmitPacket+0x7c>
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	2201      	movs	r2, #1
 8013794:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8013798:	4b10      	ldr	r3, [pc, #64]	; (80137dc <USBD_CDC_TransmitPacket+0x88>)
 801379a:	781b      	ldrb	r3, [r3, #0]
 801379c:	f003 020f 	and.w	r2, r3, #15
 80137a0:	68bb      	ldr	r3, [r7, #8]
 80137a2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80137a6:	6878      	ldr	r0, [r7, #4]
 80137a8:	4613      	mov	r3, r2
 80137aa:	009b      	lsls	r3, r3, #2
 80137ac:	4413      	add	r3, r2
 80137ae:	009b      	lsls	r3, r3, #2
 80137b0:	4403      	add	r3, r0
 80137b2:	3318      	adds	r3, #24
 80137b4:	6019      	str	r1, [r3, #0]
 80137b6:	4b09      	ldr	r3, [pc, #36]	; (80137dc <USBD_CDC_TransmitPacket+0x88>)
 80137b8:	7819      	ldrb	r1, [r3, #0]
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f008 ff21 	bl	801c60e <USBD_LL_Transmit>
 80137cc:	2300      	movs	r3, #0
 80137ce:	73fb      	strb	r3, [r7, #15]
 80137d0:	7bfb      	ldrb	r3, [r7, #15]
 80137d2:	4618      	mov	r0, r3
 80137d4:	3710      	adds	r7, #16
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}
 80137da:	bf00      	nop
 80137dc:	200000bf 	.word	0x200000bf

080137e0 <USBD_CDC_ReceivePacket>:
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b084      	sub	sp, #16
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	32b0      	adds	r2, #176	; 0xb0
 80137f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137f6:	60fb      	str	r3, [r7, #12]
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	32b0      	adds	r2, #176	; 0xb0
 8013802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d101      	bne.n	801380e <USBD_CDC_ReceivePacket+0x2e>
 801380a:	2303      	movs	r3, #3
 801380c:	e018      	b.n	8013840 <USBD_CDC_ReceivePacket+0x60>
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	7c1b      	ldrb	r3, [r3, #16]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d10a      	bne.n	801382c <USBD_CDC_ReceivePacket+0x4c>
 8013816:	4b0c      	ldr	r3, [pc, #48]	; (8013848 <USBD_CDC_ReceivePacket+0x68>)
 8013818:	7819      	ldrb	r1, [r3, #0]
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	f008 ff13 	bl	801c650 <USBD_LL_PrepareReceive>
 801382a:	e008      	b.n	801383e <USBD_CDC_ReceivePacket+0x5e>
 801382c:	4b06      	ldr	r3, [pc, #24]	; (8013848 <USBD_CDC_ReceivePacket+0x68>)
 801382e:	7819      	ldrb	r1, [r3, #0]
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013836:	2340      	movs	r3, #64	; 0x40
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f008 ff09 	bl	801c650 <USBD_LL_PrepareReceive>
 801383e:	2300      	movs	r3, #0
 8013840:	4618      	mov	r0, r3
 8013842:	3710      	adds	r7, #16
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}
 8013848:	200000c0 	.word	0x200000c0

0801384c <USBD_Init>:
 801384c:	b580      	push	{r7, lr}
 801384e:	b086      	sub	sp, #24
 8013850:	af00      	add	r7, sp, #0
 8013852:	60f8      	str	r0, [r7, #12]
 8013854:	60b9      	str	r1, [r7, #8]
 8013856:	4613      	mov	r3, r2
 8013858:	71fb      	strb	r3, [r7, #7]
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d101      	bne.n	8013864 <USBD_Init+0x18>
 8013860:	2303      	movs	r3, #3
 8013862:	e01f      	b.n	80138a4 <USBD_Init+0x58>
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	2200      	movs	r2, #0
 8013868:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	2200      	movs	r2, #0
 8013870:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	2200      	movs	r2, #0
 8013878:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d003      	beq.n	801388a <USBD_Init+0x3e>
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	68ba      	ldr	r2, [r7, #8]
 8013886:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2201      	movs	r2, #1
 801388e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	79fa      	ldrb	r2, [r7, #7]
 8013896:	701a      	strb	r2, [r3, #0]
 8013898:	68f8      	ldr	r0, [r7, #12]
 801389a:	f008 fd83 	bl	801c3a4 <USBD_LL_Init>
 801389e:	4603      	mov	r3, r0
 80138a0:	75fb      	strb	r3, [r7, #23]
 80138a2:	7dfb      	ldrb	r3, [r7, #23]
 80138a4:	4618      	mov	r0, r3
 80138a6:	3718      	adds	r7, #24
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}

080138ac <USBD_RegisterClass>:
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b084      	sub	sp, #16
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	6039      	str	r1, [r7, #0]
 80138b6:	2300      	movs	r3, #0
 80138b8:	81fb      	strh	r3, [r7, #14]
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d101      	bne.n	80138c4 <USBD_RegisterClass+0x18>
 80138c0:	2303      	movs	r3, #3
 80138c2:	e025      	b.n	8013910 <USBD_RegisterClass+0x64>
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	683a      	ldr	r2, [r7, #0]
 80138c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	32ae      	adds	r2, #174	; 0xae
 80138d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d00f      	beq.n	8013900 <USBD_RegisterClass+0x54>
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	32ae      	adds	r2, #174	; 0xae
 80138ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138f0:	f107 020e 	add.w	r2, r7, #14
 80138f4:	4610      	mov	r0, r2
 80138f6:	4798      	blx	r3
 80138f8:	4602      	mov	r2, r0
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013906:	1c5a      	adds	r2, r3, #1
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
 801390e:	2300      	movs	r3, #0
 8013910:	4618      	mov	r0, r3
 8013912:	3710      	adds	r7, #16
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}

08013918 <USBD_Start>:
 8013918:	b580      	push	{r7, lr}
 801391a:	b082      	sub	sp, #8
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f008 fd8b 	bl	801c43c <USBD_LL_Start>
 8013926:	4603      	mov	r3, r0
 8013928:	4618      	mov	r0, r3
 801392a:	3708      	adds	r7, #8
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}

08013930 <USBD_RunTestMode>:
 8013930:	b480      	push	{r7}
 8013932:	b083      	sub	sp, #12
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
 8013938:	2300      	movs	r3, #0
 801393a:	4618      	mov	r0, r3
 801393c:	370c      	adds	r7, #12
 801393e:	46bd      	mov	sp, r7
 8013940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013944:	4770      	bx	lr

08013946 <USBD_SetClassConfig>:
 8013946:	b580      	push	{r7, lr}
 8013948:	b084      	sub	sp, #16
 801394a:	af00      	add	r7, sp, #0
 801394c:	6078      	str	r0, [r7, #4]
 801394e:	460b      	mov	r3, r1
 8013950:	70fb      	strb	r3, [r7, #3]
 8013952:	2300      	movs	r3, #0
 8013954:	73fb      	strb	r3, [r7, #15]
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801395c:	2b00      	cmp	r3, #0
 801395e:	d009      	beq.n	8013974 <USBD_SetClassConfig+0x2e>
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	78fa      	ldrb	r2, [r7, #3]
 801396a:	4611      	mov	r1, r2
 801396c:	6878      	ldr	r0, [r7, #4]
 801396e:	4798      	blx	r3
 8013970:	4603      	mov	r3, r0
 8013972:	73fb      	strb	r3, [r7, #15]
 8013974:	7bfb      	ldrb	r3, [r7, #15]
 8013976:	4618      	mov	r0, r3
 8013978:	3710      	adds	r7, #16
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}

0801397e <USBD_ClrClassConfig>:
 801397e:	b580      	push	{r7, lr}
 8013980:	b084      	sub	sp, #16
 8013982:	af00      	add	r7, sp, #0
 8013984:	6078      	str	r0, [r7, #4]
 8013986:	460b      	mov	r3, r1
 8013988:	70fb      	strb	r3, [r7, #3]
 801398a:	2300      	movs	r3, #0
 801398c:	73fb      	strb	r3, [r7, #15]
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013994:	685b      	ldr	r3, [r3, #4]
 8013996:	78fa      	ldrb	r2, [r7, #3]
 8013998:	4611      	mov	r1, r2
 801399a:	6878      	ldr	r0, [r7, #4]
 801399c:	4798      	blx	r3
 801399e:	4603      	mov	r3, r0
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d001      	beq.n	80139a8 <USBD_ClrClassConfig+0x2a>
 80139a4:	2303      	movs	r3, #3
 80139a6:	73fb      	strb	r3, [r7, #15]
 80139a8:	7bfb      	ldrb	r3, [r7, #15]
 80139aa:	4618      	mov	r0, r3
 80139ac:	3710      	adds	r7, #16
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}

080139b2 <USBD_LL_SetupStage>:
 80139b2:	b580      	push	{r7, lr}
 80139b4:	b084      	sub	sp, #16
 80139b6:	af00      	add	r7, sp, #0
 80139b8:	6078      	str	r0, [r7, #4]
 80139ba:	6039      	str	r1, [r7, #0]
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80139c2:	6839      	ldr	r1, [r7, #0]
 80139c4:	4618      	mov	r0, r3
 80139c6:	f001 f908 	bl	8014bda <USBD_ParseSetupRequest>
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2201      	movs	r2, #1
 80139ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80139d8:	461a      	mov	r2, r3
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80139e6:	f003 031f 	and.w	r3, r3, #31
 80139ea:	2b02      	cmp	r3, #2
 80139ec:	d01a      	beq.n	8013a24 <USBD_LL_SetupStage+0x72>
 80139ee:	2b02      	cmp	r3, #2
 80139f0:	d822      	bhi.n	8013a38 <USBD_LL_SetupStage+0x86>
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d002      	beq.n	80139fc <USBD_LL_SetupStage+0x4a>
 80139f6:	2b01      	cmp	r3, #1
 80139f8:	d00a      	beq.n	8013a10 <USBD_LL_SetupStage+0x5e>
 80139fa:	e01d      	b.n	8013a38 <USBD_LL_SetupStage+0x86>
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013a02:	4619      	mov	r1, r3
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f000 fb5f 	bl	80140c8 <USBD_StdDevReq>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	73fb      	strb	r3, [r7, #15]
 8013a0e:	e020      	b.n	8013a52 <USBD_LL_SetupStage+0xa0>
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013a16:	4619      	mov	r1, r3
 8013a18:	6878      	ldr	r0, [r7, #4]
 8013a1a:	f000 fbc7 	bl	80141ac <USBD_StdItfReq>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	73fb      	strb	r3, [r7, #15]
 8013a22:	e016      	b.n	8013a52 <USBD_LL_SetupStage+0xa0>
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013a2a:	4619      	mov	r1, r3
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f000 fc29 	bl	8014284 <USBD_StdEPReq>
 8013a32:	4603      	mov	r3, r0
 8013a34:	73fb      	strb	r3, [r7, #15]
 8013a36:	e00c      	b.n	8013a52 <USBD_LL_SetupStage+0xa0>
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013a3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013a42:	b2db      	uxtb	r3, r3
 8013a44:	4619      	mov	r1, r3
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f008 fd58 	bl	801c4fc <USBD_LL_StallEP>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	73fb      	strb	r3, [r7, #15]
 8013a50:	bf00      	nop
 8013a52:	7bfb      	ldrb	r3, [r7, #15]
 8013a54:	4618      	mov	r0, r3
 8013a56:	3710      	adds	r7, #16
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}

08013a5c <USBD_LL_DataOutStage>:
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b086      	sub	sp, #24
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	60f8      	str	r0, [r7, #12]
 8013a64:	460b      	mov	r3, r1
 8013a66:	607a      	str	r2, [r7, #4]
 8013a68:	72fb      	strb	r3, [r7, #11]
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	75fb      	strb	r3, [r7, #23]
 8013a6e:	7afb      	ldrb	r3, [r7, #11]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d16e      	bne.n	8013b52 <USBD_LL_DataOutStage+0xf6>
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013a7a:	613b      	str	r3, [r7, #16]
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013a82:	2b03      	cmp	r3, #3
 8013a84:	f040 8098 	bne.w	8013bb8 <USBD_LL_DataOutStage+0x15c>
 8013a88:	693b      	ldr	r3, [r7, #16]
 8013a8a:	689a      	ldr	r2, [r3, #8]
 8013a8c:	693b      	ldr	r3, [r7, #16]
 8013a8e:	68db      	ldr	r3, [r3, #12]
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d913      	bls.n	8013abc <USBD_LL_DataOutStage+0x60>
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	689a      	ldr	r2, [r3, #8]
 8013a98:	693b      	ldr	r3, [r7, #16]
 8013a9a:	68db      	ldr	r3, [r3, #12]
 8013a9c:	1ad2      	subs	r2, r2, r3
 8013a9e:	693b      	ldr	r3, [r7, #16]
 8013aa0:	609a      	str	r2, [r3, #8]
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	68da      	ldr	r2, [r3, #12]
 8013aa6:	693b      	ldr	r3, [r7, #16]
 8013aa8:	689b      	ldr	r3, [r3, #8]
 8013aaa:	4293      	cmp	r3, r2
 8013aac:	bf28      	it	cs
 8013aae:	4613      	movcs	r3, r2
 8013ab0:	461a      	mov	r2, r3
 8013ab2:	6879      	ldr	r1, [r7, #4]
 8013ab4:	68f8      	ldr	r0, [r7, #12]
 8013ab6:	f001 f984 	bl	8014dc2 <USBD_CtlContinueRx>
 8013aba:	e07d      	b.n	8013bb8 <USBD_LL_DataOutStage+0x15c>
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013ac2:	f003 031f 	and.w	r3, r3, #31
 8013ac6:	2b02      	cmp	r3, #2
 8013ac8:	d014      	beq.n	8013af4 <USBD_LL_DataOutStage+0x98>
 8013aca:	2b02      	cmp	r3, #2
 8013acc:	d81d      	bhi.n	8013b0a <USBD_LL_DataOutStage+0xae>
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d002      	beq.n	8013ad8 <USBD_LL_DataOutStage+0x7c>
 8013ad2:	2b01      	cmp	r3, #1
 8013ad4:	d003      	beq.n	8013ade <USBD_LL_DataOutStage+0x82>
 8013ad6:	e018      	b.n	8013b0a <USBD_LL_DataOutStage+0xae>
 8013ad8:	2300      	movs	r3, #0
 8013ada:	75bb      	strb	r3, [r7, #22]
 8013adc:	e018      	b.n	8013b10 <USBD_LL_DataOutStage+0xb4>
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	4619      	mov	r1, r3
 8013ae8:	68f8      	ldr	r0, [r7, #12]
 8013aea:	f000 fa5e 	bl	8013faa <USBD_CoreFindIF>
 8013aee:	4603      	mov	r3, r0
 8013af0:	75bb      	strb	r3, [r7, #22]
 8013af2:	e00d      	b.n	8013b10 <USBD_LL_DataOutStage+0xb4>
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013afa:	b2db      	uxtb	r3, r3
 8013afc:	4619      	mov	r1, r3
 8013afe:	68f8      	ldr	r0, [r7, #12]
 8013b00:	f000 fa60 	bl	8013fc4 <USBD_CoreFindEP>
 8013b04:	4603      	mov	r3, r0
 8013b06:	75bb      	strb	r3, [r7, #22]
 8013b08:	e002      	b.n	8013b10 <USBD_LL_DataOutStage+0xb4>
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	75bb      	strb	r3, [r7, #22]
 8013b0e:	bf00      	nop
 8013b10:	7dbb      	ldrb	r3, [r7, #22]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d119      	bne.n	8013b4a <USBD_LL_DataOutStage+0xee>
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b1c:	b2db      	uxtb	r3, r3
 8013b1e:	2b03      	cmp	r3, #3
 8013b20:	d113      	bne.n	8013b4a <USBD_LL_DataOutStage+0xee>
 8013b22:	7dba      	ldrb	r2, [r7, #22]
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	32ae      	adds	r2, #174	; 0xae
 8013b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b2c:	691b      	ldr	r3, [r3, #16]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d00b      	beq.n	8013b4a <USBD_LL_DataOutStage+0xee>
 8013b32:	7dba      	ldrb	r2, [r7, #22]
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8013b3a:	7dba      	ldrb	r2, [r7, #22]
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	32ae      	adds	r2, #174	; 0xae
 8013b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b44:	691b      	ldr	r3, [r3, #16]
 8013b46:	68f8      	ldr	r0, [r7, #12]
 8013b48:	4798      	blx	r3
 8013b4a:	68f8      	ldr	r0, [r7, #12]
 8013b4c:	f001 f94a 	bl	8014de4 <USBD_CtlSendStatus>
 8013b50:	e032      	b.n	8013bb8 <USBD_LL_DataOutStage+0x15c>
 8013b52:	7afb      	ldrb	r3, [r7, #11]
 8013b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b58:	b2db      	uxtb	r3, r3
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	68f8      	ldr	r0, [r7, #12]
 8013b5e:	f000 fa31 	bl	8013fc4 <USBD_CoreFindEP>
 8013b62:	4603      	mov	r3, r0
 8013b64:	75bb      	strb	r3, [r7, #22]
 8013b66:	7dbb      	ldrb	r3, [r7, #22]
 8013b68:	2bff      	cmp	r3, #255	; 0xff
 8013b6a:	d025      	beq.n	8013bb8 <USBD_LL_DataOutStage+0x15c>
 8013b6c:	7dbb      	ldrb	r3, [r7, #22]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d122      	bne.n	8013bb8 <USBD_LL_DataOutStage+0x15c>
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b78:	b2db      	uxtb	r3, r3
 8013b7a:	2b03      	cmp	r3, #3
 8013b7c:	d117      	bne.n	8013bae <USBD_LL_DataOutStage+0x152>
 8013b7e:	7dba      	ldrb	r2, [r7, #22]
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	32ae      	adds	r2, #174	; 0xae
 8013b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b88:	699b      	ldr	r3, [r3, #24]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d00f      	beq.n	8013bae <USBD_LL_DataOutStage+0x152>
 8013b8e:	7dba      	ldrb	r2, [r7, #22]
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8013b96:	7dba      	ldrb	r2, [r7, #22]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	32ae      	adds	r2, #174	; 0xae
 8013b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ba0:	699b      	ldr	r3, [r3, #24]
 8013ba2:	7afa      	ldrb	r2, [r7, #11]
 8013ba4:	4611      	mov	r1, r2
 8013ba6:	68f8      	ldr	r0, [r7, #12]
 8013ba8:	4798      	blx	r3
 8013baa:	4603      	mov	r3, r0
 8013bac:	75fb      	strb	r3, [r7, #23]
 8013bae:	7dfb      	ldrb	r3, [r7, #23]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d001      	beq.n	8013bb8 <USBD_LL_DataOutStage+0x15c>
 8013bb4:	7dfb      	ldrb	r3, [r7, #23]
 8013bb6:	e000      	b.n	8013bba <USBD_LL_DataOutStage+0x15e>
 8013bb8:	2300      	movs	r3, #0
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3718      	adds	r7, #24
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}

08013bc2 <USBD_LL_DataInStage>:
 8013bc2:	b580      	push	{r7, lr}
 8013bc4:	b086      	sub	sp, #24
 8013bc6:	af00      	add	r7, sp, #0
 8013bc8:	60f8      	str	r0, [r7, #12]
 8013bca:	460b      	mov	r3, r1
 8013bcc:	607a      	str	r2, [r7, #4]
 8013bce:	72fb      	strb	r3, [r7, #11]
 8013bd0:	7afb      	ldrb	r3, [r7, #11]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d16f      	bne.n	8013cb6 <USBD_LL_DataInStage+0xf4>
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	3314      	adds	r3, #20
 8013bda:	613b      	str	r3, [r7, #16]
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013be2:	2b02      	cmp	r3, #2
 8013be4:	d15a      	bne.n	8013c9c <USBD_LL_DataInStage+0xda>
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	689a      	ldr	r2, [r3, #8]
 8013bea:	693b      	ldr	r3, [r7, #16]
 8013bec:	68db      	ldr	r3, [r3, #12]
 8013bee:	429a      	cmp	r2, r3
 8013bf0:	d914      	bls.n	8013c1c <USBD_LL_DataInStage+0x5a>
 8013bf2:	693b      	ldr	r3, [r7, #16]
 8013bf4:	689a      	ldr	r2, [r3, #8]
 8013bf6:	693b      	ldr	r3, [r7, #16]
 8013bf8:	68db      	ldr	r3, [r3, #12]
 8013bfa:	1ad2      	subs	r2, r2, r3
 8013bfc:	693b      	ldr	r3, [r7, #16]
 8013bfe:	609a      	str	r2, [r3, #8]
 8013c00:	693b      	ldr	r3, [r7, #16]
 8013c02:	689b      	ldr	r3, [r3, #8]
 8013c04:	461a      	mov	r2, r3
 8013c06:	6879      	ldr	r1, [r7, #4]
 8013c08:	68f8      	ldr	r0, [r7, #12]
 8013c0a:	f001 f8ac 	bl	8014d66 <USBD_CtlContinueSendData>
 8013c0e:	2300      	movs	r3, #0
 8013c10:	2200      	movs	r2, #0
 8013c12:	2100      	movs	r1, #0
 8013c14:	68f8      	ldr	r0, [r7, #12]
 8013c16:	f008 fd1b 	bl	801c650 <USBD_LL_PrepareReceive>
 8013c1a:	e03f      	b.n	8013c9c <USBD_LL_DataInStage+0xda>
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	68da      	ldr	r2, [r3, #12]
 8013c20:	693b      	ldr	r3, [r7, #16]
 8013c22:	689b      	ldr	r3, [r3, #8]
 8013c24:	429a      	cmp	r2, r3
 8013c26:	d11c      	bne.n	8013c62 <USBD_LL_DataInStage+0xa0>
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	685a      	ldr	r2, [r3, #4]
 8013c2c:	693b      	ldr	r3, [r7, #16]
 8013c2e:	68db      	ldr	r3, [r3, #12]
 8013c30:	429a      	cmp	r2, r3
 8013c32:	d316      	bcc.n	8013c62 <USBD_LL_DataInStage+0xa0>
 8013c34:	693b      	ldr	r3, [r7, #16]
 8013c36:	685a      	ldr	r2, [r3, #4]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d20f      	bcs.n	8013c62 <USBD_LL_DataInStage+0xa0>
 8013c42:	2200      	movs	r2, #0
 8013c44:	2100      	movs	r1, #0
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	f001 f88d 	bl	8014d66 <USBD_CtlContinueSendData>
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	2200      	movs	r2, #0
 8013c50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 8013c54:	2300      	movs	r3, #0
 8013c56:	2200      	movs	r2, #0
 8013c58:	2100      	movs	r1, #0
 8013c5a:	68f8      	ldr	r0, [r7, #12]
 8013c5c:	f008 fcf8 	bl	801c650 <USBD_LL_PrepareReceive>
 8013c60:	e01c      	b.n	8013c9c <USBD_LL_DataInStage+0xda>
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c68:	b2db      	uxtb	r3, r3
 8013c6a:	2b03      	cmp	r3, #3
 8013c6c:	d10f      	bne.n	8013c8e <USBD_LL_DataInStage+0xcc>
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c74:	68db      	ldr	r3, [r3, #12]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d009      	beq.n	8013c8e <USBD_LL_DataInStage+0xcc>
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c88:	68db      	ldr	r3, [r3, #12]
 8013c8a:	68f8      	ldr	r0, [r7, #12]
 8013c8c:	4798      	blx	r3
 8013c8e:	2180      	movs	r1, #128	; 0x80
 8013c90:	68f8      	ldr	r0, [r7, #12]
 8013c92:	f008 fc33 	bl	801c4fc <USBD_LL_StallEP>
 8013c96:	68f8      	ldr	r0, [r7, #12]
 8013c98:	f001 f8b7 	bl	8014e0a <USBD_CtlReceiveStatus>
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d03a      	beq.n	8013d1c <USBD_LL_DataInStage+0x15a>
 8013ca6:	68f8      	ldr	r0, [r7, #12]
 8013ca8:	f7ff fe42 	bl	8013930 <USBD_RunTestMode>
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	2200      	movs	r2, #0
 8013cb0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013cb4:	e032      	b.n	8013d1c <USBD_LL_DataInStage+0x15a>
 8013cb6:	7afb      	ldrb	r3, [r7, #11]
 8013cb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013cbc:	b2db      	uxtb	r3, r3
 8013cbe:	4619      	mov	r1, r3
 8013cc0:	68f8      	ldr	r0, [r7, #12]
 8013cc2:	f000 f97f 	bl	8013fc4 <USBD_CoreFindEP>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	75fb      	strb	r3, [r7, #23]
 8013cca:	7dfb      	ldrb	r3, [r7, #23]
 8013ccc:	2bff      	cmp	r3, #255	; 0xff
 8013cce:	d025      	beq.n	8013d1c <USBD_LL_DataInStage+0x15a>
 8013cd0:	7dfb      	ldrb	r3, [r7, #23]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d122      	bne.n	8013d1c <USBD_LL_DataInStage+0x15a>
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013cdc:	b2db      	uxtb	r3, r3
 8013cde:	2b03      	cmp	r3, #3
 8013ce0:	d11c      	bne.n	8013d1c <USBD_LL_DataInStage+0x15a>
 8013ce2:	7dfa      	ldrb	r2, [r7, #23]
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	32ae      	adds	r2, #174	; 0xae
 8013ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cec:	695b      	ldr	r3, [r3, #20]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d014      	beq.n	8013d1c <USBD_LL_DataInStage+0x15a>
 8013cf2:	7dfa      	ldrb	r2, [r7, #23]
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8013cfa:	7dfa      	ldrb	r2, [r7, #23]
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	32ae      	adds	r2, #174	; 0xae
 8013d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d04:	695b      	ldr	r3, [r3, #20]
 8013d06:	7afa      	ldrb	r2, [r7, #11]
 8013d08:	4611      	mov	r1, r2
 8013d0a:	68f8      	ldr	r0, [r7, #12]
 8013d0c:	4798      	blx	r3
 8013d0e:	4603      	mov	r3, r0
 8013d10:	75bb      	strb	r3, [r7, #22]
 8013d12:	7dbb      	ldrb	r3, [r7, #22]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d001      	beq.n	8013d1c <USBD_LL_DataInStage+0x15a>
 8013d18:	7dbb      	ldrb	r3, [r7, #22]
 8013d1a:	e000      	b.n	8013d1e <USBD_LL_DataInStage+0x15c>
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	4618      	mov	r0, r3
 8013d20:	3718      	adds	r7, #24
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd80      	pop	{r7, pc}

08013d26 <USBD_LL_Reset>:
 8013d26:	b580      	push	{r7, lr}
 8013d28:	b084      	sub	sp, #16
 8013d2a:	af00      	add	r7, sp, #0
 8013d2c:	6078      	str	r0, [r7, #4]
 8013d2e:	2300      	movs	r3, #0
 8013d30:	73fb      	strb	r3, [r7, #15]
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	2201      	movs	r2, #1
 8013d36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2200      	movs	r2, #0
 8013d46:	605a      	str	r2, [r3, #4]
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2200      	movs	r2, #0
 8013d54:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d014      	beq.n	8013d8c <USBD_LL_Reset+0x66>
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d68:	685b      	ldr	r3, [r3, #4]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d00e      	beq.n	8013d8c <USBD_LL_Reset+0x66>
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d74:	685b      	ldr	r3, [r3, #4]
 8013d76:	687a      	ldr	r2, [r7, #4]
 8013d78:	6852      	ldr	r2, [r2, #4]
 8013d7a:	b2d2      	uxtb	r2, r2
 8013d7c:	4611      	mov	r1, r2
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	4798      	blx	r3
 8013d82:	4603      	mov	r3, r0
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d001      	beq.n	8013d8c <USBD_LL_Reset+0x66>
 8013d88:	2303      	movs	r3, #3
 8013d8a:	73fb      	strb	r3, [r7, #15]
 8013d8c:	2340      	movs	r3, #64	; 0x40
 8013d8e:	2200      	movs	r2, #0
 8013d90:	2100      	movs	r1, #0
 8013d92:	6878      	ldr	r0, [r7, #4]
 8013d94:	f008 fb6d 	bl	801c472 <USBD_LL_OpenEP>
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	2201      	movs	r2, #1
 8013d9c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	2240      	movs	r2, #64	; 0x40
 8013da4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 8013da8:	2340      	movs	r3, #64	; 0x40
 8013daa:	2200      	movs	r2, #0
 8013dac:	2180      	movs	r1, #128	; 0x80
 8013dae:	6878      	ldr	r0, [r7, #4]
 8013db0:	f008 fb5f 	bl	801c472 <USBD_LL_OpenEP>
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2201      	movs	r2, #1
 8013db8:	849a      	strh	r2, [r3, #36]	; 0x24
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	2240      	movs	r2, #64	; 0x40
 8013dbe:	621a      	str	r2, [r3, #32]
 8013dc0:	7bfb      	ldrb	r3, [r7, #15]
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3710      	adds	r7, #16
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}

08013dca <USBD_LL_SetSpeed>:
 8013dca:	b480      	push	{r7}
 8013dcc:	b083      	sub	sp, #12
 8013dce:	af00      	add	r7, sp, #0
 8013dd0:	6078      	str	r0, [r7, #4]
 8013dd2:	460b      	mov	r3, r1
 8013dd4:	70fb      	strb	r3, [r7, #3]
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	78fa      	ldrb	r2, [r7, #3]
 8013dda:	741a      	strb	r2, [r3, #16]
 8013ddc:	2300      	movs	r3, #0
 8013dde:	4618      	mov	r0, r3
 8013de0:	370c      	adds	r7, #12
 8013de2:	46bd      	mov	sp, r7
 8013de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de8:	4770      	bx	lr

08013dea <USBD_LL_Suspend>:
 8013dea:	b480      	push	{r7}
 8013dec:	b083      	sub	sp, #12
 8013dee:	af00      	add	r7, sp, #0
 8013df0:	6078      	str	r0, [r7, #4]
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013df8:	b2da      	uxtb	r2, r3
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	2204      	movs	r2, #4
 8013e04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8013e08:	2300      	movs	r3, #0
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	370c      	adds	r7, #12
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e14:	4770      	bx	lr

08013e16 <USBD_LL_Resume>:
 8013e16:	b480      	push	{r7}
 8013e18:	b083      	sub	sp, #12
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	6078      	str	r0, [r7, #4]
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e24:	b2db      	uxtb	r3, r3
 8013e26:	2b04      	cmp	r3, #4
 8013e28:	d106      	bne.n	8013e38 <USBD_LL_Resume+0x22>
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013e30:	b2da      	uxtb	r2, r3
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8013e38:	2300      	movs	r3, #0
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	370c      	adds	r7, #12
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e44:	4770      	bx	lr

08013e46 <USBD_LL_SOF>:
 8013e46:	b580      	push	{r7, lr}
 8013e48:	b082      	sub	sp, #8
 8013e4a:	af00      	add	r7, sp, #0
 8013e4c:	6078      	str	r0, [r7, #4]
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e54:	b2db      	uxtb	r3, r3
 8013e56:	2b03      	cmp	r3, #3
 8013e58:	d110      	bne.n	8013e7c <USBD_LL_SOF+0x36>
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d00b      	beq.n	8013e7c <USBD_LL_SOF+0x36>
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e6a:	69db      	ldr	r3, [r3, #28]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d005      	beq.n	8013e7c <USBD_LL_SOF+0x36>
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e76:	69db      	ldr	r3, [r3, #28]
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	4798      	blx	r3
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3708      	adds	r7, #8
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}

08013e86 <USBD_LL_IsoINIncomplete>:
 8013e86:	b580      	push	{r7, lr}
 8013e88:	b082      	sub	sp, #8
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	6078      	str	r0, [r7, #4]
 8013e8e:	460b      	mov	r3, r1
 8013e90:	70fb      	strb	r3, [r7, #3]
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	32ae      	adds	r2, #174	; 0xae
 8013e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d101      	bne.n	8013ea8 <USBD_LL_IsoINIncomplete+0x22>
 8013ea4:	2303      	movs	r3, #3
 8013ea6:	e01c      	b.n	8013ee2 <USBD_LL_IsoINIncomplete+0x5c>
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013eae:	b2db      	uxtb	r3, r3
 8013eb0:	2b03      	cmp	r3, #3
 8013eb2:	d115      	bne.n	8013ee0 <USBD_LL_IsoINIncomplete+0x5a>
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	32ae      	adds	r2, #174	; 0xae
 8013ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ec2:	6a1b      	ldr	r3, [r3, #32]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d00b      	beq.n	8013ee0 <USBD_LL_IsoINIncomplete+0x5a>
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	32ae      	adds	r2, #174	; 0xae
 8013ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ed6:	6a1b      	ldr	r3, [r3, #32]
 8013ed8:	78fa      	ldrb	r2, [r7, #3]
 8013eda:	4611      	mov	r1, r2
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	4798      	blx	r3
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	3708      	adds	r7, #8
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}

08013eea <USBD_LL_IsoOUTIncomplete>:
 8013eea:	b580      	push	{r7, lr}
 8013eec:	b082      	sub	sp, #8
 8013eee:	af00      	add	r7, sp, #0
 8013ef0:	6078      	str	r0, [r7, #4]
 8013ef2:	460b      	mov	r3, r1
 8013ef4:	70fb      	strb	r3, [r7, #3]
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	32ae      	adds	r2, #174	; 0xae
 8013f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d101      	bne.n	8013f0c <USBD_LL_IsoOUTIncomplete+0x22>
 8013f08:	2303      	movs	r3, #3
 8013f0a:	e01c      	b.n	8013f46 <USBD_LL_IsoOUTIncomplete+0x5c>
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f12:	b2db      	uxtb	r3, r3
 8013f14:	2b03      	cmp	r3, #3
 8013f16:	d115      	bne.n	8013f44 <USBD_LL_IsoOUTIncomplete+0x5a>
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	32ae      	adds	r2, #174	; 0xae
 8013f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d00b      	beq.n	8013f44 <USBD_LL_IsoOUTIncomplete+0x5a>
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	32ae      	adds	r2, #174	; 0xae
 8013f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f3c:	78fa      	ldrb	r2, [r7, #3]
 8013f3e:	4611      	mov	r1, r2
 8013f40:	6878      	ldr	r0, [r7, #4]
 8013f42:	4798      	blx	r3
 8013f44:	2300      	movs	r3, #0
 8013f46:	4618      	mov	r0, r3
 8013f48:	3708      	adds	r7, #8
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bd80      	pop	{r7, pc}

08013f4e <USBD_LL_DevConnected>:
 8013f4e:	b480      	push	{r7}
 8013f50:	b083      	sub	sp, #12
 8013f52:	af00      	add	r7, sp, #0
 8013f54:	6078      	str	r0, [r7, #4]
 8013f56:	2300      	movs	r3, #0
 8013f58:	4618      	mov	r0, r3
 8013f5a:	370c      	adds	r7, #12
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f62:	4770      	bx	lr

08013f64 <USBD_LL_DevDisconnected>:
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b084      	sub	sp, #16
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	73fb      	strb	r3, [r7, #15]
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2201      	movs	r2, #1
 8013f74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d00e      	beq.n	8013fa0 <USBD_LL_DevDisconnected+0x3c>
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f88:	685b      	ldr	r3, [r3, #4]
 8013f8a:	687a      	ldr	r2, [r7, #4]
 8013f8c:	6852      	ldr	r2, [r2, #4]
 8013f8e:	b2d2      	uxtb	r2, r2
 8013f90:	4611      	mov	r1, r2
 8013f92:	6878      	ldr	r0, [r7, #4]
 8013f94:	4798      	blx	r3
 8013f96:	4603      	mov	r3, r0
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d001      	beq.n	8013fa0 <USBD_LL_DevDisconnected+0x3c>
 8013f9c:	2303      	movs	r3, #3
 8013f9e:	73fb      	strb	r3, [r7, #15]
 8013fa0:	7bfb      	ldrb	r3, [r7, #15]
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	3710      	adds	r7, #16
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	bd80      	pop	{r7, pc}

08013faa <USBD_CoreFindIF>:
 8013faa:	b480      	push	{r7}
 8013fac:	b083      	sub	sp, #12
 8013fae:	af00      	add	r7, sp, #0
 8013fb0:	6078      	str	r0, [r7, #4]
 8013fb2:	460b      	mov	r3, r1
 8013fb4:	70fb      	strb	r3, [r7, #3]
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	4618      	mov	r0, r3
 8013fba:	370c      	adds	r7, #12
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc2:	4770      	bx	lr

08013fc4 <USBD_CoreFindEP>:
 8013fc4:	b480      	push	{r7}
 8013fc6:	b083      	sub	sp, #12
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
 8013fcc:	460b      	mov	r3, r1
 8013fce:	70fb      	strb	r3, [r7, #3]
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	370c      	adds	r7, #12
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fdc:	4770      	bx	lr

08013fde <USBD_GetEpDesc>:
 8013fde:	b580      	push	{r7, lr}
 8013fe0:	b086      	sub	sp, #24
 8013fe2:	af00      	add	r7, sp, #0
 8013fe4:	6078      	str	r0, [r7, #4]
 8013fe6:	460b      	mov	r3, r1
 8013fe8:	70fb      	strb	r3, [r7, #3]
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	617b      	str	r3, [r7, #20]
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	60fb      	str	r3, [r7, #12]
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	613b      	str	r3, [r7, #16]
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	885b      	ldrh	r3, [r3, #2]
 8013ffa:	b29a      	uxth	r2, r3
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	781b      	ldrb	r3, [r3, #0]
 8014000:	b29b      	uxth	r3, r3
 8014002:	429a      	cmp	r2, r3
 8014004:	d920      	bls.n	8014048 <USBD_GetEpDesc+0x6a>
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	781b      	ldrb	r3, [r3, #0]
 801400a:	b29b      	uxth	r3, r3
 801400c:	817b      	strh	r3, [r7, #10]
 801400e:	e013      	b.n	8014038 <USBD_GetEpDesc+0x5a>
 8014010:	f107 030a 	add.w	r3, r7, #10
 8014014:	4619      	mov	r1, r3
 8014016:	6978      	ldr	r0, [r7, #20]
 8014018:	f000 f81b 	bl	8014052 <USBD_GetNextDesc>
 801401c:	6178      	str	r0, [r7, #20]
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	785b      	ldrb	r3, [r3, #1]
 8014022:	2b05      	cmp	r3, #5
 8014024:	d108      	bne.n	8014038 <USBD_GetEpDesc+0x5a>
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	613b      	str	r3, [r7, #16]
 801402a:	693b      	ldr	r3, [r7, #16]
 801402c:	789b      	ldrb	r3, [r3, #2]
 801402e:	78fa      	ldrb	r2, [r7, #3]
 8014030:	429a      	cmp	r2, r3
 8014032:	d008      	beq.n	8014046 <USBD_GetEpDesc+0x68>
 8014034:	2300      	movs	r3, #0
 8014036:	613b      	str	r3, [r7, #16]
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	885b      	ldrh	r3, [r3, #2]
 801403c:	b29a      	uxth	r2, r3
 801403e:	897b      	ldrh	r3, [r7, #10]
 8014040:	429a      	cmp	r2, r3
 8014042:	d8e5      	bhi.n	8014010 <USBD_GetEpDesc+0x32>
 8014044:	e000      	b.n	8014048 <USBD_GetEpDesc+0x6a>
 8014046:	bf00      	nop
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	4618      	mov	r0, r3
 801404c:	3718      	adds	r7, #24
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}

08014052 <USBD_GetNextDesc>:
 8014052:	b480      	push	{r7}
 8014054:	b085      	sub	sp, #20
 8014056:	af00      	add	r7, sp, #0
 8014058:	6078      	str	r0, [r7, #4]
 801405a:	6039      	str	r1, [r7, #0]
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	60fb      	str	r3, [r7, #12]
 8014060:	683b      	ldr	r3, [r7, #0]
 8014062:	881a      	ldrh	r2, [r3, #0]
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	781b      	ldrb	r3, [r3, #0]
 8014068:	b29b      	uxth	r3, r3
 801406a:	4413      	add	r3, r2
 801406c:	b29a      	uxth	r2, r3
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	801a      	strh	r2, [r3, #0]
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	461a      	mov	r2, r3
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	4413      	add	r3, r2
 801407c:	60fb      	str	r3, [r7, #12]
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	4618      	mov	r0, r3
 8014082:	3714      	adds	r7, #20
 8014084:	46bd      	mov	sp, r7
 8014086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408a:	4770      	bx	lr

0801408c <SWAPBYTE>:
 801408c:	b480      	push	{r7}
 801408e:	b087      	sub	sp, #28
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	617b      	str	r3, [r7, #20]
 8014098:	697b      	ldr	r3, [r7, #20]
 801409a:	781b      	ldrb	r3, [r3, #0]
 801409c:	827b      	strh	r3, [r7, #18]
 801409e:	697b      	ldr	r3, [r7, #20]
 80140a0:	3301      	adds	r3, #1
 80140a2:	617b      	str	r3, [r7, #20]
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	823b      	strh	r3, [r7, #16]
 80140aa:	8a3b      	ldrh	r3, [r7, #16]
 80140ac:	021b      	lsls	r3, r3, #8
 80140ae:	b21a      	sxth	r2, r3
 80140b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80140b4:	4313      	orrs	r3, r2
 80140b6:	b21b      	sxth	r3, r3
 80140b8:	81fb      	strh	r3, [r7, #14]
 80140ba:	89fb      	ldrh	r3, [r7, #14]
 80140bc:	4618      	mov	r0, r3
 80140be:	371c      	adds	r7, #28
 80140c0:	46bd      	mov	sp, r7
 80140c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c6:	4770      	bx	lr

080140c8 <USBD_StdDevReq>:
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b084      	sub	sp, #16
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
 80140d0:	6039      	str	r1, [r7, #0]
 80140d2:	2300      	movs	r3, #0
 80140d4:	73fb      	strb	r3, [r7, #15]
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80140de:	2b40      	cmp	r3, #64	; 0x40
 80140e0:	d005      	beq.n	80140ee <USBD_StdDevReq+0x26>
 80140e2:	2b40      	cmp	r3, #64	; 0x40
 80140e4:	d857      	bhi.n	8014196 <USBD_StdDevReq+0xce>
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d00f      	beq.n	801410a <USBD_StdDevReq+0x42>
 80140ea:	2b20      	cmp	r3, #32
 80140ec:	d153      	bne.n	8014196 <USBD_StdDevReq+0xce>
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	32ae      	adds	r2, #174	; 0xae
 80140f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140fc:	689b      	ldr	r3, [r3, #8]
 80140fe:	6839      	ldr	r1, [r7, #0]
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	4798      	blx	r3
 8014104:	4603      	mov	r3, r0
 8014106:	73fb      	strb	r3, [r7, #15]
 8014108:	e04a      	b.n	80141a0 <USBD_StdDevReq+0xd8>
 801410a:	683b      	ldr	r3, [r7, #0]
 801410c:	785b      	ldrb	r3, [r3, #1]
 801410e:	2b09      	cmp	r3, #9
 8014110:	d83b      	bhi.n	801418a <USBD_StdDevReq+0xc2>
 8014112:	a201      	add	r2, pc, #4	; (adr r2, 8014118 <USBD_StdDevReq+0x50>)
 8014114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014118:	0801416d 	.word	0x0801416d
 801411c:	08014181 	.word	0x08014181
 8014120:	0801418b 	.word	0x0801418b
 8014124:	08014177 	.word	0x08014177
 8014128:	0801418b 	.word	0x0801418b
 801412c:	0801414b 	.word	0x0801414b
 8014130:	08014141 	.word	0x08014141
 8014134:	0801418b 	.word	0x0801418b
 8014138:	08014163 	.word	0x08014163
 801413c:	08014155 	.word	0x08014155
 8014140:	6839      	ldr	r1, [r7, #0]
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f000 fa3c 	bl	80145c0 <USBD_GetDescriptor>
 8014148:	e024      	b.n	8014194 <USBD_StdDevReq+0xcc>
 801414a:	6839      	ldr	r1, [r7, #0]
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f000 fba1 	bl	8014894 <USBD_SetAddress>
 8014152:	e01f      	b.n	8014194 <USBD_StdDevReq+0xcc>
 8014154:	6839      	ldr	r1, [r7, #0]
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f000 fbe0 	bl	801491c <USBD_SetConfig>
 801415c:	4603      	mov	r3, r0
 801415e:	73fb      	strb	r3, [r7, #15]
 8014160:	e018      	b.n	8014194 <USBD_StdDevReq+0xcc>
 8014162:	6839      	ldr	r1, [r7, #0]
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f000 fc83 	bl	8014a70 <USBD_GetConfig>
 801416a:	e013      	b.n	8014194 <USBD_StdDevReq+0xcc>
 801416c:	6839      	ldr	r1, [r7, #0]
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f000 fcb4 	bl	8014adc <USBD_GetStatus>
 8014174:	e00e      	b.n	8014194 <USBD_StdDevReq+0xcc>
 8014176:	6839      	ldr	r1, [r7, #0]
 8014178:	6878      	ldr	r0, [r7, #4]
 801417a:	f000 fce3 	bl	8014b44 <USBD_SetFeature>
 801417e:	e009      	b.n	8014194 <USBD_StdDevReq+0xcc>
 8014180:	6839      	ldr	r1, [r7, #0]
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f000 fd07 	bl	8014b96 <USBD_ClrFeature>
 8014188:	e004      	b.n	8014194 <USBD_StdDevReq+0xcc>
 801418a:	6839      	ldr	r1, [r7, #0]
 801418c:	6878      	ldr	r0, [r7, #4]
 801418e:	f000 fd5e 	bl	8014c4e <USBD_CtlError>
 8014192:	bf00      	nop
 8014194:	e004      	b.n	80141a0 <USBD_StdDevReq+0xd8>
 8014196:	6839      	ldr	r1, [r7, #0]
 8014198:	6878      	ldr	r0, [r7, #4]
 801419a:	f000 fd58 	bl	8014c4e <USBD_CtlError>
 801419e:	bf00      	nop
 80141a0:	7bfb      	ldrb	r3, [r7, #15]
 80141a2:	4618      	mov	r0, r3
 80141a4:	3710      	adds	r7, #16
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}
 80141aa:	bf00      	nop

080141ac <USBD_StdItfReq>:
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b084      	sub	sp, #16
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
 80141b4:	6039      	str	r1, [r7, #0]
 80141b6:	2300      	movs	r3, #0
 80141b8:	73fb      	strb	r3, [r7, #15]
 80141ba:	683b      	ldr	r3, [r7, #0]
 80141bc:	781b      	ldrb	r3, [r3, #0]
 80141be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80141c2:	2b40      	cmp	r3, #64	; 0x40
 80141c4:	d005      	beq.n	80141d2 <USBD_StdItfReq+0x26>
 80141c6:	2b40      	cmp	r3, #64	; 0x40
 80141c8:	d852      	bhi.n	8014270 <USBD_StdItfReq+0xc4>
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d001      	beq.n	80141d2 <USBD_StdItfReq+0x26>
 80141ce:	2b20      	cmp	r3, #32
 80141d0:	d14e      	bne.n	8014270 <USBD_StdItfReq+0xc4>
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141d8:	b2db      	uxtb	r3, r3
 80141da:	3b01      	subs	r3, #1
 80141dc:	2b02      	cmp	r3, #2
 80141de:	d840      	bhi.n	8014262 <USBD_StdItfReq+0xb6>
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	889b      	ldrh	r3, [r3, #4]
 80141e4:	b2db      	uxtb	r3, r3
 80141e6:	2b01      	cmp	r3, #1
 80141e8:	d836      	bhi.n	8014258 <USBD_StdItfReq+0xac>
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	889b      	ldrh	r3, [r3, #4]
 80141ee:	b2db      	uxtb	r3, r3
 80141f0:	4619      	mov	r1, r3
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f7ff fed9 	bl	8013faa <USBD_CoreFindIF>
 80141f8:	4603      	mov	r3, r0
 80141fa:	73bb      	strb	r3, [r7, #14]
 80141fc:	7bbb      	ldrb	r3, [r7, #14]
 80141fe:	2bff      	cmp	r3, #255	; 0xff
 8014200:	d01d      	beq.n	801423e <USBD_StdItfReq+0x92>
 8014202:	7bbb      	ldrb	r3, [r7, #14]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d11a      	bne.n	801423e <USBD_StdItfReq+0x92>
 8014208:	7bba      	ldrb	r2, [r7, #14]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	32ae      	adds	r2, #174	; 0xae
 801420e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014212:	689b      	ldr	r3, [r3, #8]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d00f      	beq.n	8014238 <USBD_StdItfReq+0x8c>
 8014218:	7bba      	ldrb	r2, [r7, #14]
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8014220:	7bba      	ldrb	r2, [r7, #14]
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	32ae      	adds	r2, #174	; 0xae
 8014226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801422a:	689b      	ldr	r3, [r3, #8]
 801422c:	6839      	ldr	r1, [r7, #0]
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	4798      	blx	r3
 8014232:	4603      	mov	r3, r0
 8014234:	73fb      	strb	r3, [r7, #15]
 8014236:	e004      	b.n	8014242 <USBD_StdItfReq+0x96>
 8014238:	2303      	movs	r3, #3
 801423a:	73fb      	strb	r3, [r7, #15]
 801423c:	e001      	b.n	8014242 <USBD_StdItfReq+0x96>
 801423e:	2303      	movs	r3, #3
 8014240:	73fb      	strb	r3, [r7, #15]
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	88db      	ldrh	r3, [r3, #6]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d110      	bne.n	801426c <USBD_StdItfReq+0xc0>
 801424a:	7bfb      	ldrb	r3, [r7, #15]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d10d      	bne.n	801426c <USBD_StdItfReq+0xc0>
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f000 fdc7 	bl	8014de4 <USBD_CtlSendStatus>
 8014256:	e009      	b.n	801426c <USBD_StdItfReq+0xc0>
 8014258:	6839      	ldr	r1, [r7, #0]
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f000 fcf7 	bl	8014c4e <USBD_CtlError>
 8014260:	e004      	b.n	801426c <USBD_StdItfReq+0xc0>
 8014262:	6839      	ldr	r1, [r7, #0]
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f000 fcf2 	bl	8014c4e <USBD_CtlError>
 801426a:	e000      	b.n	801426e <USBD_StdItfReq+0xc2>
 801426c:	bf00      	nop
 801426e:	e004      	b.n	801427a <USBD_StdItfReq+0xce>
 8014270:	6839      	ldr	r1, [r7, #0]
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f000 fceb 	bl	8014c4e <USBD_CtlError>
 8014278:	bf00      	nop
 801427a:	7bfb      	ldrb	r3, [r7, #15]
 801427c:	4618      	mov	r0, r3
 801427e:	3710      	adds	r7, #16
 8014280:	46bd      	mov	sp, r7
 8014282:	bd80      	pop	{r7, pc}

08014284 <USBD_StdEPReq>:
 8014284:	b580      	push	{r7, lr}
 8014286:	b084      	sub	sp, #16
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
 801428c:	6039      	str	r1, [r7, #0]
 801428e:	2300      	movs	r3, #0
 8014290:	73fb      	strb	r3, [r7, #15]
 8014292:	683b      	ldr	r3, [r7, #0]
 8014294:	889b      	ldrh	r3, [r3, #4]
 8014296:	73bb      	strb	r3, [r7, #14]
 8014298:	683b      	ldr	r3, [r7, #0]
 801429a:	781b      	ldrb	r3, [r3, #0]
 801429c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80142a0:	2b40      	cmp	r3, #64	; 0x40
 80142a2:	d007      	beq.n	80142b4 <USBD_StdEPReq+0x30>
 80142a4:	2b40      	cmp	r3, #64	; 0x40
 80142a6:	f200 817f 	bhi.w	80145a8 <USBD_StdEPReq+0x324>
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d02a      	beq.n	8014304 <USBD_StdEPReq+0x80>
 80142ae:	2b20      	cmp	r3, #32
 80142b0:	f040 817a 	bne.w	80145a8 <USBD_StdEPReq+0x324>
 80142b4:	7bbb      	ldrb	r3, [r7, #14]
 80142b6:	4619      	mov	r1, r3
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f7ff fe83 	bl	8013fc4 <USBD_CoreFindEP>
 80142be:	4603      	mov	r3, r0
 80142c0:	737b      	strb	r3, [r7, #13]
 80142c2:	7b7b      	ldrb	r3, [r7, #13]
 80142c4:	2bff      	cmp	r3, #255	; 0xff
 80142c6:	f000 8174 	beq.w	80145b2 <USBD_StdEPReq+0x32e>
 80142ca:	7b7b      	ldrb	r3, [r7, #13]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	f040 8170 	bne.w	80145b2 <USBD_StdEPReq+0x32e>
 80142d2:	7b7a      	ldrb	r2, [r7, #13]
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 80142da:	7b7a      	ldrb	r2, [r7, #13]
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	32ae      	adds	r2, #174	; 0xae
 80142e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142e4:	689b      	ldr	r3, [r3, #8]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	f000 8163 	beq.w	80145b2 <USBD_StdEPReq+0x32e>
 80142ec:	7b7a      	ldrb	r2, [r7, #13]
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	32ae      	adds	r2, #174	; 0xae
 80142f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142f6:	689b      	ldr	r3, [r3, #8]
 80142f8:	6839      	ldr	r1, [r7, #0]
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	4798      	blx	r3
 80142fe:	4603      	mov	r3, r0
 8014300:	73fb      	strb	r3, [r7, #15]
 8014302:	e156      	b.n	80145b2 <USBD_StdEPReq+0x32e>
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	785b      	ldrb	r3, [r3, #1]
 8014308:	2b03      	cmp	r3, #3
 801430a:	d008      	beq.n	801431e <USBD_StdEPReq+0x9a>
 801430c:	2b03      	cmp	r3, #3
 801430e:	f300 8145 	bgt.w	801459c <USBD_StdEPReq+0x318>
 8014312:	2b00      	cmp	r3, #0
 8014314:	f000 809b 	beq.w	801444e <USBD_StdEPReq+0x1ca>
 8014318:	2b01      	cmp	r3, #1
 801431a:	d03c      	beq.n	8014396 <USBD_StdEPReq+0x112>
 801431c:	e13e      	b.n	801459c <USBD_StdEPReq+0x318>
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014324:	b2db      	uxtb	r3, r3
 8014326:	2b02      	cmp	r3, #2
 8014328:	d002      	beq.n	8014330 <USBD_StdEPReq+0xac>
 801432a:	2b03      	cmp	r3, #3
 801432c:	d016      	beq.n	801435c <USBD_StdEPReq+0xd8>
 801432e:	e02c      	b.n	801438a <USBD_StdEPReq+0x106>
 8014330:	7bbb      	ldrb	r3, [r7, #14]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d00d      	beq.n	8014352 <USBD_StdEPReq+0xce>
 8014336:	7bbb      	ldrb	r3, [r7, #14]
 8014338:	2b80      	cmp	r3, #128	; 0x80
 801433a:	d00a      	beq.n	8014352 <USBD_StdEPReq+0xce>
 801433c:	7bbb      	ldrb	r3, [r7, #14]
 801433e:	4619      	mov	r1, r3
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f008 f8db 	bl	801c4fc <USBD_LL_StallEP>
 8014346:	2180      	movs	r1, #128	; 0x80
 8014348:	6878      	ldr	r0, [r7, #4]
 801434a:	f008 f8d7 	bl	801c4fc <USBD_LL_StallEP>
 801434e:	bf00      	nop
 8014350:	e020      	b.n	8014394 <USBD_StdEPReq+0x110>
 8014352:	6839      	ldr	r1, [r7, #0]
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f000 fc7a 	bl	8014c4e <USBD_CtlError>
 801435a:	e01b      	b.n	8014394 <USBD_StdEPReq+0x110>
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	885b      	ldrh	r3, [r3, #2]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d10e      	bne.n	8014382 <USBD_StdEPReq+0xfe>
 8014364:	7bbb      	ldrb	r3, [r7, #14]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d00b      	beq.n	8014382 <USBD_StdEPReq+0xfe>
 801436a:	7bbb      	ldrb	r3, [r7, #14]
 801436c:	2b80      	cmp	r3, #128	; 0x80
 801436e:	d008      	beq.n	8014382 <USBD_StdEPReq+0xfe>
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	88db      	ldrh	r3, [r3, #6]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d104      	bne.n	8014382 <USBD_StdEPReq+0xfe>
 8014378:	7bbb      	ldrb	r3, [r7, #14]
 801437a:	4619      	mov	r1, r3
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f008 f8bd 	bl	801c4fc <USBD_LL_StallEP>
 8014382:	6878      	ldr	r0, [r7, #4]
 8014384:	f000 fd2e 	bl	8014de4 <USBD_CtlSendStatus>
 8014388:	e004      	b.n	8014394 <USBD_StdEPReq+0x110>
 801438a:	6839      	ldr	r1, [r7, #0]
 801438c:	6878      	ldr	r0, [r7, #4]
 801438e:	f000 fc5e 	bl	8014c4e <USBD_CtlError>
 8014392:	bf00      	nop
 8014394:	e107      	b.n	80145a6 <USBD_StdEPReq+0x322>
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801439c:	b2db      	uxtb	r3, r3
 801439e:	2b02      	cmp	r3, #2
 80143a0:	d002      	beq.n	80143a8 <USBD_StdEPReq+0x124>
 80143a2:	2b03      	cmp	r3, #3
 80143a4:	d016      	beq.n	80143d4 <USBD_StdEPReq+0x150>
 80143a6:	e04b      	b.n	8014440 <USBD_StdEPReq+0x1bc>
 80143a8:	7bbb      	ldrb	r3, [r7, #14]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d00d      	beq.n	80143ca <USBD_StdEPReq+0x146>
 80143ae:	7bbb      	ldrb	r3, [r7, #14]
 80143b0:	2b80      	cmp	r3, #128	; 0x80
 80143b2:	d00a      	beq.n	80143ca <USBD_StdEPReq+0x146>
 80143b4:	7bbb      	ldrb	r3, [r7, #14]
 80143b6:	4619      	mov	r1, r3
 80143b8:	6878      	ldr	r0, [r7, #4]
 80143ba:	f008 f89f 	bl	801c4fc <USBD_LL_StallEP>
 80143be:	2180      	movs	r1, #128	; 0x80
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f008 f89b 	bl	801c4fc <USBD_LL_StallEP>
 80143c6:	bf00      	nop
 80143c8:	e040      	b.n	801444c <USBD_StdEPReq+0x1c8>
 80143ca:	6839      	ldr	r1, [r7, #0]
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f000 fc3e 	bl	8014c4e <USBD_CtlError>
 80143d2:	e03b      	b.n	801444c <USBD_StdEPReq+0x1c8>
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	885b      	ldrh	r3, [r3, #2]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d136      	bne.n	801444a <USBD_StdEPReq+0x1c6>
 80143dc:	7bbb      	ldrb	r3, [r7, #14]
 80143de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d004      	beq.n	80143f0 <USBD_StdEPReq+0x16c>
 80143e6:	7bbb      	ldrb	r3, [r7, #14]
 80143e8:	4619      	mov	r1, r3
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f008 f8a5 	bl	801c53a <USBD_LL_ClearStallEP>
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f000 fcf7 	bl	8014de4 <USBD_CtlSendStatus>
 80143f6:	7bbb      	ldrb	r3, [r7, #14]
 80143f8:	4619      	mov	r1, r3
 80143fa:	6878      	ldr	r0, [r7, #4]
 80143fc:	f7ff fde2 	bl	8013fc4 <USBD_CoreFindEP>
 8014400:	4603      	mov	r3, r0
 8014402:	737b      	strb	r3, [r7, #13]
 8014404:	7b7b      	ldrb	r3, [r7, #13]
 8014406:	2bff      	cmp	r3, #255	; 0xff
 8014408:	d01f      	beq.n	801444a <USBD_StdEPReq+0x1c6>
 801440a:	7b7b      	ldrb	r3, [r7, #13]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d11c      	bne.n	801444a <USBD_StdEPReq+0x1c6>
 8014410:	7b7a      	ldrb	r2, [r7, #13]
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8014418:	7b7a      	ldrb	r2, [r7, #13]
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	32ae      	adds	r2, #174	; 0xae
 801441e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014422:	689b      	ldr	r3, [r3, #8]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d010      	beq.n	801444a <USBD_StdEPReq+0x1c6>
 8014428:	7b7a      	ldrb	r2, [r7, #13]
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	32ae      	adds	r2, #174	; 0xae
 801442e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014432:	689b      	ldr	r3, [r3, #8]
 8014434:	6839      	ldr	r1, [r7, #0]
 8014436:	6878      	ldr	r0, [r7, #4]
 8014438:	4798      	blx	r3
 801443a:	4603      	mov	r3, r0
 801443c:	73fb      	strb	r3, [r7, #15]
 801443e:	e004      	b.n	801444a <USBD_StdEPReq+0x1c6>
 8014440:	6839      	ldr	r1, [r7, #0]
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	f000 fc03 	bl	8014c4e <USBD_CtlError>
 8014448:	e000      	b.n	801444c <USBD_StdEPReq+0x1c8>
 801444a:	bf00      	nop
 801444c:	e0ab      	b.n	80145a6 <USBD_StdEPReq+0x322>
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014454:	b2db      	uxtb	r3, r3
 8014456:	2b02      	cmp	r3, #2
 8014458:	d002      	beq.n	8014460 <USBD_StdEPReq+0x1dc>
 801445a:	2b03      	cmp	r3, #3
 801445c:	d032      	beq.n	80144c4 <USBD_StdEPReq+0x240>
 801445e:	e097      	b.n	8014590 <USBD_StdEPReq+0x30c>
 8014460:	7bbb      	ldrb	r3, [r7, #14]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d007      	beq.n	8014476 <USBD_StdEPReq+0x1f2>
 8014466:	7bbb      	ldrb	r3, [r7, #14]
 8014468:	2b80      	cmp	r3, #128	; 0x80
 801446a:	d004      	beq.n	8014476 <USBD_StdEPReq+0x1f2>
 801446c:	6839      	ldr	r1, [r7, #0]
 801446e:	6878      	ldr	r0, [r7, #4]
 8014470:	f000 fbed 	bl	8014c4e <USBD_CtlError>
 8014474:	e091      	b.n	801459a <USBD_StdEPReq+0x316>
 8014476:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801447a:	2b00      	cmp	r3, #0
 801447c:	da0b      	bge.n	8014496 <USBD_StdEPReq+0x212>
 801447e:	7bbb      	ldrb	r3, [r7, #14]
 8014480:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014484:	4613      	mov	r3, r2
 8014486:	009b      	lsls	r3, r3, #2
 8014488:	4413      	add	r3, r2
 801448a:	009b      	lsls	r3, r3, #2
 801448c:	3310      	adds	r3, #16
 801448e:	687a      	ldr	r2, [r7, #4]
 8014490:	4413      	add	r3, r2
 8014492:	3304      	adds	r3, #4
 8014494:	e00b      	b.n	80144ae <USBD_StdEPReq+0x22a>
 8014496:	7bbb      	ldrb	r3, [r7, #14]
 8014498:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801449c:	4613      	mov	r3, r2
 801449e:	009b      	lsls	r3, r3, #2
 80144a0:	4413      	add	r3, r2
 80144a2:	009b      	lsls	r3, r3, #2
 80144a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80144a8:	687a      	ldr	r2, [r7, #4]
 80144aa:	4413      	add	r3, r2
 80144ac:	3304      	adds	r3, #4
 80144ae:	60bb      	str	r3, [r7, #8]
 80144b0:	68bb      	ldr	r3, [r7, #8]
 80144b2:	2200      	movs	r2, #0
 80144b4:	601a      	str	r2, [r3, #0]
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	2202      	movs	r2, #2
 80144ba:	4619      	mov	r1, r3
 80144bc:	6878      	ldr	r0, [r7, #4]
 80144be:	f000 fc37 	bl	8014d30 <USBD_CtlSendData>
 80144c2:	e06a      	b.n	801459a <USBD_StdEPReq+0x316>
 80144c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	da11      	bge.n	80144f0 <USBD_StdEPReq+0x26c>
 80144cc:	7bbb      	ldrb	r3, [r7, #14]
 80144ce:	f003 020f 	and.w	r2, r3, #15
 80144d2:	6879      	ldr	r1, [r7, #4]
 80144d4:	4613      	mov	r3, r2
 80144d6:	009b      	lsls	r3, r3, #2
 80144d8:	4413      	add	r3, r2
 80144da:	009b      	lsls	r3, r3, #2
 80144dc:	440b      	add	r3, r1
 80144de:	3324      	adds	r3, #36	; 0x24
 80144e0:	881b      	ldrh	r3, [r3, #0]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d117      	bne.n	8014516 <USBD_StdEPReq+0x292>
 80144e6:	6839      	ldr	r1, [r7, #0]
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f000 fbb0 	bl	8014c4e <USBD_CtlError>
 80144ee:	e054      	b.n	801459a <USBD_StdEPReq+0x316>
 80144f0:	7bbb      	ldrb	r3, [r7, #14]
 80144f2:	f003 020f 	and.w	r2, r3, #15
 80144f6:	6879      	ldr	r1, [r7, #4]
 80144f8:	4613      	mov	r3, r2
 80144fa:	009b      	lsls	r3, r3, #2
 80144fc:	4413      	add	r3, r2
 80144fe:	009b      	lsls	r3, r3, #2
 8014500:	440b      	add	r3, r1
 8014502:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014506:	881b      	ldrh	r3, [r3, #0]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d104      	bne.n	8014516 <USBD_StdEPReq+0x292>
 801450c:	6839      	ldr	r1, [r7, #0]
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f000 fb9d 	bl	8014c4e <USBD_CtlError>
 8014514:	e041      	b.n	801459a <USBD_StdEPReq+0x316>
 8014516:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801451a:	2b00      	cmp	r3, #0
 801451c:	da0b      	bge.n	8014536 <USBD_StdEPReq+0x2b2>
 801451e:	7bbb      	ldrb	r3, [r7, #14]
 8014520:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014524:	4613      	mov	r3, r2
 8014526:	009b      	lsls	r3, r3, #2
 8014528:	4413      	add	r3, r2
 801452a:	009b      	lsls	r3, r3, #2
 801452c:	3310      	adds	r3, #16
 801452e:	687a      	ldr	r2, [r7, #4]
 8014530:	4413      	add	r3, r2
 8014532:	3304      	adds	r3, #4
 8014534:	e00b      	b.n	801454e <USBD_StdEPReq+0x2ca>
 8014536:	7bbb      	ldrb	r3, [r7, #14]
 8014538:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801453c:	4613      	mov	r3, r2
 801453e:	009b      	lsls	r3, r3, #2
 8014540:	4413      	add	r3, r2
 8014542:	009b      	lsls	r3, r3, #2
 8014544:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014548:	687a      	ldr	r2, [r7, #4]
 801454a:	4413      	add	r3, r2
 801454c:	3304      	adds	r3, #4
 801454e:	60bb      	str	r3, [r7, #8]
 8014550:	7bbb      	ldrb	r3, [r7, #14]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d002      	beq.n	801455c <USBD_StdEPReq+0x2d8>
 8014556:	7bbb      	ldrb	r3, [r7, #14]
 8014558:	2b80      	cmp	r3, #128	; 0x80
 801455a:	d103      	bne.n	8014564 <USBD_StdEPReq+0x2e0>
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	2200      	movs	r2, #0
 8014560:	601a      	str	r2, [r3, #0]
 8014562:	e00e      	b.n	8014582 <USBD_StdEPReq+0x2fe>
 8014564:	7bbb      	ldrb	r3, [r7, #14]
 8014566:	4619      	mov	r1, r3
 8014568:	6878      	ldr	r0, [r7, #4]
 801456a:	f008 f805 	bl	801c578 <USBD_LL_IsStallEP>
 801456e:	4603      	mov	r3, r0
 8014570:	2b00      	cmp	r3, #0
 8014572:	d003      	beq.n	801457c <USBD_StdEPReq+0x2f8>
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	2201      	movs	r2, #1
 8014578:	601a      	str	r2, [r3, #0]
 801457a:	e002      	b.n	8014582 <USBD_StdEPReq+0x2fe>
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	2200      	movs	r2, #0
 8014580:	601a      	str	r2, [r3, #0]
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	2202      	movs	r2, #2
 8014586:	4619      	mov	r1, r3
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f000 fbd1 	bl	8014d30 <USBD_CtlSendData>
 801458e:	e004      	b.n	801459a <USBD_StdEPReq+0x316>
 8014590:	6839      	ldr	r1, [r7, #0]
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	f000 fb5b 	bl	8014c4e <USBD_CtlError>
 8014598:	bf00      	nop
 801459a:	e004      	b.n	80145a6 <USBD_StdEPReq+0x322>
 801459c:	6839      	ldr	r1, [r7, #0]
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f000 fb55 	bl	8014c4e <USBD_CtlError>
 80145a4:	bf00      	nop
 80145a6:	e005      	b.n	80145b4 <USBD_StdEPReq+0x330>
 80145a8:	6839      	ldr	r1, [r7, #0]
 80145aa:	6878      	ldr	r0, [r7, #4]
 80145ac:	f000 fb4f 	bl	8014c4e <USBD_CtlError>
 80145b0:	e000      	b.n	80145b4 <USBD_StdEPReq+0x330>
 80145b2:	bf00      	nop
 80145b4:	7bfb      	ldrb	r3, [r7, #15]
 80145b6:	4618      	mov	r0, r3
 80145b8:	3710      	adds	r7, #16
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}
	...

080145c0 <USBD_GetDescriptor>:
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b084      	sub	sp, #16
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
 80145c8:	6039      	str	r1, [r7, #0]
 80145ca:	2300      	movs	r3, #0
 80145cc:	813b      	strh	r3, [r7, #8]
 80145ce:	2300      	movs	r3, #0
 80145d0:	60fb      	str	r3, [r7, #12]
 80145d2:	2300      	movs	r3, #0
 80145d4:	72fb      	strb	r3, [r7, #11]
 80145d6:	683b      	ldr	r3, [r7, #0]
 80145d8:	885b      	ldrh	r3, [r3, #2]
 80145da:	0a1b      	lsrs	r3, r3, #8
 80145dc:	b29b      	uxth	r3, r3
 80145de:	3b01      	subs	r3, #1
 80145e0:	2b06      	cmp	r3, #6
 80145e2:	f200 8128 	bhi.w	8014836 <USBD_GetDescriptor+0x276>
 80145e6:	a201      	add	r2, pc, #4	; (adr r2, 80145ec <USBD_GetDescriptor+0x2c>)
 80145e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145ec:	08014609 	.word	0x08014609
 80145f0:	08014621 	.word	0x08014621
 80145f4:	08014661 	.word	0x08014661
 80145f8:	08014837 	.word	0x08014837
 80145fc:	08014837 	.word	0x08014837
 8014600:	080147d7 	.word	0x080147d7
 8014604:	08014803 	.word	0x08014803
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	687a      	ldr	r2, [r7, #4]
 8014612:	7c12      	ldrb	r2, [r2, #16]
 8014614:	f107 0108 	add.w	r1, r7, #8
 8014618:	4610      	mov	r0, r2
 801461a:	4798      	blx	r3
 801461c:	60f8      	str	r0, [r7, #12]
 801461e:	e112      	b.n	8014846 <USBD_GetDescriptor+0x286>
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	7c1b      	ldrb	r3, [r3, #16]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d10d      	bne.n	8014644 <USBD_GetDescriptor+0x84>
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014630:	f107 0208 	add.w	r2, r7, #8
 8014634:	4610      	mov	r0, r2
 8014636:	4798      	blx	r3
 8014638:	60f8      	str	r0, [r7, #12]
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	3301      	adds	r3, #1
 801463e:	2202      	movs	r2, #2
 8014640:	701a      	strb	r2, [r3, #0]
 8014642:	e100      	b.n	8014846 <USBD_GetDescriptor+0x286>
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801464c:	f107 0208 	add.w	r2, r7, #8
 8014650:	4610      	mov	r0, r2
 8014652:	4798      	blx	r3
 8014654:	60f8      	str	r0, [r7, #12]
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	3301      	adds	r3, #1
 801465a:	2202      	movs	r2, #2
 801465c:	701a      	strb	r2, [r3, #0]
 801465e:	e0f2      	b.n	8014846 <USBD_GetDescriptor+0x286>
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	885b      	ldrh	r3, [r3, #2]
 8014664:	b2db      	uxtb	r3, r3
 8014666:	2b05      	cmp	r3, #5
 8014668:	f200 80ac 	bhi.w	80147c4 <USBD_GetDescriptor+0x204>
 801466c:	a201      	add	r2, pc, #4	; (adr r2, 8014674 <USBD_GetDescriptor+0xb4>)
 801466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014672:	bf00      	nop
 8014674:	0801468d 	.word	0x0801468d
 8014678:	080146c1 	.word	0x080146c1
 801467c:	080146f5 	.word	0x080146f5
 8014680:	08014729 	.word	0x08014729
 8014684:	0801475d 	.word	0x0801475d
 8014688:	08014791 	.word	0x08014791
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014692:	685b      	ldr	r3, [r3, #4]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d00b      	beq.n	80146b0 <USBD_GetDescriptor+0xf0>
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801469e:	685b      	ldr	r3, [r3, #4]
 80146a0:	687a      	ldr	r2, [r7, #4]
 80146a2:	7c12      	ldrb	r2, [r2, #16]
 80146a4:	f107 0108 	add.w	r1, r7, #8
 80146a8:	4610      	mov	r0, r2
 80146aa:	4798      	blx	r3
 80146ac:	60f8      	str	r0, [r7, #12]
 80146ae:	e091      	b.n	80147d4 <USBD_GetDescriptor+0x214>
 80146b0:	6839      	ldr	r1, [r7, #0]
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f000 facb 	bl	8014c4e <USBD_CtlError>
 80146b8:	7afb      	ldrb	r3, [r7, #11]
 80146ba:	3301      	adds	r3, #1
 80146bc:	72fb      	strb	r3, [r7, #11]
 80146be:	e089      	b.n	80147d4 <USBD_GetDescriptor+0x214>
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146c6:	689b      	ldr	r3, [r3, #8]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d00b      	beq.n	80146e4 <USBD_GetDescriptor+0x124>
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146d2:	689b      	ldr	r3, [r3, #8]
 80146d4:	687a      	ldr	r2, [r7, #4]
 80146d6:	7c12      	ldrb	r2, [r2, #16]
 80146d8:	f107 0108 	add.w	r1, r7, #8
 80146dc:	4610      	mov	r0, r2
 80146de:	4798      	blx	r3
 80146e0:	60f8      	str	r0, [r7, #12]
 80146e2:	e077      	b.n	80147d4 <USBD_GetDescriptor+0x214>
 80146e4:	6839      	ldr	r1, [r7, #0]
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f000 fab1 	bl	8014c4e <USBD_CtlError>
 80146ec:	7afb      	ldrb	r3, [r7, #11]
 80146ee:	3301      	adds	r3, #1
 80146f0:	72fb      	strb	r3, [r7, #11]
 80146f2:	e06f      	b.n	80147d4 <USBD_GetDescriptor+0x214>
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146fa:	68db      	ldr	r3, [r3, #12]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d00b      	beq.n	8014718 <USBD_GetDescriptor+0x158>
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014706:	68db      	ldr	r3, [r3, #12]
 8014708:	687a      	ldr	r2, [r7, #4]
 801470a:	7c12      	ldrb	r2, [r2, #16]
 801470c:	f107 0108 	add.w	r1, r7, #8
 8014710:	4610      	mov	r0, r2
 8014712:	4798      	blx	r3
 8014714:	60f8      	str	r0, [r7, #12]
 8014716:	e05d      	b.n	80147d4 <USBD_GetDescriptor+0x214>
 8014718:	6839      	ldr	r1, [r7, #0]
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f000 fa97 	bl	8014c4e <USBD_CtlError>
 8014720:	7afb      	ldrb	r3, [r7, #11]
 8014722:	3301      	adds	r3, #1
 8014724:	72fb      	strb	r3, [r7, #11]
 8014726:	e055      	b.n	80147d4 <USBD_GetDescriptor+0x214>
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801472e:	691b      	ldr	r3, [r3, #16]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d00b      	beq.n	801474c <USBD_GetDescriptor+0x18c>
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801473a:	691b      	ldr	r3, [r3, #16]
 801473c:	687a      	ldr	r2, [r7, #4]
 801473e:	7c12      	ldrb	r2, [r2, #16]
 8014740:	f107 0108 	add.w	r1, r7, #8
 8014744:	4610      	mov	r0, r2
 8014746:	4798      	blx	r3
 8014748:	60f8      	str	r0, [r7, #12]
 801474a:	e043      	b.n	80147d4 <USBD_GetDescriptor+0x214>
 801474c:	6839      	ldr	r1, [r7, #0]
 801474e:	6878      	ldr	r0, [r7, #4]
 8014750:	f000 fa7d 	bl	8014c4e <USBD_CtlError>
 8014754:	7afb      	ldrb	r3, [r7, #11]
 8014756:	3301      	adds	r3, #1
 8014758:	72fb      	strb	r3, [r7, #11]
 801475a:	e03b      	b.n	80147d4 <USBD_GetDescriptor+0x214>
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014762:	695b      	ldr	r3, [r3, #20]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d00b      	beq.n	8014780 <USBD_GetDescriptor+0x1c0>
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801476e:	695b      	ldr	r3, [r3, #20]
 8014770:	687a      	ldr	r2, [r7, #4]
 8014772:	7c12      	ldrb	r2, [r2, #16]
 8014774:	f107 0108 	add.w	r1, r7, #8
 8014778:	4610      	mov	r0, r2
 801477a:	4798      	blx	r3
 801477c:	60f8      	str	r0, [r7, #12]
 801477e:	e029      	b.n	80147d4 <USBD_GetDescriptor+0x214>
 8014780:	6839      	ldr	r1, [r7, #0]
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f000 fa63 	bl	8014c4e <USBD_CtlError>
 8014788:	7afb      	ldrb	r3, [r7, #11]
 801478a:	3301      	adds	r3, #1
 801478c:	72fb      	strb	r3, [r7, #11]
 801478e:	e021      	b.n	80147d4 <USBD_GetDescriptor+0x214>
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014796:	699b      	ldr	r3, [r3, #24]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d00b      	beq.n	80147b4 <USBD_GetDescriptor+0x1f4>
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147a2:	699b      	ldr	r3, [r3, #24]
 80147a4:	687a      	ldr	r2, [r7, #4]
 80147a6:	7c12      	ldrb	r2, [r2, #16]
 80147a8:	f107 0108 	add.w	r1, r7, #8
 80147ac:	4610      	mov	r0, r2
 80147ae:	4798      	blx	r3
 80147b0:	60f8      	str	r0, [r7, #12]
 80147b2:	e00f      	b.n	80147d4 <USBD_GetDescriptor+0x214>
 80147b4:	6839      	ldr	r1, [r7, #0]
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f000 fa49 	bl	8014c4e <USBD_CtlError>
 80147bc:	7afb      	ldrb	r3, [r7, #11]
 80147be:	3301      	adds	r3, #1
 80147c0:	72fb      	strb	r3, [r7, #11]
 80147c2:	e007      	b.n	80147d4 <USBD_GetDescriptor+0x214>
 80147c4:	6839      	ldr	r1, [r7, #0]
 80147c6:	6878      	ldr	r0, [r7, #4]
 80147c8:	f000 fa41 	bl	8014c4e <USBD_CtlError>
 80147cc:	7afb      	ldrb	r3, [r7, #11]
 80147ce:	3301      	adds	r3, #1
 80147d0:	72fb      	strb	r3, [r7, #11]
 80147d2:	bf00      	nop
 80147d4:	e037      	b.n	8014846 <USBD_GetDescriptor+0x286>
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	7c1b      	ldrb	r3, [r3, #16]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d109      	bne.n	80147f2 <USBD_GetDescriptor+0x232>
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147e6:	f107 0208 	add.w	r2, r7, #8
 80147ea:	4610      	mov	r0, r2
 80147ec:	4798      	blx	r3
 80147ee:	60f8      	str	r0, [r7, #12]
 80147f0:	e029      	b.n	8014846 <USBD_GetDescriptor+0x286>
 80147f2:	6839      	ldr	r1, [r7, #0]
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f000 fa2a 	bl	8014c4e <USBD_CtlError>
 80147fa:	7afb      	ldrb	r3, [r7, #11]
 80147fc:	3301      	adds	r3, #1
 80147fe:	72fb      	strb	r3, [r7, #11]
 8014800:	e021      	b.n	8014846 <USBD_GetDescriptor+0x286>
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	7c1b      	ldrb	r3, [r3, #16]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d10d      	bne.n	8014826 <USBD_GetDescriptor+0x266>
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014812:	f107 0208 	add.w	r2, r7, #8
 8014816:	4610      	mov	r0, r2
 8014818:	4798      	blx	r3
 801481a:	60f8      	str	r0, [r7, #12]
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	3301      	adds	r3, #1
 8014820:	2207      	movs	r2, #7
 8014822:	701a      	strb	r2, [r3, #0]
 8014824:	e00f      	b.n	8014846 <USBD_GetDescriptor+0x286>
 8014826:	6839      	ldr	r1, [r7, #0]
 8014828:	6878      	ldr	r0, [r7, #4]
 801482a:	f000 fa10 	bl	8014c4e <USBD_CtlError>
 801482e:	7afb      	ldrb	r3, [r7, #11]
 8014830:	3301      	adds	r3, #1
 8014832:	72fb      	strb	r3, [r7, #11]
 8014834:	e007      	b.n	8014846 <USBD_GetDescriptor+0x286>
 8014836:	6839      	ldr	r1, [r7, #0]
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f000 fa08 	bl	8014c4e <USBD_CtlError>
 801483e:	7afb      	ldrb	r3, [r7, #11]
 8014840:	3301      	adds	r3, #1
 8014842:	72fb      	strb	r3, [r7, #11]
 8014844:	bf00      	nop
 8014846:	7afb      	ldrb	r3, [r7, #11]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d11e      	bne.n	801488a <USBD_GetDescriptor+0x2ca>
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	88db      	ldrh	r3, [r3, #6]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d016      	beq.n	8014882 <USBD_GetDescriptor+0x2c2>
 8014854:	893b      	ldrh	r3, [r7, #8]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d00e      	beq.n	8014878 <USBD_GetDescriptor+0x2b8>
 801485a:	683b      	ldr	r3, [r7, #0]
 801485c:	88da      	ldrh	r2, [r3, #6]
 801485e:	893b      	ldrh	r3, [r7, #8]
 8014860:	4293      	cmp	r3, r2
 8014862:	bf28      	it	cs
 8014864:	4613      	movcs	r3, r2
 8014866:	b29b      	uxth	r3, r3
 8014868:	813b      	strh	r3, [r7, #8]
 801486a:	893b      	ldrh	r3, [r7, #8]
 801486c:	461a      	mov	r2, r3
 801486e:	68f9      	ldr	r1, [r7, #12]
 8014870:	6878      	ldr	r0, [r7, #4]
 8014872:	f000 fa5d 	bl	8014d30 <USBD_CtlSendData>
 8014876:	e009      	b.n	801488c <USBD_GetDescriptor+0x2cc>
 8014878:	6839      	ldr	r1, [r7, #0]
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f000 f9e7 	bl	8014c4e <USBD_CtlError>
 8014880:	e004      	b.n	801488c <USBD_GetDescriptor+0x2cc>
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f000 faae 	bl	8014de4 <USBD_CtlSendStatus>
 8014888:	e000      	b.n	801488c <USBD_GetDescriptor+0x2cc>
 801488a:	bf00      	nop
 801488c:	3710      	adds	r7, #16
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}
 8014892:	bf00      	nop

08014894 <USBD_SetAddress>:
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
 801489c:	6039      	str	r1, [r7, #0]
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	889b      	ldrh	r3, [r3, #4]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d131      	bne.n	801490a <USBD_SetAddress+0x76>
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	88db      	ldrh	r3, [r3, #6]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d12d      	bne.n	801490a <USBD_SetAddress+0x76>
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	885b      	ldrh	r3, [r3, #2]
 80148b2:	2b7f      	cmp	r3, #127	; 0x7f
 80148b4:	d829      	bhi.n	801490a <USBD_SetAddress+0x76>
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	885b      	ldrh	r3, [r3, #2]
 80148ba:	b2db      	uxtb	r3, r3
 80148bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80148c0:	73fb      	strb	r3, [r7, #15]
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148c8:	b2db      	uxtb	r3, r3
 80148ca:	2b03      	cmp	r3, #3
 80148cc:	d104      	bne.n	80148d8 <USBD_SetAddress+0x44>
 80148ce:	6839      	ldr	r1, [r7, #0]
 80148d0:	6878      	ldr	r0, [r7, #4]
 80148d2:	f000 f9bc 	bl	8014c4e <USBD_CtlError>
 80148d6:	e01d      	b.n	8014914 <USBD_SetAddress+0x80>
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	7bfa      	ldrb	r2, [r7, #15]
 80148dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 80148e0:	7bfb      	ldrb	r3, [r7, #15]
 80148e2:	4619      	mov	r1, r3
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f007 fe73 	bl	801c5d0 <USBD_LL_SetUSBAddress>
 80148ea:	6878      	ldr	r0, [r7, #4]
 80148ec:	f000 fa7a 	bl	8014de4 <USBD_CtlSendStatus>
 80148f0:	7bfb      	ldrb	r3, [r7, #15]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d004      	beq.n	8014900 <USBD_SetAddress+0x6c>
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	2202      	movs	r2, #2
 80148fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 80148fe:	e009      	b.n	8014914 <USBD_SetAddress+0x80>
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2201      	movs	r2, #1
 8014904:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8014908:	e004      	b.n	8014914 <USBD_SetAddress+0x80>
 801490a:	6839      	ldr	r1, [r7, #0]
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f000 f99e 	bl	8014c4e <USBD_CtlError>
 8014912:	bf00      	nop
 8014914:	bf00      	nop
 8014916:	3710      	adds	r7, #16
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}

0801491c <USBD_SetConfig>:
 801491c:	b580      	push	{r7, lr}
 801491e:	b084      	sub	sp, #16
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	6039      	str	r1, [r7, #0]
 8014926:	2300      	movs	r3, #0
 8014928:	73fb      	strb	r3, [r7, #15]
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	885b      	ldrh	r3, [r3, #2]
 801492e:	b2da      	uxtb	r2, r3
 8014930:	4b4e      	ldr	r3, [pc, #312]	; (8014a6c <USBD_SetConfig+0x150>)
 8014932:	701a      	strb	r2, [r3, #0]
 8014934:	4b4d      	ldr	r3, [pc, #308]	; (8014a6c <USBD_SetConfig+0x150>)
 8014936:	781b      	ldrb	r3, [r3, #0]
 8014938:	2b01      	cmp	r3, #1
 801493a:	d905      	bls.n	8014948 <USBD_SetConfig+0x2c>
 801493c:	6839      	ldr	r1, [r7, #0]
 801493e:	6878      	ldr	r0, [r7, #4]
 8014940:	f000 f985 	bl	8014c4e <USBD_CtlError>
 8014944:	2303      	movs	r3, #3
 8014946:	e08c      	b.n	8014a62 <USBD_SetConfig+0x146>
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801494e:	b2db      	uxtb	r3, r3
 8014950:	2b02      	cmp	r3, #2
 8014952:	d002      	beq.n	801495a <USBD_SetConfig+0x3e>
 8014954:	2b03      	cmp	r3, #3
 8014956:	d029      	beq.n	80149ac <USBD_SetConfig+0x90>
 8014958:	e075      	b.n	8014a46 <USBD_SetConfig+0x12a>
 801495a:	4b44      	ldr	r3, [pc, #272]	; (8014a6c <USBD_SetConfig+0x150>)
 801495c:	781b      	ldrb	r3, [r3, #0]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d020      	beq.n	80149a4 <USBD_SetConfig+0x88>
 8014962:	4b42      	ldr	r3, [pc, #264]	; (8014a6c <USBD_SetConfig+0x150>)
 8014964:	781b      	ldrb	r3, [r3, #0]
 8014966:	461a      	mov	r2, r3
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	605a      	str	r2, [r3, #4]
 801496c:	4b3f      	ldr	r3, [pc, #252]	; (8014a6c <USBD_SetConfig+0x150>)
 801496e:	781b      	ldrb	r3, [r3, #0]
 8014970:	4619      	mov	r1, r3
 8014972:	6878      	ldr	r0, [r7, #4]
 8014974:	f7fe ffe7 	bl	8013946 <USBD_SetClassConfig>
 8014978:	4603      	mov	r3, r0
 801497a:	73fb      	strb	r3, [r7, #15]
 801497c:	7bfb      	ldrb	r3, [r7, #15]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d008      	beq.n	8014994 <USBD_SetConfig+0x78>
 8014982:	6839      	ldr	r1, [r7, #0]
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f000 f962 	bl	8014c4e <USBD_CtlError>
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	2202      	movs	r2, #2
 801498e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8014992:	e065      	b.n	8014a60 <USBD_SetConfig+0x144>
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	f000 fa25 	bl	8014de4 <USBD_CtlSendStatus>
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	2203      	movs	r2, #3
 801499e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 80149a2:	e05d      	b.n	8014a60 <USBD_SetConfig+0x144>
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f000 fa1d 	bl	8014de4 <USBD_CtlSendStatus>
 80149aa:	e059      	b.n	8014a60 <USBD_SetConfig+0x144>
 80149ac:	4b2f      	ldr	r3, [pc, #188]	; (8014a6c <USBD_SetConfig+0x150>)
 80149ae:	781b      	ldrb	r3, [r3, #0]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d112      	bne.n	80149da <USBD_SetConfig+0xbe>
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2202      	movs	r2, #2
 80149b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 80149bc:	4b2b      	ldr	r3, [pc, #172]	; (8014a6c <USBD_SetConfig+0x150>)
 80149be:	781b      	ldrb	r3, [r3, #0]
 80149c0:	461a      	mov	r2, r3
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	605a      	str	r2, [r3, #4]
 80149c6:	4b29      	ldr	r3, [pc, #164]	; (8014a6c <USBD_SetConfig+0x150>)
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	4619      	mov	r1, r3
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f7fe ffd6 	bl	801397e <USBD_ClrClassConfig>
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f000 fa06 	bl	8014de4 <USBD_CtlSendStatus>
 80149d8:	e042      	b.n	8014a60 <USBD_SetConfig+0x144>
 80149da:	4b24      	ldr	r3, [pc, #144]	; (8014a6c <USBD_SetConfig+0x150>)
 80149dc:	781b      	ldrb	r3, [r3, #0]
 80149de:	461a      	mov	r2, r3
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	685b      	ldr	r3, [r3, #4]
 80149e4:	429a      	cmp	r2, r3
 80149e6:	d02a      	beq.n	8014a3e <USBD_SetConfig+0x122>
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	685b      	ldr	r3, [r3, #4]
 80149ec:	b2db      	uxtb	r3, r3
 80149ee:	4619      	mov	r1, r3
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f7fe ffc4 	bl	801397e <USBD_ClrClassConfig>
 80149f6:	4b1d      	ldr	r3, [pc, #116]	; (8014a6c <USBD_SetConfig+0x150>)
 80149f8:	781b      	ldrb	r3, [r3, #0]
 80149fa:	461a      	mov	r2, r3
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	605a      	str	r2, [r3, #4]
 8014a00:	4b1a      	ldr	r3, [pc, #104]	; (8014a6c <USBD_SetConfig+0x150>)
 8014a02:	781b      	ldrb	r3, [r3, #0]
 8014a04:	4619      	mov	r1, r3
 8014a06:	6878      	ldr	r0, [r7, #4]
 8014a08:	f7fe ff9d 	bl	8013946 <USBD_SetClassConfig>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	73fb      	strb	r3, [r7, #15]
 8014a10:	7bfb      	ldrb	r3, [r7, #15]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d00f      	beq.n	8014a36 <USBD_SetConfig+0x11a>
 8014a16:	6839      	ldr	r1, [r7, #0]
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f000 f918 	bl	8014c4e <USBD_CtlError>
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	685b      	ldr	r3, [r3, #4]
 8014a22:	b2db      	uxtb	r3, r3
 8014a24:	4619      	mov	r1, r3
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f7fe ffa9 	bl	801397e <USBD_ClrClassConfig>
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2202      	movs	r2, #2
 8014a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8014a34:	e014      	b.n	8014a60 <USBD_SetConfig+0x144>
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f000 f9d4 	bl	8014de4 <USBD_CtlSendStatus>
 8014a3c:	e010      	b.n	8014a60 <USBD_SetConfig+0x144>
 8014a3e:	6878      	ldr	r0, [r7, #4]
 8014a40:	f000 f9d0 	bl	8014de4 <USBD_CtlSendStatus>
 8014a44:	e00c      	b.n	8014a60 <USBD_SetConfig+0x144>
 8014a46:	6839      	ldr	r1, [r7, #0]
 8014a48:	6878      	ldr	r0, [r7, #4]
 8014a4a:	f000 f900 	bl	8014c4e <USBD_CtlError>
 8014a4e:	4b07      	ldr	r3, [pc, #28]	; (8014a6c <USBD_SetConfig+0x150>)
 8014a50:	781b      	ldrb	r3, [r3, #0]
 8014a52:	4619      	mov	r1, r3
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	f7fe ff92 	bl	801397e <USBD_ClrClassConfig>
 8014a5a:	2303      	movs	r3, #3
 8014a5c:	73fb      	strb	r3, [r7, #15]
 8014a5e:	bf00      	nop
 8014a60:	7bfb      	ldrb	r3, [r7, #15]
 8014a62:	4618      	mov	r0, r3
 8014a64:	3710      	adds	r7, #16
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}
 8014a6a:	bf00      	nop
 8014a6c:	20004530 	.word	0x20004530

08014a70 <USBD_GetConfig>:
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b082      	sub	sp, #8
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
 8014a78:	6039      	str	r1, [r7, #0]
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	88db      	ldrh	r3, [r3, #6]
 8014a7e:	2b01      	cmp	r3, #1
 8014a80:	d004      	beq.n	8014a8c <USBD_GetConfig+0x1c>
 8014a82:	6839      	ldr	r1, [r7, #0]
 8014a84:	6878      	ldr	r0, [r7, #4]
 8014a86:	f000 f8e2 	bl	8014c4e <USBD_CtlError>
 8014a8a:	e023      	b.n	8014ad4 <USBD_GetConfig+0x64>
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a92:	b2db      	uxtb	r3, r3
 8014a94:	2b02      	cmp	r3, #2
 8014a96:	dc02      	bgt.n	8014a9e <USBD_GetConfig+0x2e>
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	dc03      	bgt.n	8014aa4 <USBD_GetConfig+0x34>
 8014a9c:	e015      	b.n	8014aca <USBD_GetConfig+0x5a>
 8014a9e:	2b03      	cmp	r3, #3
 8014aa0:	d00b      	beq.n	8014aba <USBD_GetConfig+0x4a>
 8014aa2:	e012      	b.n	8014aca <USBD_GetConfig+0x5a>
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	609a      	str	r2, [r3, #8]
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	3308      	adds	r3, #8
 8014aae:	2201      	movs	r2, #1
 8014ab0:	4619      	mov	r1, r3
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f000 f93c 	bl	8014d30 <USBD_CtlSendData>
 8014ab8:	e00c      	b.n	8014ad4 <USBD_GetConfig+0x64>
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	3304      	adds	r3, #4
 8014abe:	2201      	movs	r2, #1
 8014ac0:	4619      	mov	r1, r3
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f000 f934 	bl	8014d30 <USBD_CtlSendData>
 8014ac8:	e004      	b.n	8014ad4 <USBD_GetConfig+0x64>
 8014aca:	6839      	ldr	r1, [r7, #0]
 8014acc:	6878      	ldr	r0, [r7, #4]
 8014ace:	f000 f8be 	bl	8014c4e <USBD_CtlError>
 8014ad2:	bf00      	nop
 8014ad4:	bf00      	nop
 8014ad6:	3708      	adds	r7, #8
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}

08014adc <USBD_GetStatus>:
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b082      	sub	sp, #8
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
 8014ae4:	6039      	str	r1, [r7, #0]
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014aec:	b2db      	uxtb	r3, r3
 8014aee:	3b01      	subs	r3, #1
 8014af0:	2b02      	cmp	r3, #2
 8014af2:	d81e      	bhi.n	8014b32 <USBD_GetStatus+0x56>
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	88db      	ldrh	r3, [r3, #6]
 8014af8:	2b02      	cmp	r3, #2
 8014afa:	d004      	beq.n	8014b06 <USBD_GetStatus+0x2a>
 8014afc:	6839      	ldr	r1, [r7, #0]
 8014afe:	6878      	ldr	r0, [r7, #4]
 8014b00:	f000 f8a5 	bl	8014c4e <USBD_CtlError>
 8014b04:	e01a      	b.n	8014b3c <USBD_GetStatus+0x60>
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2201      	movs	r2, #1
 8014b0a:	60da      	str	r2, [r3, #12]
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d005      	beq.n	8014b22 <USBD_GetStatus+0x46>
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	68db      	ldr	r3, [r3, #12]
 8014b1a:	f043 0202 	orr.w	r2, r3, #2
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	60da      	str	r2, [r3, #12]
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	330c      	adds	r3, #12
 8014b26:	2202      	movs	r2, #2
 8014b28:	4619      	mov	r1, r3
 8014b2a:	6878      	ldr	r0, [r7, #4]
 8014b2c:	f000 f900 	bl	8014d30 <USBD_CtlSendData>
 8014b30:	e004      	b.n	8014b3c <USBD_GetStatus+0x60>
 8014b32:	6839      	ldr	r1, [r7, #0]
 8014b34:	6878      	ldr	r0, [r7, #4]
 8014b36:	f000 f88a 	bl	8014c4e <USBD_CtlError>
 8014b3a:	bf00      	nop
 8014b3c:	bf00      	nop
 8014b3e:	3708      	adds	r7, #8
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd80      	pop	{r7, pc}

08014b44 <USBD_SetFeature>:
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b082      	sub	sp, #8
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
 8014b4c:	6039      	str	r1, [r7, #0]
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	885b      	ldrh	r3, [r3, #2]
 8014b52:	2b01      	cmp	r3, #1
 8014b54:	d107      	bne.n	8014b66 <USBD_SetFeature+0x22>
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	2201      	movs	r2, #1
 8014b5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8014b5e:	6878      	ldr	r0, [r7, #4]
 8014b60:	f000 f940 	bl	8014de4 <USBD_CtlSendStatus>
 8014b64:	e013      	b.n	8014b8e <USBD_SetFeature+0x4a>
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	885b      	ldrh	r3, [r3, #2]
 8014b6a:	2b02      	cmp	r3, #2
 8014b6c:	d10b      	bne.n	8014b86 <USBD_SetFeature+0x42>
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	889b      	ldrh	r3, [r3, #4]
 8014b72:	0a1b      	lsrs	r3, r3, #8
 8014b74:	b29b      	uxth	r3, r3
 8014b76:	b2da      	uxtb	r2, r3
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f000 f930 	bl	8014de4 <USBD_CtlSendStatus>
 8014b84:	e003      	b.n	8014b8e <USBD_SetFeature+0x4a>
 8014b86:	6839      	ldr	r1, [r7, #0]
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f000 f860 	bl	8014c4e <USBD_CtlError>
 8014b8e:	bf00      	nop
 8014b90:	3708      	adds	r7, #8
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd80      	pop	{r7, pc}

08014b96 <USBD_ClrFeature>:
 8014b96:	b580      	push	{r7, lr}
 8014b98:	b082      	sub	sp, #8
 8014b9a:	af00      	add	r7, sp, #0
 8014b9c:	6078      	str	r0, [r7, #4]
 8014b9e:	6039      	str	r1, [r7, #0]
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ba6:	b2db      	uxtb	r3, r3
 8014ba8:	3b01      	subs	r3, #1
 8014baa:	2b02      	cmp	r3, #2
 8014bac:	d80b      	bhi.n	8014bc6 <USBD_ClrFeature+0x30>
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	885b      	ldrh	r3, [r3, #2]
 8014bb2:	2b01      	cmp	r3, #1
 8014bb4:	d10c      	bne.n	8014bd0 <USBD_ClrFeature+0x3a>
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	2200      	movs	r2, #0
 8014bba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8014bbe:	6878      	ldr	r0, [r7, #4]
 8014bc0:	f000 f910 	bl	8014de4 <USBD_CtlSendStatus>
 8014bc4:	e004      	b.n	8014bd0 <USBD_ClrFeature+0x3a>
 8014bc6:	6839      	ldr	r1, [r7, #0]
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f000 f840 	bl	8014c4e <USBD_CtlError>
 8014bce:	e000      	b.n	8014bd2 <USBD_ClrFeature+0x3c>
 8014bd0:	bf00      	nop
 8014bd2:	bf00      	nop
 8014bd4:	3708      	adds	r7, #8
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}

08014bda <USBD_ParseSetupRequest>:
 8014bda:	b580      	push	{r7, lr}
 8014bdc:	b084      	sub	sp, #16
 8014bde:	af00      	add	r7, sp, #0
 8014be0:	6078      	str	r0, [r7, #4]
 8014be2:	6039      	str	r1, [r7, #0]
 8014be4:	683b      	ldr	r3, [r7, #0]
 8014be6:	60fb      	str	r3, [r7, #12]
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	781a      	ldrb	r2, [r3, #0]
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	701a      	strb	r2, [r3, #0]
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	60fb      	str	r3, [r7, #12]
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	781a      	ldrb	r2, [r3, #0]
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	705a      	strb	r2, [r3, #1]
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	3301      	adds	r3, #1
 8014c02:	60fb      	str	r3, [r7, #12]
 8014c04:	68f8      	ldr	r0, [r7, #12]
 8014c06:	f7ff fa41 	bl	801408c <SWAPBYTE>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	461a      	mov	r2, r3
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	805a      	strh	r2, [r3, #2]
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	3301      	adds	r3, #1
 8014c16:	60fb      	str	r3, [r7, #12]
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	60fb      	str	r3, [r7, #12]
 8014c1e:	68f8      	ldr	r0, [r7, #12]
 8014c20:	f7ff fa34 	bl	801408c <SWAPBYTE>
 8014c24:	4603      	mov	r3, r0
 8014c26:	461a      	mov	r2, r3
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	809a      	strh	r2, [r3, #4]
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	3301      	adds	r3, #1
 8014c30:	60fb      	str	r3, [r7, #12]
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	3301      	adds	r3, #1
 8014c36:	60fb      	str	r3, [r7, #12]
 8014c38:	68f8      	ldr	r0, [r7, #12]
 8014c3a:	f7ff fa27 	bl	801408c <SWAPBYTE>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	461a      	mov	r2, r3
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	80da      	strh	r2, [r3, #6]
 8014c46:	bf00      	nop
 8014c48:	3710      	adds	r7, #16
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	bd80      	pop	{r7, pc}

08014c4e <USBD_CtlError>:
 8014c4e:	b580      	push	{r7, lr}
 8014c50:	b082      	sub	sp, #8
 8014c52:	af00      	add	r7, sp, #0
 8014c54:	6078      	str	r0, [r7, #4]
 8014c56:	6039      	str	r1, [r7, #0]
 8014c58:	2180      	movs	r1, #128	; 0x80
 8014c5a:	6878      	ldr	r0, [r7, #4]
 8014c5c:	f007 fc4e 	bl	801c4fc <USBD_LL_StallEP>
 8014c60:	2100      	movs	r1, #0
 8014c62:	6878      	ldr	r0, [r7, #4]
 8014c64:	f007 fc4a 	bl	801c4fc <USBD_LL_StallEP>
 8014c68:	bf00      	nop
 8014c6a:	3708      	adds	r7, #8
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bd80      	pop	{r7, pc}

08014c70 <USBD_GetString>:
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b086      	sub	sp, #24
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	60f8      	str	r0, [r7, #12]
 8014c78:	60b9      	str	r1, [r7, #8]
 8014c7a:	607a      	str	r2, [r7, #4]
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	75fb      	strb	r3, [r7, #23]
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d036      	beq.n	8014cf4 <USBD_GetString+0x84>
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	613b      	str	r3, [r7, #16]
 8014c8a:	6938      	ldr	r0, [r7, #16]
 8014c8c:	f000 f836 	bl	8014cfc <USBD_GetLen>
 8014c90:	4603      	mov	r3, r0
 8014c92:	3301      	adds	r3, #1
 8014c94:	b29b      	uxth	r3, r3
 8014c96:	005b      	lsls	r3, r3, #1
 8014c98:	b29a      	uxth	r2, r3
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	801a      	strh	r2, [r3, #0]
 8014c9e:	7dfb      	ldrb	r3, [r7, #23]
 8014ca0:	68ba      	ldr	r2, [r7, #8]
 8014ca2:	4413      	add	r3, r2
 8014ca4:	687a      	ldr	r2, [r7, #4]
 8014ca6:	7812      	ldrb	r2, [r2, #0]
 8014ca8:	701a      	strb	r2, [r3, #0]
 8014caa:	7dfb      	ldrb	r3, [r7, #23]
 8014cac:	3301      	adds	r3, #1
 8014cae:	75fb      	strb	r3, [r7, #23]
 8014cb0:	7dfb      	ldrb	r3, [r7, #23]
 8014cb2:	68ba      	ldr	r2, [r7, #8]
 8014cb4:	4413      	add	r3, r2
 8014cb6:	2203      	movs	r2, #3
 8014cb8:	701a      	strb	r2, [r3, #0]
 8014cba:	7dfb      	ldrb	r3, [r7, #23]
 8014cbc:	3301      	adds	r3, #1
 8014cbe:	75fb      	strb	r3, [r7, #23]
 8014cc0:	e013      	b.n	8014cea <USBD_GetString+0x7a>
 8014cc2:	7dfb      	ldrb	r3, [r7, #23]
 8014cc4:	68ba      	ldr	r2, [r7, #8]
 8014cc6:	4413      	add	r3, r2
 8014cc8:	693a      	ldr	r2, [r7, #16]
 8014cca:	7812      	ldrb	r2, [r2, #0]
 8014ccc:	701a      	strb	r2, [r3, #0]
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	3301      	adds	r3, #1
 8014cd2:	613b      	str	r3, [r7, #16]
 8014cd4:	7dfb      	ldrb	r3, [r7, #23]
 8014cd6:	3301      	adds	r3, #1
 8014cd8:	75fb      	strb	r3, [r7, #23]
 8014cda:	7dfb      	ldrb	r3, [r7, #23]
 8014cdc:	68ba      	ldr	r2, [r7, #8]
 8014cde:	4413      	add	r3, r2
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	701a      	strb	r2, [r3, #0]
 8014ce4:	7dfb      	ldrb	r3, [r7, #23]
 8014ce6:	3301      	adds	r3, #1
 8014ce8:	75fb      	strb	r3, [r7, #23]
 8014cea:	693b      	ldr	r3, [r7, #16]
 8014cec:	781b      	ldrb	r3, [r3, #0]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d1e7      	bne.n	8014cc2 <USBD_GetString+0x52>
 8014cf2:	e000      	b.n	8014cf6 <USBD_GetString+0x86>
 8014cf4:	bf00      	nop
 8014cf6:	3718      	adds	r7, #24
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}

08014cfc <USBD_GetLen>:
 8014cfc:	b480      	push	{r7}
 8014cfe:	b085      	sub	sp, #20
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
 8014d04:	2300      	movs	r3, #0
 8014d06:	73fb      	strb	r3, [r7, #15]
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	60bb      	str	r3, [r7, #8]
 8014d0c:	e005      	b.n	8014d1a <USBD_GetLen+0x1e>
 8014d0e:	7bfb      	ldrb	r3, [r7, #15]
 8014d10:	3301      	adds	r3, #1
 8014d12:	73fb      	strb	r3, [r7, #15]
 8014d14:	68bb      	ldr	r3, [r7, #8]
 8014d16:	3301      	adds	r3, #1
 8014d18:	60bb      	str	r3, [r7, #8]
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	781b      	ldrb	r3, [r3, #0]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d1f5      	bne.n	8014d0e <USBD_GetLen+0x12>
 8014d22:	7bfb      	ldrb	r3, [r7, #15]
 8014d24:	4618      	mov	r0, r3
 8014d26:	3714      	adds	r7, #20
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2e:	4770      	bx	lr

08014d30 <USBD_CtlSendData>:
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b084      	sub	sp, #16
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	60f8      	str	r0, [r7, #12]
 8014d38:	60b9      	str	r1, [r7, #8]
 8014d3a:	607a      	str	r2, [r7, #4]
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	2202      	movs	r2, #2
 8014d40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	687a      	ldr	r2, [r7, #4]
 8014d48:	619a      	str	r2, [r3, #24]
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	687a      	ldr	r2, [r7, #4]
 8014d4e:	61da      	str	r2, [r3, #28]
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	68ba      	ldr	r2, [r7, #8]
 8014d54:	2100      	movs	r1, #0
 8014d56:	68f8      	ldr	r0, [r7, #12]
 8014d58:	f007 fc59 	bl	801c60e <USBD_LL_Transmit>
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3710      	adds	r7, #16
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bd80      	pop	{r7, pc}

08014d66 <USBD_CtlContinueSendData>:
 8014d66:	b580      	push	{r7, lr}
 8014d68:	b084      	sub	sp, #16
 8014d6a:	af00      	add	r7, sp, #0
 8014d6c:	60f8      	str	r0, [r7, #12]
 8014d6e:	60b9      	str	r1, [r7, #8]
 8014d70:	607a      	str	r2, [r7, #4]
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	68ba      	ldr	r2, [r7, #8]
 8014d76:	2100      	movs	r1, #0
 8014d78:	68f8      	ldr	r0, [r7, #12]
 8014d7a:	f007 fc48 	bl	801c60e <USBD_LL_Transmit>
 8014d7e:	2300      	movs	r3, #0
 8014d80:	4618      	mov	r0, r3
 8014d82:	3710      	adds	r7, #16
 8014d84:	46bd      	mov	sp, r7
 8014d86:	bd80      	pop	{r7, pc}

08014d88 <USBD_CtlPrepareRx>:
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b084      	sub	sp, #16
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	60f8      	str	r0, [r7, #12]
 8014d90:	60b9      	str	r1, [r7, #8]
 8014d92:	607a      	str	r2, [r7, #4]
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	2203      	movs	r2, #3
 8014d98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	687a      	ldr	r2, [r7, #4]
 8014da0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	687a      	ldr	r2, [r7, #4]
 8014da8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	68ba      	ldr	r2, [r7, #8]
 8014db0:	2100      	movs	r1, #0
 8014db2:	68f8      	ldr	r0, [r7, #12]
 8014db4:	f007 fc4c 	bl	801c650 <USBD_LL_PrepareReceive>
 8014db8:	2300      	movs	r3, #0
 8014dba:	4618      	mov	r0, r3
 8014dbc:	3710      	adds	r7, #16
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}

08014dc2 <USBD_CtlContinueRx>:
 8014dc2:	b580      	push	{r7, lr}
 8014dc4:	b084      	sub	sp, #16
 8014dc6:	af00      	add	r7, sp, #0
 8014dc8:	60f8      	str	r0, [r7, #12]
 8014dca:	60b9      	str	r1, [r7, #8]
 8014dcc:	607a      	str	r2, [r7, #4]
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	68ba      	ldr	r2, [r7, #8]
 8014dd2:	2100      	movs	r1, #0
 8014dd4:	68f8      	ldr	r0, [r7, #12]
 8014dd6:	f007 fc3b 	bl	801c650 <USBD_LL_PrepareReceive>
 8014dda:	2300      	movs	r3, #0
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3710      	adds	r7, #16
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}

08014de4 <USBD_CtlSendStatus>:
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b082      	sub	sp, #8
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	2204      	movs	r2, #4
 8014df0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8014df4:	2300      	movs	r3, #0
 8014df6:	2200      	movs	r2, #0
 8014df8:	2100      	movs	r1, #0
 8014dfa:	6878      	ldr	r0, [r7, #4]
 8014dfc:	f007 fc07 	bl	801c60e <USBD_LL_Transmit>
 8014e00:	2300      	movs	r3, #0
 8014e02:	4618      	mov	r0, r3
 8014e04:	3708      	adds	r7, #8
 8014e06:	46bd      	mov	sp, r7
 8014e08:	bd80      	pop	{r7, pc}

08014e0a <USBD_CtlReceiveStatus>:
 8014e0a:	b580      	push	{r7, lr}
 8014e0c:	b082      	sub	sp, #8
 8014e0e:	af00      	add	r7, sp, #0
 8014e10:	6078      	str	r0, [r7, #4]
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	2205      	movs	r2, #5
 8014e16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	2100      	movs	r1, #0
 8014e20:	6878      	ldr	r0, [r7, #4]
 8014e22:	f007 fc15 	bl	801c650 <USBD_LL_PrepareReceive>
 8014e26:	2300      	movs	r3, #0
 8014e28:	4618      	mov	r0, r3
 8014e2a:	3708      	adds	r7, #8
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bd80      	pop	{r7, pc}

08014e30 <disk_status>:
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b084      	sub	sp, #16
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	4603      	mov	r3, r0
 8014e38:	71fb      	strb	r3, [r7, #7]
 8014e3a:	79fb      	ldrb	r3, [r7, #7]
 8014e3c:	4a08      	ldr	r2, [pc, #32]	; (8014e60 <disk_status+0x30>)
 8014e3e:	009b      	lsls	r3, r3, #2
 8014e40:	4413      	add	r3, r2
 8014e42:	685b      	ldr	r3, [r3, #4]
 8014e44:	685b      	ldr	r3, [r3, #4]
 8014e46:	79fa      	ldrb	r2, [r7, #7]
 8014e48:	4905      	ldr	r1, [pc, #20]	; (8014e60 <disk_status+0x30>)
 8014e4a:	440a      	add	r2, r1
 8014e4c:	7a12      	ldrb	r2, [r2, #8]
 8014e4e:	4610      	mov	r0, r2
 8014e50:	4798      	blx	r3
 8014e52:	4603      	mov	r3, r0
 8014e54:	73fb      	strb	r3, [r7, #15]
 8014e56:	7bfb      	ldrb	r3, [r7, #15]
 8014e58:	4618      	mov	r0, r3
 8014e5a:	3710      	adds	r7, #16
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	bd80      	pop	{r7, pc}
 8014e60:	200045dc 	.word	0x200045dc

08014e64 <disk_initialize>:
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b084      	sub	sp, #16
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	71fb      	strb	r3, [r7, #7]
 8014e6e:	2300      	movs	r3, #0
 8014e70:	73fb      	strb	r3, [r7, #15]
 8014e72:	79fb      	ldrb	r3, [r7, #7]
 8014e74:	4a0d      	ldr	r2, [pc, #52]	; (8014eac <disk_initialize+0x48>)
 8014e76:	5cd3      	ldrb	r3, [r2, r3]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d111      	bne.n	8014ea0 <disk_initialize+0x3c>
 8014e7c:	79fb      	ldrb	r3, [r7, #7]
 8014e7e:	4a0b      	ldr	r2, [pc, #44]	; (8014eac <disk_initialize+0x48>)
 8014e80:	2101      	movs	r1, #1
 8014e82:	54d1      	strb	r1, [r2, r3]
 8014e84:	79fb      	ldrb	r3, [r7, #7]
 8014e86:	4a09      	ldr	r2, [pc, #36]	; (8014eac <disk_initialize+0x48>)
 8014e88:	009b      	lsls	r3, r3, #2
 8014e8a:	4413      	add	r3, r2
 8014e8c:	685b      	ldr	r3, [r3, #4]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	79fa      	ldrb	r2, [r7, #7]
 8014e92:	4906      	ldr	r1, [pc, #24]	; (8014eac <disk_initialize+0x48>)
 8014e94:	440a      	add	r2, r1
 8014e96:	7a12      	ldrb	r2, [r2, #8]
 8014e98:	4610      	mov	r0, r2
 8014e9a:	4798      	blx	r3
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	73fb      	strb	r3, [r7, #15]
 8014ea0:	7bfb      	ldrb	r3, [r7, #15]
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3710      	adds	r7, #16
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}
 8014eaa:	bf00      	nop
 8014eac:	200045dc 	.word	0x200045dc

08014eb0 <disk_read>:
 8014eb0:	b590      	push	{r4, r7, lr}
 8014eb2:	b087      	sub	sp, #28
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	60b9      	str	r1, [r7, #8]
 8014eb8:	607a      	str	r2, [r7, #4]
 8014eba:	603b      	str	r3, [r7, #0]
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	73fb      	strb	r3, [r7, #15]
 8014ec0:	7bfb      	ldrb	r3, [r7, #15]
 8014ec2:	4a0a      	ldr	r2, [pc, #40]	; (8014eec <disk_read+0x3c>)
 8014ec4:	009b      	lsls	r3, r3, #2
 8014ec6:	4413      	add	r3, r2
 8014ec8:	685b      	ldr	r3, [r3, #4]
 8014eca:	689c      	ldr	r4, [r3, #8]
 8014ecc:	7bfb      	ldrb	r3, [r7, #15]
 8014ece:	4a07      	ldr	r2, [pc, #28]	; (8014eec <disk_read+0x3c>)
 8014ed0:	4413      	add	r3, r2
 8014ed2:	7a18      	ldrb	r0, [r3, #8]
 8014ed4:	683b      	ldr	r3, [r7, #0]
 8014ed6:	687a      	ldr	r2, [r7, #4]
 8014ed8:	68b9      	ldr	r1, [r7, #8]
 8014eda:	47a0      	blx	r4
 8014edc:	4603      	mov	r3, r0
 8014ede:	75fb      	strb	r3, [r7, #23]
 8014ee0:	7dfb      	ldrb	r3, [r7, #23]
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	371c      	adds	r7, #28
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd90      	pop	{r4, r7, pc}
 8014eea:	bf00      	nop
 8014eec:	200045dc 	.word	0x200045dc

08014ef0 <disk_write>:
 8014ef0:	b590      	push	{r4, r7, lr}
 8014ef2:	b087      	sub	sp, #28
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	60b9      	str	r1, [r7, #8]
 8014ef8:	607a      	str	r2, [r7, #4]
 8014efa:	603b      	str	r3, [r7, #0]
 8014efc:	4603      	mov	r3, r0
 8014efe:	73fb      	strb	r3, [r7, #15]
 8014f00:	7bfb      	ldrb	r3, [r7, #15]
 8014f02:	4a0a      	ldr	r2, [pc, #40]	; (8014f2c <disk_write+0x3c>)
 8014f04:	009b      	lsls	r3, r3, #2
 8014f06:	4413      	add	r3, r2
 8014f08:	685b      	ldr	r3, [r3, #4]
 8014f0a:	68dc      	ldr	r4, [r3, #12]
 8014f0c:	7bfb      	ldrb	r3, [r7, #15]
 8014f0e:	4a07      	ldr	r2, [pc, #28]	; (8014f2c <disk_write+0x3c>)
 8014f10:	4413      	add	r3, r2
 8014f12:	7a18      	ldrb	r0, [r3, #8]
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	687a      	ldr	r2, [r7, #4]
 8014f18:	68b9      	ldr	r1, [r7, #8]
 8014f1a:	47a0      	blx	r4
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	75fb      	strb	r3, [r7, #23]
 8014f20:	7dfb      	ldrb	r3, [r7, #23]
 8014f22:	4618      	mov	r0, r3
 8014f24:	371c      	adds	r7, #28
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd90      	pop	{r4, r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	200045dc 	.word	0x200045dc

08014f30 <disk_ioctl>:
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b084      	sub	sp, #16
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	4603      	mov	r3, r0
 8014f38:	603a      	str	r2, [r7, #0]
 8014f3a:	71fb      	strb	r3, [r7, #7]
 8014f3c:	460b      	mov	r3, r1
 8014f3e:	71bb      	strb	r3, [r7, #6]
 8014f40:	79fb      	ldrb	r3, [r7, #7]
 8014f42:	4a09      	ldr	r2, [pc, #36]	; (8014f68 <disk_ioctl+0x38>)
 8014f44:	009b      	lsls	r3, r3, #2
 8014f46:	4413      	add	r3, r2
 8014f48:	685b      	ldr	r3, [r3, #4]
 8014f4a:	691b      	ldr	r3, [r3, #16]
 8014f4c:	79fa      	ldrb	r2, [r7, #7]
 8014f4e:	4906      	ldr	r1, [pc, #24]	; (8014f68 <disk_ioctl+0x38>)
 8014f50:	440a      	add	r2, r1
 8014f52:	7a10      	ldrb	r0, [r2, #8]
 8014f54:	79b9      	ldrb	r1, [r7, #6]
 8014f56:	683a      	ldr	r2, [r7, #0]
 8014f58:	4798      	blx	r3
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	73fb      	strb	r3, [r7, #15]
 8014f5e:	7bfb      	ldrb	r3, [r7, #15]
 8014f60:	4618      	mov	r0, r3
 8014f62:	3710      	adds	r7, #16
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bd80      	pop	{r7, pc}
 8014f68:	200045dc 	.word	0x200045dc

08014f6c <ld_word>:
 8014f6c:	b480      	push	{r7}
 8014f6e:	b085      	sub	sp, #20
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	3301      	adds	r3, #1
 8014f78:	781b      	ldrb	r3, [r3, #0]
 8014f7a:	81fb      	strh	r3, [r7, #14]
 8014f7c:	89fb      	ldrh	r3, [r7, #14]
 8014f7e:	021b      	lsls	r3, r3, #8
 8014f80:	b21a      	sxth	r2, r3
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	781b      	ldrb	r3, [r3, #0]
 8014f86:	b21b      	sxth	r3, r3
 8014f88:	4313      	orrs	r3, r2
 8014f8a:	b21b      	sxth	r3, r3
 8014f8c:	81fb      	strh	r3, [r7, #14]
 8014f8e:	89fb      	ldrh	r3, [r7, #14]
 8014f90:	4618      	mov	r0, r3
 8014f92:	3714      	adds	r7, #20
 8014f94:	46bd      	mov	sp, r7
 8014f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9a:	4770      	bx	lr

08014f9c <ld_dword>:
 8014f9c:	b480      	push	{r7}
 8014f9e:	b085      	sub	sp, #20
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	3303      	adds	r3, #3
 8014fa8:	781b      	ldrb	r3, [r3, #0]
 8014faa:	60fb      	str	r3, [r7, #12]
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	021b      	lsls	r3, r3, #8
 8014fb0:	687a      	ldr	r2, [r7, #4]
 8014fb2:	3202      	adds	r2, #2
 8014fb4:	7812      	ldrb	r2, [r2, #0]
 8014fb6:	4313      	orrs	r3, r2
 8014fb8:	60fb      	str	r3, [r7, #12]
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	021b      	lsls	r3, r3, #8
 8014fbe:	687a      	ldr	r2, [r7, #4]
 8014fc0:	3201      	adds	r2, #1
 8014fc2:	7812      	ldrb	r2, [r2, #0]
 8014fc4:	4313      	orrs	r3, r2
 8014fc6:	60fb      	str	r3, [r7, #12]
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	021b      	lsls	r3, r3, #8
 8014fcc:	687a      	ldr	r2, [r7, #4]
 8014fce:	7812      	ldrb	r2, [r2, #0]
 8014fd0:	4313      	orrs	r3, r2
 8014fd2:	60fb      	str	r3, [r7, #12]
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	3714      	adds	r7, #20
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe0:	4770      	bx	lr

08014fe2 <st_word>:
 8014fe2:	b480      	push	{r7}
 8014fe4:	b083      	sub	sp, #12
 8014fe6:	af00      	add	r7, sp, #0
 8014fe8:	6078      	str	r0, [r7, #4]
 8014fea:	460b      	mov	r3, r1
 8014fec:	807b      	strh	r3, [r7, #2]
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	1c5a      	adds	r2, r3, #1
 8014ff2:	607a      	str	r2, [r7, #4]
 8014ff4:	887a      	ldrh	r2, [r7, #2]
 8014ff6:	b2d2      	uxtb	r2, r2
 8014ff8:	701a      	strb	r2, [r3, #0]
 8014ffa:	887b      	ldrh	r3, [r7, #2]
 8014ffc:	0a1b      	lsrs	r3, r3, #8
 8014ffe:	807b      	strh	r3, [r7, #2]
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	1c5a      	adds	r2, r3, #1
 8015004:	607a      	str	r2, [r7, #4]
 8015006:	887a      	ldrh	r2, [r7, #2]
 8015008:	b2d2      	uxtb	r2, r2
 801500a:	701a      	strb	r2, [r3, #0]
 801500c:	bf00      	nop
 801500e:	370c      	adds	r7, #12
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr

08015018 <st_dword>:
 8015018:	b480      	push	{r7}
 801501a:	b083      	sub	sp, #12
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
 8015020:	6039      	str	r1, [r7, #0]
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	1c5a      	adds	r2, r3, #1
 8015026:	607a      	str	r2, [r7, #4]
 8015028:	683a      	ldr	r2, [r7, #0]
 801502a:	b2d2      	uxtb	r2, r2
 801502c:	701a      	strb	r2, [r3, #0]
 801502e:	683b      	ldr	r3, [r7, #0]
 8015030:	0a1b      	lsrs	r3, r3, #8
 8015032:	603b      	str	r3, [r7, #0]
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	1c5a      	adds	r2, r3, #1
 8015038:	607a      	str	r2, [r7, #4]
 801503a:	683a      	ldr	r2, [r7, #0]
 801503c:	b2d2      	uxtb	r2, r2
 801503e:	701a      	strb	r2, [r3, #0]
 8015040:	683b      	ldr	r3, [r7, #0]
 8015042:	0a1b      	lsrs	r3, r3, #8
 8015044:	603b      	str	r3, [r7, #0]
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	1c5a      	adds	r2, r3, #1
 801504a:	607a      	str	r2, [r7, #4]
 801504c:	683a      	ldr	r2, [r7, #0]
 801504e:	b2d2      	uxtb	r2, r2
 8015050:	701a      	strb	r2, [r3, #0]
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	0a1b      	lsrs	r3, r3, #8
 8015056:	603b      	str	r3, [r7, #0]
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	1c5a      	adds	r2, r3, #1
 801505c:	607a      	str	r2, [r7, #4]
 801505e:	683a      	ldr	r2, [r7, #0]
 8015060:	b2d2      	uxtb	r2, r2
 8015062:	701a      	strb	r2, [r3, #0]
 8015064:	bf00      	nop
 8015066:	370c      	adds	r7, #12
 8015068:	46bd      	mov	sp, r7
 801506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506e:	4770      	bx	lr

08015070 <mem_cpy>:
 8015070:	b480      	push	{r7}
 8015072:	b087      	sub	sp, #28
 8015074:	af00      	add	r7, sp, #0
 8015076:	60f8      	str	r0, [r7, #12]
 8015078:	60b9      	str	r1, [r7, #8]
 801507a:	607a      	str	r2, [r7, #4]
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	617b      	str	r3, [r7, #20]
 8015080:	68bb      	ldr	r3, [r7, #8]
 8015082:	613b      	str	r3, [r7, #16]
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d00d      	beq.n	80150a6 <mem_cpy+0x36>
 801508a:	693a      	ldr	r2, [r7, #16]
 801508c:	1c53      	adds	r3, r2, #1
 801508e:	613b      	str	r3, [r7, #16]
 8015090:	697b      	ldr	r3, [r7, #20]
 8015092:	1c59      	adds	r1, r3, #1
 8015094:	6179      	str	r1, [r7, #20]
 8015096:	7812      	ldrb	r2, [r2, #0]
 8015098:	701a      	strb	r2, [r3, #0]
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	3b01      	subs	r3, #1
 801509e:	607b      	str	r3, [r7, #4]
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d1f1      	bne.n	801508a <mem_cpy+0x1a>
 80150a6:	bf00      	nop
 80150a8:	371c      	adds	r7, #28
 80150aa:	46bd      	mov	sp, r7
 80150ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b0:	4770      	bx	lr

080150b2 <mem_set>:
 80150b2:	b480      	push	{r7}
 80150b4:	b087      	sub	sp, #28
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	60f8      	str	r0, [r7, #12]
 80150ba:	60b9      	str	r1, [r7, #8]
 80150bc:	607a      	str	r2, [r7, #4]
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	617b      	str	r3, [r7, #20]
 80150c2:	697b      	ldr	r3, [r7, #20]
 80150c4:	1c5a      	adds	r2, r3, #1
 80150c6:	617a      	str	r2, [r7, #20]
 80150c8:	68ba      	ldr	r2, [r7, #8]
 80150ca:	b2d2      	uxtb	r2, r2
 80150cc:	701a      	strb	r2, [r3, #0]
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	3b01      	subs	r3, #1
 80150d2:	607b      	str	r3, [r7, #4]
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d1f3      	bne.n	80150c2 <mem_set+0x10>
 80150da:	bf00      	nop
 80150dc:	bf00      	nop
 80150de:	371c      	adds	r7, #28
 80150e0:	46bd      	mov	sp, r7
 80150e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e6:	4770      	bx	lr

080150e8 <mem_cmp>:
 80150e8:	b480      	push	{r7}
 80150ea:	b089      	sub	sp, #36	; 0x24
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	60f8      	str	r0, [r7, #12]
 80150f0:	60b9      	str	r1, [r7, #8]
 80150f2:	607a      	str	r2, [r7, #4]
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	61fb      	str	r3, [r7, #28]
 80150f8:	68bb      	ldr	r3, [r7, #8]
 80150fa:	61bb      	str	r3, [r7, #24]
 80150fc:	2300      	movs	r3, #0
 80150fe:	617b      	str	r3, [r7, #20]
 8015100:	69fb      	ldr	r3, [r7, #28]
 8015102:	1c5a      	adds	r2, r3, #1
 8015104:	61fa      	str	r2, [r7, #28]
 8015106:	781b      	ldrb	r3, [r3, #0]
 8015108:	4619      	mov	r1, r3
 801510a:	69bb      	ldr	r3, [r7, #24]
 801510c:	1c5a      	adds	r2, r3, #1
 801510e:	61ba      	str	r2, [r7, #24]
 8015110:	781b      	ldrb	r3, [r3, #0]
 8015112:	1acb      	subs	r3, r1, r3
 8015114:	617b      	str	r3, [r7, #20]
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	3b01      	subs	r3, #1
 801511a:	607b      	str	r3, [r7, #4]
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d002      	beq.n	8015128 <mem_cmp+0x40>
 8015122:	697b      	ldr	r3, [r7, #20]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d0eb      	beq.n	8015100 <mem_cmp+0x18>
 8015128:	697b      	ldr	r3, [r7, #20]
 801512a:	4618      	mov	r0, r3
 801512c:	3724      	adds	r7, #36	; 0x24
 801512e:	46bd      	mov	sp, r7
 8015130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015134:	4770      	bx	lr

08015136 <chk_chr>:
 8015136:	b480      	push	{r7}
 8015138:	b083      	sub	sp, #12
 801513a:	af00      	add	r7, sp, #0
 801513c:	6078      	str	r0, [r7, #4]
 801513e:	6039      	str	r1, [r7, #0]
 8015140:	e002      	b.n	8015148 <chk_chr+0x12>
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	3301      	adds	r3, #1
 8015146:	607b      	str	r3, [r7, #4]
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	781b      	ldrb	r3, [r3, #0]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d005      	beq.n	801515c <chk_chr+0x26>
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	781b      	ldrb	r3, [r3, #0]
 8015154:	461a      	mov	r2, r3
 8015156:	683b      	ldr	r3, [r7, #0]
 8015158:	4293      	cmp	r3, r2
 801515a:	d1f2      	bne.n	8015142 <chk_chr+0xc>
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	781b      	ldrb	r3, [r3, #0]
 8015160:	4618      	mov	r0, r3
 8015162:	370c      	adds	r7, #12
 8015164:	46bd      	mov	sp, r7
 8015166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516a:	4770      	bx	lr

0801516c <lock_fs>:
 801516c:	b580      	push	{r7, lr}
 801516e:	b082      	sub	sp, #8
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d009      	beq.n	801518e <lock_fs+0x22>
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	691b      	ldr	r3, [r3, #16]
 801517e:	4618      	mov	r0, r3
 8015180:	f002 ff43 	bl	801800a <ff_req_grant>
 8015184:	4603      	mov	r3, r0
 8015186:	2b00      	cmp	r3, #0
 8015188:	d001      	beq.n	801518e <lock_fs+0x22>
 801518a:	2301      	movs	r3, #1
 801518c:	e000      	b.n	8015190 <lock_fs+0x24>
 801518e:	2300      	movs	r3, #0
 8015190:	4618      	mov	r0, r3
 8015192:	3708      	adds	r7, #8
 8015194:	46bd      	mov	sp, r7
 8015196:	bd80      	pop	{r7, pc}

08015198 <unlock_fs>:
 8015198:	b580      	push	{r7, lr}
 801519a:	b082      	sub	sp, #8
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
 80151a0:	460b      	mov	r3, r1
 80151a2:	70fb      	strb	r3, [r7, #3]
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d00d      	beq.n	80151c6 <unlock_fs+0x2e>
 80151aa:	78fb      	ldrb	r3, [r7, #3]
 80151ac:	2b0c      	cmp	r3, #12
 80151ae:	d00a      	beq.n	80151c6 <unlock_fs+0x2e>
 80151b0:	78fb      	ldrb	r3, [r7, #3]
 80151b2:	2b0b      	cmp	r3, #11
 80151b4:	d007      	beq.n	80151c6 <unlock_fs+0x2e>
 80151b6:	78fb      	ldrb	r3, [r7, #3]
 80151b8:	2b0f      	cmp	r3, #15
 80151ba:	d004      	beq.n	80151c6 <unlock_fs+0x2e>
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	691b      	ldr	r3, [r3, #16]
 80151c0:	4618      	mov	r0, r3
 80151c2:	f002 ff37 	bl	8018034 <ff_rel_grant>
 80151c6:	bf00      	nop
 80151c8:	3708      	adds	r7, #8
 80151ca:	46bd      	mov	sp, r7
 80151cc:	bd80      	pop	{r7, pc}
	...

080151d0 <chk_lock>:
 80151d0:	b480      	push	{r7}
 80151d2:	b085      	sub	sp, #20
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	6039      	str	r1, [r7, #0]
 80151da:	2300      	movs	r3, #0
 80151dc:	60bb      	str	r3, [r7, #8]
 80151de:	68bb      	ldr	r3, [r7, #8]
 80151e0:	60fb      	str	r3, [r7, #12]
 80151e2:	e029      	b.n	8015238 <chk_lock+0x68>
 80151e4:	4a27      	ldr	r2, [pc, #156]	; (8015284 <chk_lock+0xb4>)
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	011b      	lsls	r3, r3, #4
 80151ea:	4413      	add	r3, r2
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d01d      	beq.n	801522e <chk_lock+0x5e>
 80151f2:	4a24      	ldr	r2, [pc, #144]	; (8015284 <chk_lock+0xb4>)
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	011b      	lsls	r3, r3, #4
 80151f8:	4413      	add	r3, r2
 80151fa:	681a      	ldr	r2, [r3, #0]
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	429a      	cmp	r2, r3
 8015202:	d116      	bne.n	8015232 <chk_lock+0x62>
 8015204:	4a1f      	ldr	r2, [pc, #124]	; (8015284 <chk_lock+0xb4>)
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	011b      	lsls	r3, r3, #4
 801520a:	4413      	add	r3, r2
 801520c:	3304      	adds	r3, #4
 801520e:	681a      	ldr	r2, [r3, #0]
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	689b      	ldr	r3, [r3, #8]
 8015214:	429a      	cmp	r2, r3
 8015216:	d10c      	bne.n	8015232 <chk_lock+0x62>
 8015218:	4a1a      	ldr	r2, [pc, #104]	; (8015284 <chk_lock+0xb4>)
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	011b      	lsls	r3, r3, #4
 801521e:	4413      	add	r3, r2
 8015220:	3308      	adds	r3, #8
 8015222:	681a      	ldr	r2, [r3, #0]
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	695b      	ldr	r3, [r3, #20]
 8015228:	429a      	cmp	r2, r3
 801522a:	d102      	bne.n	8015232 <chk_lock+0x62>
 801522c:	e007      	b.n	801523e <chk_lock+0x6e>
 801522e:	2301      	movs	r3, #1
 8015230:	60bb      	str	r3, [r7, #8]
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	3301      	adds	r3, #1
 8015236:	60fb      	str	r3, [r7, #12]
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	2b09      	cmp	r3, #9
 801523c:	d9d2      	bls.n	80151e4 <chk_lock+0x14>
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	2b0a      	cmp	r3, #10
 8015242:	d109      	bne.n	8015258 <chk_lock+0x88>
 8015244:	68bb      	ldr	r3, [r7, #8]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d102      	bne.n	8015250 <chk_lock+0x80>
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	2b02      	cmp	r3, #2
 801524e:	d101      	bne.n	8015254 <chk_lock+0x84>
 8015250:	2300      	movs	r3, #0
 8015252:	e010      	b.n	8015276 <chk_lock+0xa6>
 8015254:	2312      	movs	r3, #18
 8015256:	e00e      	b.n	8015276 <chk_lock+0xa6>
 8015258:	683b      	ldr	r3, [r7, #0]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d108      	bne.n	8015270 <chk_lock+0xa0>
 801525e:	4a09      	ldr	r2, [pc, #36]	; (8015284 <chk_lock+0xb4>)
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	011b      	lsls	r3, r3, #4
 8015264:	4413      	add	r3, r2
 8015266:	330c      	adds	r3, #12
 8015268:	881b      	ldrh	r3, [r3, #0]
 801526a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801526e:	d101      	bne.n	8015274 <chk_lock+0xa4>
 8015270:	2310      	movs	r3, #16
 8015272:	e000      	b.n	8015276 <chk_lock+0xa6>
 8015274:	2300      	movs	r3, #0
 8015276:	4618      	mov	r0, r3
 8015278:	3714      	adds	r7, #20
 801527a:	46bd      	mov	sp, r7
 801527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015280:	4770      	bx	lr
 8015282:	bf00      	nop
 8015284:	2000453c 	.word	0x2000453c

08015288 <enq_lock>:
 8015288:	b480      	push	{r7}
 801528a:	b083      	sub	sp, #12
 801528c:	af00      	add	r7, sp, #0
 801528e:	2300      	movs	r3, #0
 8015290:	607b      	str	r3, [r7, #4]
 8015292:	e002      	b.n	801529a <enq_lock+0x12>
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	3301      	adds	r3, #1
 8015298:	607b      	str	r3, [r7, #4]
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	2b09      	cmp	r3, #9
 801529e:	d806      	bhi.n	80152ae <enq_lock+0x26>
 80152a0:	4a09      	ldr	r2, [pc, #36]	; (80152c8 <enq_lock+0x40>)
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	011b      	lsls	r3, r3, #4
 80152a6:	4413      	add	r3, r2
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d1f2      	bne.n	8015294 <enq_lock+0xc>
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	2b0a      	cmp	r3, #10
 80152b2:	bf14      	ite	ne
 80152b4:	2301      	movne	r3, #1
 80152b6:	2300      	moveq	r3, #0
 80152b8:	b2db      	uxtb	r3, r3
 80152ba:	4618      	mov	r0, r3
 80152bc:	370c      	adds	r7, #12
 80152be:	46bd      	mov	sp, r7
 80152c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c4:	4770      	bx	lr
 80152c6:	bf00      	nop
 80152c8:	2000453c 	.word	0x2000453c

080152cc <inc_lock>:
 80152cc:	b480      	push	{r7}
 80152ce:	b085      	sub	sp, #20
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	6039      	str	r1, [r7, #0]
 80152d6:	2300      	movs	r3, #0
 80152d8:	60fb      	str	r3, [r7, #12]
 80152da:	e01f      	b.n	801531c <inc_lock+0x50>
 80152dc:	4a41      	ldr	r2, [pc, #260]	; (80153e4 <inc_lock+0x118>)
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	011b      	lsls	r3, r3, #4
 80152e2:	4413      	add	r3, r2
 80152e4:	681a      	ldr	r2, [r3, #0]
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d113      	bne.n	8015316 <inc_lock+0x4a>
 80152ee:	4a3d      	ldr	r2, [pc, #244]	; (80153e4 <inc_lock+0x118>)
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	011b      	lsls	r3, r3, #4
 80152f4:	4413      	add	r3, r2
 80152f6:	3304      	adds	r3, #4
 80152f8:	681a      	ldr	r2, [r3, #0]
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	689b      	ldr	r3, [r3, #8]
 80152fe:	429a      	cmp	r2, r3
 8015300:	d109      	bne.n	8015316 <inc_lock+0x4a>
 8015302:	4a38      	ldr	r2, [pc, #224]	; (80153e4 <inc_lock+0x118>)
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	011b      	lsls	r3, r3, #4
 8015308:	4413      	add	r3, r2
 801530a:	3308      	adds	r3, #8
 801530c:	681a      	ldr	r2, [r3, #0]
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	695b      	ldr	r3, [r3, #20]
 8015312:	429a      	cmp	r2, r3
 8015314:	d006      	beq.n	8015324 <inc_lock+0x58>
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	3301      	adds	r3, #1
 801531a:	60fb      	str	r3, [r7, #12]
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	2b09      	cmp	r3, #9
 8015320:	d9dc      	bls.n	80152dc <inc_lock+0x10>
 8015322:	e000      	b.n	8015326 <inc_lock+0x5a>
 8015324:	bf00      	nop
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	2b0a      	cmp	r3, #10
 801532a:	d132      	bne.n	8015392 <inc_lock+0xc6>
 801532c:	2300      	movs	r3, #0
 801532e:	60fb      	str	r3, [r7, #12]
 8015330:	e002      	b.n	8015338 <inc_lock+0x6c>
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	3301      	adds	r3, #1
 8015336:	60fb      	str	r3, [r7, #12]
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	2b09      	cmp	r3, #9
 801533c:	d806      	bhi.n	801534c <inc_lock+0x80>
 801533e:	4a29      	ldr	r2, [pc, #164]	; (80153e4 <inc_lock+0x118>)
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	011b      	lsls	r3, r3, #4
 8015344:	4413      	add	r3, r2
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d1f2      	bne.n	8015332 <inc_lock+0x66>
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	2b0a      	cmp	r3, #10
 8015350:	d101      	bne.n	8015356 <inc_lock+0x8a>
 8015352:	2300      	movs	r3, #0
 8015354:	e040      	b.n	80153d8 <inc_lock+0x10c>
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	681a      	ldr	r2, [r3, #0]
 801535a:	4922      	ldr	r1, [pc, #136]	; (80153e4 <inc_lock+0x118>)
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	011b      	lsls	r3, r3, #4
 8015360:	440b      	add	r3, r1
 8015362:	601a      	str	r2, [r3, #0]
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	689a      	ldr	r2, [r3, #8]
 8015368:	491e      	ldr	r1, [pc, #120]	; (80153e4 <inc_lock+0x118>)
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	011b      	lsls	r3, r3, #4
 801536e:	440b      	add	r3, r1
 8015370:	3304      	adds	r3, #4
 8015372:	601a      	str	r2, [r3, #0]
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	695a      	ldr	r2, [r3, #20]
 8015378:	491a      	ldr	r1, [pc, #104]	; (80153e4 <inc_lock+0x118>)
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	011b      	lsls	r3, r3, #4
 801537e:	440b      	add	r3, r1
 8015380:	3308      	adds	r3, #8
 8015382:	601a      	str	r2, [r3, #0]
 8015384:	4a17      	ldr	r2, [pc, #92]	; (80153e4 <inc_lock+0x118>)
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	011b      	lsls	r3, r3, #4
 801538a:	4413      	add	r3, r2
 801538c:	330c      	adds	r3, #12
 801538e:	2200      	movs	r2, #0
 8015390:	801a      	strh	r2, [r3, #0]
 8015392:	683b      	ldr	r3, [r7, #0]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d009      	beq.n	80153ac <inc_lock+0xe0>
 8015398:	4a12      	ldr	r2, [pc, #72]	; (80153e4 <inc_lock+0x118>)
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	011b      	lsls	r3, r3, #4
 801539e:	4413      	add	r3, r2
 80153a0:	330c      	adds	r3, #12
 80153a2:	881b      	ldrh	r3, [r3, #0]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d001      	beq.n	80153ac <inc_lock+0xe0>
 80153a8:	2300      	movs	r3, #0
 80153aa:	e015      	b.n	80153d8 <inc_lock+0x10c>
 80153ac:	683b      	ldr	r3, [r7, #0]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d108      	bne.n	80153c4 <inc_lock+0xf8>
 80153b2:	4a0c      	ldr	r2, [pc, #48]	; (80153e4 <inc_lock+0x118>)
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	011b      	lsls	r3, r3, #4
 80153b8:	4413      	add	r3, r2
 80153ba:	330c      	adds	r3, #12
 80153bc:	881b      	ldrh	r3, [r3, #0]
 80153be:	3301      	adds	r3, #1
 80153c0:	b29a      	uxth	r2, r3
 80153c2:	e001      	b.n	80153c8 <inc_lock+0xfc>
 80153c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80153c8:	4906      	ldr	r1, [pc, #24]	; (80153e4 <inc_lock+0x118>)
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	011b      	lsls	r3, r3, #4
 80153ce:	440b      	add	r3, r1
 80153d0:	330c      	adds	r3, #12
 80153d2:	801a      	strh	r2, [r3, #0]
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	3301      	adds	r3, #1
 80153d8:	4618      	mov	r0, r3
 80153da:	3714      	adds	r7, #20
 80153dc:	46bd      	mov	sp, r7
 80153de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e2:	4770      	bx	lr
 80153e4:	2000453c 	.word	0x2000453c

080153e8 <dec_lock>:
 80153e8:	b480      	push	{r7}
 80153ea:	b085      	sub	sp, #20
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	3b01      	subs	r3, #1
 80153f4:	607b      	str	r3, [r7, #4]
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	2b09      	cmp	r3, #9
 80153fa:	d825      	bhi.n	8015448 <dec_lock+0x60>
 80153fc:	4a17      	ldr	r2, [pc, #92]	; (801545c <dec_lock+0x74>)
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	011b      	lsls	r3, r3, #4
 8015402:	4413      	add	r3, r2
 8015404:	330c      	adds	r3, #12
 8015406:	881b      	ldrh	r3, [r3, #0]
 8015408:	81fb      	strh	r3, [r7, #14]
 801540a:	89fb      	ldrh	r3, [r7, #14]
 801540c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015410:	d101      	bne.n	8015416 <dec_lock+0x2e>
 8015412:	2300      	movs	r3, #0
 8015414:	81fb      	strh	r3, [r7, #14]
 8015416:	89fb      	ldrh	r3, [r7, #14]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d002      	beq.n	8015422 <dec_lock+0x3a>
 801541c:	89fb      	ldrh	r3, [r7, #14]
 801541e:	3b01      	subs	r3, #1
 8015420:	81fb      	strh	r3, [r7, #14]
 8015422:	4a0e      	ldr	r2, [pc, #56]	; (801545c <dec_lock+0x74>)
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	011b      	lsls	r3, r3, #4
 8015428:	4413      	add	r3, r2
 801542a:	330c      	adds	r3, #12
 801542c:	89fa      	ldrh	r2, [r7, #14]
 801542e:	801a      	strh	r2, [r3, #0]
 8015430:	89fb      	ldrh	r3, [r7, #14]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d105      	bne.n	8015442 <dec_lock+0x5a>
 8015436:	4a09      	ldr	r2, [pc, #36]	; (801545c <dec_lock+0x74>)
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	011b      	lsls	r3, r3, #4
 801543c:	4413      	add	r3, r2
 801543e:	2200      	movs	r2, #0
 8015440:	601a      	str	r2, [r3, #0]
 8015442:	2300      	movs	r3, #0
 8015444:	737b      	strb	r3, [r7, #13]
 8015446:	e001      	b.n	801544c <dec_lock+0x64>
 8015448:	2302      	movs	r3, #2
 801544a:	737b      	strb	r3, [r7, #13]
 801544c:	7b7b      	ldrb	r3, [r7, #13]
 801544e:	4618      	mov	r0, r3
 8015450:	3714      	adds	r7, #20
 8015452:	46bd      	mov	sp, r7
 8015454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015458:	4770      	bx	lr
 801545a:	bf00      	nop
 801545c:	2000453c 	.word	0x2000453c

08015460 <clear_lock>:
 8015460:	b480      	push	{r7}
 8015462:	b085      	sub	sp, #20
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
 8015468:	2300      	movs	r3, #0
 801546a:	60fb      	str	r3, [r7, #12]
 801546c:	e010      	b.n	8015490 <clear_lock+0x30>
 801546e:	4a0d      	ldr	r2, [pc, #52]	; (80154a4 <clear_lock+0x44>)
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	011b      	lsls	r3, r3, #4
 8015474:	4413      	add	r3, r2
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	687a      	ldr	r2, [r7, #4]
 801547a:	429a      	cmp	r2, r3
 801547c:	d105      	bne.n	801548a <clear_lock+0x2a>
 801547e:	4a09      	ldr	r2, [pc, #36]	; (80154a4 <clear_lock+0x44>)
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	011b      	lsls	r3, r3, #4
 8015484:	4413      	add	r3, r2
 8015486:	2200      	movs	r2, #0
 8015488:	601a      	str	r2, [r3, #0]
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	3301      	adds	r3, #1
 801548e:	60fb      	str	r3, [r7, #12]
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	2b09      	cmp	r3, #9
 8015494:	d9eb      	bls.n	801546e <clear_lock+0xe>
 8015496:	bf00      	nop
 8015498:	bf00      	nop
 801549a:	3714      	adds	r7, #20
 801549c:	46bd      	mov	sp, r7
 801549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a2:	4770      	bx	lr
 80154a4:	2000453c 	.word	0x2000453c

080154a8 <sync_window>:
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b086      	sub	sp, #24
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
 80154b0:	2300      	movs	r3, #0
 80154b2:	73fb      	strb	r3, [r7, #15]
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	78db      	ldrb	r3, [r3, #3]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d034      	beq.n	8015526 <sync_window+0x7e>
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154c0:	617b      	str	r3, [r7, #20]
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	7858      	ldrb	r0, [r3, #1]
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80154cc:	2301      	movs	r3, #1
 80154ce:	697a      	ldr	r2, [r7, #20]
 80154d0:	f7ff fd0e 	bl	8014ef0 <disk_write>
 80154d4:	4603      	mov	r3, r0
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d002      	beq.n	80154e0 <sync_window+0x38>
 80154da:	2301      	movs	r3, #1
 80154dc:	73fb      	strb	r3, [r7, #15]
 80154de:	e022      	b.n	8015526 <sync_window+0x7e>
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2200      	movs	r2, #0
 80154e4:	70da      	strb	r2, [r3, #3]
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154ea:	697a      	ldr	r2, [r7, #20]
 80154ec:	1ad2      	subs	r2, r2, r3
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	6a1b      	ldr	r3, [r3, #32]
 80154f2:	429a      	cmp	r2, r3
 80154f4:	d217      	bcs.n	8015526 <sync_window+0x7e>
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	789b      	ldrb	r3, [r3, #2]
 80154fa:	613b      	str	r3, [r7, #16]
 80154fc:	e010      	b.n	8015520 <sync_window+0x78>
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	6a1b      	ldr	r3, [r3, #32]
 8015502:	697a      	ldr	r2, [r7, #20]
 8015504:	4413      	add	r3, r2
 8015506:	617b      	str	r3, [r7, #20]
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	7858      	ldrb	r0, [r3, #1]
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015512:	2301      	movs	r3, #1
 8015514:	697a      	ldr	r2, [r7, #20]
 8015516:	f7ff fceb 	bl	8014ef0 <disk_write>
 801551a:	693b      	ldr	r3, [r7, #16]
 801551c:	3b01      	subs	r3, #1
 801551e:	613b      	str	r3, [r7, #16]
 8015520:	693b      	ldr	r3, [r7, #16]
 8015522:	2b01      	cmp	r3, #1
 8015524:	d8eb      	bhi.n	80154fe <sync_window+0x56>
 8015526:	7bfb      	ldrb	r3, [r7, #15]
 8015528:	4618      	mov	r0, r3
 801552a:	3718      	adds	r7, #24
 801552c:	46bd      	mov	sp, r7
 801552e:	bd80      	pop	{r7, pc}

08015530 <move_window>:
 8015530:	b580      	push	{r7, lr}
 8015532:	b084      	sub	sp, #16
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
 8015538:	6039      	str	r1, [r7, #0]
 801553a:	2300      	movs	r3, #0
 801553c:	73fb      	strb	r3, [r7, #15]
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015542:	683a      	ldr	r2, [r7, #0]
 8015544:	429a      	cmp	r2, r3
 8015546:	d01b      	beq.n	8015580 <move_window+0x50>
 8015548:	6878      	ldr	r0, [r7, #4]
 801554a:	f7ff ffad 	bl	80154a8 <sync_window>
 801554e:	4603      	mov	r3, r0
 8015550:	73fb      	strb	r3, [r7, #15]
 8015552:	7bfb      	ldrb	r3, [r7, #15]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d113      	bne.n	8015580 <move_window+0x50>
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	7858      	ldrb	r0, [r3, #1]
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015562:	2301      	movs	r3, #1
 8015564:	683a      	ldr	r2, [r7, #0]
 8015566:	f7ff fca3 	bl	8014eb0 <disk_read>
 801556a:	4603      	mov	r3, r0
 801556c:	2b00      	cmp	r3, #0
 801556e:	d004      	beq.n	801557a <move_window+0x4a>
 8015570:	f04f 33ff 	mov.w	r3, #4294967295
 8015574:	603b      	str	r3, [r7, #0]
 8015576:	2301      	movs	r3, #1
 8015578:	73fb      	strb	r3, [r7, #15]
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	683a      	ldr	r2, [r7, #0]
 801557e:	635a      	str	r2, [r3, #52]	; 0x34
 8015580:	7bfb      	ldrb	r3, [r7, #15]
 8015582:	4618      	mov	r0, r3
 8015584:	3710      	adds	r7, #16
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}
	...

0801558c <sync_fs>:
 801558c:	b580      	push	{r7, lr}
 801558e:	b084      	sub	sp, #16
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
 8015594:	6878      	ldr	r0, [r7, #4]
 8015596:	f7ff ff87 	bl	80154a8 <sync_window>
 801559a:	4603      	mov	r3, r0
 801559c:	73fb      	strb	r3, [r7, #15]
 801559e:	7bfb      	ldrb	r3, [r7, #15]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d159      	bne.n	8015658 <sync_fs+0xcc>
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	781b      	ldrb	r3, [r3, #0]
 80155a8:	2b03      	cmp	r3, #3
 80155aa:	d149      	bne.n	8015640 <sync_fs+0xb4>
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	791b      	ldrb	r3, [r3, #4]
 80155b0:	2b01      	cmp	r3, #1
 80155b2:	d145      	bne.n	8015640 <sync_fs+0xb4>
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	899b      	ldrh	r3, [r3, #12]
 80155be:	461a      	mov	r2, r3
 80155c0:	2100      	movs	r1, #0
 80155c2:	f7ff fd76 	bl	80150b2 <mem_set>
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	3338      	adds	r3, #56	; 0x38
 80155ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80155ce:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80155d2:	4618      	mov	r0, r3
 80155d4:	f7ff fd05 	bl	8014fe2 <st_word>
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	3338      	adds	r3, #56	; 0x38
 80155dc:	4921      	ldr	r1, [pc, #132]	; (8015664 <sync_fs+0xd8>)
 80155de:	4618      	mov	r0, r3
 80155e0:	f7ff fd1a 	bl	8015018 <st_dword>
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	3338      	adds	r3, #56	; 0x38
 80155e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80155ec:	491e      	ldr	r1, [pc, #120]	; (8015668 <sync_fs+0xdc>)
 80155ee:	4618      	mov	r0, r3
 80155f0:	f7ff fd12 	bl	8015018 <st_dword>
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	3338      	adds	r3, #56	; 0x38
 80155f8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	699b      	ldr	r3, [r3, #24]
 8015600:	4619      	mov	r1, r3
 8015602:	4610      	mov	r0, r2
 8015604:	f7ff fd08 	bl	8015018 <st_dword>
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	3338      	adds	r3, #56	; 0x38
 801560c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	695b      	ldr	r3, [r3, #20]
 8015614:	4619      	mov	r1, r3
 8015616:	4610      	mov	r0, r2
 8015618:	f7ff fcfe 	bl	8015018 <st_dword>
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015620:	1c5a      	adds	r2, r3, #1
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	635a      	str	r2, [r3, #52]	; 0x34
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	7858      	ldrb	r0, [r3, #1]
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015634:	2301      	movs	r3, #1
 8015636:	f7ff fc5b 	bl	8014ef0 <disk_write>
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	2200      	movs	r2, #0
 801563e:	711a      	strb	r2, [r3, #4]
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	785b      	ldrb	r3, [r3, #1]
 8015644:	2200      	movs	r2, #0
 8015646:	2100      	movs	r1, #0
 8015648:	4618      	mov	r0, r3
 801564a:	f7ff fc71 	bl	8014f30 <disk_ioctl>
 801564e:	4603      	mov	r3, r0
 8015650:	2b00      	cmp	r3, #0
 8015652:	d001      	beq.n	8015658 <sync_fs+0xcc>
 8015654:	2301      	movs	r3, #1
 8015656:	73fb      	strb	r3, [r7, #15]
 8015658:	7bfb      	ldrb	r3, [r7, #15]
 801565a:	4618      	mov	r0, r3
 801565c:	3710      	adds	r7, #16
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}
 8015662:	bf00      	nop
 8015664:	41615252 	.word	0x41615252
 8015668:	61417272 	.word	0x61417272

0801566c <clust2sect>:
 801566c:	b480      	push	{r7}
 801566e:	b083      	sub	sp, #12
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
 8015674:	6039      	str	r1, [r7, #0]
 8015676:	683b      	ldr	r3, [r7, #0]
 8015678:	3b02      	subs	r3, #2
 801567a:	603b      	str	r3, [r7, #0]
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	69db      	ldr	r3, [r3, #28]
 8015680:	3b02      	subs	r3, #2
 8015682:	683a      	ldr	r2, [r7, #0]
 8015684:	429a      	cmp	r2, r3
 8015686:	d301      	bcc.n	801568c <clust2sect+0x20>
 8015688:	2300      	movs	r3, #0
 801568a:	e008      	b.n	801569e <clust2sect+0x32>
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	895b      	ldrh	r3, [r3, #10]
 8015690:	461a      	mov	r2, r3
 8015692:	683b      	ldr	r3, [r7, #0]
 8015694:	fb03 f202 	mul.w	r2, r3, r2
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801569c:	4413      	add	r3, r2
 801569e:	4618      	mov	r0, r3
 80156a0:	370c      	adds	r7, #12
 80156a2:	46bd      	mov	sp, r7
 80156a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a8:	4770      	bx	lr

080156aa <get_fat>:
 80156aa:	b580      	push	{r7, lr}
 80156ac:	b086      	sub	sp, #24
 80156ae:	af00      	add	r7, sp, #0
 80156b0:	6078      	str	r0, [r7, #4]
 80156b2:	6039      	str	r1, [r7, #0]
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	613b      	str	r3, [r7, #16]
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	2b01      	cmp	r3, #1
 80156be:	d904      	bls.n	80156ca <get_fat+0x20>
 80156c0:	693b      	ldr	r3, [r7, #16]
 80156c2:	69db      	ldr	r3, [r3, #28]
 80156c4:	683a      	ldr	r2, [r7, #0]
 80156c6:	429a      	cmp	r2, r3
 80156c8:	d302      	bcc.n	80156d0 <get_fat+0x26>
 80156ca:	2301      	movs	r3, #1
 80156cc:	617b      	str	r3, [r7, #20]
 80156ce:	e0bb      	b.n	8015848 <get_fat+0x19e>
 80156d0:	f04f 33ff 	mov.w	r3, #4294967295
 80156d4:	617b      	str	r3, [r7, #20]
 80156d6:	693b      	ldr	r3, [r7, #16]
 80156d8:	781b      	ldrb	r3, [r3, #0]
 80156da:	2b03      	cmp	r3, #3
 80156dc:	f000 8083 	beq.w	80157e6 <get_fat+0x13c>
 80156e0:	2b03      	cmp	r3, #3
 80156e2:	f300 80a7 	bgt.w	8015834 <get_fat+0x18a>
 80156e6:	2b01      	cmp	r3, #1
 80156e8:	d002      	beq.n	80156f0 <get_fat+0x46>
 80156ea:	2b02      	cmp	r3, #2
 80156ec:	d056      	beq.n	801579c <get_fat+0xf2>
 80156ee:	e0a1      	b.n	8015834 <get_fat+0x18a>
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	60fb      	str	r3, [r7, #12]
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	085b      	lsrs	r3, r3, #1
 80156f8:	68fa      	ldr	r2, [r7, #12]
 80156fa:	4413      	add	r3, r2
 80156fc:	60fb      	str	r3, [r7, #12]
 80156fe:	693b      	ldr	r3, [r7, #16]
 8015700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015702:	693b      	ldr	r3, [r7, #16]
 8015704:	899b      	ldrh	r3, [r3, #12]
 8015706:	4619      	mov	r1, r3
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	fbb3 f3f1 	udiv	r3, r3, r1
 801570e:	4413      	add	r3, r2
 8015710:	4619      	mov	r1, r3
 8015712:	6938      	ldr	r0, [r7, #16]
 8015714:	f7ff ff0c 	bl	8015530 <move_window>
 8015718:	4603      	mov	r3, r0
 801571a:	2b00      	cmp	r3, #0
 801571c:	f040 808d 	bne.w	801583a <get_fat+0x190>
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	1c5a      	adds	r2, r3, #1
 8015724:	60fa      	str	r2, [r7, #12]
 8015726:	693a      	ldr	r2, [r7, #16]
 8015728:	8992      	ldrh	r2, [r2, #12]
 801572a:	fbb3 f1f2 	udiv	r1, r3, r2
 801572e:	fb01 f202 	mul.w	r2, r1, r2
 8015732:	1a9b      	subs	r3, r3, r2
 8015734:	693a      	ldr	r2, [r7, #16]
 8015736:	4413      	add	r3, r2
 8015738:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801573c:	60bb      	str	r3, [r7, #8]
 801573e:	693b      	ldr	r3, [r7, #16]
 8015740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015742:	693b      	ldr	r3, [r7, #16]
 8015744:	899b      	ldrh	r3, [r3, #12]
 8015746:	4619      	mov	r1, r3
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	fbb3 f3f1 	udiv	r3, r3, r1
 801574e:	4413      	add	r3, r2
 8015750:	4619      	mov	r1, r3
 8015752:	6938      	ldr	r0, [r7, #16]
 8015754:	f7ff feec 	bl	8015530 <move_window>
 8015758:	4603      	mov	r3, r0
 801575a:	2b00      	cmp	r3, #0
 801575c:	d16f      	bne.n	801583e <get_fat+0x194>
 801575e:	693b      	ldr	r3, [r7, #16]
 8015760:	899b      	ldrh	r3, [r3, #12]
 8015762:	461a      	mov	r2, r3
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	fbb3 f1f2 	udiv	r1, r3, r2
 801576a:	fb01 f202 	mul.w	r2, r1, r2
 801576e:	1a9b      	subs	r3, r3, r2
 8015770:	693a      	ldr	r2, [r7, #16]
 8015772:	4413      	add	r3, r2
 8015774:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015778:	021b      	lsls	r3, r3, #8
 801577a:	461a      	mov	r2, r3
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	4313      	orrs	r3, r2
 8015780:	60bb      	str	r3, [r7, #8]
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	f003 0301 	and.w	r3, r3, #1
 8015788:	2b00      	cmp	r3, #0
 801578a:	d002      	beq.n	8015792 <get_fat+0xe8>
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	091b      	lsrs	r3, r3, #4
 8015790:	e002      	b.n	8015798 <get_fat+0xee>
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015798:	617b      	str	r3, [r7, #20]
 801579a:	e055      	b.n	8015848 <get_fat+0x19e>
 801579c:	693b      	ldr	r3, [r7, #16]
 801579e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80157a0:	693b      	ldr	r3, [r7, #16]
 80157a2:	899b      	ldrh	r3, [r3, #12]
 80157a4:	085b      	lsrs	r3, r3, #1
 80157a6:	b29b      	uxth	r3, r3
 80157a8:	4619      	mov	r1, r3
 80157aa:	683b      	ldr	r3, [r7, #0]
 80157ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80157b0:	4413      	add	r3, r2
 80157b2:	4619      	mov	r1, r3
 80157b4:	6938      	ldr	r0, [r7, #16]
 80157b6:	f7ff febb 	bl	8015530 <move_window>
 80157ba:	4603      	mov	r3, r0
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d140      	bne.n	8015842 <get_fat+0x198>
 80157c0:	693b      	ldr	r3, [r7, #16]
 80157c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80157c6:	683b      	ldr	r3, [r7, #0]
 80157c8:	005b      	lsls	r3, r3, #1
 80157ca:	693a      	ldr	r2, [r7, #16]
 80157cc:	8992      	ldrh	r2, [r2, #12]
 80157ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80157d2:	fb00 f202 	mul.w	r2, r0, r2
 80157d6:	1a9b      	subs	r3, r3, r2
 80157d8:	440b      	add	r3, r1
 80157da:	4618      	mov	r0, r3
 80157dc:	f7ff fbc6 	bl	8014f6c <ld_word>
 80157e0:	4603      	mov	r3, r0
 80157e2:	617b      	str	r3, [r7, #20]
 80157e4:	e030      	b.n	8015848 <get_fat+0x19e>
 80157e6:	693b      	ldr	r3, [r7, #16]
 80157e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80157ea:	693b      	ldr	r3, [r7, #16]
 80157ec:	899b      	ldrh	r3, [r3, #12]
 80157ee:	089b      	lsrs	r3, r3, #2
 80157f0:	b29b      	uxth	r3, r3
 80157f2:	4619      	mov	r1, r3
 80157f4:	683b      	ldr	r3, [r7, #0]
 80157f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80157fa:	4413      	add	r3, r2
 80157fc:	4619      	mov	r1, r3
 80157fe:	6938      	ldr	r0, [r7, #16]
 8015800:	f7ff fe96 	bl	8015530 <move_window>
 8015804:	4603      	mov	r3, r0
 8015806:	2b00      	cmp	r3, #0
 8015808:	d11d      	bne.n	8015846 <get_fat+0x19c>
 801580a:	693b      	ldr	r3, [r7, #16]
 801580c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015810:	683b      	ldr	r3, [r7, #0]
 8015812:	009b      	lsls	r3, r3, #2
 8015814:	693a      	ldr	r2, [r7, #16]
 8015816:	8992      	ldrh	r2, [r2, #12]
 8015818:	fbb3 f0f2 	udiv	r0, r3, r2
 801581c:	fb00 f202 	mul.w	r2, r0, r2
 8015820:	1a9b      	subs	r3, r3, r2
 8015822:	440b      	add	r3, r1
 8015824:	4618      	mov	r0, r3
 8015826:	f7ff fbb9 	bl	8014f9c <ld_dword>
 801582a:	4603      	mov	r3, r0
 801582c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015830:	617b      	str	r3, [r7, #20]
 8015832:	e009      	b.n	8015848 <get_fat+0x19e>
 8015834:	2301      	movs	r3, #1
 8015836:	617b      	str	r3, [r7, #20]
 8015838:	e006      	b.n	8015848 <get_fat+0x19e>
 801583a:	bf00      	nop
 801583c:	e004      	b.n	8015848 <get_fat+0x19e>
 801583e:	bf00      	nop
 8015840:	e002      	b.n	8015848 <get_fat+0x19e>
 8015842:	bf00      	nop
 8015844:	e000      	b.n	8015848 <get_fat+0x19e>
 8015846:	bf00      	nop
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	4618      	mov	r0, r3
 801584c:	3718      	adds	r7, #24
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}

08015852 <put_fat>:
 8015852:	b590      	push	{r4, r7, lr}
 8015854:	b089      	sub	sp, #36	; 0x24
 8015856:	af00      	add	r7, sp, #0
 8015858:	60f8      	str	r0, [r7, #12]
 801585a:	60b9      	str	r1, [r7, #8]
 801585c:	607a      	str	r2, [r7, #4]
 801585e:	2302      	movs	r3, #2
 8015860:	77fb      	strb	r3, [r7, #31]
 8015862:	68bb      	ldr	r3, [r7, #8]
 8015864:	2b01      	cmp	r3, #1
 8015866:	f240 8109 	bls.w	8015a7c <put_fat+0x22a>
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	69db      	ldr	r3, [r3, #28]
 801586e:	68ba      	ldr	r2, [r7, #8]
 8015870:	429a      	cmp	r2, r3
 8015872:	f080 8103 	bcs.w	8015a7c <put_fat+0x22a>
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	781b      	ldrb	r3, [r3, #0]
 801587a:	2b03      	cmp	r3, #3
 801587c:	f000 80b6 	beq.w	80159ec <put_fat+0x19a>
 8015880:	2b03      	cmp	r3, #3
 8015882:	f300 80fb 	bgt.w	8015a7c <put_fat+0x22a>
 8015886:	2b01      	cmp	r3, #1
 8015888:	d003      	beq.n	8015892 <put_fat+0x40>
 801588a:	2b02      	cmp	r3, #2
 801588c:	f000 8083 	beq.w	8015996 <put_fat+0x144>
 8015890:	e0f4      	b.n	8015a7c <put_fat+0x22a>
 8015892:	68bb      	ldr	r3, [r7, #8]
 8015894:	61bb      	str	r3, [r7, #24]
 8015896:	69bb      	ldr	r3, [r7, #24]
 8015898:	085b      	lsrs	r3, r3, #1
 801589a:	69ba      	ldr	r2, [r7, #24]
 801589c:	4413      	add	r3, r2
 801589e:	61bb      	str	r3, [r7, #24]
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	899b      	ldrh	r3, [r3, #12]
 80158a8:	4619      	mov	r1, r3
 80158aa:	69bb      	ldr	r3, [r7, #24]
 80158ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80158b0:	4413      	add	r3, r2
 80158b2:	4619      	mov	r1, r3
 80158b4:	68f8      	ldr	r0, [r7, #12]
 80158b6:	f7ff fe3b 	bl	8015530 <move_window>
 80158ba:	4603      	mov	r3, r0
 80158bc:	77fb      	strb	r3, [r7, #31]
 80158be:	7ffb      	ldrb	r3, [r7, #31]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	f040 80d4 	bne.w	8015a6e <put_fat+0x21c>
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80158cc:	69bb      	ldr	r3, [r7, #24]
 80158ce:	1c5a      	adds	r2, r3, #1
 80158d0:	61ba      	str	r2, [r7, #24]
 80158d2:	68fa      	ldr	r2, [r7, #12]
 80158d4:	8992      	ldrh	r2, [r2, #12]
 80158d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80158da:	fb00 f202 	mul.w	r2, r0, r2
 80158de:	1a9b      	subs	r3, r3, r2
 80158e0:	440b      	add	r3, r1
 80158e2:	617b      	str	r3, [r7, #20]
 80158e4:	68bb      	ldr	r3, [r7, #8]
 80158e6:	f003 0301 	and.w	r3, r3, #1
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d00d      	beq.n	801590a <put_fat+0xb8>
 80158ee:	697b      	ldr	r3, [r7, #20]
 80158f0:	781b      	ldrb	r3, [r3, #0]
 80158f2:	b25b      	sxtb	r3, r3
 80158f4:	f003 030f 	and.w	r3, r3, #15
 80158f8:	b25a      	sxtb	r2, r3
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	b2db      	uxtb	r3, r3
 80158fe:	011b      	lsls	r3, r3, #4
 8015900:	b25b      	sxtb	r3, r3
 8015902:	4313      	orrs	r3, r2
 8015904:	b25b      	sxtb	r3, r3
 8015906:	b2db      	uxtb	r3, r3
 8015908:	e001      	b.n	801590e <put_fat+0xbc>
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	b2db      	uxtb	r3, r3
 801590e:	697a      	ldr	r2, [r7, #20]
 8015910:	7013      	strb	r3, [r2, #0]
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	2201      	movs	r2, #1
 8015916:	70da      	strb	r2, [r3, #3]
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	899b      	ldrh	r3, [r3, #12]
 8015920:	4619      	mov	r1, r3
 8015922:	69bb      	ldr	r3, [r7, #24]
 8015924:	fbb3 f3f1 	udiv	r3, r3, r1
 8015928:	4413      	add	r3, r2
 801592a:	4619      	mov	r1, r3
 801592c:	68f8      	ldr	r0, [r7, #12]
 801592e:	f7ff fdff 	bl	8015530 <move_window>
 8015932:	4603      	mov	r3, r0
 8015934:	77fb      	strb	r3, [r7, #31]
 8015936:	7ffb      	ldrb	r3, [r7, #31]
 8015938:	2b00      	cmp	r3, #0
 801593a:	f040 809a 	bne.w	8015a72 <put_fat+0x220>
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	899b      	ldrh	r3, [r3, #12]
 8015948:	461a      	mov	r2, r3
 801594a:	69bb      	ldr	r3, [r7, #24]
 801594c:	fbb3 f0f2 	udiv	r0, r3, r2
 8015950:	fb00 f202 	mul.w	r2, r0, r2
 8015954:	1a9b      	subs	r3, r3, r2
 8015956:	440b      	add	r3, r1
 8015958:	617b      	str	r3, [r7, #20]
 801595a:	68bb      	ldr	r3, [r7, #8]
 801595c:	f003 0301 	and.w	r3, r3, #1
 8015960:	2b00      	cmp	r3, #0
 8015962:	d003      	beq.n	801596c <put_fat+0x11a>
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	091b      	lsrs	r3, r3, #4
 8015968:	b2db      	uxtb	r3, r3
 801596a:	e00e      	b.n	801598a <put_fat+0x138>
 801596c:	697b      	ldr	r3, [r7, #20]
 801596e:	781b      	ldrb	r3, [r3, #0]
 8015970:	b25b      	sxtb	r3, r3
 8015972:	f023 030f 	bic.w	r3, r3, #15
 8015976:	b25a      	sxtb	r2, r3
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	0a1b      	lsrs	r3, r3, #8
 801597c:	b25b      	sxtb	r3, r3
 801597e:	f003 030f 	and.w	r3, r3, #15
 8015982:	b25b      	sxtb	r3, r3
 8015984:	4313      	orrs	r3, r2
 8015986:	b25b      	sxtb	r3, r3
 8015988:	b2db      	uxtb	r3, r3
 801598a:	697a      	ldr	r2, [r7, #20]
 801598c:	7013      	strb	r3, [r2, #0]
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	2201      	movs	r2, #1
 8015992:	70da      	strb	r2, [r3, #3]
 8015994:	e072      	b.n	8015a7c <put_fat+0x22a>
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	899b      	ldrh	r3, [r3, #12]
 801599e:	085b      	lsrs	r3, r3, #1
 80159a0:	b29b      	uxth	r3, r3
 80159a2:	4619      	mov	r1, r3
 80159a4:	68bb      	ldr	r3, [r7, #8]
 80159a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80159aa:	4413      	add	r3, r2
 80159ac:	4619      	mov	r1, r3
 80159ae:	68f8      	ldr	r0, [r7, #12]
 80159b0:	f7ff fdbe 	bl	8015530 <move_window>
 80159b4:	4603      	mov	r3, r0
 80159b6:	77fb      	strb	r3, [r7, #31]
 80159b8:	7ffb      	ldrb	r3, [r7, #31]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d15b      	bne.n	8015a76 <put_fat+0x224>
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	005b      	lsls	r3, r3, #1
 80159c8:	68fa      	ldr	r2, [r7, #12]
 80159ca:	8992      	ldrh	r2, [r2, #12]
 80159cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80159d0:	fb00 f202 	mul.w	r2, r0, r2
 80159d4:	1a9b      	subs	r3, r3, r2
 80159d6:	440b      	add	r3, r1
 80159d8:	687a      	ldr	r2, [r7, #4]
 80159da:	b292      	uxth	r2, r2
 80159dc:	4611      	mov	r1, r2
 80159de:	4618      	mov	r0, r3
 80159e0:	f7ff faff 	bl	8014fe2 <st_word>
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	2201      	movs	r2, #1
 80159e8:	70da      	strb	r2, [r3, #3]
 80159ea:	e047      	b.n	8015a7c <put_fat+0x22a>
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	899b      	ldrh	r3, [r3, #12]
 80159f4:	089b      	lsrs	r3, r3, #2
 80159f6:	b29b      	uxth	r3, r3
 80159f8:	4619      	mov	r1, r3
 80159fa:	68bb      	ldr	r3, [r7, #8]
 80159fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8015a00:	4413      	add	r3, r2
 8015a02:	4619      	mov	r1, r3
 8015a04:	68f8      	ldr	r0, [r7, #12]
 8015a06:	f7ff fd93 	bl	8015530 <move_window>
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	77fb      	strb	r3, [r7, #31]
 8015a0e:	7ffb      	ldrb	r3, [r7, #31]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d132      	bne.n	8015a7a <put_fat+0x228>
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	009b      	lsls	r3, r3, #2
 8015a24:	68fa      	ldr	r2, [r7, #12]
 8015a26:	8992      	ldrh	r2, [r2, #12]
 8015a28:	fbb3 f0f2 	udiv	r0, r3, r2
 8015a2c:	fb00 f202 	mul.w	r2, r0, r2
 8015a30:	1a9b      	subs	r3, r3, r2
 8015a32:	440b      	add	r3, r1
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7ff fab1 	bl	8014f9c <ld_dword>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015a40:	4323      	orrs	r3, r4
 8015a42:	607b      	str	r3, [r7, #4]
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015a4a:	68bb      	ldr	r3, [r7, #8]
 8015a4c:	009b      	lsls	r3, r3, #2
 8015a4e:	68fa      	ldr	r2, [r7, #12]
 8015a50:	8992      	ldrh	r2, [r2, #12]
 8015a52:	fbb3 f0f2 	udiv	r0, r3, r2
 8015a56:	fb00 f202 	mul.w	r2, r0, r2
 8015a5a:	1a9b      	subs	r3, r3, r2
 8015a5c:	440b      	add	r3, r1
 8015a5e:	6879      	ldr	r1, [r7, #4]
 8015a60:	4618      	mov	r0, r3
 8015a62:	f7ff fad9 	bl	8015018 <st_dword>
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	2201      	movs	r2, #1
 8015a6a:	70da      	strb	r2, [r3, #3]
 8015a6c:	e006      	b.n	8015a7c <put_fat+0x22a>
 8015a6e:	bf00      	nop
 8015a70:	e004      	b.n	8015a7c <put_fat+0x22a>
 8015a72:	bf00      	nop
 8015a74:	e002      	b.n	8015a7c <put_fat+0x22a>
 8015a76:	bf00      	nop
 8015a78:	e000      	b.n	8015a7c <put_fat+0x22a>
 8015a7a:	bf00      	nop
 8015a7c:	7ffb      	ldrb	r3, [r7, #31]
 8015a7e:	4618      	mov	r0, r3
 8015a80:	3724      	adds	r7, #36	; 0x24
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bd90      	pop	{r4, r7, pc}

08015a86 <remove_chain>:
 8015a86:	b580      	push	{r7, lr}
 8015a88:	b088      	sub	sp, #32
 8015a8a:	af00      	add	r7, sp, #0
 8015a8c:	60f8      	str	r0, [r7, #12]
 8015a8e:	60b9      	str	r1, [r7, #8]
 8015a90:	607a      	str	r2, [r7, #4]
 8015a92:	2300      	movs	r3, #0
 8015a94:	77fb      	strb	r3, [r7, #31]
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	61bb      	str	r3, [r7, #24]
 8015a9c:	68bb      	ldr	r3, [r7, #8]
 8015a9e:	2b01      	cmp	r3, #1
 8015aa0:	d904      	bls.n	8015aac <remove_chain+0x26>
 8015aa2:	69bb      	ldr	r3, [r7, #24]
 8015aa4:	69db      	ldr	r3, [r3, #28]
 8015aa6:	68ba      	ldr	r2, [r7, #8]
 8015aa8:	429a      	cmp	r2, r3
 8015aaa:	d301      	bcc.n	8015ab0 <remove_chain+0x2a>
 8015aac:	2302      	movs	r3, #2
 8015aae:	e04b      	b.n	8015b48 <remove_chain+0xc2>
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d00c      	beq.n	8015ad0 <remove_chain+0x4a>
 8015ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8015aba:	6879      	ldr	r1, [r7, #4]
 8015abc:	69b8      	ldr	r0, [r7, #24]
 8015abe:	f7ff fec8 	bl	8015852 <put_fat>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	77fb      	strb	r3, [r7, #31]
 8015ac6:	7ffb      	ldrb	r3, [r7, #31]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d001      	beq.n	8015ad0 <remove_chain+0x4a>
 8015acc:	7ffb      	ldrb	r3, [r7, #31]
 8015ace:	e03b      	b.n	8015b48 <remove_chain+0xc2>
 8015ad0:	68b9      	ldr	r1, [r7, #8]
 8015ad2:	68f8      	ldr	r0, [r7, #12]
 8015ad4:	f7ff fde9 	bl	80156aa <get_fat>
 8015ad8:	6178      	str	r0, [r7, #20]
 8015ada:	697b      	ldr	r3, [r7, #20]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d031      	beq.n	8015b44 <remove_chain+0xbe>
 8015ae0:	697b      	ldr	r3, [r7, #20]
 8015ae2:	2b01      	cmp	r3, #1
 8015ae4:	d101      	bne.n	8015aea <remove_chain+0x64>
 8015ae6:	2302      	movs	r3, #2
 8015ae8:	e02e      	b.n	8015b48 <remove_chain+0xc2>
 8015aea:	697b      	ldr	r3, [r7, #20]
 8015aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015af0:	d101      	bne.n	8015af6 <remove_chain+0x70>
 8015af2:	2301      	movs	r3, #1
 8015af4:	e028      	b.n	8015b48 <remove_chain+0xc2>
 8015af6:	2200      	movs	r2, #0
 8015af8:	68b9      	ldr	r1, [r7, #8]
 8015afa:	69b8      	ldr	r0, [r7, #24]
 8015afc:	f7ff fea9 	bl	8015852 <put_fat>
 8015b00:	4603      	mov	r3, r0
 8015b02:	77fb      	strb	r3, [r7, #31]
 8015b04:	7ffb      	ldrb	r3, [r7, #31]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d001      	beq.n	8015b0e <remove_chain+0x88>
 8015b0a:	7ffb      	ldrb	r3, [r7, #31]
 8015b0c:	e01c      	b.n	8015b48 <remove_chain+0xc2>
 8015b0e:	69bb      	ldr	r3, [r7, #24]
 8015b10:	699a      	ldr	r2, [r3, #24]
 8015b12:	69bb      	ldr	r3, [r7, #24]
 8015b14:	69db      	ldr	r3, [r3, #28]
 8015b16:	3b02      	subs	r3, #2
 8015b18:	429a      	cmp	r2, r3
 8015b1a:	d20b      	bcs.n	8015b34 <remove_chain+0xae>
 8015b1c:	69bb      	ldr	r3, [r7, #24]
 8015b1e:	699b      	ldr	r3, [r3, #24]
 8015b20:	1c5a      	adds	r2, r3, #1
 8015b22:	69bb      	ldr	r3, [r7, #24]
 8015b24:	619a      	str	r2, [r3, #24]
 8015b26:	69bb      	ldr	r3, [r7, #24]
 8015b28:	791b      	ldrb	r3, [r3, #4]
 8015b2a:	f043 0301 	orr.w	r3, r3, #1
 8015b2e:	b2da      	uxtb	r2, r3
 8015b30:	69bb      	ldr	r3, [r7, #24]
 8015b32:	711a      	strb	r2, [r3, #4]
 8015b34:	697b      	ldr	r3, [r7, #20]
 8015b36:	60bb      	str	r3, [r7, #8]
 8015b38:	69bb      	ldr	r3, [r7, #24]
 8015b3a:	69db      	ldr	r3, [r3, #28]
 8015b3c:	68ba      	ldr	r2, [r7, #8]
 8015b3e:	429a      	cmp	r2, r3
 8015b40:	d3c6      	bcc.n	8015ad0 <remove_chain+0x4a>
 8015b42:	e000      	b.n	8015b46 <remove_chain+0xc0>
 8015b44:	bf00      	nop
 8015b46:	2300      	movs	r3, #0
 8015b48:	4618      	mov	r0, r3
 8015b4a:	3720      	adds	r7, #32
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}

08015b50 <create_chain>:
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b088      	sub	sp, #32
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
 8015b58:	6039      	str	r1, [r7, #0]
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	613b      	str	r3, [r7, #16]
 8015b60:	683b      	ldr	r3, [r7, #0]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d10d      	bne.n	8015b82 <create_chain+0x32>
 8015b66:	693b      	ldr	r3, [r7, #16]
 8015b68:	695b      	ldr	r3, [r3, #20]
 8015b6a:	61bb      	str	r3, [r7, #24]
 8015b6c:	69bb      	ldr	r3, [r7, #24]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d004      	beq.n	8015b7c <create_chain+0x2c>
 8015b72:	693b      	ldr	r3, [r7, #16]
 8015b74:	69db      	ldr	r3, [r3, #28]
 8015b76:	69ba      	ldr	r2, [r7, #24]
 8015b78:	429a      	cmp	r2, r3
 8015b7a:	d31b      	bcc.n	8015bb4 <create_chain+0x64>
 8015b7c:	2301      	movs	r3, #1
 8015b7e:	61bb      	str	r3, [r7, #24]
 8015b80:	e018      	b.n	8015bb4 <create_chain+0x64>
 8015b82:	6839      	ldr	r1, [r7, #0]
 8015b84:	6878      	ldr	r0, [r7, #4]
 8015b86:	f7ff fd90 	bl	80156aa <get_fat>
 8015b8a:	60f8      	str	r0, [r7, #12]
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	2b01      	cmp	r3, #1
 8015b90:	d801      	bhi.n	8015b96 <create_chain+0x46>
 8015b92:	2301      	movs	r3, #1
 8015b94:	e070      	b.n	8015c78 <create_chain+0x128>
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b9c:	d101      	bne.n	8015ba2 <create_chain+0x52>
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	e06a      	b.n	8015c78 <create_chain+0x128>
 8015ba2:	693b      	ldr	r3, [r7, #16]
 8015ba4:	69db      	ldr	r3, [r3, #28]
 8015ba6:	68fa      	ldr	r2, [r7, #12]
 8015ba8:	429a      	cmp	r2, r3
 8015baa:	d201      	bcs.n	8015bb0 <create_chain+0x60>
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	e063      	b.n	8015c78 <create_chain+0x128>
 8015bb0:	683b      	ldr	r3, [r7, #0]
 8015bb2:	61bb      	str	r3, [r7, #24]
 8015bb4:	69bb      	ldr	r3, [r7, #24]
 8015bb6:	61fb      	str	r3, [r7, #28]
 8015bb8:	69fb      	ldr	r3, [r7, #28]
 8015bba:	3301      	adds	r3, #1
 8015bbc:	61fb      	str	r3, [r7, #28]
 8015bbe:	693b      	ldr	r3, [r7, #16]
 8015bc0:	69db      	ldr	r3, [r3, #28]
 8015bc2:	69fa      	ldr	r2, [r7, #28]
 8015bc4:	429a      	cmp	r2, r3
 8015bc6:	d307      	bcc.n	8015bd8 <create_chain+0x88>
 8015bc8:	2302      	movs	r3, #2
 8015bca:	61fb      	str	r3, [r7, #28]
 8015bcc:	69fa      	ldr	r2, [r7, #28]
 8015bce:	69bb      	ldr	r3, [r7, #24]
 8015bd0:	429a      	cmp	r2, r3
 8015bd2:	d901      	bls.n	8015bd8 <create_chain+0x88>
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	e04f      	b.n	8015c78 <create_chain+0x128>
 8015bd8:	69f9      	ldr	r1, [r7, #28]
 8015bda:	6878      	ldr	r0, [r7, #4]
 8015bdc:	f7ff fd65 	bl	80156aa <get_fat>
 8015be0:	60f8      	str	r0, [r7, #12]
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d00e      	beq.n	8015c06 <create_chain+0xb6>
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	2b01      	cmp	r3, #1
 8015bec:	d003      	beq.n	8015bf6 <create_chain+0xa6>
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bf4:	d101      	bne.n	8015bfa <create_chain+0xaa>
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	e03e      	b.n	8015c78 <create_chain+0x128>
 8015bfa:	69fa      	ldr	r2, [r7, #28]
 8015bfc:	69bb      	ldr	r3, [r7, #24]
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	d1da      	bne.n	8015bb8 <create_chain+0x68>
 8015c02:	2300      	movs	r3, #0
 8015c04:	e038      	b.n	8015c78 <create_chain+0x128>
 8015c06:	bf00      	nop
 8015c08:	f04f 32ff 	mov.w	r2, #4294967295
 8015c0c:	69f9      	ldr	r1, [r7, #28]
 8015c0e:	6938      	ldr	r0, [r7, #16]
 8015c10:	f7ff fe1f 	bl	8015852 <put_fat>
 8015c14:	4603      	mov	r3, r0
 8015c16:	75fb      	strb	r3, [r7, #23]
 8015c18:	7dfb      	ldrb	r3, [r7, #23]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d109      	bne.n	8015c32 <create_chain+0xe2>
 8015c1e:	683b      	ldr	r3, [r7, #0]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d006      	beq.n	8015c32 <create_chain+0xe2>
 8015c24:	69fa      	ldr	r2, [r7, #28]
 8015c26:	6839      	ldr	r1, [r7, #0]
 8015c28:	6938      	ldr	r0, [r7, #16]
 8015c2a:	f7ff fe12 	bl	8015852 <put_fat>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	75fb      	strb	r3, [r7, #23]
 8015c32:	7dfb      	ldrb	r3, [r7, #23]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d116      	bne.n	8015c66 <create_chain+0x116>
 8015c38:	693b      	ldr	r3, [r7, #16]
 8015c3a:	69fa      	ldr	r2, [r7, #28]
 8015c3c:	615a      	str	r2, [r3, #20]
 8015c3e:	693b      	ldr	r3, [r7, #16]
 8015c40:	699a      	ldr	r2, [r3, #24]
 8015c42:	693b      	ldr	r3, [r7, #16]
 8015c44:	69db      	ldr	r3, [r3, #28]
 8015c46:	3b02      	subs	r3, #2
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d804      	bhi.n	8015c56 <create_chain+0x106>
 8015c4c:	693b      	ldr	r3, [r7, #16]
 8015c4e:	699b      	ldr	r3, [r3, #24]
 8015c50:	1e5a      	subs	r2, r3, #1
 8015c52:	693b      	ldr	r3, [r7, #16]
 8015c54:	619a      	str	r2, [r3, #24]
 8015c56:	693b      	ldr	r3, [r7, #16]
 8015c58:	791b      	ldrb	r3, [r3, #4]
 8015c5a:	f043 0301 	orr.w	r3, r3, #1
 8015c5e:	b2da      	uxtb	r2, r3
 8015c60:	693b      	ldr	r3, [r7, #16]
 8015c62:	711a      	strb	r2, [r3, #4]
 8015c64:	e007      	b.n	8015c76 <create_chain+0x126>
 8015c66:	7dfb      	ldrb	r3, [r7, #23]
 8015c68:	2b01      	cmp	r3, #1
 8015c6a:	d102      	bne.n	8015c72 <create_chain+0x122>
 8015c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c70:	e000      	b.n	8015c74 <create_chain+0x124>
 8015c72:	2301      	movs	r3, #1
 8015c74:	61fb      	str	r3, [r7, #28]
 8015c76:	69fb      	ldr	r3, [r7, #28]
 8015c78:	4618      	mov	r0, r3
 8015c7a:	3720      	adds	r7, #32
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	bd80      	pop	{r7, pc}

08015c80 <clmt_clust>:
 8015c80:	b480      	push	{r7}
 8015c82:	b087      	sub	sp, #28
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
 8015c88:	6039      	str	r1, [r7, #0]
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	60fb      	str	r3, [r7, #12]
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c94:	3304      	adds	r3, #4
 8015c96:	613b      	str	r3, [r7, #16]
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	899b      	ldrh	r3, [r3, #12]
 8015c9c:	461a      	mov	r2, r3
 8015c9e:	683b      	ldr	r3, [r7, #0]
 8015ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8015ca4:	68fa      	ldr	r2, [r7, #12]
 8015ca6:	8952      	ldrh	r2, [r2, #10]
 8015ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8015cac:	617b      	str	r3, [r7, #20]
 8015cae:	693b      	ldr	r3, [r7, #16]
 8015cb0:	1d1a      	adds	r2, r3, #4
 8015cb2:	613a      	str	r2, [r7, #16]
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	60bb      	str	r3, [r7, #8]
 8015cb8:	68bb      	ldr	r3, [r7, #8]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d101      	bne.n	8015cc2 <clmt_clust+0x42>
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	e010      	b.n	8015ce4 <clmt_clust+0x64>
 8015cc2:	697a      	ldr	r2, [r7, #20]
 8015cc4:	68bb      	ldr	r3, [r7, #8]
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d307      	bcc.n	8015cda <clmt_clust+0x5a>
 8015cca:	697a      	ldr	r2, [r7, #20]
 8015ccc:	68bb      	ldr	r3, [r7, #8]
 8015cce:	1ad3      	subs	r3, r2, r3
 8015cd0:	617b      	str	r3, [r7, #20]
 8015cd2:	693b      	ldr	r3, [r7, #16]
 8015cd4:	3304      	adds	r3, #4
 8015cd6:	613b      	str	r3, [r7, #16]
 8015cd8:	e7e9      	b.n	8015cae <clmt_clust+0x2e>
 8015cda:	bf00      	nop
 8015cdc:	693b      	ldr	r3, [r7, #16]
 8015cde:	681a      	ldr	r2, [r3, #0]
 8015ce0:	697b      	ldr	r3, [r7, #20]
 8015ce2:	4413      	add	r3, r2
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	371c      	adds	r7, #28
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cee:	4770      	bx	lr

08015cf0 <dir_sdi>:
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b086      	sub	sp, #24
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
 8015cf8:	6039      	str	r1, [r7, #0]
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	613b      	str	r3, [r7, #16]
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015d06:	d204      	bcs.n	8015d12 <dir_sdi+0x22>
 8015d08:	683b      	ldr	r3, [r7, #0]
 8015d0a:	f003 031f 	and.w	r3, r3, #31
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d001      	beq.n	8015d16 <dir_sdi+0x26>
 8015d12:	2302      	movs	r3, #2
 8015d14:	e071      	b.n	8015dfa <dir_sdi+0x10a>
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	683a      	ldr	r2, [r7, #0]
 8015d1a:	615a      	str	r2, [r3, #20]
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	689b      	ldr	r3, [r3, #8]
 8015d20:	617b      	str	r3, [r7, #20]
 8015d22:	697b      	ldr	r3, [r7, #20]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d106      	bne.n	8015d36 <dir_sdi+0x46>
 8015d28:	693b      	ldr	r3, [r7, #16]
 8015d2a:	781b      	ldrb	r3, [r3, #0]
 8015d2c:	2b02      	cmp	r3, #2
 8015d2e:	d902      	bls.n	8015d36 <dir_sdi+0x46>
 8015d30:	693b      	ldr	r3, [r7, #16]
 8015d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d34:	617b      	str	r3, [r7, #20]
 8015d36:	697b      	ldr	r3, [r7, #20]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d10c      	bne.n	8015d56 <dir_sdi+0x66>
 8015d3c:	683b      	ldr	r3, [r7, #0]
 8015d3e:	095b      	lsrs	r3, r3, #5
 8015d40:	693a      	ldr	r2, [r7, #16]
 8015d42:	8912      	ldrh	r2, [r2, #8]
 8015d44:	4293      	cmp	r3, r2
 8015d46:	d301      	bcc.n	8015d4c <dir_sdi+0x5c>
 8015d48:	2302      	movs	r3, #2
 8015d4a:	e056      	b.n	8015dfa <dir_sdi+0x10a>
 8015d4c:	693b      	ldr	r3, [r7, #16]
 8015d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	61da      	str	r2, [r3, #28]
 8015d54:	e02d      	b.n	8015db2 <dir_sdi+0xc2>
 8015d56:	693b      	ldr	r3, [r7, #16]
 8015d58:	895b      	ldrh	r3, [r3, #10]
 8015d5a:	461a      	mov	r2, r3
 8015d5c:	693b      	ldr	r3, [r7, #16]
 8015d5e:	899b      	ldrh	r3, [r3, #12]
 8015d60:	fb02 f303 	mul.w	r3, r2, r3
 8015d64:	60fb      	str	r3, [r7, #12]
 8015d66:	e019      	b.n	8015d9c <dir_sdi+0xac>
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	6979      	ldr	r1, [r7, #20]
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	f7ff fc9c 	bl	80156aa <get_fat>
 8015d72:	6178      	str	r0, [r7, #20]
 8015d74:	697b      	ldr	r3, [r7, #20]
 8015d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d7a:	d101      	bne.n	8015d80 <dir_sdi+0x90>
 8015d7c:	2301      	movs	r3, #1
 8015d7e:	e03c      	b.n	8015dfa <dir_sdi+0x10a>
 8015d80:	697b      	ldr	r3, [r7, #20]
 8015d82:	2b01      	cmp	r3, #1
 8015d84:	d904      	bls.n	8015d90 <dir_sdi+0xa0>
 8015d86:	693b      	ldr	r3, [r7, #16]
 8015d88:	69db      	ldr	r3, [r3, #28]
 8015d8a:	697a      	ldr	r2, [r7, #20]
 8015d8c:	429a      	cmp	r2, r3
 8015d8e:	d301      	bcc.n	8015d94 <dir_sdi+0xa4>
 8015d90:	2302      	movs	r3, #2
 8015d92:	e032      	b.n	8015dfa <dir_sdi+0x10a>
 8015d94:	683a      	ldr	r2, [r7, #0]
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	1ad3      	subs	r3, r2, r3
 8015d9a:	603b      	str	r3, [r7, #0]
 8015d9c:	683a      	ldr	r2, [r7, #0]
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	429a      	cmp	r2, r3
 8015da2:	d2e1      	bcs.n	8015d68 <dir_sdi+0x78>
 8015da4:	6979      	ldr	r1, [r7, #20]
 8015da6:	6938      	ldr	r0, [r7, #16]
 8015da8:	f7ff fc60 	bl	801566c <clust2sect>
 8015dac:	4602      	mov	r2, r0
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	61da      	str	r2, [r3, #28]
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	697a      	ldr	r2, [r7, #20]
 8015db6:	619a      	str	r2, [r3, #24]
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	69db      	ldr	r3, [r3, #28]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d101      	bne.n	8015dc4 <dir_sdi+0xd4>
 8015dc0:	2302      	movs	r3, #2
 8015dc2:	e01a      	b.n	8015dfa <dir_sdi+0x10a>
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	69da      	ldr	r2, [r3, #28]
 8015dc8:	693b      	ldr	r3, [r7, #16]
 8015dca:	899b      	ldrh	r3, [r3, #12]
 8015dcc:	4619      	mov	r1, r3
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8015dd4:	441a      	add	r2, r3
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	61da      	str	r2, [r3, #28]
 8015dda:	693b      	ldr	r3, [r7, #16]
 8015ddc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015de0:	693b      	ldr	r3, [r7, #16]
 8015de2:	899b      	ldrh	r3, [r3, #12]
 8015de4:	461a      	mov	r2, r3
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	fbb3 f0f2 	udiv	r0, r3, r2
 8015dec:	fb00 f202 	mul.w	r2, r0, r2
 8015df0:	1a9b      	subs	r3, r3, r2
 8015df2:	18ca      	adds	r2, r1, r3
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	621a      	str	r2, [r3, #32]
 8015df8:	2300      	movs	r3, #0
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	3718      	adds	r7, #24
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	bd80      	pop	{r7, pc}

08015e02 <dir_next>:
 8015e02:	b580      	push	{r7, lr}
 8015e04:	b086      	sub	sp, #24
 8015e06:	af00      	add	r7, sp, #0
 8015e08:	6078      	str	r0, [r7, #4]
 8015e0a:	6039      	str	r1, [r7, #0]
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	60fb      	str	r3, [r7, #12]
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	695b      	ldr	r3, [r3, #20]
 8015e16:	3320      	adds	r3, #32
 8015e18:	60bb      	str	r3, [r7, #8]
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	69db      	ldr	r3, [r3, #28]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d003      	beq.n	8015e2a <dir_next+0x28>
 8015e22:	68bb      	ldr	r3, [r7, #8]
 8015e24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015e28:	d301      	bcc.n	8015e2e <dir_next+0x2c>
 8015e2a:	2304      	movs	r3, #4
 8015e2c:	e0bb      	b.n	8015fa6 <dir_next+0x1a4>
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	899b      	ldrh	r3, [r3, #12]
 8015e32:	461a      	mov	r2, r3
 8015e34:	68bb      	ldr	r3, [r7, #8]
 8015e36:	fbb3 f1f2 	udiv	r1, r3, r2
 8015e3a:	fb01 f202 	mul.w	r2, r1, r2
 8015e3e:	1a9b      	subs	r3, r3, r2
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	f040 809d 	bne.w	8015f80 <dir_next+0x17e>
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	69db      	ldr	r3, [r3, #28]
 8015e4a:	1c5a      	adds	r2, r3, #1
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	61da      	str	r2, [r3, #28]
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	699b      	ldr	r3, [r3, #24]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d10b      	bne.n	8015e70 <dir_next+0x6e>
 8015e58:	68bb      	ldr	r3, [r7, #8]
 8015e5a:	095b      	lsrs	r3, r3, #5
 8015e5c:	68fa      	ldr	r2, [r7, #12]
 8015e5e:	8912      	ldrh	r2, [r2, #8]
 8015e60:	4293      	cmp	r3, r2
 8015e62:	f0c0 808d 	bcc.w	8015f80 <dir_next+0x17e>
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	2200      	movs	r2, #0
 8015e6a:	61da      	str	r2, [r3, #28]
 8015e6c:	2304      	movs	r3, #4
 8015e6e:	e09a      	b.n	8015fa6 <dir_next+0x1a4>
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	899b      	ldrh	r3, [r3, #12]
 8015e74:	461a      	mov	r2, r3
 8015e76:	68bb      	ldr	r3, [r7, #8]
 8015e78:	fbb3 f3f2 	udiv	r3, r3, r2
 8015e7c:	68fa      	ldr	r2, [r7, #12]
 8015e7e:	8952      	ldrh	r2, [r2, #10]
 8015e80:	3a01      	subs	r2, #1
 8015e82:	4013      	ands	r3, r2
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d17b      	bne.n	8015f80 <dir_next+0x17e>
 8015e88:	687a      	ldr	r2, [r7, #4]
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	699b      	ldr	r3, [r3, #24]
 8015e8e:	4619      	mov	r1, r3
 8015e90:	4610      	mov	r0, r2
 8015e92:	f7ff fc0a 	bl	80156aa <get_fat>
 8015e96:	6178      	str	r0, [r7, #20]
 8015e98:	697b      	ldr	r3, [r7, #20]
 8015e9a:	2b01      	cmp	r3, #1
 8015e9c:	d801      	bhi.n	8015ea2 <dir_next+0xa0>
 8015e9e:	2302      	movs	r3, #2
 8015ea0:	e081      	b.n	8015fa6 <dir_next+0x1a4>
 8015ea2:	697b      	ldr	r3, [r7, #20]
 8015ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ea8:	d101      	bne.n	8015eae <dir_next+0xac>
 8015eaa:	2301      	movs	r3, #1
 8015eac:	e07b      	b.n	8015fa6 <dir_next+0x1a4>
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	69db      	ldr	r3, [r3, #28]
 8015eb2:	697a      	ldr	r2, [r7, #20]
 8015eb4:	429a      	cmp	r2, r3
 8015eb6:	d359      	bcc.n	8015f6c <dir_next+0x16a>
 8015eb8:	683b      	ldr	r3, [r7, #0]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d104      	bne.n	8015ec8 <dir_next+0xc6>
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	61da      	str	r2, [r3, #28]
 8015ec4:	2304      	movs	r3, #4
 8015ec6:	e06e      	b.n	8015fa6 <dir_next+0x1a4>
 8015ec8:	687a      	ldr	r2, [r7, #4]
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	699b      	ldr	r3, [r3, #24]
 8015ece:	4619      	mov	r1, r3
 8015ed0:	4610      	mov	r0, r2
 8015ed2:	f7ff fe3d 	bl	8015b50 <create_chain>
 8015ed6:	6178      	str	r0, [r7, #20]
 8015ed8:	697b      	ldr	r3, [r7, #20]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d101      	bne.n	8015ee2 <dir_next+0xe0>
 8015ede:	2307      	movs	r3, #7
 8015ee0:	e061      	b.n	8015fa6 <dir_next+0x1a4>
 8015ee2:	697b      	ldr	r3, [r7, #20]
 8015ee4:	2b01      	cmp	r3, #1
 8015ee6:	d101      	bne.n	8015eec <dir_next+0xea>
 8015ee8:	2302      	movs	r3, #2
 8015eea:	e05c      	b.n	8015fa6 <dir_next+0x1a4>
 8015eec:	697b      	ldr	r3, [r7, #20]
 8015eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ef2:	d101      	bne.n	8015ef8 <dir_next+0xf6>
 8015ef4:	2301      	movs	r3, #1
 8015ef6:	e056      	b.n	8015fa6 <dir_next+0x1a4>
 8015ef8:	68f8      	ldr	r0, [r7, #12]
 8015efa:	f7ff fad5 	bl	80154a8 <sync_window>
 8015efe:	4603      	mov	r3, r0
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d001      	beq.n	8015f08 <dir_next+0x106>
 8015f04:	2301      	movs	r3, #1
 8015f06:	e04e      	b.n	8015fa6 <dir_next+0x1a4>
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	899b      	ldrh	r3, [r3, #12]
 8015f12:	461a      	mov	r2, r3
 8015f14:	2100      	movs	r1, #0
 8015f16:	f7ff f8cc 	bl	80150b2 <mem_set>
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	613b      	str	r3, [r7, #16]
 8015f1e:	6979      	ldr	r1, [r7, #20]
 8015f20:	68f8      	ldr	r0, [r7, #12]
 8015f22:	f7ff fba3 	bl	801566c <clust2sect>
 8015f26:	4602      	mov	r2, r0
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	635a      	str	r2, [r3, #52]	; 0x34
 8015f2c:	e012      	b.n	8015f54 <dir_next+0x152>
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	2201      	movs	r2, #1
 8015f32:	70da      	strb	r2, [r3, #3]
 8015f34:	68f8      	ldr	r0, [r7, #12]
 8015f36:	f7ff fab7 	bl	80154a8 <sync_window>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d001      	beq.n	8015f44 <dir_next+0x142>
 8015f40:	2301      	movs	r3, #1
 8015f42:	e030      	b.n	8015fa6 <dir_next+0x1a4>
 8015f44:	693b      	ldr	r3, [r7, #16]
 8015f46:	3301      	adds	r3, #1
 8015f48:	613b      	str	r3, [r7, #16]
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f4e:	1c5a      	adds	r2, r3, #1
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	635a      	str	r2, [r3, #52]	; 0x34
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	895b      	ldrh	r3, [r3, #10]
 8015f58:	461a      	mov	r2, r3
 8015f5a:	693b      	ldr	r3, [r7, #16]
 8015f5c:	4293      	cmp	r3, r2
 8015f5e:	d3e6      	bcc.n	8015f2e <dir_next+0x12c>
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015f64:	693b      	ldr	r3, [r7, #16]
 8015f66:	1ad2      	subs	r2, r2, r3
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	635a      	str	r2, [r3, #52]	; 0x34
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	697a      	ldr	r2, [r7, #20]
 8015f70:	619a      	str	r2, [r3, #24]
 8015f72:	6979      	ldr	r1, [r7, #20]
 8015f74:	68f8      	ldr	r0, [r7, #12]
 8015f76:	f7ff fb79 	bl	801566c <clust2sect>
 8015f7a:	4602      	mov	r2, r0
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	61da      	str	r2, [r3, #28]
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	68ba      	ldr	r2, [r7, #8]
 8015f84:	615a      	str	r2, [r3, #20]
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	899b      	ldrh	r3, [r3, #12]
 8015f90:	461a      	mov	r2, r3
 8015f92:	68bb      	ldr	r3, [r7, #8]
 8015f94:	fbb3 f0f2 	udiv	r0, r3, r2
 8015f98:	fb00 f202 	mul.w	r2, r0, r2
 8015f9c:	1a9b      	subs	r3, r3, r2
 8015f9e:	18ca      	adds	r2, r1, r3
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	621a      	str	r2, [r3, #32]
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	3718      	adds	r7, #24
 8015faa:	46bd      	mov	sp, r7
 8015fac:	bd80      	pop	{r7, pc}

08015fae <dir_alloc>:
 8015fae:	b580      	push	{r7, lr}
 8015fb0:	b086      	sub	sp, #24
 8015fb2:	af00      	add	r7, sp, #0
 8015fb4:	6078      	str	r0, [r7, #4]
 8015fb6:	6039      	str	r1, [r7, #0]
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	60fb      	str	r3, [r7, #12]
 8015fbe:	2100      	movs	r1, #0
 8015fc0:	6878      	ldr	r0, [r7, #4]
 8015fc2:	f7ff fe95 	bl	8015cf0 <dir_sdi>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	75fb      	strb	r3, [r7, #23]
 8015fca:	7dfb      	ldrb	r3, [r7, #23]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d12b      	bne.n	8016028 <dir_alloc+0x7a>
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	613b      	str	r3, [r7, #16]
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	69db      	ldr	r3, [r3, #28]
 8015fd8:	4619      	mov	r1, r3
 8015fda:	68f8      	ldr	r0, [r7, #12]
 8015fdc:	f7ff faa8 	bl	8015530 <move_window>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	75fb      	strb	r3, [r7, #23]
 8015fe4:	7dfb      	ldrb	r3, [r7, #23]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d11d      	bne.n	8016026 <dir_alloc+0x78>
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	6a1b      	ldr	r3, [r3, #32]
 8015fee:	781b      	ldrb	r3, [r3, #0]
 8015ff0:	2be5      	cmp	r3, #229	; 0xe5
 8015ff2:	d004      	beq.n	8015ffe <dir_alloc+0x50>
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	6a1b      	ldr	r3, [r3, #32]
 8015ff8:	781b      	ldrb	r3, [r3, #0]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d107      	bne.n	801600e <dir_alloc+0x60>
 8015ffe:	693b      	ldr	r3, [r7, #16]
 8016000:	3301      	adds	r3, #1
 8016002:	613b      	str	r3, [r7, #16]
 8016004:	693a      	ldr	r2, [r7, #16]
 8016006:	683b      	ldr	r3, [r7, #0]
 8016008:	429a      	cmp	r2, r3
 801600a:	d102      	bne.n	8016012 <dir_alloc+0x64>
 801600c:	e00c      	b.n	8016028 <dir_alloc+0x7a>
 801600e:	2300      	movs	r3, #0
 8016010:	613b      	str	r3, [r7, #16]
 8016012:	2101      	movs	r1, #1
 8016014:	6878      	ldr	r0, [r7, #4]
 8016016:	f7ff fef4 	bl	8015e02 <dir_next>
 801601a:	4603      	mov	r3, r0
 801601c:	75fb      	strb	r3, [r7, #23]
 801601e:	7dfb      	ldrb	r3, [r7, #23]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d0d7      	beq.n	8015fd4 <dir_alloc+0x26>
 8016024:	e000      	b.n	8016028 <dir_alloc+0x7a>
 8016026:	bf00      	nop
 8016028:	7dfb      	ldrb	r3, [r7, #23]
 801602a:	2b04      	cmp	r3, #4
 801602c:	d101      	bne.n	8016032 <dir_alloc+0x84>
 801602e:	2307      	movs	r3, #7
 8016030:	75fb      	strb	r3, [r7, #23]
 8016032:	7dfb      	ldrb	r3, [r7, #23]
 8016034:	4618      	mov	r0, r3
 8016036:	3718      	adds	r7, #24
 8016038:	46bd      	mov	sp, r7
 801603a:	bd80      	pop	{r7, pc}

0801603c <ld_clust>:
 801603c:	b580      	push	{r7, lr}
 801603e:	b084      	sub	sp, #16
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
 8016044:	6039      	str	r1, [r7, #0]
 8016046:	683b      	ldr	r3, [r7, #0]
 8016048:	331a      	adds	r3, #26
 801604a:	4618      	mov	r0, r3
 801604c:	f7fe ff8e 	bl	8014f6c <ld_word>
 8016050:	4603      	mov	r3, r0
 8016052:	60fb      	str	r3, [r7, #12]
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	781b      	ldrb	r3, [r3, #0]
 8016058:	2b03      	cmp	r3, #3
 801605a:	d109      	bne.n	8016070 <ld_clust+0x34>
 801605c:	683b      	ldr	r3, [r7, #0]
 801605e:	3314      	adds	r3, #20
 8016060:	4618      	mov	r0, r3
 8016062:	f7fe ff83 	bl	8014f6c <ld_word>
 8016066:	4603      	mov	r3, r0
 8016068:	041b      	lsls	r3, r3, #16
 801606a:	68fa      	ldr	r2, [r7, #12]
 801606c:	4313      	orrs	r3, r2
 801606e:	60fb      	str	r3, [r7, #12]
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	4618      	mov	r0, r3
 8016074:	3710      	adds	r7, #16
 8016076:	46bd      	mov	sp, r7
 8016078:	bd80      	pop	{r7, pc}

0801607a <st_clust>:
 801607a:	b580      	push	{r7, lr}
 801607c:	b084      	sub	sp, #16
 801607e:	af00      	add	r7, sp, #0
 8016080:	60f8      	str	r0, [r7, #12]
 8016082:	60b9      	str	r1, [r7, #8]
 8016084:	607a      	str	r2, [r7, #4]
 8016086:	68bb      	ldr	r3, [r7, #8]
 8016088:	331a      	adds	r3, #26
 801608a:	687a      	ldr	r2, [r7, #4]
 801608c:	b292      	uxth	r2, r2
 801608e:	4611      	mov	r1, r2
 8016090:	4618      	mov	r0, r3
 8016092:	f7fe ffa6 	bl	8014fe2 <st_word>
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	781b      	ldrb	r3, [r3, #0]
 801609a:	2b03      	cmp	r3, #3
 801609c:	d109      	bne.n	80160b2 <st_clust+0x38>
 801609e:	68bb      	ldr	r3, [r7, #8]
 80160a0:	f103 0214 	add.w	r2, r3, #20
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	0c1b      	lsrs	r3, r3, #16
 80160a8:	b29b      	uxth	r3, r3
 80160aa:	4619      	mov	r1, r3
 80160ac:	4610      	mov	r0, r2
 80160ae:	f7fe ff98 	bl	8014fe2 <st_word>
 80160b2:	bf00      	nop
 80160b4:	3710      	adds	r7, #16
 80160b6:	46bd      	mov	sp, r7
 80160b8:	bd80      	pop	{r7, pc}

080160ba <dir_find>:
 80160ba:	b580      	push	{r7, lr}
 80160bc:	b086      	sub	sp, #24
 80160be:	af00      	add	r7, sp, #0
 80160c0:	6078      	str	r0, [r7, #4]
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	613b      	str	r3, [r7, #16]
 80160c8:	2100      	movs	r1, #0
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f7ff fe10 	bl	8015cf0 <dir_sdi>
 80160d0:	4603      	mov	r3, r0
 80160d2:	75fb      	strb	r3, [r7, #23]
 80160d4:	7dfb      	ldrb	r3, [r7, #23]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d001      	beq.n	80160de <dir_find+0x24>
 80160da:	7dfb      	ldrb	r3, [r7, #23]
 80160dc:	e03e      	b.n	801615c <dir_find+0xa2>
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	69db      	ldr	r3, [r3, #28]
 80160e2:	4619      	mov	r1, r3
 80160e4:	6938      	ldr	r0, [r7, #16]
 80160e6:	f7ff fa23 	bl	8015530 <move_window>
 80160ea:	4603      	mov	r3, r0
 80160ec:	75fb      	strb	r3, [r7, #23]
 80160ee:	7dfb      	ldrb	r3, [r7, #23]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d12f      	bne.n	8016154 <dir_find+0x9a>
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	6a1b      	ldr	r3, [r3, #32]
 80160f8:	781b      	ldrb	r3, [r3, #0]
 80160fa:	73fb      	strb	r3, [r7, #15]
 80160fc:	7bfb      	ldrb	r3, [r7, #15]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d102      	bne.n	8016108 <dir_find+0x4e>
 8016102:	2304      	movs	r3, #4
 8016104:	75fb      	strb	r3, [r7, #23]
 8016106:	e028      	b.n	801615a <dir_find+0xa0>
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	6a1b      	ldr	r3, [r3, #32]
 801610c:	330b      	adds	r3, #11
 801610e:	781b      	ldrb	r3, [r3, #0]
 8016110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016114:	b2da      	uxtb	r2, r3
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	719a      	strb	r2, [r3, #6]
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	6a1b      	ldr	r3, [r3, #32]
 801611e:	330b      	adds	r3, #11
 8016120:	781b      	ldrb	r3, [r3, #0]
 8016122:	f003 0308 	and.w	r3, r3, #8
 8016126:	2b00      	cmp	r3, #0
 8016128:	d10a      	bne.n	8016140 <dir_find+0x86>
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	6a18      	ldr	r0, [r3, #32]
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	3324      	adds	r3, #36	; 0x24
 8016132:	220b      	movs	r2, #11
 8016134:	4619      	mov	r1, r3
 8016136:	f7fe ffd7 	bl	80150e8 <mem_cmp>
 801613a:	4603      	mov	r3, r0
 801613c:	2b00      	cmp	r3, #0
 801613e:	d00b      	beq.n	8016158 <dir_find+0x9e>
 8016140:	2100      	movs	r1, #0
 8016142:	6878      	ldr	r0, [r7, #4]
 8016144:	f7ff fe5d 	bl	8015e02 <dir_next>
 8016148:	4603      	mov	r3, r0
 801614a:	75fb      	strb	r3, [r7, #23]
 801614c:	7dfb      	ldrb	r3, [r7, #23]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d0c5      	beq.n	80160de <dir_find+0x24>
 8016152:	e002      	b.n	801615a <dir_find+0xa0>
 8016154:	bf00      	nop
 8016156:	e000      	b.n	801615a <dir_find+0xa0>
 8016158:	bf00      	nop
 801615a:	7dfb      	ldrb	r3, [r7, #23]
 801615c:	4618      	mov	r0, r3
 801615e:	3718      	adds	r7, #24
 8016160:	46bd      	mov	sp, r7
 8016162:	bd80      	pop	{r7, pc}

08016164 <dir_register>:
 8016164:	b580      	push	{r7, lr}
 8016166:	b084      	sub	sp, #16
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	60bb      	str	r3, [r7, #8]
 8016172:	2101      	movs	r1, #1
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f7ff ff1a 	bl	8015fae <dir_alloc>
 801617a:	4603      	mov	r3, r0
 801617c:	73fb      	strb	r3, [r7, #15]
 801617e:	7bfb      	ldrb	r3, [r7, #15]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d11c      	bne.n	80161be <dir_register+0x5a>
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	69db      	ldr	r3, [r3, #28]
 8016188:	4619      	mov	r1, r3
 801618a:	68b8      	ldr	r0, [r7, #8]
 801618c:	f7ff f9d0 	bl	8015530 <move_window>
 8016190:	4603      	mov	r3, r0
 8016192:	73fb      	strb	r3, [r7, #15]
 8016194:	7bfb      	ldrb	r3, [r7, #15]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d111      	bne.n	80161be <dir_register+0x5a>
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	6a1b      	ldr	r3, [r3, #32]
 801619e:	2220      	movs	r2, #32
 80161a0:	2100      	movs	r1, #0
 80161a2:	4618      	mov	r0, r3
 80161a4:	f7fe ff85 	bl	80150b2 <mem_set>
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	6a18      	ldr	r0, [r3, #32]
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	3324      	adds	r3, #36	; 0x24
 80161b0:	220b      	movs	r2, #11
 80161b2:	4619      	mov	r1, r3
 80161b4:	f7fe ff5c 	bl	8015070 <mem_cpy>
 80161b8:	68bb      	ldr	r3, [r7, #8]
 80161ba:	2201      	movs	r2, #1
 80161bc:	70da      	strb	r2, [r3, #3]
 80161be:	7bfb      	ldrb	r3, [r7, #15]
 80161c0:	4618      	mov	r0, r3
 80161c2:	3710      	adds	r7, #16
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}

080161c8 <get_fileinfo>:
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b086      	sub	sp, #24
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
 80161d0:	6039      	str	r1, [r7, #0]
 80161d2:	683b      	ldr	r3, [r7, #0]
 80161d4:	2200      	movs	r2, #0
 80161d6:	725a      	strb	r2, [r3, #9]
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	69db      	ldr	r3, [r3, #28]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d04e      	beq.n	801627e <get_fileinfo+0xb6>
 80161e0:	2300      	movs	r3, #0
 80161e2:	613b      	str	r3, [r7, #16]
 80161e4:	693b      	ldr	r3, [r7, #16]
 80161e6:	617b      	str	r3, [r7, #20]
 80161e8:	e021      	b.n	801622e <get_fileinfo+0x66>
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	6a1a      	ldr	r2, [r3, #32]
 80161ee:	697b      	ldr	r3, [r7, #20]
 80161f0:	1c59      	adds	r1, r3, #1
 80161f2:	6179      	str	r1, [r7, #20]
 80161f4:	4413      	add	r3, r2
 80161f6:	781b      	ldrb	r3, [r3, #0]
 80161f8:	73fb      	strb	r3, [r7, #15]
 80161fa:	7bfb      	ldrb	r3, [r7, #15]
 80161fc:	2b20      	cmp	r3, #32
 80161fe:	d100      	bne.n	8016202 <get_fileinfo+0x3a>
 8016200:	e015      	b.n	801622e <get_fileinfo+0x66>
 8016202:	7bfb      	ldrb	r3, [r7, #15]
 8016204:	2b05      	cmp	r3, #5
 8016206:	d101      	bne.n	801620c <get_fileinfo+0x44>
 8016208:	23e5      	movs	r3, #229	; 0xe5
 801620a:	73fb      	strb	r3, [r7, #15]
 801620c:	697b      	ldr	r3, [r7, #20]
 801620e:	2b09      	cmp	r3, #9
 8016210:	d106      	bne.n	8016220 <get_fileinfo+0x58>
 8016212:	693b      	ldr	r3, [r7, #16]
 8016214:	1c5a      	adds	r2, r3, #1
 8016216:	613a      	str	r2, [r7, #16]
 8016218:	683a      	ldr	r2, [r7, #0]
 801621a:	4413      	add	r3, r2
 801621c:	222e      	movs	r2, #46	; 0x2e
 801621e:	725a      	strb	r2, [r3, #9]
 8016220:	693b      	ldr	r3, [r7, #16]
 8016222:	1c5a      	adds	r2, r3, #1
 8016224:	613a      	str	r2, [r7, #16]
 8016226:	683a      	ldr	r2, [r7, #0]
 8016228:	4413      	add	r3, r2
 801622a:	7bfa      	ldrb	r2, [r7, #15]
 801622c:	725a      	strb	r2, [r3, #9]
 801622e:	697b      	ldr	r3, [r7, #20]
 8016230:	2b0a      	cmp	r3, #10
 8016232:	d9da      	bls.n	80161ea <get_fileinfo+0x22>
 8016234:	683a      	ldr	r2, [r7, #0]
 8016236:	693b      	ldr	r3, [r7, #16]
 8016238:	4413      	add	r3, r2
 801623a:	3309      	adds	r3, #9
 801623c:	2200      	movs	r2, #0
 801623e:	701a      	strb	r2, [r3, #0]
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	6a1b      	ldr	r3, [r3, #32]
 8016244:	7ada      	ldrb	r2, [r3, #11]
 8016246:	683b      	ldr	r3, [r7, #0]
 8016248:	721a      	strb	r2, [r3, #8]
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	6a1b      	ldr	r3, [r3, #32]
 801624e:	331c      	adds	r3, #28
 8016250:	4618      	mov	r0, r3
 8016252:	f7fe fea3 	bl	8014f9c <ld_dword>
 8016256:	4602      	mov	r2, r0
 8016258:	683b      	ldr	r3, [r7, #0]
 801625a:	601a      	str	r2, [r3, #0]
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	6a1b      	ldr	r3, [r3, #32]
 8016260:	3316      	adds	r3, #22
 8016262:	4618      	mov	r0, r3
 8016264:	f7fe fe9a 	bl	8014f9c <ld_dword>
 8016268:	60b8      	str	r0, [r7, #8]
 801626a:	68bb      	ldr	r3, [r7, #8]
 801626c:	b29a      	uxth	r2, r3
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	80da      	strh	r2, [r3, #6]
 8016272:	68bb      	ldr	r3, [r7, #8]
 8016274:	0c1b      	lsrs	r3, r3, #16
 8016276:	b29a      	uxth	r2, r3
 8016278:	683b      	ldr	r3, [r7, #0]
 801627a:	809a      	strh	r2, [r3, #4]
 801627c:	e000      	b.n	8016280 <get_fileinfo+0xb8>
 801627e:	bf00      	nop
 8016280:	3718      	adds	r7, #24
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
	...

08016288 <create_name>:
 8016288:	b580      	push	{r7, lr}
 801628a:	b088      	sub	sp, #32
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	6039      	str	r1, [r7, #0]
 8016292:	683b      	ldr	r3, [r7, #0]
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	60fb      	str	r3, [r7, #12]
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	3324      	adds	r3, #36	; 0x24
 801629c:	60bb      	str	r3, [r7, #8]
 801629e:	220b      	movs	r2, #11
 80162a0:	2120      	movs	r1, #32
 80162a2:	68b8      	ldr	r0, [r7, #8]
 80162a4:	f7fe ff05 	bl	80150b2 <mem_set>
 80162a8:	2300      	movs	r3, #0
 80162aa:	613b      	str	r3, [r7, #16]
 80162ac:	693b      	ldr	r3, [r7, #16]
 80162ae:	61fb      	str	r3, [r7, #28]
 80162b0:	2308      	movs	r3, #8
 80162b2:	617b      	str	r3, [r7, #20]
 80162b4:	69fb      	ldr	r3, [r7, #28]
 80162b6:	1c5a      	adds	r2, r3, #1
 80162b8:	61fa      	str	r2, [r7, #28]
 80162ba:	68fa      	ldr	r2, [r7, #12]
 80162bc:	4413      	add	r3, r2
 80162be:	781b      	ldrb	r3, [r3, #0]
 80162c0:	76fb      	strb	r3, [r7, #27]
 80162c2:	7efb      	ldrb	r3, [r7, #27]
 80162c4:	2b20      	cmp	r3, #32
 80162c6:	d94e      	bls.n	8016366 <create_name+0xde>
 80162c8:	7efb      	ldrb	r3, [r7, #27]
 80162ca:	2b2f      	cmp	r3, #47	; 0x2f
 80162cc:	d006      	beq.n	80162dc <create_name+0x54>
 80162ce:	7efb      	ldrb	r3, [r7, #27]
 80162d0:	2b5c      	cmp	r3, #92	; 0x5c
 80162d2:	d110      	bne.n	80162f6 <create_name+0x6e>
 80162d4:	e002      	b.n	80162dc <create_name+0x54>
 80162d6:	69fb      	ldr	r3, [r7, #28]
 80162d8:	3301      	adds	r3, #1
 80162da:	61fb      	str	r3, [r7, #28]
 80162dc:	68fa      	ldr	r2, [r7, #12]
 80162de:	69fb      	ldr	r3, [r7, #28]
 80162e0:	4413      	add	r3, r2
 80162e2:	781b      	ldrb	r3, [r3, #0]
 80162e4:	2b2f      	cmp	r3, #47	; 0x2f
 80162e6:	d0f6      	beq.n	80162d6 <create_name+0x4e>
 80162e8:	68fa      	ldr	r2, [r7, #12]
 80162ea:	69fb      	ldr	r3, [r7, #28]
 80162ec:	4413      	add	r3, r2
 80162ee:	781b      	ldrb	r3, [r3, #0]
 80162f0:	2b5c      	cmp	r3, #92	; 0x5c
 80162f2:	d0f0      	beq.n	80162d6 <create_name+0x4e>
 80162f4:	e038      	b.n	8016368 <create_name+0xe0>
 80162f6:	7efb      	ldrb	r3, [r7, #27]
 80162f8:	2b2e      	cmp	r3, #46	; 0x2e
 80162fa:	d003      	beq.n	8016304 <create_name+0x7c>
 80162fc:	693a      	ldr	r2, [r7, #16]
 80162fe:	697b      	ldr	r3, [r7, #20]
 8016300:	429a      	cmp	r2, r3
 8016302:	d30c      	bcc.n	801631e <create_name+0x96>
 8016304:	697b      	ldr	r3, [r7, #20]
 8016306:	2b0b      	cmp	r3, #11
 8016308:	d002      	beq.n	8016310 <create_name+0x88>
 801630a:	7efb      	ldrb	r3, [r7, #27]
 801630c:	2b2e      	cmp	r3, #46	; 0x2e
 801630e:	d001      	beq.n	8016314 <create_name+0x8c>
 8016310:	2306      	movs	r3, #6
 8016312:	e044      	b.n	801639e <create_name+0x116>
 8016314:	2308      	movs	r3, #8
 8016316:	613b      	str	r3, [r7, #16]
 8016318:	230b      	movs	r3, #11
 801631a:	617b      	str	r3, [r7, #20]
 801631c:	e022      	b.n	8016364 <create_name+0xdc>
 801631e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016322:	2b00      	cmp	r3, #0
 8016324:	da04      	bge.n	8016330 <create_name+0xa8>
 8016326:	7efb      	ldrb	r3, [r7, #27]
 8016328:	3b80      	subs	r3, #128	; 0x80
 801632a:	4a1f      	ldr	r2, [pc, #124]	; (80163a8 <create_name+0x120>)
 801632c:	5cd3      	ldrb	r3, [r2, r3]
 801632e:	76fb      	strb	r3, [r7, #27]
 8016330:	7efb      	ldrb	r3, [r7, #27]
 8016332:	4619      	mov	r1, r3
 8016334:	481d      	ldr	r0, [pc, #116]	; (80163ac <create_name+0x124>)
 8016336:	f7fe fefe 	bl	8015136 <chk_chr>
 801633a:	4603      	mov	r3, r0
 801633c:	2b00      	cmp	r3, #0
 801633e:	d001      	beq.n	8016344 <create_name+0xbc>
 8016340:	2306      	movs	r3, #6
 8016342:	e02c      	b.n	801639e <create_name+0x116>
 8016344:	7efb      	ldrb	r3, [r7, #27]
 8016346:	2b60      	cmp	r3, #96	; 0x60
 8016348:	d905      	bls.n	8016356 <create_name+0xce>
 801634a:	7efb      	ldrb	r3, [r7, #27]
 801634c:	2b7a      	cmp	r3, #122	; 0x7a
 801634e:	d802      	bhi.n	8016356 <create_name+0xce>
 8016350:	7efb      	ldrb	r3, [r7, #27]
 8016352:	3b20      	subs	r3, #32
 8016354:	76fb      	strb	r3, [r7, #27]
 8016356:	693b      	ldr	r3, [r7, #16]
 8016358:	1c5a      	adds	r2, r3, #1
 801635a:	613a      	str	r2, [r7, #16]
 801635c:	68ba      	ldr	r2, [r7, #8]
 801635e:	4413      	add	r3, r2
 8016360:	7efa      	ldrb	r2, [r7, #27]
 8016362:	701a      	strb	r2, [r3, #0]
 8016364:	e7a6      	b.n	80162b4 <create_name+0x2c>
 8016366:	bf00      	nop
 8016368:	68fa      	ldr	r2, [r7, #12]
 801636a:	69fb      	ldr	r3, [r7, #28]
 801636c:	441a      	add	r2, r3
 801636e:	683b      	ldr	r3, [r7, #0]
 8016370:	601a      	str	r2, [r3, #0]
 8016372:	693b      	ldr	r3, [r7, #16]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d101      	bne.n	801637c <create_name+0xf4>
 8016378:	2306      	movs	r3, #6
 801637a:	e010      	b.n	801639e <create_name+0x116>
 801637c:	68bb      	ldr	r3, [r7, #8]
 801637e:	781b      	ldrb	r3, [r3, #0]
 8016380:	2be5      	cmp	r3, #229	; 0xe5
 8016382:	d102      	bne.n	801638a <create_name+0x102>
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	2205      	movs	r2, #5
 8016388:	701a      	strb	r2, [r3, #0]
 801638a:	7efb      	ldrb	r3, [r7, #27]
 801638c:	2b20      	cmp	r3, #32
 801638e:	d801      	bhi.n	8016394 <create_name+0x10c>
 8016390:	2204      	movs	r2, #4
 8016392:	e000      	b.n	8016396 <create_name+0x10e>
 8016394:	2200      	movs	r2, #0
 8016396:	68bb      	ldr	r3, [r7, #8]
 8016398:	330b      	adds	r3, #11
 801639a:	701a      	strb	r2, [r3, #0]
 801639c:	2300      	movs	r3, #0
 801639e:	4618      	mov	r0, r3
 80163a0:	3720      	adds	r7, #32
 80163a2:	46bd      	mov	sp, r7
 80163a4:	bd80      	pop	{r7, pc}
 80163a6:	bf00      	nop
 80163a8:	08022678 	.word	0x08022678
 80163ac:	0802222c 	.word	0x0802222c

080163b0 <follow_path>:
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b086      	sub	sp, #24
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
 80163b8:	6039      	str	r1, [r7, #0]
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	613b      	str	r3, [r7, #16]
 80163be:	693b      	ldr	r3, [r7, #16]
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	60fb      	str	r3, [r7, #12]
 80163c4:	e002      	b.n	80163cc <follow_path+0x1c>
 80163c6:	683b      	ldr	r3, [r7, #0]
 80163c8:	3301      	adds	r3, #1
 80163ca:	603b      	str	r3, [r7, #0]
 80163cc:	683b      	ldr	r3, [r7, #0]
 80163ce:	781b      	ldrb	r3, [r3, #0]
 80163d0:	2b2f      	cmp	r3, #47	; 0x2f
 80163d2:	d0f8      	beq.n	80163c6 <follow_path+0x16>
 80163d4:	683b      	ldr	r3, [r7, #0]
 80163d6:	781b      	ldrb	r3, [r3, #0]
 80163d8:	2b5c      	cmp	r3, #92	; 0x5c
 80163da:	d0f4      	beq.n	80163c6 <follow_path+0x16>
 80163dc:	693b      	ldr	r3, [r7, #16]
 80163de:	2200      	movs	r2, #0
 80163e0:	609a      	str	r2, [r3, #8]
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	781b      	ldrb	r3, [r3, #0]
 80163e6:	2b1f      	cmp	r3, #31
 80163e8:	d80a      	bhi.n	8016400 <follow_path+0x50>
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	2280      	movs	r2, #128	; 0x80
 80163ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80163f2:	2100      	movs	r1, #0
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f7ff fc7b 	bl	8015cf0 <dir_sdi>
 80163fa:	4603      	mov	r3, r0
 80163fc:	75fb      	strb	r3, [r7, #23]
 80163fe:	e048      	b.n	8016492 <follow_path+0xe2>
 8016400:	463b      	mov	r3, r7
 8016402:	4619      	mov	r1, r3
 8016404:	6878      	ldr	r0, [r7, #4]
 8016406:	f7ff ff3f 	bl	8016288 <create_name>
 801640a:	4603      	mov	r3, r0
 801640c:	75fb      	strb	r3, [r7, #23]
 801640e:	7dfb      	ldrb	r3, [r7, #23]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d139      	bne.n	8016488 <follow_path+0xd8>
 8016414:	6878      	ldr	r0, [r7, #4]
 8016416:	f7ff fe50 	bl	80160ba <dir_find>
 801641a:	4603      	mov	r3, r0
 801641c:	75fb      	strb	r3, [r7, #23]
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016424:	72fb      	strb	r3, [r7, #11]
 8016426:	7dfb      	ldrb	r3, [r7, #23]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d00a      	beq.n	8016442 <follow_path+0x92>
 801642c:	7dfb      	ldrb	r3, [r7, #23]
 801642e:	2b04      	cmp	r3, #4
 8016430:	d12c      	bne.n	801648c <follow_path+0xdc>
 8016432:	7afb      	ldrb	r3, [r7, #11]
 8016434:	f003 0304 	and.w	r3, r3, #4
 8016438:	2b00      	cmp	r3, #0
 801643a:	d127      	bne.n	801648c <follow_path+0xdc>
 801643c:	2305      	movs	r3, #5
 801643e:	75fb      	strb	r3, [r7, #23]
 8016440:	e024      	b.n	801648c <follow_path+0xdc>
 8016442:	7afb      	ldrb	r3, [r7, #11]
 8016444:	f003 0304 	and.w	r3, r3, #4
 8016448:	2b00      	cmp	r3, #0
 801644a:	d121      	bne.n	8016490 <follow_path+0xe0>
 801644c:	693b      	ldr	r3, [r7, #16]
 801644e:	799b      	ldrb	r3, [r3, #6]
 8016450:	f003 0310 	and.w	r3, r3, #16
 8016454:	2b00      	cmp	r3, #0
 8016456:	d102      	bne.n	801645e <follow_path+0xae>
 8016458:	2305      	movs	r3, #5
 801645a:	75fb      	strb	r3, [r7, #23]
 801645c:	e019      	b.n	8016492 <follow_path+0xe2>
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	695b      	ldr	r3, [r3, #20]
 8016468:	68fa      	ldr	r2, [r7, #12]
 801646a:	8992      	ldrh	r2, [r2, #12]
 801646c:	fbb3 f0f2 	udiv	r0, r3, r2
 8016470:	fb00 f202 	mul.w	r2, r0, r2
 8016474:	1a9b      	subs	r3, r3, r2
 8016476:	440b      	add	r3, r1
 8016478:	4619      	mov	r1, r3
 801647a:	68f8      	ldr	r0, [r7, #12]
 801647c:	f7ff fdde 	bl	801603c <ld_clust>
 8016480:	4602      	mov	r2, r0
 8016482:	693b      	ldr	r3, [r7, #16]
 8016484:	609a      	str	r2, [r3, #8]
 8016486:	e7bb      	b.n	8016400 <follow_path+0x50>
 8016488:	bf00      	nop
 801648a:	e002      	b.n	8016492 <follow_path+0xe2>
 801648c:	bf00      	nop
 801648e:	e000      	b.n	8016492 <follow_path+0xe2>
 8016490:	bf00      	nop
 8016492:	7dfb      	ldrb	r3, [r7, #23]
 8016494:	4618      	mov	r0, r3
 8016496:	3718      	adds	r7, #24
 8016498:	46bd      	mov	sp, r7
 801649a:	bd80      	pop	{r7, pc}

0801649c <get_ldnumber>:
 801649c:	b480      	push	{r7}
 801649e:	b087      	sub	sp, #28
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
 80164a4:	f04f 33ff 	mov.w	r3, #4294967295
 80164a8:	613b      	str	r3, [r7, #16]
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d031      	beq.n	8016516 <get_ldnumber+0x7a>
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	617b      	str	r3, [r7, #20]
 80164b8:	e002      	b.n	80164c0 <get_ldnumber+0x24>
 80164ba:	697b      	ldr	r3, [r7, #20]
 80164bc:	3301      	adds	r3, #1
 80164be:	617b      	str	r3, [r7, #20]
 80164c0:	697b      	ldr	r3, [r7, #20]
 80164c2:	781b      	ldrb	r3, [r3, #0]
 80164c4:	2b20      	cmp	r3, #32
 80164c6:	d903      	bls.n	80164d0 <get_ldnumber+0x34>
 80164c8:	697b      	ldr	r3, [r7, #20]
 80164ca:	781b      	ldrb	r3, [r3, #0]
 80164cc:	2b3a      	cmp	r3, #58	; 0x3a
 80164ce:	d1f4      	bne.n	80164ba <get_ldnumber+0x1e>
 80164d0:	697b      	ldr	r3, [r7, #20]
 80164d2:	781b      	ldrb	r3, [r3, #0]
 80164d4:	2b3a      	cmp	r3, #58	; 0x3a
 80164d6:	d11c      	bne.n	8016512 <get_ldnumber+0x76>
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	60fb      	str	r3, [r7, #12]
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	1c5a      	adds	r2, r3, #1
 80164e2:	60fa      	str	r2, [r7, #12]
 80164e4:	781b      	ldrb	r3, [r3, #0]
 80164e6:	3b30      	subs	r3, #48	; 0x30
 80164e8:	60bb      	str	r3, [r7, #8]
 80164ea:	68bb      	ldr	r3, [r7, #8]
 80164ec:	2b09      	cmp	r3, #9
 80164ee:	d80e      	bhi.n	801650e <get_ldnumber+0x72>
 80164f0:	68fa      	ldr	r2, [r7, #12]
 80164f2:	697b      	ldr	r3, [r7, #20]
 80164f4:	429a      	cmp	r2, r3
 80164f6:	d10a      	bne.n	801650e <get_ldnumber+0x72>
 80164f8:	68bb      	ldr	r3, [r7, #8]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d107      	bne.n	801650e <get_ldnumber+0x72>
 80164fe:	68bb      	ldr	r3, [r7, #8]
 8016500:	613b      	str	r3, [r7, #16]
 8016502:	697b      	ldr	r3, [r7, #20]
 8016504:	3301      	adds	r3, #1
 8016506:	617b      	str	r3, [r7, #20]
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	697a      	ldr	r2, [r7, #20]
 801650c:	601a      	str	r2, [r3, #0]
 801650e:	693b      	ldr	r3, [r7, #16]
 8016510:	e002      	b.n	8016518 <get_ldnumber+0x7c>
 8016512:	2300      	movs	r3, #0
 8016514:	613b      	str	r3, [r7, #16]
 8016516:	693b      	ldr	r3, [r7, #16]
 8016518:	4618      	mov	r0, r3
 801651a:	371c      	adds	r7, #28
 801651c:	46bd      	mov	sp, r7
 801651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016522:	4770      	bx	lr

08016524 <check_fs>:
 8016524:	b580      	push	{r7, lr}
 8016526:	b082      	sub	sp, #8
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
 801652c:	6039      	str	r1, [r7, #0]
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	2200      	movs	r2, #0
 8016532:	70da      	strb	r2, [r3, #3]
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	f04f 32ff 	mov.w	r2, #4294967295
 801653a:	635a      	str	r2, [r3, #52]	; 0x34
 801653c:	6839      	ldr	r1, [r7, #0]
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f7fe fff6 	bl	8015530 <move_window>
 8016544:	4603      	mov	r3, r0
 8016546:	2b00      	cmp	r3, #0
 8016548:	d001      	beq.n	801654e <check_fs+0x2a>
 801654a:	2304      	movs	r3, #4
 801654c:	e038      	b.n	80165c0 <check_fs+0x9c>
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	3338      	adds	r3, #56	; 0x38
 8016552:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016556:	4618      	mov	r0, r3
 8016558:	f7fe fd08 	bl	8014f6c <ld_word>
 801655c:	4603      	mov	r3, r0
 801655e:	461a      	mov	r2, r3
 8016560:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016564:	429a      	cmp	r2, r3
 8016566:	d001      	beq.n	801656c <check_fs+0x48>
 8016568:	2303      	movs	r3, #3
 801656a:	e029      	b.n	80165c0 <check_fs+0x9c>
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016572:	2be9      	cmp	r3, #233	; 0xe9
 8016574:	d009      	beq.n	801658a <check_fs+0x66>
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801657c:	2beb      	cmp	r3, #235	; 0xeb
 801657e:	d11e      	bne.n	80165be <check_fs+0x9a>
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016586:	2b90      	cmp	r3, #144	; 0x90
 8016588:	d119      	bne.n	80165be <check_fs+0x9a>
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	3338      	adds	r3, #56	; 0x38
 801658e:	3336      	adds	r3, #54	; 0x36
 8016590:	4618      	mov	r0, r3
 8016592:	f7fe fd03 	bl	8014f9c <ld_dword>
 8016596:	4603      	mov	r3, r0
 8016598:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801659c:	4a0a      	ldr	r2, [pc, #40]	; (80165c8 <check_fs+0xa4>)
 801659e:	4293      	cmp	r3, r2
 80165a0:	d101      	bne.n	80165a6 <check_fs+0x82>
 80165a2:	2300      	movs	r3, #0
 80165a4:	e00c      	b.n	80165c0 <check_fs+0x9c>
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	3338      	adds	r3, #56	; 0x38
 80165aa:	3352      	adds	r3, #82	; 0x52
 80165ac:	4618      	mov	r0, r3
 80165ae:	f7fe fcf5 	bl	8014f9c <ld_dword>
 80165b2:	4603      	mov	r3, r0
 80165b4:	4a05      	ldr	r2, [pc, #20]	; (80165cc <check_fs+0xa8>)
 80165b6:	4293      	cmp	r3, r2
 80165b8:	d101      	bne.n	80165be <check_fs+0x9a>
 80165ba:	2300      	movs	r3, #0
 80165bc:	e000      	b.n	80165c0 <check_fs+0x9c>
 80165be:	2302      	movs	r3, #2
 80165c0:	4618      	mov	r0, r3
 80165c2:	3708      	adds	r7, #8
 80165c4:	46bd      	mov	sp, r7
 80165c6:	bd80      	pop	{r7, pc}
 80165c8:	00544146 	.word	0x00544146
 80165cc:	33544146 	.word	0x33544146

080165d0 <find_volume>:
 80165d0:	b580      	push	{r7, lr}
 80165d2:	b096      	sub	sp, #88	; 0x58
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	60f8      	str	r0, [r7, #12]
 80165d8:	60b9      	str	r1, [r7, #8]
 80165da:	4613      	mov	r3, r2
 80165dc:	71fb      	strb	r3, [r7, #7]
 80165de:	68bb      	ldr	r3, [r7, #8]
 80165e0:	2200      	movs	r2, #0
 80165e2:	601a      	str	r2, [r3, #0]
 80165e4:	68f8      	ldr	r0, [r7, #12]
 80165e6:	f7ff ff59 	bl	801649c <get_ldnumber>
 80165ea:	63f8      	str	r0, [r7, #60]	; 0x3c
 80165ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	da01      	bge.n	80165f6 <find_volume+0x26>
 80165f2:	230b      	movs	r3, #11
 80165f4:	e26a      	b.n	8016acc <find_volume+0x4fc>
 80165f6:	4aa3      	ldr	r2, [pc, #652]	; (8016884 <find_volume+0x2b4>)
 80165f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80165fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8016600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016602:	2b00      	cmp	r3, #0
 8016604:	d101      	bne.n	801660a <find_volume+0x3a>
 8016606:	230c      	movs	r3, #12
 8016608:	e260      	b.n	8016acc <find_volume+0x4fc>
 801660a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801660c:	f7fe fdae 	bl	801516c <lock_fs>
 8016610:	4603      	mov	r3, r0
 8016612:	2b00      	cmp	r3, #0
 8016614:	d101      	bne.n	801661a <find_volume+0x4a>
 8016616:	230f      	movs	r3, #15
 8016618:	e258      	b.n	8016acc <find_volume+0x4fc>
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801661e:	601a      	str	r2, [r3, #0]
 8016620:	79fb      	ldrb	r3, [r7, #7]
 8016622:	f023 0301 	bic.w	r3, r3, #1
 8016626:	71fb      	strb	r3, [r7, #7]
 8016628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801662a:	781b      	ldrb	r3, [r3, #0]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d01a      	beq.n	8016666 <find_volume+0x96>
 8016630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016632:	785b      	ldrb	r3, [r3, #1]
 8016634:	4618      	mov	r0, r3
 8016636:	f7fe fbfb 	bl	8014e30 <disk_status>
 801663a:	4603      	mov	r3, r0
 801663c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016640:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016644:	f003 0301 	and.w	r3, r3, #1
 8016648:	2b00      	cmp	r3, #0
 801664a:	d10c      	bne.n	8016666 <find_volume+0x96>
 801664c:	79fb      	ldrb	r3, [r7, #7]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d007      	beq.n	8016662 <find_volume+0x92>
 8016652:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016656:	f003 0304 	and.w	r3, r3, #4
 801665a:	2b00      	cmp	r3, #0
 801665c:	d001      	beq.n	8016662 <find_volume+0x92>
 801665e:	230a      	movs	r3, #10
 8016660:	e234      	b.n	8016acc <find_volume+0x4fc>
 8016662:	2300      	movs	r3, #0
 8016664:	e232      	b.n	8016acc <find_volume+0x4fc>
 8016666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016668:	2200      	movs	r2, #0
 801666a:	701a      	strb	r2, [r3, #0]
 801666c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801666e:	b2da      	uxtb	r2, r3
 8016670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016672:	705a      	strb	r2, [r3, #1]
 8016674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016676:	785b      	ldrb	r3, [r3, #1]
 8016678:	4618      	mov	r0, r3
 801667a:	f7fe fbf3 	bl	8014e64 <disk_initialize>
 801667e:	4603      	mov	r3, r0
 8016680:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016684:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016688:	f003 0301 	and.w	r3, r3, #1
 801668c:	2b00      	cmp	r3, #0
 801668e:	d001      	beq.n	8016694 <find_volume+0xc4>
 8016690:	2303      	movs	r3, #3
 8016692:	e21b      	b.n	8016acc <find_volume+0x4fc>
 8016694:	79fb      	ldrb	r3, [r7, #7]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d007      	beq.n	80166aa <find_volume+0xda>
 801669a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801669e:	f003 0304 	and.w	r3, r3, #4
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d001      	beq.n	80166aa <find_volume+0xda>
 80166a6:	230a      	movs	r3, #10
 80166a8:	e210      	b.n	8016acc <find_volume+0x4fc>
 80166aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166ac:	7858      	ldrb	r0, [r3, #1]
 80166ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166b0:	330c      	adds	r3, #12
 80166b2:	461a      	mov	r2, r3
 80166b4:	2102      	movs	r1, #2
 80166b6:	f7fe fc3b 	bl	8014f30 <disk_ioctl>
 80166ba:	4603      	mov	r3, r0
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d001      	beq.n	80166c4 <find_volume+0xf4>
 80166c0:	2301      	movs	r3, #1
 80166c2:	e203      	b.n	8016acc <find_volume+0x4fc>
 80166c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166c6:	899b      	ldrh	r3, [r3, #12]
 80166c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80166cc:	d80d      	bhi.n	80166ea <find_volume+0x11a>
 80166ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166d0:	899b      	ldrh	r3, [r3, #12]
 80166d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80166d6:	d308      	bcc.n	80166ea <find_volume+0x11a>
 80166d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166da:	899b      	ldrh	r3, [r3, #12]
 80166dc:	461a      	mov	r2, r3
 80166de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166e0:	899b      	ldrh	r3, [r3, #12]
 80166e2:	3b01      	subs	r3, #1
 80166e4:	4013      	ands	r3, r2
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d001      	beq.n	80166ee <find_volume+0x11e>
 80166ea:	2301      	movs	r3, #1
 80166ec:	e1ee      	b.n	8016acc <find_volume+0x4fc>
 80166ee:	2300      	movs	r3, #0
 80166f0:	653b      	str	r3, [r7, #80]	; 0x50
 80166f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80166f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80166f6:	f7ff ff15 	bl	8016524 <check_fs>
 80166fa:	4603      	mov	r3, r0
 80166fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8016700:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016704:	2b02      	cmp	r3, #2
 8016706:	d149      	bne.n	801679c <find_volume+0x1cc>
 8016708:	2300      	movs	r3, #0
 801670a:	643b      	str	r3, [r7, #64]	; 0x40
 801670c:	e01e      	b.n	801674c <find_volume+0x17c>
 801670e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016710:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016716:	011b      	lsls	r3, r3, #4
 8016718:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801671c:	4413      	add	r3, r2
 801671e:	633b      	str	r3, [r7, #48]	; 0x30
 8016720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016722:	3304      	adds	r3, #4
 8016724:	781b      	ldrb	r3, [r3, #0]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d006      	beq.n	8016738 <find_volume+0x168>
 801672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801672c:	3308      	adds	r3, #8
 801672e:	4618      	mov	r0, r3
 8016730:	f7fe fc34 	bl	8014f9c <ld_dword>
 8016734:	4602      	mov	r2, r0
 8016736:	e000      	b.n	801673a <find_volume+0x16a>
 8016738:	2200      	movs	r2, #0
 801673a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801673c:	009b      	lsls	r3, r3, #2
 801673e:	3358      	adds	r3, #88	; 0x58
 8016740:	443b      	add	r3, r7
 8016742:	f843 2c44 	str.w	r2, [r3, #-68]
 8016746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016748:	3301      	adds	r3, #1
 801674a:	643b      	str	r3, [r7, #64]	; 0x40
 801674c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801674e:	2b03      	cmp	r3, #3
 8016750:	d9dd      	bls.n	801670e <find_volume+0x13e>
 8016752:	2300      	movs	r3, #0
 8016754:	643b      	str	r3, [r7, #64]	; 0x40
 8016756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016758:	2b00      	cmp	r3, #0
 801675a:	d002      	beq.n	8016762 <find_volume+0x192>
 801675c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801675e:	3b01      	subs	r3, #1
 8016760:	643b      	str	r3, [r7, #64]	; 0x40
 8016762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016764:	009b      	lsls	r3, r3, #2
 8016766:	3358      	adds	r3, #88	; 0x58
 8016768:	443b      	add	r3, r7
 801676a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801676e:	653b      	str	r3, [r7, #80]	; 0x50
 8016770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016772:	2b00      	cmp	r3, #0
 8016774:	d005      	beq.n	8016782 <find_volume+0x1b2>
 8016776:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016778:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801677a:	f7ff fed3 	bl	8016524 <check_fs>
 801677e:	4603      	mov	r3, r0
 8016780:	e000      	b.n	8016784 <find_volume+0x1b4>
 8016782:	2303      	movs	r3, #3
 8016784:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8016788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801678c:	2b01      	cmp	r3, #1
 801678e:	d905      	bls.n	801679c <find_volume+0x1cc>
 8016790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016792:	3301      	adds	r3, #1
 8016794:	643b      	str	r3, [r7, #64]	; 0x40
 8016796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016798:	2b03      	cmp	r3, #3
 801679a:	d9e2      	bls.n	8016762 <find_volume+0x192>
 801679c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80167a0:	2b04      	cmp	r3, #4
 80167a2:	d101      	bne.n	80167a8 <find_volume+0x1d8>
 80167a4:	2301      	movs	r3, #1
 80167a6:	e191      	b.n	8016acc <find_volume+0x4fc>
 80167a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80167ac:	2b01      	cmp	r3, #1
 80167ae:	d901      	bls.n	80167b4 <find_volume+0x1e4>
 80167b0:	230d      	movs	r3, #13
 80167b2:	e18b      	b.n	8016acc <find_volume+0x4fc>
 80167b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167b6:	3338      	adds	r3, #56	; 0x38
 80167b8:	330b      	adds	r3, #11
 80167ba:	4618      	mov	r0, r3
 80167bc:	f7fe fbd6 	bl	8014f6c <ld_word>
 80167c0:	4603      	mov	r3, r0
 80167c2:	461a      	mov	r2, r3
 80167c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167c6:	899b      	ldrh	r3, [r3, #12]
 80167c8:	429a      	cmp	r2, r3
 80167ca:	d001      	beq.n	80167d0 <find_volume+0x200>
 80167cc:	230d      	movs	r3, #13
 80167ce:	e17d      	b.n	8016acc <find_volume+0x4fc>
 80167d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167d2:	3338      	adds	r3, #56	; 0x38
 80167d4:	3316      	adds	r3, #22
 80167d6:	4618      	mov	r0, r3
 80167d8:	f7fe fbc8 	bl	8014f6c <ld_word>
 80167dc:	4603      	mov	r3, r0
 80167de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80167e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d106      	bne.n	80167f4 <find_volume+0x224>
 80167e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167e8:	3338      	adds	r3, #56	; 0x38
 80167ea:	3324      	adds	r3, #36	; 0x24
 80167ec:	4618      	mov	r0, r3
 80167ee:	f7fe fbd5 	bl	8014f9c <ld_dword>
 80167f2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80167f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80167f8:	621a      	str	r2, [r3, #32]
 80167fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167fc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8016800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016802:	709a      	strb	r2, [r3, #2]
 8016804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016806:	789b      	ldrb	r3, [r3, #2]
 8016808:	2b01      	cmp	r3, #1
 801680a:	d005      	beq.n	8016818 <find_volume+0x248>
 801680c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801680e:	789b      	ldrb	r3, [r3, #2]
 8016810:	2b02      	cmp	r3, #2
 8016812:	d001      	beq.n	8016818 <find_volume+0x248>
 8016814:	230d      	movs	r3, #13
 8016816:	e159      	b.n	8016acc <find_volume+0x4fc>
 8016818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801681a:	789b      	ldrb	r3, [r3, #2]
 801681c:	461a      	mov	r2, r3
 801681e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016820:	fb02 f303 	mul.w	r3, r2, r3
 8016824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016828:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801682c:	b29a      	uxth	r2, r3
 801682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016830:	815a      	strh	r2, [r3, #10]
 8016832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016834:	895b      	ldrh	r3, [r3, #10]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d008      	beq.n	801684c <find_volume+0x27c>
 801683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801683c:	895b      	ldrh	r3, [r3, #10]
 801683e:	461a      	mov	r2, r3
 8016840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016842:	895b      	ldrh	r3, [r3, #10]
 8016844:	3b01      	subs	r3, #1
 8016846:	4013      	ands	r3, r2
 8016848:	2b00      	cmp	r3, #0
 801684a:	d001      	beq.n	8016850 <find_volume+0x280>
 801684c:	230d      	movs	r3, #13
 801684e:	e13d      	b.n	8016acc <find_volume+0x4fc>
 8016850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016852:	3338      	adds	r3, #56	; 0x38
 8016854:	3311      	adds	r3, #17
 8016856:	4618      	mov	r0, r3
 8016858:	f7fe fb88 	bl	8014f6c <ld_word>
 801685c:	4603      	mov	r3, r0
 801685e:	461a      	mov	r2, r3
 8016860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016862:	811a      	strh	r2, [r3, #8]
 8016864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016866:	891b      	ldrh	r3, [r3, #8]
 8016868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801686a:	8992      	ldrh	r2, [r2, #12]
 801686c:	0952      	lsrs	r2, r2, #5
 801686e:	b292      	uxth	r2, r2
 8016870:	fbb3 f1f2 	udiv	r1, r3, r2
 8016874:	fb01 f202 	mul.w	r2, r1, r2
 8016878:	1a9b      	subs	r3, r3, r2
 801687a:	b29b      	uxth	r3, r3
 801687c:	2b00      	cmp	r3, #0
 801687e:	d003      	beq.n	8016888 <find_volume+0x2b8>
 8016880:	230d      	movs	r3, #13
 8016882:	e123      	b.n	8016acc <find_volume+0x4fc>
 8016884:	20004534 	.word	0x20004534
 8016888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801688a:	3338      	adds	r3, #56	; 0x38
 801688c:	3313      	adds	r3, #19
 801688e:	4618      	mov	r0, r3
 8016890:	f7fe fb6c 	bl	8014f6c <ld_word>
 8016894:	4603      	mov	r3, r0
 8016896:	64bb      	str	r3, [r7, #72]	; 0x48
 8016898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801689a:	2b00      	cmp	r3, #0
 801689c:	d106      	bne.n	80168ac <find_volume+0x2dc>
 801689e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168a0:	3338      	adds	r3, #56	; 0x38
 80168a2:	3320      	adds	r3, #32
 80168a4:	4618      	mov	r0, r3
 80168a6:	f7fe fb79 	bl	8014f9c <ld_dword>
 80168aa:	64b8      	str	r0, [r7, #72]	; 0x48
 80168ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168ae:	3338      	adds	r3, #56	; 0x38
 80168b0:	330e      	adds	r3, #14
 80168b2:	4618      	mov	r0, r3
 80168b4:	f7fe fb5a 	bl	8014f6c <ld_word>
 80168b8:	4603      	mov	r3, r0
 80168ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80168bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d101      	bne.n	80168c6 <find_volume+0x2f6>
 80168c2:	230d      	movs	r3, #13
 80168c4:	e102      	b.n	8016acc <find_volume+0x4fc>
 80168c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80168c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80168ca:	4413      	add	r3, r2
 80168cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80168ce:	8911      	ldrh	r1, [r2, #8]
 80168d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80168d2:	8992      	ldrh	r2, [r2, #12]
 80168d4:	0952      	lsrs	r2, r2, #5
 80168d6:	b292      	uxth	r2, r2
 80168d8:	fbb1 f2f2 	udiv	r2, r1, r2
 80168dc:	b292      	uxth	r2, r2
 80168de:	4413      	add	r3, r2
 80168e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80168e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80168e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168e6:	429a      	cmp	r2, r3
 80168e8:	d201      	bcs.n	80168ee <find_volume+0x31e>
 80168ea:	230d      	movs	r3, #13
 80168ec:	e0ee      	b.n	8016acc <find_volume+0x4fc>
 80168ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80168f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168f2:	1ad3      	subs	r3, r2, r3
 80168f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80168f6:	8952      	ldrh	r2, [r2, #10]
 80168f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80168fc:	627b      	str	r3, [r7, #36]	; 0x24
 80168fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016900:	2b00      	cmp	r3, #0
 8016902:	d101      	bne.n	8016908 <find_volume+0x338>
 8016904:	230d      	movs	r3, #13
 8016906:	e0e1      	b.n	8016acc <find_volume+0x4fc>
 8016908:	2303      	movs	r3, #3
 801690a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016910:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016914:	4293      	cmp	r3, r2
 8016916:	d802      	bhi.n	801691e <find_volume+0x34e>
 8016918:	2302      	movs	r3, #2
 801691a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016920:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016924:	4293      	cmp	r3, r2
 8016926:	d802      	bhi.n	801692e <find_volume+0x35e>
 8016928:	2301      	movs	r3, #1
 801692a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016930:	1c9a      	adds	r2, r3, #2
 8016932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016934:	61da      	str	r2, [r3, #28]
 8016936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016938:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801693a:	625a      	str	r2, [r3, #36]	; 0x24
 801693c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801693e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016940:	441a      	add	r2, r3
 8016942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016944:	629a      	str	r2, [r3, #40]	; 0x28
 8016946:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801694a:	441a      	add	r2, r3
 801694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801694e:	631a      	str	r2, [r3, #48]	; 0x30
 8016950:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016954:	2b03      	cmp	r3, #3
 8016956:	d11e      	bne.n	8016996 <find_volume+0x3c6>
 8016958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801695a:	3338      	adds	r3, #56	; 0x38
 801695c:	332a      	adds	r3, #42	; 0x2a
 801695e:	4618      	mov	r0, r3
 8016960:	f7fe fb04 	bl	8014f6c <ld_word>
 8016964:	4603      	mov	r3, r0
 8016966:	2b00      	cmp	r3, #0
 8016968:	d001      	beq.n	801696e <find_volume+0x39e>
 801696a:	230d      	movs	r3, #13
 801696c:	e0ae      	b.n	8016acc <find_volume+0x4fc>
 801696e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016970:	891b      	ldrh	r3, [r3, #8]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d001      	beq.n	801697a <find_volume+0x3aa>
 8016976:	230d      	movs	r3, #13
 8016978:	e0a8      	b.n	8016acc <find_volume+0x4fc>
 801697a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801697c:	3338      	adds	r3, #56	; 0x38
 801697e:	332c      	adds	r3, #44	; 0x2c
 8016980:	4618      	mov	r0, r3
 8016982:	f7fe fb0b 	bl	8014f9c <ld_dword>
 8016986:	4602      	mov	r2, r0
 8016988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801698a:	62da      	str	r2, [r3, #44]	; 0x2c
 801698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801698e:	69db      	ldr	r3, [r3, #28]
 8016990:	009b      	lsls	r3, r3, #2
 8016992:	647b      	str	r3, [r7, #68]	; 0x44
 8016994:	e01f      	b.n	80169d6 <find_volume+0x406>
 8016996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016998:	891b      	ldrh	r3, [r3, #8]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d101      	bne.n	80169a2 <find_volume+0x3d2>
 801699e:	230d      	movs	r3, #13
 80169a0:	e094      	b.n	8016acc <find_volume+0x4fc>
 80169a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80169a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169a8:	441a      	add	r2, r3
 80169aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80169ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80169b2:	2b02      	cmp	r3, #2
 80169b4:	d103      	bne.n	80169be <find_volume+0x3ee>
 80169b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169b8:	69db      	ldr	r3, [r3, #28]
 80169ba:	005b      	lsls	r3, r3, #1
 80169bc:	e00a      	b.n	80169d4 <find_volume+0x404>
 80169be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169c0:	69da      	ldr	r2, [r3, #28]
 80169c2:	4613      	mov	r3, r2
 80169c4:	005b      	lsls	r3, r3, #1
 80169c6:	4413      	add	r3, r2
 80169c8:	085a      	lsrs	r2, r3, #1
 80169ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169cc:	69db      	ldr	r3, [r3, #28]
 80169ce:	f003 0301 	and.w	r3, r3, #1
 80169d2:	4413      	add	r3, r2
 80169d4:	647b      	str	r3, [r7, #68]	; 0x44
 80169d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169d8:	6a1a      	ldr	r2, [r3, #32]
 80169da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169dc:	899b      	ldrh	r3, [r3, #12]
 80169de:	4619      	mov	r1, r3
 80169e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169e2:	440b      	add	r3, r1
 80169e4:	3b01      	subs	r3, #1
 80169e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80169e8:	8989      	ldrh	r1, [r1, #12]
 80169ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80169ee:	429a      	cmp	r2, r3
 80169f0:	d201      	bcs.n	80169f6 <find_volume+0x426>
 80169f2:	230d      	movs	r3, #13
 80169f4:	e06a      	b.n	8016acc <find_volume+0x4fc>
 80169f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169f8:	f04f 32ff 	mov.w	r2, #4294967295
 80169fc:	619a      	str	r2, [r3, #24]
 80169fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a00:	699a      	ldr	r2, [r3, #24]
 8016a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a04:	615a      	str	r2, [r3, #20]
 8016a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a08:	2280      	movs	r2, #128	; 0x80
 8016a0a:	711a      	strb	r2, [r3, #4]
 8016a0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016a10:	2b03      	cmp	r3, #3
 8016a12:	d149      	bne.n	8016aa8 <find_volume+0x4d8>
 8016a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a16:	3338      	adds	r3, #56	; 0x38
 8016a18:	3330      	adds	r3, #48	; 0x30
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f7fe faa6 	bl	8014f6c <ld_word>
 8016a20:	4603      	mov	r3, r0
 8016a22:	2b01      	cmp	r3, #1
 8016a24:	d140      	bne.n	8016aa8 <find_volume+0x4d8>
 8016a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a28:	3301      	adds	r3, #1
 8016a2a:	4619      	mov	r1, r3
 8016a2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016a2e:	f7fe fd7f 	bl	8015530 <move_window>
 8016a32:	4603      	mov	r3, r0
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d137      	bne.n	8016aa8 <find_volume+0x4d8>
 8016a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	711a      	strb	r2, [r3, #4]
 8016a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a40:	3338      	adds	r3, #56	; 0x38
 8016a42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016a46:	4618      	mov	r0, r3
 8016a48:	f7fe fa90 	bl	8014f6c <ld_word>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	461a      	mov	r2, r3
 8016a50:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016a54:	429a      	cmp	r2, r3
 8016a56:	d127      	bne.n	8016aa8 <find_volume+0x4d8>
 8016a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a5a:	3338      	adds	r3, #56	; 0x38
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	f7fe fa9d 	bl	8014f9c <ld_dword>
 8016a62:	4603      	mov	r3, r0
 8016a64:	4a1b      	ldr	r2, [pc, #108]	; (8016ad4 <find_volume+0x504>)
 8016a66:	4293      	cmp	r3, r2
 8016a68:	d11e      	bne.n	8016aa8 <find_volume+0x4d8>
 8016a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a6c:	3338      	adds	r3, #56	; 0x38
 8016a6e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016a72:	4618      	mov	r0, r3
 8016a74:	f7fe fa92 	bl	8014f9c <ld_dword>
 8016a78:	4603      	mov	r3, r0
 8016a7a:	4a17      	ldr	r2, [pc, #92]	; (8016ad8 <find_volume+0x508>)
 8016a7c:	4293      	cmp	r3, r2
 8016a7e:	d113      	bne.n	8016aa8 <find_volume+0x4d8>
 8016a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a82:	3338      	adds	r3, #56	; 0x38
 8016a84:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8016a88:	4618      	mov	r0, r3
 8016a8a:	f7fe fa87 	bl	8014f9c <ld_dword>
 8016a8e:	4602      	mov	r2, r0
 8016a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a92:	619a      	str	r2, [r3, #24]
 8016a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a96:	3338      	adds	r3, #56	; 0x38
 8016a98:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	f7fe fa7d 	bl	8014f9c <ld_dword>
 8016aa2:	4602      	mov	r2, r0
 8016aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016aa6:	615a      	str	r2, [r3, #20]
 8016aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016aaa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016aae:	701a      	strb	r2, [r3, #0]
 8016ab0:	4b0a      	ldr	r3, [pc, #40]	; (8016adc <find_volume+0x50c>)
 8016ab2:	881b      	ldrh	r3, [r3, #0]
 8016ab4:	3301      	adds	r3, #1
 8016ab6:	b29a      	uxth	r2, r3
 8016ab8:	4b08      	ldr	r3, [pc, #32]	; (8016adc <find_volume+0x50c>)
 8016aba:	801a      	strh	r2, [r3, #0]
 8016abc:	4b07      	ldr	r3, [pc, #28]	; (8016adc <find_volume+0x50c>)
 8016abe:	881a      	ldrh	r2, [r3, #0]
 8016ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ac2:	80da      	strh	r2, [r3, #6]
 8016ac4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016ac6:	f7fe fccb 	bl	8015460 <clear_lock>
 8016aca:	2300      	movs	r3, #0
 8016acc:	4618      	mov	r0, r3
 8016ace:	3758      	adds	r7, #88	; 0x58
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	bd80      	pop	{r7, pc}
 8016ad4:	41615252 	.word	0x41615252
 8016ad8:	61417272 	.word	0x61417272
 8016adc:	20004538 	.word	0x20004538

08016ae0 <validate>:
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b084      	sub	sp, #16
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
 8016ae8:	6039      	str	r1, [r7, #0]
 8016aea:	2309      	movs	r3, #9
 8016aec:	73fb      	strb	r3, [r7, #15]
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d02e      	beq.n	8016b52 <validate+0x72>
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d02a      	beq.n	8016b52 <validate+0x72>
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	781b      	ldrb	r3, [r3, #0]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d025      	beq.n	8016b52 <validate+0x72>
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	889a      	ldrh	r2, [r3, #4]
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	88db      	ldrh	r3, [r3, #6]
 8016b10:	429a      	cmp	r2, r3
 8016b12:	d11e      	bne.n	8016b52 <validate+0x72>
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	4618      	mov	r0, r3
 8016b1a:	f7fe fb27 	bl	801516c <lock_fs>
 8016b1e:	4603      	mov	r3, r0
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d014      	beq.n	8016b4e <validate+0x6e>
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	785b      	ldrb	r3, [r3, #1]
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	f7fe f980 	bl	8014e30 <disk_status>
 8016b30:	4603      	mov	r3, r0
 8016b32:	f003 0301 	and.w	r3, r3, #1
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d102      	bne.n	8016b40 <validate+0x60>
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	73fb      	strb	r3, [r7, #15]
 8016b3e:	e008      	b.n	8016b52 <validate+0x72>
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	2100      	movs	r1, #0
 8016b46:	4618      	mov	r0, r3
 8016b48:	f7fe fb26 	bl	8015198 <unlock_fs>
 8016b4c:	e001      	b.n	8016b52 <validate+0x72>
 8016b4e:	230f      	movs	r3, #15
 8016b50:	73fb      	strb	r3, [r7, #15]
 8016b52:	7bfb      	ldrb	r3, [r7, #15]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d102      	bne.n	8016b5e <validate+0x7e>
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	e000      	b.n	8016b60 <validate+0x80>
 8016b5e:	2300      	movs	r3, #0
 8016b60:	683a      	ldr	r2, [r7, #0]
 8016b62:	6013      	str	r3, [r2, #0]
 8016b64:	7bfb      	ldrb	r3, [r7, #15]
 8016b66:	4618      	mov	r0, r3
 8016b68:	3710      	adds	r7, #16
 8016b6a:	46bd      	mov	sp, r7
 8016b6c:	bd80      	pop	{r7, pc}
	...

08016b70 <f_mount>:
 8016b70:	b580      	push	{r7, lr}
 8016b72:	b088      	sub	sp, #32
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	60f8      	str	r0, [r7, #12]
 8016b78:	60b9      	str	r1, [r7, #8]
 8016b7a:	4613      	mov	r3, r2
 8016b7c:	71fb      	strb	r3, [r7, #7]
 8016b7e:	68bb      	ldr	r3, [r7, #8]
 8016b80:	613b      	str	r3, [r7, #16]
 8016b82:	f107 0310 	add.w	r3, r7, #16
 8016b86:	4618      	mov	r0, r3
 8016b88:	f7ff fc88 	bl	801649c <get_ldnumber>
 8016b8c:	61f8      	str	r0, [r7, #28]
 8016b8e:	69fb      	ldr	r3, [r7, #28]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	da01      	bge.n	8016b98 <f_mount+0x28>
 8016b94:	230b      	movs	r3, #11
 8016b96:	e048      	b.n	8016c2a <f_mount+0xba>
 8016b98:	4a26      	ldr	r2, [pc, #152]	; (8016c34 <f_mount+0xc4>)
 8016b9a:	69fb      	ldr	r3, [r7, #28]
 8016b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016ba0:	61bb      	str	r3, [r7, #24]
 8016ba2:	69bb      	ldr	r3, [r7, #24]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d00f      	beq.n	8016bc8 <f_mount+0x58>
 8016ba8:	69b8      	ldr	r0, [r7, #24]
 8016baa:	f7fe fc59 	bl	8015460 <clear_lock>
 8016bae:	69bb      	ldr	r3, [r7, #24]
 8016bb0:	691b      	ldr	r3, [r3, #16]
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	f001 fa1d 	bl	8017ff2 <ff_del_syncobj>
 8016bb8:	4603      	mov	r3, r0
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d101      	bne.n	8016bc2 <f_mount+0x52>
 8016bbe:	2302      	movs	r3, #2
 8016bc0:	e033      	b.n	8016c2a <f_mount+0xba>
 8016bc2:	69bb      	ldr	r3, [r7, #24]
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	701a      	strb	r2, [r3, #0]
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d00f      	beq.n	8016bee <f_mount+0x7e>
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	701a      	strb	r2, [r3, #0]
 8016bd4:	69fb      	ldr	r3, [r7, #28]
 8016bd6:	b2da      	uxtb	r2, r3
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	3310      	adds	r3, #16
 8016bdc:	4619      	mov	r1, r3
 8016bde:	4610      	mov	r0, r2
 8016be0:	f001 f9e7 	bl	8017fb2 <ff_cre_syncobj>
 8016be4:	4603      	mov	r3, r0
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d101      	bne.n	8016bee <f_mount+0x7e>
 8016bea:	2302      	movs	r3, #2
 8016bec:	e01d      	b.n	8016c2a <f_mount+0xba>
 8016bee:	68fa      	ldr	r2, [r7, #12]
 8016bf0:	4910      	ldr	r1, [pc, #64]	; (8016c34 <f_mount+0xc4>)
 8016bf2:	69fb      	ldr	r3, [r7, #28]
 8016bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d002      	beq.n	8016c04 <f_mount+0x94>
 8016bfe:	79fb      	ldrb	r3, [r7, #7]
 8016c00:	2b01      	cmp	r3, #1
 8016c02:	d001      	beq.n	8016c08 <f_mount+0x98>
 8016c04:	2300      	movs	r3, #0
 8016c06:	e010      	b.n	8016c2a <f_mount+0xba>
 8016c08:	f107 010c 	add.w	r1, r7, #12
 8016c0c:	f107 0308 	add.w	r3, r7, #8
 8016c10:	2200      	movs	r2, #0
 8016c12:	4618      	mov	r0, r3
 8016c14:	f7ff fcdc 	bl	80165d0 <find_volume>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	75fb      	strb	r3, [r7, #23]
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	7dfa      	ldrb	r2, [r7, #23]
 8016c20:	4611      	mov	r1, r2
 8016c22:	4618      	mov	r0, r3
 8016c24:	f7fe fab8 	bl	8015198 <unlock_fs>
 8016c28:	7dfb      	ldrb	r3, [r7, #23]
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	3720      	adds	r7, #32
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	bd80      	pop	{r7, pc}
 8016c32:	bf00      	nop
 8016c34:	20004534 	.word	0x20004534

08016c38 <f_open>:
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b098      	sub	sp, #96	; 0x60
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	60f8      	str	r0, [r7, #12]
 8016c40:	60b9      	str	r1, [r7, #8]
 8016c42:	4613      	mov	r3, r2
 8016c44:	71fb      	strb	r3, [r7, #7]
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d101      	bne.n	8016c50 <f_open+0x18>
 8016c4c:	2309      	movs	r3, #9
 8016c4e:	e1c2      	b.n	8016fd6 <f_open+0x39e>
 8016c50:	79fb      	ldrb	r3, [r7, #7]
 8016c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016c56:	71fb      	strb	r3, [r7, #7]
 8016c58:	79fa      	ldrb	r2, [r7, #7]
 8016c5a:	f107 0110 	add.w	r1, r7, #16
 8016c5e:	f107 0308 	add.w	r3, r7, #8
 8016c62:	4618      	mov	r0, r3
 8016c64:	f7ff fcb4 	bl	80165d0 <find_volume>
 8016c68:	4603      	mov	r3, r0
 8016c6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016c6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	f040 819f 	bne.w	8016fb6 <f_open+0x37e>
 8016c78:	693b      	ldr	r3, [r7, #16]
 8016c7a:	617b      	str	r3, [r7, #20]
 8016c7c:	68ba      	ldr	r2, [r7, #8]
 8016c7e:	f107 0314 	add.w	r3, r7, #20
 8016c82:	4611      	mov	r1, r2
 8016c84:	4618      	mov	r0, r3
 8016c86:	f7ff fb93 	bl	80163b0 <follow_path>
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016c90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d11a      	bne.n	8016cce <f_open+0x96>
 8016c98:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016c9c:	b25b      	sxtb	r3, r3
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	da03      	bge.n	8016caa <f_open+0x72>
 8016ca2:	2306      	movs	r3, #6
 8016ca4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016ca8:	e011      	b.n	8016cce <f_open+0x96>
 8016caa:	79fb      	ldrb	r3, [r7, #7]
 8016cac:	f023 0301 	bic.w	r3, r3, #1
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	bf14      	ite	ne
 8016cb4:	2301      	movne	r3, #1
 8016cb6:	2300      	moveq	r3, #0
 8016cb8:	b2db      	uxtb	r3, r3
 8016cba:	461a      	mov	r2, r3
 8016cbc:	f107 0314 	add.w	r3, r7, #20
 8016cc0:	4611      	mov	r1, r2
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f7fe fa84 	bl	80151d0 <chk_lock>
 8016cc8:	4603      	mov	r3, r0
 8016cca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016cce:	79fb      	ldrb	r3, [r7, #7]
 8016cd0:	f003 031c 	and.w	r3, r3, #28
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d07f      	beq.n	8016dd8 <f_open+0x1a0>
 8016cd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d017      	beq.n	8016d10 <f_open+0xd8>
 8016ce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016ce4:	2b04      	cmp	r3, #4
 8016ce6:	d10e      	bne.n	8016d06 <f_open+0xce>
 8016ce8:	f7fe face 	bl	8015288 <enq_lock>
 8016cec:	4603      	mov	r3, r0
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d006      	beq.n	8016d00 <f_open+0xc8>
 8016cf2:	f107 0314 	add.w	r3, r7, #20
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	f7ff fa34 	bl	8016164 <dir_register>
 8016cfc:	4603      	mov	r3, r0
 8016cfe:	e000      	b.n	8016d02 <f_open+0xca>
 8016d00:	2312      	movs	r3, #18
 8016d02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016d06:	79fb      	ldrb	r3, [r7, #7]
 8016d08:	f043 0308 	orr.w	r3, r3, #8
 8016d0c:	71fb      	strb	r3, [r7, #7]
 8016d0e:	e010      	b.n	8016d32 <f_open+0xfa>
 8016d10:	7ebb      	ldrb	r3, [r7, #26]
 8016d12:	f003 0311 	and.w	r3, r3, #17
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d003      	beq.n	8016d22 <f_open+0xea>
 8016d1a:	2307      	movs	r3, #7
 8016d1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016d20:	e007      	b.n	8016d32 <f_open+0xfa>
 8016d22:	79fb      	ldrb	r3, [r7, #7]
 8016d24:	f003 0304 	and.w	r3, r3, #4
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d002      	beq.n	8016d32 <f_open+0xfa>
 8016d2c:	2308      	movs	r3, #8
 8016d2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016d32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d168      	bne.n	8016e0c <f_open+0x1d4>
 8016d3a:	79fb      	ldrb	r3, [r7, #7]
 8016d3c:	f003 0308 	and.w	r3, r3, #8
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d063      	beq.n	8016e0c <f_open+0x1d4>
 8016d44:	f7fc f84e 	bl	8012de4 <get_fattime>
 8016d48:	6538      	str	r0, [r7, #80]	; 0x50
 8016d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d4c:	330e      	adds	r3, #14
 8016d4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016d50:	4618      	mov	r0, r3
 8016d52:	f7fe f961 	bl	8015018 <st_dword>
 8016d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d58:	3316      	adds	r3, #22
 8016d5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	f7fe f95b 	bl	8015018 <st_dword>
 8016d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d64:	330b      	adds	r3, #11
 8016d66:	2220      	movs	r2, #32
 8016d68:	701a      	strb	r2, [r3, #0]
 8016d6a:	693b      	ldr	r3, [r7, #16]
 8016d6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016d6e:	4611      	mov	r1, r2
 8016d70:	4618      	mov	r0, r3
 8016d72:	f7ff f963 	bl	801603c <ld_clust>
 8016d76:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016d78:	693b      	ldr	r3, [r7, #16]
 8016d7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016d7c:	2200      	movs	r2, #0
 8016d7e:	4618      	mov	r0, r3
 8016d80:	f7ff f97b 	bl	801607a <st_clust>
 8016d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d86:	331c      	adds	r3, #28
 8016d88:	2100      	movs	r1, #0
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	f7fe f944 	bl	8015018 <st_dword>
 8016d90:	693b      	ldr	r3, [r7, #16]
 8016d92:	2201      	movs	r2, #1
 8016d94:	70da      	strb	r2, [r3, #3]
 8016d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d037      	beq.n	8016e0c <f_open+0x1d4>
 8016d9c:	693b      	ldr	r3, [r7, #16]
 8016d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016da0:	653b      	str	r3, [r7, #80]	; 0x50
 8016da2:	f107 0314 	add.w	r3, r7, #20
 8016da6:	2200      	movs	r2, #0
 8016da8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016daa:	4618      	mov	r0, r3
 8016dac:	f7fe fe6b 	bl	8015a86 <remove_chain>
 8016db0:	4603      	mov	r3, r0
 8016db2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016db6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d126      	bne.n	8016e0c <f_open+0x1d4>
 8016dbe:	693b      	ldr	r3, [r7, #16]
 8016dc0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	f7fe fbb4 	bl	8015530 <move_window>
 8016dc8:	4603      	mov	r3, r0
 8016dca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016dce:	693b      	ldr	r3, [r7, #16]
 8016dd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016dd2:	3a01      	subs	r2, #1
 8016dd4:	615a      	str	r2, [r3, #20]
 8016dd6:	e019      	b.n	8016e0c <f_open+0x1d4>
 8016dd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d115      	bne.n	8016e0c <f_open+0x1d4>
 8016de0:	7ebb      	ldrb	r3, [r7, #26]
 8016de2:	f003 0310 	and.w	r3, r3, #16
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d003      	beq.n	8016df2 <f_open+0x1ba>
 8016dea:	2304      	movs	r3, #4
 8016dec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016df0:	e00c      	b.n	8016e0c <f_open+0x1d4>
 8016df2:	79fb      	ldrb	r3, [r7, #7]
 8016df4:	f003 0302 	and.w	r3, r3, #2
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d007      	beq.n	8016e0c <f_open+0x1d4>
 8016dfc:	7ebb      	ldrb	r3, [r7, #26]
 8016dfe:	f003 0301 	and.w	r3, r3, #1
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d002      	beq.n	8016e0c <f_open+0x1d4>
 8016e06:	2307      	movs	r3, #7
 8016e08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016e0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d128      	bne.n	8016e66 <f_open+0x22e>
 8016e14:	79fb      	ldrb	r3, [r7, #7]
 8016e16:	f003 0308 	and.w	r3, r3, #8
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d003      	beq.n	8016e26 <f_open+0x1ee>
 8016e1e:	79fb      	ldrb	r3, [r7, #7]
 8016e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e24:	71fb      	strb	r3, [r7, #7]
 8016e26:	693b      	ldr	r3, [r7, #16]
 8016e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	625a      	str	r2, [r3, #36]	; 0x24
 8016e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	629a      	str	r2, [r3, #40]	; 0x28
 8016e34:	79fb      	ldrb	r3, [r7, #7]
 8016e36:	f023 0301 	bic.w	r3, r3, #1
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	bf14      	ite	ne
 8016e3e:	2301      	movne	r3, #1
 8016e40:	2300      	moveq	r3, #0
 8016e42:	b2db      	uxtb	r3, r3
 8016e44:	461a      	mov	r2, r3
 8016e46:	f107 0314 	add.w	r3, r7, #20
 8016e4a:	4611      	mov	r1, r2
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	f7fe fa3d 	bl	80152cc <inc_lock>
 8016e52:	4602      	mov	r2, r0
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	611a      	str	r2, [r3, #16]
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	691b      	ldr	r3, [r3, #16]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d102      	bne.n	8016e66 <f_open+0x22e>
 8016e60:	2302      	movs	r3, #2
 8016e62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	f040 80a3 	bne.w	8016fb6 <f_open+0x37e>
 8016e70:	693b      	ldr	r3, [r7, #16]
 8016e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016e74:	4611      	mov	r1, r2
 8016e76:	4618      	mov	r0, r3
 8016e78:	f7ff f8e0 	bl	801603c <ld_clust>
 8016e7c:	4602      	mov	r2, r0
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	609a      	str	r2, [r3, #8]
 8016e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e84:	331c      	adds	r3, #28
 8016e86:	4618      	mov	r0, r3
 8016e88:	f7fe f888 	bl	8014f9c <ld_dword>
 8016e8c:	4602      	mov	r2, r0
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	60da      	str	r2, [r3, #12]
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	2200      	movs	r2, #0
 8016e96:	62da      	str	r2, [r3, #44]	; 0x2c
 8016e98:	693a      	ldr	r2, [r7, #16]
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	601a      	str	r2, [r3, #0]
 8016e9e:	693b      	ldr	r3, [r7, #16]
 8016ea0:	88da      	ldrh	r2, [r3, #6]
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	809a      	strh	r2, [r3, #4]
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	79fa      	ldrb	r2, [r7, #7]
 8016eaa:	751a      	strb	r2, [r3, #20]
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	2200      	movs	r2, #0
 8016eb0:	755a      	strb	r2, [r3, #21]
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	621a      	str	r2, [r3, #32]
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	2200      	movs	r2, #0
 8016ebc:	619a      	str	r2, [r3, #24]
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	3330      	adds	r3, #48	; 0x30
 8016ec2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016ec6:	2100      	movs	r1, #0
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f7fe f8f2 	bl	80150b2 <mem_set>
 8016ece:	79fb      	ldrb	r3, [r7, #7]
 8016ed0:	f003 0320 	and.w	r3, r3, #32
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d06e      	beq.n	8016fb6 <f_open+0x37e>
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	68db      	ldr	r3, [r3, #12]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d06a      	beq.n	8016fb6 <f_open+0x37e>
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	68da      	ldr	r2, [r3, #12]
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	619a      	str	r2, [r3, #24]
 8016ee8:	693b      	ldr	r3, [r7, #16]
 8016eea:	895b      	ldrh	r3, [r3, #10]
 8016eec:	461a      	mov	r2, r3
 8016eee:	693b      	ldr	r3, [r7, #16]
 8016ef0:	899b      	ldrh	r3, [r3, #12]
 8016ef2:	fb02 f303 	mul.w	r3, r2, r3
 8016ef6:	64bb      	str	r3, [r7, #72]	; 0x48
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	689b      	ldr	r3, [r3, #8]
 8016efc:	65bb      	str	r3, [r7, #88]	; 0x58
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	68db      	ldr	r3, [r3, #12]
 8016f02:	657b      	str	r3, [r7, #84]	; 0x54
 8016f04:	e016      	b.n	8016f34 <f_open+0x2fc>
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	f7fe fbcd 	bl	80156aa <get_fat>
 8016f10:	65b8      	str	r0, [r7, #88]	; 0x58
 8016f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f14:	2b01      	cmp	r3, #1
 8016f16:	d802      	bhi.n	8016f1e <f_open+0x2e6>
 8016f18:	2302      	movs	r3, #2
 8016f1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f24:	d102      	bne.n	8016f2c <f_open+0x2f4>
 8016f26:	2301      	movs	r3, #1
 8016f28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016f2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f30:	1ad3      	subs	r3, r2, r3
 8016f32:	657b      	str	r3, [r7, #84]	; 0x54
 8016f34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d103      	bne.n	8016f44 <f_open+0x30c>
 8016f3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f40:	429a      	cmp	r2, r3
 8016f42:	d8e0      	bhi.n	8016f06 <f_open+0x2ce>
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016f48:	61da      	str	r2, [r3, #28]
 8016f4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d131      	bne.n	8016fb6 <f_open+0x37e>
 8016f52:	693b      	ldr	r3, [r7, #16]
 8016f54:	899b      	ldrh	r3, [r3, #12]
 8016f56:	461a      	mov	r2, r3
 8016f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016f5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8016f5e:	fb01 f202 	mul.w	r2, r1, r2
 8016f62:	1a9b      	subs	r3, r3, r2
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d026      	beq.n	8016fb6 <f_open+0x37e>
 8016f68:	693b      	ldr	r3, [r7, #16]
 8016f6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	f7fe fb7d 	bl	801566c <clust2sect>
 8016f72:	6478      	str	r0, [r7, #68]	; 0x44
 8016f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d103      	bne.n	8016f82 <f_open+0x34a>
 8016f7a:	2302      	movs	r3, #2
 8016f7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016f80:	e019      	b.n	8016fb6 <f_open+0x37e>
 8016f82:	693b      	ldr	r3, [r7, #16]
 8016f84:	899b      	ldrh	r3, [r3, #12]
 8016f86:	461a      	mov	r2, r3
 8016f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016f8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8016f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f90:	441a      	add	r2, r3
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	621a      	str	r2, [r3, #32]
 8016f96:	693b      	ldr	r3, [r7, #16]
 8016f98:	7858      	ldrb	r0, [r3, #1]
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	6a1a      	ldr	r2, [r3, #32]
 8016fa4:	2301      	movs	r3, #1
 8016fa6:	f7fd ff83 	bl	8014eb0 <disk_read>
 8016faa:	4603      	mov	r3, r0
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d002      	beq.n	8016fb6 <f_open+0x37e>
 8016fb0:	2301      	movs	r3, #1
 8016fb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016fb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d002      	beq.n	8016fc4 <f_open+0x38c>
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	601a      	str	r2, [r3, #0]
 8016fc4:	693b      	ldr	r3, [r7, #16]
 8016fc6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8016fca:	4611      	mov	r1, r2
 8016fcc:	4618      	mov	r0, r3
 8016fce:	f7fe f8e3 	bl	8015198 <unlock_fs>
 8016fd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	3760      	adds	r7, #96	; 0x60
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	bd80      	pop	{r7, pc}

08016fde <f_read>:
 8016fde:	b580      	push	{r7, lr}
 8016fe0:	b08e      	sub	sp, #56	; 0x38
 8016fe2:	af00      	add	r7, sp, #0
 8016fe4:	60f8      	str	r0, [r7, #12]
 8016fe6:	60b9      	str	r1, [r7, #8]
 8016fe8:	607a      	str	r2, [r7, #4]
 8016fea:	603b      	str	r3, [r7, #0]
 8016fec:	68bb      	ldr	r3, [r7, #8]
 8016fee:	627b      	str	r3, [r7, #36]	; 0x24
 8016ff0:	683b      	ldr	r3, [r7, #0]
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	601a      	str	r2, [r3, #0]
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	f107 0214 	add.w	r2, r7, #20
 8016ffc:	4611      	mov	r1, r2
 8016ffe:	4618      	mov	r0, r3
 8017000:	f7ff fd6e 	bl	8016ae0 <validate>
 8017004:	4603      	mov	r3, r0
 8017006:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801700a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801700e:	2b00      	cmp	r3, #0
 8017010:	d107      	bne.n	8017022 <f_read+0x44>
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	7d5b      	ldrb	r3, [r3, #21]
 8017016:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801701a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801701e:	2b00      	cmp	r3, #0
 8017020:	d009      	beq.n	8017036 <f_read+0x58>
 8017022:	697b      	ldr	r3, [r7, #20]
 8017024:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8017028:	4611      	mov	r1, r2
 801702a:	4618      	mov	r0, r3
 801702c:	f7fe f8b4 	bl	8015198 <unlock_fs>
 8017030:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017034:	e15d      	b.n	80172f2 <f_read+0x314>
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	7d1b      	ldrb	r3, [r3, #20]
 801703a:	f003 0301 	and.w	r3, r3, #1
 801703e:	2b00      	cmp	r3, #0
 8017040:	d106      	bne.n	8017050 <f_read+0x72>
 8017042:	697b      	ldr	r3, [r7, #20]
 8017044:	2107      	movs	r1, #7
 8017046:	4618      	mov	r0, r3
 8017048:	f7fe f8a6 	bl	8015198 <unlock_fs>
 801704c:	2307      	movs	r3, #7
 801704e:	e150      	b.n	80172f2 <f_read+0x314>
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	68da      	ldr	r2, [r3, #12]
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	699b      	ldr	r3, [r3, #24]
 8017058:	1ad3      	subs	r3, r2, r3
 801705a:	623b      	str	r3, [r7, #32]
 801705c:	687a      	ldr	r2, [r7, #4]
 801705e:	6a3b      	ldr	r3, [r7, #32]
 8017060:	429a      	cmp	r2, r3
 8017062:	f240 813c 	bls.w	80172de <f_read+0x300>
 8017066:	6a3b      	ldr	r3, [r7, #32]
 8017068:	607b      	str	r3, [r7, #4]
 801706a:	e138      	b.n	80172de <f_read+0x300>
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	699b      	ldr	r3, [r3, #24]
 8017070:	697a      	ldr	r2, [r7, #20]
 8017072:	8992      	ldrh	r2, [r2, #12]
 8017074:	fbb3 f1f2 	udiv	r1, r3, r2
 8017078:	fb01 f202 	mul.w	r2, r1, r2
 801707c:	1a9b      	subs	r3, r3, r2
 801707e:	2b00      	cmp	r3, #0
 8017080:	f040 80f3 	bne.w	801726a <f_read+0x28c>
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	699b      	ldr	r3, [r3, #24]
 8017088:	697a      	ldr	r2, [r7, #20]
 801708a:	8992      	ldrh	r2, [r2, #12]
 801708c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017090:	697a      	ldr	r2, [r7, #20]
 8017092:	8952      	ldrh	r2, [r2, #10]
 8017094:	3a01      	subs	r2, #1
 8017096:	4013      	ands	r3, r2
 8017098:	61fb      	str	r3, [r7, #28]
 801709a:	69fb      	ldr	r3, [r7, #28]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d139      	bne.n	8017114 <f_read+0x136>
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	699b      	ldr	r3, [r3, #24]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d103      	bne.n	80170b0 <f_read+0xd2>
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	689b      	ldr	r3, [r3, #8]
 80170ac:	633b      	str	r3, [r7, #48]	; 0x30
 80170ae:	e013      	b.n	80170d8 <f_read+0xfa>
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d007      	beq.n	80170c8 <f_read+0xea>
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	699b      	ldr	r3, [r3, #24]
 80170bc:	4619      	mov	r1, r3
 80170be:	68f8      	ldr	r0, [r7, #12]
 80170c0:	f7fe fdde 	bl	8015c80 <clmt_clust>
 80170c4:	6338      	str	r0, [r7, #48]	; 0x30
 80170c6:	e007      	b.n	80170d8 <f_read+0xfa>
 80170c8:	68fa      	ldr	r2, [r7, #12]
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	69db      	ldr	r3, [r3, #28]
 80170ce:	4619      	mov	r1, r3
 80170d0:	4610      	mov	r0, r2
 80170d2:	f7fe faea 	bl	80156aa <get_fat>
 80170d6:	6338      	str	r0, [r7, #48]	; 0x30
 80170d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170da:	2b01      	cmp	r3, #1
 80170dc:	d809      	bhi.n	80170f2 <f_read+0x114>
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	2202      	movs	r2, #2
 80170e2:	755a      	strb	r2, [r3, #21]
 80170e4:	697b      	ldr	r3, [r7, #20]
 80170e6:	2102      	movs	r1, #2
 80170e8:	4618      	mov	r0, r3
 80170ea:	f7fe f855 	bl	8015198 <unlock_fs>
 80170ee:	2302      	movs	r3, #2
 80170f0:	e0ff      	b.n	80172f2 <f_read+0x314>
 80170f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170f8:	d109      	bne.n	801710e <f_read+0x130>
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	2201      	movs	r2, #1
 80170fe:	755a      	strb	r2, [r3, #21]
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	2101      	movs	r1, #1
 8017104:	4618      	mov	r0, r3
 8017106:	f7fe f847 	bl	8015198 <unlock_fs>
 801710a:	2301      	movs	r3, #1
 801710c:	e0f1      	b.n	80172f2 <f_read+0x314>
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017112:	61da      	str	r2, [r3, #28]
 8017114:	697a      	ldr	r2, [r7, #20]
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	69db      	ldr	r3, [r3, #28]
 801711a:	4619      	mov	r1, r3
 801711c:	4610      	mov	r0, r2
 801711e:	f7fe faa5 	bl	801566c <clust2sect>
 8017122:	61b8      	str	r0, [r7, #24]
 8017124:	69bb      	ldr	r3, [r7, #24]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d109      	bne.n	801713e <f_read+0x160>
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	2202      	movs	r2, #2
 801712e:	755a      	strb	r2, [r3, #21]
 8017130:	697b      	ldr	r3, [r7, #20]
 8017132:	2102      	movs	r1, #2
 8017134:	4618      	mov	r0, r3
 8017136:	f7fe f82f 	bl	8015198 <unlock_fs>
 801713a:	2302      	movs	r3, #2
 801713c:	e0d9      	b.n	80172f2 <f_read+0x314>
 801713e:	69ba      	ldr	r2, [r7, #24]
 8017140:	69fb      	ldr	r3, [r7, #28]
 8017142:	4413      	add	r3, r2
 8017144:	61bb      	str	r3, [r7, #24]
 8017146:	697b      	ldr	r3, [r7, #20]
 8017148:	899b      	ldrh	r3, [r3, #12]
 801714a:	461a      	mov	r2, r3
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	fbb3 f3f2 	udiv	r3, r3, r2
 8017152:	62bb      	str	r3, [r7, #40]	; 0x28
 8017154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017156:	2b00      	cmp	r3, #0
 8017158:	d046      	beq.n	80171e8 <f_read+0x20a>
 801715a:	69fa      	ldr	r2, [r7, #28]
 801715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801715e:	4413      	add	r3, r2
 8017160:	697a      	ldr	r2, [r7, #20]
 8017162:	8952      	ldrh	r2, [r2, #10]
 8017164:	4293      	cmp	r3, r2
 8017166:	d905      	bls.n	8017174 <f_read+0x196>
 8017168:	697b      	ldr	r3, [r7, #20]
 801716a:	895b      	ldrh	r3, [r3, #10]
 801716c:	461a      	mov	r2, r3
 801716e:	69fb      	ldr	r3, [r7, #28]
 8017170:	1ad3      	subs	r3, r2, r3
 8017172:	62bb      	str	r3, [r7, #40]	; 0x28
 8017174:	697b      	ldr	r3, [r7, #20]
 8017176:	7858      	ldrb	r0, [r3, #1]
 8017178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801717a:	69ba      	ldr	r2, [r7, #24]
 801717c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801717e:	f7fd fe97 	bl	8014eb0 <disk_read>
 8017182:	4603      	mov	r3, r0
 8017184:	2b00      	cmp	r3, #0
 8017186:	d009      	beq.n	801719c <f_read+0x1be>
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	2201      	movs	r2, #1
 801718c:	755a      	strb	r2, [r3, #21]
 801718e:	697b      	ldr	r3, [r7, #20]
 8017190:	2101      	movs	r1, #1
 8017192:	4618      	mov	r0, r3
 8017194:	f7fe f800 	bl	8015198 <unlock_fs>
 8017198:	2301      	movs	r3, #1
 801719a:	e0aa      	b.n	80172f2 <f_read+0x314>
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	7d1b      	ldrb	r3, [r3, #20]
 80171a0:	b25b      	sxtb	r3, r3
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	da18      	bge.n	80171d8 <f_read+0x1fa>
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	6a1a      	ldr	r2, [r3, #32]
 80171aa:	69bb      	ldr	r3, [r7, #24]
 80171ac:	1ad3      	subs	r3, r2, r3
 80171ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80171b0:	429a      	cmp	r2, r3
 80171b2:	d911      	bls.n	80171d8 <f_read+0x1fa>
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	6a1a      	ldr	r2, [r3, #32]
 80171b8:	69bb      	ldr	r3, [r7, #24]
 80171ba:	1ad3      	subs	r3, r2, r3
 80171bc:	697a      	ldr	r2, [r7, #20]
 80171be:	8992      	ldrh	r2, [r2, #12]
 80171c0:	fb02 f303 	mul.w	r3, r2, r3
 80171c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171c6:	18d0      	adds	r0, r2, r3
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80171ce:	697b      	ldr	r3, [r7, #20]
 80171d0:	899b      	ldrh	r3, [r3, #12]
 80171d2:	461a      	mov	r2, r3
 80171d4:	f7fd ff4c 	bl	8015070 <mem_cpy>
 80171d8:	697b      	ldr	r3, [r7, #20]
 80171da:	899b      	ldrh	r3, [r3, #12]
 80171dc:	461a      	mov	r2, r3
 80171de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171e0:	fb02 f303 	mul.w	r3, r2, r3
 80171e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171e6:	e066      	b.n	80172b6 <f_read+0x2d8>
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	6a1b      	ldr	r3, [r3, #32]
 80171ec:	69ba      	ldr	r2, [r7, #24]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d038      	beq.n	8017264 <f_read+0x286>
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	7d1b      	ldrb	r3, [r3, #20]
 80171f6:	b25b      	sxtb	r3, r3
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	da1d      	bge.n	8017238 <f_read+0x25a>
 80171fc:	697b      	ldr	r3, [r7, #20]
 80171fe:	7858      	ldrb	r0, [r3, #1]
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	6a1a      	ldr	r2, [r3, #32]
 801720a:	2301      	movs	r3, #1
 801720c:	f7fd fe70 	bl	8014ef0 <disk_write>
 8017210:	4603      	mov	r3, r0
 8017212:	2b00      	cmp	r3, #0
 8017214:	d009      	beq.n	801722a <f_read+0x24c>
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	2201      	movs	r2, #1
 801721a:	755a      	strb	r2, [r3, #21]
 801721c:	697b      	ldr	r3, [r7, #20]
 801721e:	2101      	movs	r1, #1
 8017220:	4618      	mov	r0, r3
 8017222:	f7fd ffb9 	bl	8015198 <unlock_fs>
 8017226:	2301      	movs	r3, #1
 8017228:	e063      	b.n	80172f2 <f_read+0x314>
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	7d1b      	ldrb	r3, [r3, #20]
 801722e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017232:	b2da      	uxtb	r2, r3
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	751a      	strb	r2, [r3, #20]
 8017238:	697b      	ldr	r3, [r7, #20]
 801723a:	7858      	ldrb	r0, [r3, #1]
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017242:	2301      	movs	r3, #1
 8017244:	69ba      	ldr	r2, [r7, #24]
 8017246:	f7fd fe33 	bl	8014eb0 <disk_read>
 801724a:	4603      	mov	r3, r0
 801724c:	2b00      	cmp	r3, #0
 801724e:	d009      	beq.n	8017264 <f_read+0x286>
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	2201      	movs	r2, #1
 8017254:	755a      	strb	r2, [r3, #21]
 8017256:	697b      	ldr	r3, [r7, #20]
 8017258:	2101      	movs	r1, #1
 801725a:	4618      	mov	r0, r3
 801725c:	f7fd ff9c 	bl	8015198 <unlock_fs>
 8017260:	2301      	movs	r3, #1
 8017262:	e046      	b.n	80172f2 <f_read+0x314>
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	69ba      	ldr	r2, [r7, #24]
 8017268:	621a      	str	r2, [r3, #32]
 801726a:	697b      	ldr	r3, [r7, #20]
 801726c:	899b      	ldrh	r3, [r3, #12]
 801726e:	4618      	mov	r0, r3
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	699b      	ldr	r3, [r3, #24]
 8017274:	697a      	ldr	r2, [r7, #20]
 8017276:	8992      	ldrh	r2, [r2, #12]
 8017278:	fbb3 f1f2 	udiv	r1, r3, r2
 801727c:	fb01 f202 	mul.w	r2, r1, r2
 8017280:	1a9b      	subs	r3, r3, r2
 8017282:	1ac3      	subs	r3, r0, r3
 8017284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	429a      	cmp	r2, r3
 801728c:	d901      	bls.n	8017292 <f_read+0x2b4>
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	699b      	ldr	r3, [r3, #24]
 801729c:	697a      	ldr	r2, [r7, #20]
 801729e:	8992      	ldrh	r2, [r2, #12]
 80172a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80172a4:	fb00 f202 	mul.w	r2, r0, r2
 80172a8:	1a9b      	subs	r3, r3, r2
 80172aa:	440b      	add	r3, r1
 80172ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80172ae:	4619      	mov	r1, r3
 80172b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172b2:	f7fd fedd 	bl	8015070 <mem_cpy>
 80172b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ba:	4413      	add	r3, r2
 80172bc:	627b      	str	r3, [r7, #36]	; 0x24
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	699a      	ldr	r2, [r3, #24]
 80172c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172c4:	441a      	add	r2, r3
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	619a      	str	r2, [r3, #24]
 80172ca:	683b      	ldr	r3, [r7, #0]
 80172cc:	681a      	ldr	r2, [r3, #0]
 80172ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172d0:	441a      	add	r2, r3
 80172d2:	683b      	ldr	r3, [r7, #0]
 80172d4:	601a      	str	r2, [r3, #0]
 80172d6:	687a      	ldr	r2, [r7, #4]
 80172d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172da:	1ad3      	subs	r3, r2, r3
 80172dc:	607b      	str	r3, [r7, #4]
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	f47f aec3 	bne.w	801706c <f_read+0x8e>
 80172e6:	697b      	ldr	r3, [r7, #20]
 80172e8:	2100      	movs	r1, #0
 80172ea:	4618      	mov	r0, r3
 80172ec:	f7fd ff54 	bl	8015198 <unlock_fs>
 80172f0:	2300      	movs	r3, #0
 80172f2:	4618      	mov	r0, r3
 80172f4:	3738      	adds	r7, #56	; 0x38
 80172f6:	46bd      	mov	sp, r7
 80172f8:	bd80      	pop	{r7, pc}

080172fa <f_write>:
 80172fa:	b580      	push	{r7, lr}
 80172fc:	b08c      	sub	sp, #48	; 0x30
 80172fe:	af00      	add	r7, sp, #0
 8017300:	60f8      	str	r0, [r7, #12]
 8017302:	60b9      	str	r1, [r7, #8]
 8017304:	607a      	str	r2, [r7, #4]
 8017306:	603b      	str	r3, [r7, #0]
 8017308:	68bb      	ldr	r3, [r7, #8]
 801730a:	61fb      	str	r3, [r7, #28]
 801730c:	683b      	ldr	r3, [r7, #0]
 801730e:	2200      	movs	r2, #0
 8017310:	601a      	str	r2, [r3, #0]
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	f107 0210 	add.w	r2, r7, #16
 8017318:	4611      	mov	r1, r2
 801731a:	4618      	mov	r0, r3
 801731c:	f7ff fbe0 	bl	8016ae0 <validate>
 8017320:	4603      	mov	r3, r0
 8017322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801732a:	2b00      	cmp	r3, #0
 801732c:	d107      	bne.n	801733e <f_write+0x44>
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	7d5b      	ldrb	r3, [r3, #21]
 8017332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801733a:	2b00      	cmp	r3, #0
 801733c:	d009      	beq.n	8017352 <f_write+0x58>
 801733e:	693b      	ldr	r3, [r7, #16]
 8017340:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8017344:	4611      	mov	r1, r2
 8017346:	4618      	mov	r0, r3
 8017348:	f7fd ff26 	bl	8015198 <unlock_fs>
 801734c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017350:	e192      	b.n	8017678 <f_write+0x37e>
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	7d1b      	ldrb	r3, [r3, #20]
 8017356:	f003 0302 	and.w	r3, r3, #2
 801735a:	2b00      	cmp	r3, #0
 801735c:	d106      	bne.n	801736c <f_write+0x72>
 801735e:	693b      	ldr	r3, [r7, #16]
 8017360:	2107      	movs	r1, #7
 8017362:	4618      	mov	r0, r3
 8017364:	f7fd ff18 	bl	8015198 <unlock_fs>
 8017368:	2307      	movs	r3, #7
 801736a:	e185      	b.n	8017678 <f_write+0x37e>
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	699a      	ldr	r2, [r3, #24]
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	441a      	add	r2, r3
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	699b      	ldr	r3, [r3, #24]
 8017378:	429a      	cmp	r2, r3
 801737a:	f080 816a 	bcs.w	8017652 <f_write+0x358>
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	699b      	ldr	r3, [r3, #24]
 8017382:	43db      	mvns	r3, r3
 8017384:	607b      	str	r3, [r7, #4]
 8017386:	e164      	b.n	8017652 <f_write+0x358>
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	699b      	ldr	r3, [r3, #24]
 801738c:	693a      	ldr	r2, [r7, #16]
 801738e:	8992      	ldrh	r2, [r2, #12]
 8017390:	fbb3 f1f2 	udiv	r1, r3, r2
 8017394:	fb01 f202 	mul.w	r2, r1, r2
 8017398:	1a9b      	subs	r3, r3, r2
 801739a:	2b00      	cmp	r3, #0
 801739c:	f040 810f 	bne.w	80175be <f_write+0x2c4>
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	699b      	ldr	r3, [r3, #24]
 80173a4:	693a      	ldr	r2, [r7, #16]
 80173a6:	8992      	ldrh	r2, [r2, #12]
 80173a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80173ac:	693a      	ldr	r2, [r7, #16]
 80173ae:	8952      	ldrh	r2, [r2, #10]
 80173b0:	3a01      	subs	r2, #1
 80173b2:	4013      	ands	r3, r2
 80173b4:	61bb      	str	r3, [r7, #24]
 80173b6:	69bb      	ldr	r3, [r7, #24]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d14d      	bne.n	8017458 <f_write+0x15e>
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	699b      	ldr	r3, [r3, #24]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d10c      	bne.n	80173de <f_write+0xe4>
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	689b      	ldr	r3, [r3, #8]
 80173c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80173ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d11a      	bne.n	8017406 <f_write+0x10c>
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	2100      	movs	r1, #0
 80173d4:	4618      	mov	r0, r3
 80173d6:	f7fe fbbb 	bl	8015b50 <create_chain>
 80173da:	62b8      	str	r0, [r7, #40]	; 0x28
 80173dc:	e013      	b.n	8017406 <f_write+0x10c>
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d007      	beq.n	80173f6 <f_write+0xfc>
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	699b      	ldr	r3, [r3, #24]
 80173ea:	4619      	mov	r1, r3
 80173ec:	68f8      	ldr	r0, [r7, #12]
 80173ee:	f7fe fc47 	bl	8015c80 <clmt_clust>
 80173f2:	62b8      	str	r0, [r7, #40]	; 0x28
 80173f4:	e007      	b.n	8017406 <f_write+0x10c>
 80173f6:	68fa      	ldr	r2, [r7, #12]
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	69db      	ldr	r3, [r3, #28]
 80173fc:	4619      	mov	r1, r3
 80173fe:	4610      	mov	r0, r2
 8017400:	f7fe fba6 	bl	8015b50 <create_chain>
 8017404:	62b8      	str	r0, [r7, #40]	; 0x28
 8017406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017408:	2b00      	cmp	r3, #0
 801740a:	f000 8127 	beq.w	801765c <f_write+0x362>
 801740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017410:	2b01      	cmp	r3, #1
 8017412:	d109      	bne.n	8017428 <f_write+0x12e>
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	2202      	movs	r2, #2
 8017418:	755a      	strb	r2, [r3, #21]
 801741a:	693b      	ldr	r3, [r7, #16]
 801741c:	2102      	movs	r1, #2
 801741e:	4618      	mov	r0, r3
 8017420:	f7fd feba 	bl	8015198 <unlock_fs>
 8017424:	2302      	movs	r3, #2
 8017426:	e127      	b.n	8017678 <f_write+0x37e>
 8017428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801742a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801742e:	d109      	bne.n	8017444 <f_write+0x14a>
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	2201      	movs	r2, #1
 8017434:	755a      	strb	r2, [r3, #21]
 8017436:	693b      	ldr	r3, [r7, #16]
 8017438:	2101      	movs	r1, #1
 801743a:	4618      	mov	r0, r3
 801743c:	f7fd feac 	bl	8015198 <unlock_fs>
 8017440:	2301      	movs	r3, #1
 8017442:	e119      	b.n	8017678 <f_write+0x37e>
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017448:	61da      	str	r2, [r3, #28]
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	689b      	ldr	r3, [r3, #8]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d102      	bne.n	8017458 <f_write+0x15e>
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017456:	609a      	str	r2, [r3, #8]
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	7d1b      	ldrb	r3, [r3, #20]
 801745c:	b25b      	sxtb	r3, r3
 801745e:	2b00      	cmp	r3, #0
 8017460:	da1d      	bge.n	801749e <f_write+0x1a4>
 8017462:	693b      	ldr	r3, [r7, #16]
 8017464:	7858      	ldrb	r0, [r3, #1]
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	6a1a      	ldr	r2, [r3, #32]
 8017470:	2301      	movs	r3, #1
 8017472:	f7fd fd3d 	bl	8014ef0 <disk_write>
 8017476:	4603      	mov	r3, r0
 8017478:	2b00      	cmp	r3, #0
 801747a:	d009      	beq.n	8017490 <f_write+0x196>
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	2201      	movs	r2, #1
 8017480:	755a      	strb	r2, [r3, #21]
 8017482:	693b      	ldr	r3, [r7, #16]
 8017484:	2101      	movs	r1, #1
 8017486:	4618      	mov	r0, r3
 8017488:	f7fd fe86 	bl	8015198 <unlock_fs>
 801748c:	2301      	movs	r3, #1
 801748e:	e0f3      	b.n	8017678 <f_write+0x37e>
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	7d1b      	ldrb	r3, [r3, #20]
 8017494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017498:	b2da      	uxtb	r2, r3
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	751a      	strb	r2, [r3, #20]
 801749e:	693a      	ldr	r2, [r7, #16]
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	69db      	ldr	r3, [r3, #28]
 80174a4:	4619      	mov	r1, r3
 80174a6:	4610      	mov	r0, r2
 80174a8:	f7fe f8e0 	bl	801566c <clust2sect>
 80174ac:	6178      	str	r0, [r7, #20]
 80174ae:	697b      	ldr	r3, [r7, #20]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d109      	bne.n	80174c8 <f_write+0x1ce>
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	2202      	movs	r2, #2
 80174b8:	755a      	strb	r2, [r3, #21]
 80174ba:	693b      	ldr	r3, [r7, #16]
 80174bc:	2102      	movs	r1, #2
 80174be:	4618      	mov	r0, r3
 80174c0:	f7fd fe6a 	bl	8015198 <unlock_fs>
 80174c4:	2302      	movs	r3, #2
 80174c6:	e0d7      	b.n	8017678 <f_write+0x37e>
 80174c8:	697a      	ldr	r2, [r7, #20]
 80174ca:	69bb      	ldr	r3, [r7, #24]
 80174cc:	4413      	add	r3, r2
 80174ce:	617b      	str	r3, [r7, #20]
 80174d0:	693b      	ldr	r3, [r7, #16]
 80174d2:	899b      	ldrh	r3, [r3, #12]
 80174d4:	461a      	mov	r2, r3
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80174dc:	623b      	str	r3, [r7, #32]
 80174de:	6a3b      	ldr	r3, [r7, #32]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d048      	beq.n	8017576 <f_write+0x27c>
 80174e4:	69ba      	ldr	r2, [r7, #24]
 80174e6:	6a3b      	ldr	r3, [r7, #32]
 80174e8:	4413      	add	r3, r2
 80174ea:	693a      	ldr	r2, [r7, #16]
 80174ec:	8952      	ldrh	r2, [r2, #10]
 80174ee:	4293      	cmp	r3, r2
 80174f0:	d905      	bls.n	80174fe <f_write+0x204>
 80174f2:	693b      	ldr	r3, [r7, #16]
 80174f4:	895b      	ldrh	r3, [r3, #10]
 80174f6:	461a      	mov	r2, r3
 80174f8:	69bb      	ldr	r3, [r7, #24]
 80174fa:	1ad3      	subs	r3, r2, r3
 80174fc:	623b      	str	r3, [r7, #32]
 80174fe:	693b      	ldr	r3, [r7, #16]
 8017500:	7858      	ldrb	r0, [r3, #1]
 8017502:	6a3b      	ldr	r3, [r7, #32]
 8017504:	697a      	ldr	r2, [r7, #20]
 8017506:	69f9      	ldr	r1, [r7, #28]
 8017508:	f7fd fcf2 	bl	8014ef0 <disk_write>
 801750c:	4603      	mov	r3, r0
 801750e:	2b00      	cmp	r3, #0
 8017510:	d009      	beq.n	8017526 <f_write+0x22c>
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	2201      	movs	r2, #1
 8017516:	755a      	strb	r2, [r3, #21]
 8017518:	693b      	ldr	r3, [r7, #16]
 801751a:	2101      	movs	r1, #1
 801751c:	4618      	mov	r0, r3
 801751e:	f7fd fe3b 	bl	8015198 <unlock_fs>
 8017522:	2301      	movs	r3, #1
 8017524:	e0a8      	b.n	8017678 <f_write+0x37e>
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	6a1a      	ldr	r2, [r3, #32]
 801752a:	697b      	ldr	r3, [r7, #20]
 801752c:	1ad3      	subs	r3, r2, r3
 801752e:	6a3a      	ldr	r2, [r7, #32]
 8017530:	429a      	cmp	r2, r3
 8017532:	d918      	bls.n	8017566 <f_write+0x26c>
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	6a1a      	ldr	r2, [r3, #32]
 801753e:	697b      	ldr	r3, [r7, #20]
 8017540:	1ad3      	subs	r3, r2, r3
 8017542:	693a      	ldr	r2, [r7, #16]
 8017544:	8992      	ldrh	r2, [r2, #12]
 8017546:	fb02 f303 	mul.w	r3, r2, r3
 801754a:	69fa      	ldr	r2, [r7, #28]
 801754c:	18d1      	adds	r1, r2, r3
 801754e:	693b      	ldr	r3, [r7, #16]
 8017550:	899b      	ldrh	r3, [r3, #12]
 8017552:	461a      	mov	r2, r3
 8017554:	f7fd fd8c 	bl	8015070 <mem_cpy>
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	7d1b      	ldrb	r3, [r3, #20]
 801755c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017560:	b2da      	uxtb	r2, r3
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	751a      	strb	r2, [r3, #20]
 8017566:	693b      	ldr	r3, [r7, #16]
 8017568:	899b      	ldrh	r3, [r3, #12]
 801756a:	461a      	mov	r2, r3
 801756c:	6a3b      	ldr	r3, [r7, #32]
 801756e:	fb02 f303 	mul.w	r3, r2, r3
 8017572:	627b      	str	r3, [r7, #36]	; 0x24
 8017574:	e050      	b.n	8017618 <f_write+0x31e>
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	6a1b      	ldr	r3, [r3, #32]
 801757a:	697a      	ldr	r2, [r7, #20]
 801757c:	429a      	cmp	r2, r3
 801757e:	d01b      	beq.n	80175b8 <f_write+0x2be>
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	699a      	ldr	r2, [r3, #24]
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	68db      	ldr	r3, [r3, #12]
 8017588:	429a      	cmp	r2, r3
 801758a:	d215      	bcs.n	80175b8 <f_write+0x2be>
 801758c:	693b      	ldr	r3, [r7, #16]
 801758e:	7858      	ldrb	r0, [r3, #1]
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017596:	2301      	movs	r3, #1
 8017598:	697a      	ldr	r2, [r7, #20]
 801759a:	f7fd fc89 	bl	8014eb0 <disk_read>
 801759e:	4603      	mov	r3, r0
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d009      	beq.n	80175b8 <f_write+0x2be>
 80175a4:	68fb      	ldr	r3, [r7, #12]
 80175a6:	2201      	movs	r2, #1
 80175a8:	755a      	strb	r2, [r3, #21]
 80175aa:	693b      	ldr	r3, [r7, #16]
 80175ac:	2101      	movs	r1, #1
 80175ae:	4618      	mov	r0, r3
 80175b0:	f7fd fdf2 	bl	8015198 <unlock_fs>
 80175b4:	2301      	movs	r3, #1
 80175b6:	e05f      	b.n	8017678 <f_write+0x37e>
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	697a      	ldr	r2, [r7, #20]
 80175bc:	621a      	str	r2, [r3, #32]
 80175be:	693b      	ldr	r3, [r7, #16]
 80175c0:	899b      	ldrh	r3, [r3, #12]
 80175c2:	4618      	mov	r0, r3
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	699b      	ldr	r3, [r3, #24]
 80175c8:	693a      	ldr	r2, [r7, #16]
 80175ca:	8992      	ldrh	r2, [r2, #12]
 80175cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80175d0:	fb01 f202 	mul.w	r2, r1, r2
 80175d4:	1a9b      	subs	r3, r3, r2
 80175d6:	1ac3      	subs	r3, r0, r3
 80175d8:	627b      	str	r3, [r7, #36]	; 0x24
 80175da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	429a      	cmp	r2, r3
 80175e0:	d901      	bls.n	80175e6 <f_write+0x2ec>
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	627b      	str	r3, [r7, #36]	; 0x24
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	699b      	ldr	r3, [r3, #24]
 80175f0:	693a      	ldr	r2, [r7, #16]
 80175f2:	8992      	ldrh	r2, [r2, #12]
 80175f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80175f8:	fb00 f202 	mul.w	r2, r0, r2
 80175fc:	1a9b      	subs	r3, r3, r2
 80175fe:	440b      	add	r3, r1
 8017600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017602:	69f9      	ldr	r1, [r7, #28]
 8017604:	4618      	mov	r0, r3
 8017606:	f7fd fd33 	bl	8015070 <mem_cpy>
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	7d1b      	ldrb	r3, [r3, #20]
 801760e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017612:	b2da      	uxtb	r2, r3
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	751a      	strb	r2, [r3, #20]
 8017618:	69fa      	ldr	r2, [r7, #28]
 801761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801761c:	4413      	add	r3, r2
 801761e:	61fb      	str	r3, [r7, #28]
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	699a      	ldr	r2, [r3, #24]
 8017624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017626:	441a      	add	r2, r3
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	619a      	str	r2, [r3, #24]
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	68da      	ldr	r2, [r3, #12]
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	699b      	ldr	r3, [r3, #24]
 8017634:	429a      	cmp	r2, r3
 8017636:	bf38      	it	cc
 8017638:	461a      	movcc	r2, r3
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	60da      	str	r2, [r3, #12]
 801763e:	683b      	ldr	r3, [r7, #0]
 8017640:	681a      	ldr	r2, [r3, #0]
 8017642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017644:	441a      	add	r2, r3
 8017646:	683b      	ldr	r3, [r7, #0]
 8017648:	601a      	str	r2, [r3, #0]
 801764a:	687a      	ldr	r2, [r7, #4]
 801764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801764e:	1ad3      	subs	r3, r2, r3
 8017650:	607b      	str	r3, [r7, #4]
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	2b00      	cmp	r3, #0
 8017656:	f47f ae97 	bne.w	8017388 <f_write+0x8e>
 801765a:	e000      	b.n	801765e <f_write+0x364>
 801765c:	bf00      	nop
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	7d1b      	ldrb	r3, [r3, #20]
 8017662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017666:	b2da      	uxtb	r2, r3
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	751a      	strb	r2, [r3, #20]
 801766c:	693b      	ldr	r3, [r7, #16]
 801766e:	2100      	movs	r1, #0
 8017670:	4618      	mov	r0, r3
 8017672:	f7fd fd91 	bl	8015198 <unlock_fs>
 8017676:	2300      	movs	r3, #0
 8017678:	4618      	mov	r0, r3
 801767a:	3730      	adds	r7, #48	; 0x30
 801767c:	46bd      	mov	sp, r7
 801767e:	bd80      	pop	{r7, pc}

08017680 <f_sync>:
 8017680:	b580      	push	{r7, lr}
 8017682:	b086      	sub	sp, #24
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	f107 0208 	add.w	r2, r7, #8
 801768e:	4611      	mov	r1, r2
 8017690:	4618      	mov	r0, r3
 8017692:	f7ff fa25 	bl	8016ae0 <validate>
 8017696:	4603      	mov	r3, r0
 8017698:	75fb      	strb	r3, [r7, #23]
 801769a:	7dfb      	ldrb	r3, [r7, #23]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d16d      	bne.n	801777c <f_sync+0xfc>
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	7d1b      	ldrb	r3, [r3, #20]
 80176a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d067      	beq.n	801777c <f_sync+0xfc>
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	7d1b      	ldrb	r3, [r3, #20]
 80176b0:	b25b      	sxtb	r3, r3
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	da1a      	bge.n	80176ec <f_sync+0x6c>
 80176b6:	68bb      	ldr	r3, [r7, #8]
 80176b8:	7858      	ldrb	r0, [r3, #1]
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	6a1a      	ldr	r2, [r3, #32]
 80176c4:	2301      	movs	r3, #1
 80176c6:	f7fd fc13 	bl	8014ef0 <disk_write>
 80176ca:	4603      	mov	r3, r0
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d006      	beq.n	80176de <f_sync+0x5e>
 80176d0:	68bb      	ldr	r3, [r7, #8]
 80176d2:	2101      	movs	r1, #1
 80176d4:	4618      	mov	r0, r3
 80176d6:	f7fd fd5f 	bl	8015198 <unlock_fs>
 80176da:	2301      	movs	r3, #1
 80176dc:	e055      	b.n	801778a <f_sync+0x10a>
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	7d1b      	ldrb	r3, [r3, #20]
 80176e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80176e6:	b2da      	uxtb	r2, r3
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	751a      	strb	r2, [r3, #20]
 80176ec:	f7fb fb7a 	bl	8012de4 <get_fattime>
 80176f0:	6138      	str	r0, [r7, #16]
 80176f2:	68ba      	ldr	r2, [r7, #8]
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176f8:	4619      	mov	r1, r3
 80176fa:	4610      	mov	r0, r2
 80176fc:	f7fd ff18 	bl	8015530 <move_window>
 8017700:	4603      	mov	r3, r0
 8017702:	75fb      	strb	r3, [r7, #23]
 8017704:	7dfb      	ldrb	r3, [r7, #23]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d138      	bne.n	801777c <f_sync+0xfc>
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801770e:	60fb      	str	r3, [r7, #12]
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	330b      	adds	r3, #11
 8017714:	781a      	ldrb	r2, [r3, #0]
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	330b      	adds	r3, #11
 801771a:	f042 0220 	orr.w	r2, r2, #32
 801771e:	b2d2      	uxtb	r2, r2
 8017720:	701a      	strb	r2, [r3, #0]
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	6818      	ldr	r0, [r3, #0]
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	689b      	ldr	r3, [r3, #8]
 801772a:	461a      	mov	r2, r3
 801772c:	68f9      	ldr	r1, [r7, #12]
 801772e:	f7fe fca4 	bl	801607a <st_clust>
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	f103 021c 	add.w	r2, r3, #28
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	68db      	ldr	r3, [r3, #12]
 801773c:	4619      	mov	r1, r3
 801773e:	4610      	mov	r0, r2
 8017740:	f7fd fc6a 	bl	8015018 <st_dword>
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	3316      	adds	r3, #22
 8017748:	6939      	ldr	r1, [r7, #16]
 801774a:	4618      	mov	r0, r3
 801774c:	f7fd fc64 	bl	8015018 <st_dword>
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	3312      	adds	r3, #18
 8017754:	2100      	movs	r1, #0
 8017756:	4618      	mov	r0, r3
 8017758:	f7fd fc43 	bl	8014fe2 <st_word>
 801775c:	68bb      	ldr	r3, [r7, #8]
 801775e:	2201      	movs	r2, #1
 8017760:	70da      	strb	r2, [r3, #3]
 8017762:	68bb      	ldr	r3, [r7, #8]
 8017764:	4618      	mov	r0, r3
 8017766:	f7fd ff11 	bl	801558c <sync_fs>
 801776a:	4603      	mov	r3, r0
 801776c:	75fb      	strb	r3, [r7, #23]
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	7d1b      	ldrb	r3, [r3, #20]
 8017772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017776:	b2da      	uxtb	r2, r3
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	751a      	strb	r2, [r3, #20]
 801777c:	68bb      	ldr	r3, [r7, #8]
 801777e:	7dfa      	ldrb	r2, [r7, #23]
 8017780:	4611      	mov	r1, r2
 8017782:	4618      	mov	r0, r3
 8017784:	f7fd fd08 	bl	8015198 <unlock_fs>
 8017788:	7dfb      	ldrb	r3, [r7, #23]
 801778a:	4618      	mov	r0, r3
 801778c:	3718      	adds	r7, #24
 801778e:	46bd      	mov	sp, r7
 8017790:	bd80      	pop	{r7, pc}

08017792 <f_close>:
 8017792:	b580      	push	{r7, lr}
 8017794:	b084      	sub	sp, #16
 8017796:	af00      	add	r7, sp, #0
 8017798:	6078      	str	r0, [r7, #4]
 801779a:	6878      	ldr	r0, [r7, #4]
 801779c:	f7ff ff70 	bl	8017680 <f_sync>
 80177a0:	4603      	mov	r3, r0
 80177a2:	73fb      	strb	r3, [r7, #15]
 80177a4:	7bfb      	ldrb	r3, [r7, #15]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d11d      	bne.n	80177e6 <f_close+0x54>
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	f107 0208 	add.w	r2, r7, #8
 80177b0:	4611      	mov	r1, r2
 80177b2:	4618      	mov	r0, r3
 80177b4:	f7ff f994 	bl	8016ae0 <validate>
 80177b8:	4603      	mov	r3, r0
 80177ba:	73fb      	strb	r3, [r7, #15]
 80177bc:	7bfb      	ldrb	r3, [r7, #15]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d111      	bne.n	80177e6 <f_close+0x54>
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	691b      	ldr	r3, [r3, #16]
 80177c6:	4618      	mov	r0, r3
 80177c8:	f7fd fe0e 	bl	80153e8 <dec_lock>
 80177cc:	4603      	mov	r3, r0
 80177ce:	73fb      	strb	r3, [r7, #15]
 80177d0:	7bfb      	ldrb	r3, [r7, #15]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d102      	bne.n	80177dc <f_close+0x4a>
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	2200      	movs	r2, #0
 80177da:	601a      	str	r2, [r3, #0]
 80177dc:	68bb      	ldr	r3, [r7, #8]
 80177de:	2100      	movs	r1, #0
 80177e0:	4618      	mov	r0, r3
 80177e2:	f7fd fcd9 	bl	8015198 <unlock_fs>
 80177e6:	7bfb      	ldrb	r3, [r7, #15]
 80177e8:	4618      	mov	r0, r3
 80177ea:	3710      	adds	r7, #16
 80177ec:	46bd      	mov	sp, r7
 80177ee:	bd80      	pop	{r7, pc}

080177f0 <f_lseek>:
 80177f0:	b580      	push	{r7, lr}
 80177f2:	b090      	sub	sp, #64	; 0x40
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	6078      	str	r0, [r7, #4]
 80177f8:	6039      	str	r1, [r7, #0]
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	f107 0208 	add.w	r2, r7, #8
 8017800:	4611      	mov	r1, r2
 8017802:	4618      	mov	r0, r3
 8017804:	f7ff f96c 	bl	8016ae0 <validate>
 8017808:	4603      	mov	r3, r0
 801780a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801780e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017812:	2b00      	cmp	r3, #0
 8017814:	d103      	bne.n	801781e <f_lseek+0x2e>
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	7d5b      	ldrb	r3, [r3, #21]
 801781a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801781e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017822:	2b00      	cmp	r3, #0
 8017824:	d009      	beq.n	801783a <f_lseek+0x4a>
 8017826:	68bb      	ldr	r3, [r7, #8]
 8017828:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801782c:	4611      	mov	r1, r2
 801782e:	4618      	mov	r0, r3
 8017830:	f7fd fcb2 	bl	8015198 <unlock_fs>
 8017834:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017838:	e244      	b.n	8017cc4 <f_lseek+0x4d4>
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801783e:	2b00      	cmp	r3, #0
 8017840:	f000 80f2 	beq.w	8017a28 <f_lseek+0x238>
 8017844:	683b      	ldr	r3, [r7, #0]
 8017846:	f1b3 3fff 	cmp.w	r3, #4294967295
 801784a:	d164      	bne.n	8017916 <f_lseek+0x126>
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017850:	627b      	str	r3, [r7, #36]	; 0x24
 8017852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017854:	1d1a      	adds	r2, r3, #4
 8017856:	627a      	str	r2, [r7, #36]	; 0x24
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	617b      	str	r3, [r7, #20]
 801785c:	2302      	movs	r3, #2
 801785e:	62bb      	str	r3, [r7, #40]	; 0x28
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	689b      	ldr	r3, [r3, #8]
 8017864:	633b      	str	r3, [r7, #48]	; 0x30
 8017866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017868:	2b00      	cmp	r3, #0
 801786a:	d044      	beq.n	80178f6 <f_lseek+0x106>
 801786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801786e:	613b      	str	r3, [r7, #16]
 8017870:	2300      	movs	r3, #0
 8017872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017876:	3302      	adds	r3, #2
 8017878:	62bb      	str	r3, [r7, #40]	; 0x28
 801787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801787c:	60fb      	str	r3, [r7, #12]
 801787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017880:	3301      	adds	r3, #1
 8017882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017888:	4618      	mov	r0, r3
 801788a:	f7fd ff0e 	bl	80156aa <get_fat>
 801788e:	6338      	str	r0, [r7, #48]	; 0x30
 8017890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017892:	2b01      	cmp	r3, #1
 8017894:	d809      	bhi.n	80178aa <f_lseek+0xba>
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	2202      	movs	r2, #2
 801789a:	755a      	strb	r2, [r3, #21]
 801789c:	68bb      	ldr	r3, [r7, #8]
 801789e:	2102      	movs	r1, #2
 80178a0:	4618      	mov	r0, r3
 80178a2:	f7fd fc79 	bl	8015198 <unlock_fs>
 80178a6:	2302      	movs	r3, #2
 80178a8:	e20c      	b.n	8017cc4 <f_lseek+0x4d4>
 80178aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178b0:	d109      	bne.n	80178c6 <f_lseek+0xd6>
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	2201      	movs	r2, #1
 80178b6:	755a      	strb	r2, [r3, #21]
 80178b8:	68bb      	ldr	r3, [r7, #8]
 80178ba:	2101      	movs	r1, #1
 80178bc:	4618      	mov	r0, r3
 80178be:	f7fd fc6b 	bl	8015198 <unlock_fs>
 80178c2:	2301      	movs	r3, #1
 80178c4:	e1fe      	b.n	8017cc4 <f_lseek+0x4d4>
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	3301      	adds	r3, #1
 80178ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178cc:	429a      	cmp	r2, r3
 80178ce:	d0d4      	beq.n	801787a <f_lseek+0x8a>
 80178d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80178d2:	697b      	ldr	r3, [r7, #20]
 80178d4:	429a      	cmp	r2, r3
 80178d6:	d809      	bhi.n	80178ec <f_lseek+0xfc>
 80178d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178da:	1d1a      	adds	r2, r3, #4
 80178dc:	627a      	str	r2, [r7, #36]	; 0x24
 80178de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80178e0:	601a      	str	r2, [r3, #0]
 80178e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178e4:	1d1a      	adds	r2, r3, #4
 80178e6:	627a      	str	r2, [r7, #36]	; 0x24
 80178e8:	693a      	ldr	r2, [r7, #16]
 80178ea:	601a      	str	r2, [r3, #0]
 80178ec:	68bb      	ldr	r3, [r7, #8]
 80178ee:	69db      	ldr	r3, [r3, #28]
 80178f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178f2:	429a      	cmp	r2, r3
 80178f4:	d3ba      	bcc.n	801786c <f_lseek+0x7c>
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80178fc:	601a      	str	r2, [r3, #0]
 80178fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017900:	697b      	ldr	r3, [r7, #20]
 8017902:	429a      	cmp	r2, r3
 8017904:	d803      	bhi.n	801790e <f_lseek+0x11e>
 8017906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017908:	2200      	movs	r2, #0
 801790a:	601a      	str	r2, [r3, #0]
 801790c:	e1d1      	b.n	8017cb2 <f_lseek+0x4c2>
 801790e:	2311      	movs	r3, #17
 8017910:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8017914:	e1cd      	b.n	8017cb2 <f_lseek+0x4c2>
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	68db      	ldr	r3, [r3, #12]
 801791a:	683a      	ldr	r2, [r7, #0]
 801791c:	429a      	cmp	r2, r3
 801791e:	d902      	bls.n	8017926 <f_lseek+0x136>
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	68db      	ldr	r3, [r3, #12]
 8017924:	603b      	str	r3, [r7, #0]
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	683a      	ldr	r2, [r7, #0]
 801792a:	619a      	str	r2, [r3, #24]
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	2b00      	cmp	r3, #0
 8017930:	f000 81bf 	beq.w	8017cb2 <f_lseek+0x4c2>
 8017934:	683b      	ldr	r3, [r7, #0]
 8017936:	3b01      	subs	r3, #1
 8017938:	4619      	mov	r1, r3
 801793a:	6878      	ldr	r0, [r7, #4]
 801793c:	f7fe f9a0 	bl	8015c80 <clmt_clust>
 8017940:	4602      	mov	r2, r0
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	61da      	str	r2, [r3, #28]
 8017946:	68ba      	ldr	r2, [r7, #8]
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	69db      	ldr	r3, [r3, #28]
 801794c:	4619      	mov	r1, r3
 801794e:	4610      	mov	r0, r2
 8017950:	f7fd fe8c 	bl	801566c <clust2sect>
 8017954:	61b8      	str	r0, [r7, #24]
 8017956:	69bb      	ldr	r3, [r7, #24]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d109      	bne.n	8017970 <f_lseek+0x180>
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	2202      	movs	r2, #2
 8017960:	755a      	strb	r2, [r3, #21]
 8017962:	68bb      	ldr	r3, [r7, #8]
 8017964:	2102      	movs	r1, #2
 8017966:	4618      	mov	r0, r3
 8017968:	f7fd fc16 	bl	8015198 <unlock_fs>
 801796c:	2302      	movs	r3, #2
 801796e:	e1a9      	b.n	8017cc4 <f_lseek+0x4d4>
 8017970:	683b      	ldr	r3, [r7, #0]
 8017972:	3b01      	subs	r3, #1
 8017974:	68ba      	ldr	r2, [r7, #8]
 8017976:	8992      	ldrh	r2, [r2, #12]
 8017978:	fbb3 f3f2 	udiv	r3, r3, r2
 801797c:	68ba      	ldr	r2, [r7, #8]
 801797e:	8952      	ldrh	r2, [r2, #10]
 8017980:	3a01      	subs	r2, #1
 8017982:	4013      	ands	r3, r2
 8017984:	69ba      	ldr	r2, [r7, #24]
 8017986:	4413      	add	r3, r2
 8017988:	61bb      	str	r3, [r7, #24]
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	699b      	ldr	r3, [r3, #24]
 801798e:	68ba      	ldr	r2, [r7, #8]
 8017990:	8992      	ldrh	r2, [r2, #12]
 8017992:	fbb3 f1f2 	udiv	r1, r3, r2
 8017996:	fb01 f202 	mul.w	r2, r1, r2
 801799a:	1a9b      	subs	r3, r3, r2
 801799c:	2b00      	cmp	r3, #0
 801799e:	f000 8188 	beq.w	8017cb2 <f_lseek+0x4c2>
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	6a1b      	ldr	r3, [r3, #32]
 80179a6:	69ba      	ldr	r2, [r7, #24]
 80179a8:	429a      	cmp	r2, r3
 80179aa:	f000 8182 	beq.w	8017cb2 <f_lseek+0x4c2>
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	7d1b      	ldrb	r3, [r3, #20]
 80179b2:	b25b      	sxtb	r3, r3
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	da1d      	bge.n	80179f4 <f_lseek+0x204>
 80179b8:	68bb      	ldr	r3, [r7, #8]
 80179ba:	7858      	ldrb	r0, [r3, #1]
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	6a1a      	ldr	r2, [r3, #32]
 80179c6:	2301      	movs	r3, #1
 80179c8:	f7fd fa92 	bl	8014ef0 <disk_write>
 80179cc:	4603      	mov	r3, r0
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d009      	beq.n	80179e6 <f_lseek+0x1f6>
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	2201      	movs	r2, #1
 80179d6:	755a      	strb	r2, [r3, #21]
 80179d8:	68bb      	ldr	r3, [r7, #8]
 80179da:	2101      	movs	r1, #1
 80179dc:	4618      	mov	r0, r3
 80179de:	f7fd fbdb 	bl	8015198 <unlock_fs>
 80179e2:	2301      	movs	r3, #1
 80179e4:	e16e      	b.n	8017cc4 <f_lseek+0x4d4>
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	7d1b      	ldrb	r3, [r3, #20]
 80179ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80179ee:	b2da      	uxtb	r2, r3
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	751a      	strb	r2, [r3, #20]
 80179f4:	68bb      	ldr	r3, [r7, #8]
 80179f6:	7858      	ldrb	r0, [r3, #1]
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80179fe:	2301      	movs	r3, #1
 8017a00:	69ba      	ldr	r2, [r7, #24]
 8017a02:	f7fd fa55 	bl	8014eb0 <disk_read>
 8017a06:	4603      	mov	r3, r0
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d009      	beq.n	8017a20 <f_lseek+0x230>
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	2201      	movs	r2, #1
 8017a10:	755a      	strb	r2, [r3, #21]
 8017a12:	68bb      	ldr	r3, [r7, #8]
 8017a14:	2101      	movs	r1, #1
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7fd fbbe 	bl	8015198 <unlock_fs>
 8017a1c:	2301      	movs	r3, #1
 8017a1e:	e151      	b.n	8017cc4 <f_lseek+0x4d4>
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	69ba      	ldr	r2, [r7, #24]
 8017a24:	621a      	str	r2, [r3, #32]
 8017a26:	e144      	b.n	8017cb2 <f_lseek+0x4c2>
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	68db      	ldr	r3, [r3, #12]
 8017a2c:	683a      	ldr	r2, [r7, #0]
 8017a2e:	429a      	cmp	r2, r3
 8017a30:	d908      	bls.n	8017a44 <f_lseek+0x254>
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	7d1b      	ldrb	r3, [r3, #20]
 8017a36:	f003 0302 	and.w	r3, r3, #2
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d102      	bne.n	8017a44 <f_lseek+0x254>
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	68db      	ldr	r3, [r3, #12]
 8017a42:	603b      	str	r3, [r7, #0]
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	699b      	ldr	r3, [r3, #24]
 8017a48:	623b      	str	r3, [r7, #32]
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017a52:	619a      	str	r2, [r3, #24]
 8017a54:	683b      	ldr	r3, [r7, #0]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	f000 80ce 	beq.w	8017bf8 <f_lseek+0x408>
 8017a5c:	68bb      	ldr	r3, [r7, #8]
 8017a5e:	895b      	ldrh	r3, [r3, #10]
 8017a60:	461a      	mov	r2, r3
 8017a62:	68bb      	ldr	r3, [r7, #8]
 8017a64:	899b      	ldrh	r3, [r3, #12]
 8017a66:	fb02 f303 	mul.w	r3, r2, r3
 8017a6a:	61fb      	str	r3, [r7, #28]
 8017a6c:	6a3b      	ldr	r3, [r7, #32]
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d01b      	beq.n	8017aaa <f_lseek+0x2ba>
 8017a72:	683b      	ldr	r3, [r7, #0]
 8017a74:	1e5a      	subs	r2, r3, #1
 8017a76:	69fb      	ldr	r3, [r7, #28]
 8017a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8017a7c:	6a3b      	ldr	r3, [r7, #32]
 8017a7e:	1e59      	subs	r1, r3, #1
 8017a80:	69fb      	ldr	r3, [r7, #28]
 8017a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8017a86:	429a      	cmp	r2, r3
 8017a88:	d30f      	bcc.n	8017aaa <f_lseek+0x2ba>
 8017a8a:	6a3b      	ldr	r3, [r7, #32]
 8017a8c:	1e5a      	subs	r2, r3, #1
 8017a8e:	69fb      	ldr	r3, [r7, #28]
 8017a90:	425b      	negs	r3, r3
 8017a92:	401a      	ands	r2, r3
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	619a      	str	r2, [r3, #24]
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	699b      	ldr	r3, [r3, #24]
 8017a9c:	683a      	ldr	r2, [r7, #0]
 8017a9e:	1ad3      	subs	r3, r2, r3
 8017aa0:	603b      	str	r3, [r7, #0]
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	69db      	ldr	r3, [r3, #28]
 8017aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8017aa8:	e02c      	b.n	8017b04 <f_lseek+0x314>
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	689b      	ldr	r3, [r3, #8]
 8017aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8017ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d123      	bne.n	8017afe <f_lseek+0x30e>
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	2100      	movs	r1, #0
 8017aba:	4618      	mov	r0, r3
 8017abc:	f7fe f848 	bl	8015b50 <create_chain>
 8017ac0:	63b8      	str	r0, [r7, #56]	; 0x38
 8017ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ac4:	2b01      	cmp	r3, #1
 8017ac6:	d109      	bne.n	8017adc <f_lseek+0x2ec>
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	2202      	movs	r2, #2
 8017acc:	755a      	strb	r2, [r3, #21]
 8017ace:	68bb      	ldr	r3, [r7, #8]
 8017ad0:	2102      	movs	r1, #2
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f7fd fb60 	bl	8015198 <unlock_fs>
 8017ad8:	2302      	movs	r3, #2
 8017ada:	e0f3      	b.n	8017cc4 <f_lseek+0x4d4>
 8017adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ae2:	d109      	bne.n	8017af8 <f_lseek+0x308>
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	2201      	movs	r2, #1
 8017ae8:	755a      	strb	r2, [r3, #21]
 8017aea:	68bb      	ldr	r3, [r7, #8]
 8017aec:	2101      	movs	r1, #1
 8017aee:	4618      	mov	r0, r3
 8017af0:	f7fd fb52 	bl	8015198 <unlock_fs>
 8017af4:	2301      	movs	r3, #1
 8017af6:	e0e5      	b.n	8017cc4 <f_lseek+0x4d4>
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017afc:	609a      	str	r2, [r3, #8]
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017b02:	61da      	str	r2, [r3, #28]
 8017b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d076      	beq.n	8017bf8 <f_lseek+0x408>
 8017b0a:	e044      	b.n	8017b96 <f_lseek+0x3a6>
 8017b0c:	683a      	ldr	r2, [r7, #0]
 8017b0e:	69fb      	ldr	r3, [r7, #28]
 8017b10:	1ad3      	subs	r3, r2, r3
 8017b12:	603b      	str	r3, [r7, #0]
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	699a      	ldr	r2, [r3, #24]
 8017b18:	69fb      	ldr	r3, [r7, #28]
 8017b1a:	441a      	add	r2, r3
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	619a      	str	r2, [r3, #24]
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	7d1b      	ldrb	r3, [r3, #20]
 8017b24:	f003 0302 	and.w	r3, r3, #2
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d00b      	beq.n	8017b44 <f_lseek+0x354>
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017b30:	4618      	mov	r0, r3
 8017b32:	f7fe f80d 	bl	8015b50 <create_chain>
 8017b36:	63b8      	str	r0, [r7, #56]	; 0x38
 8017b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d108      	bne.n	8017b50 <f_lseek+0x360>
 8017b3e:	2300      	movs	r3, #0
 8017b40:	603b      	str	r3, [r7, #0]
 8017b42:	e02c      	b.n	8017b9e <f_lseek+0x3ae>
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017b48:	4618      	mov	r0, r3
 8017b4a:	f7fd fdae 	bl	80156aa <get_fat>
 8017b4e:	63b8      	str	r0, [r7, #56]	; 0x38
 8017b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b56:	d109      	bne.n	8017b6c <f_lseek+0x37c>
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	2201      	movs	r2, #1
 8017b5c:	755a      	strb	r2, [r3, #21]
 8017b5e:	68bb      	ldr	r3, [r7, #8]
 8017b60:	2101      	movs	r1, #1
 8017b62:	4618      	mov	r0, r3
 8017b64:	f7fd fb18 	bl	8015198 <unlock_fs>
 8017b68:	2301      	movs	r3, #1
 8017b6a:	e0ab      	b.n	8017cc4 <f_lseek+0x4d4>
 8017b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b6e:	2b01      	cmp	r3, #1
 8017b70:	d904      	bls.n	8017b7c <f_lseek+0x38c>
 8017b72:	68bb      	ldr	r3, [r7, #8]
 8017b74:	69db      	ldr	r3, [r3, #28]
 8017b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017b78:	429a      	cmp	r2, r3
 8017b7a:	d309      	bcc.n	8017b90 <f_lseek+0x3a0>
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	2202      	movs	r2, #2
 8017b80:	755a      	strb	r2, [r3, #21]
 8017b82:	68bb      	ldr	r3, [r7, #8]
 8017b84:	2102      	movs	r1, #2
 8017b86:	4618      	mov	r0, r3
 8017b88:	f7fd fb06 	bl	8015198 <unlock_fs>
 8017b8c:	2302      	movs	r3, #2
 8017b8e:	e099      	b.n	8017cc4 <f_lseek+0x4d4>
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017b94:	61da      	str	r2, [r3, #28]
 8017b96:	683a      	ldr	r2, [r7, #0]
 8017b98:	69fb      	ldr	r3, [r7, #28]
 8017b9a:	429a      	cmp	r2, r3
 8017b9c:	d8b6      	bhi.n	8017b0c <f_lseek+0x31c>
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	699a      	ldr	r2, [r3, #24]
 8017ba2:	683b      	ldr	r3, [r7, #0]
 8017ba4:	441a      	add	r2, r3
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	619a      	str	r2, [r3, #24]
 8017baa:	68bb      	ldr	r3, [r7, #8]
 8017bac:	899b      	ldrh	r3, [r3, #12]
 8017bae:	461a      	mov	r2, r3
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8017bb6:	fb01 f202 	mul.w	r2, r1, r2
 8017bba:	1a9b      	subs	r3, r3, r2
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d01b      	beq.n	8017bf8 <f_lseek+0x408>
 8017bc0:	68bb      	ldr	r3, [r7, #8]
 8017bc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	f7fd fd51 	bl	801566c <clust2sect>
 8017bca:	6378      	str	r0, [r7, #52]	; 0x34
 8017bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d109      	bne.n	8017be6 <f_lseek+0x3f6>
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	2202      	movs	r2, #2
 8017bd6:	755a      	strb	r2, [r3, #21]
 8017bd8:	68bb      	ldr	r3, [r7, #8]
 8017bda:	2102      	movs	r1, #2
 8017bdc:	4618      	mov	r0, r3
 8017bde:	f7fd fadb 	bl	8015198 <unlock_fs>
 8017be2:	2302      	movs	r3, #2
 8017be4:	e06e      	b.n	8017cc4 <f_lseek+0x4d4>
 8017be6:	68bb      	ldr	r3, [r7, #8]
 8017be8:	899b      	ldrh	r3, [r3, #12]
 8017bea:	461a      	mov	r2, r3
 8017bec:	683b      	ldr	r3, [r7, #0]
 8017bee:	fbb3 f3f2 	udiv	r3, r3, r2
 8017bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017bf4:	4413      	add	r3, r2
 8017bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	699a      	ldr	r2, [r3, #24]
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	68db      	ldr	r3, [r3, #12]
 8017c00:	429a      	cmp	r2, r3
 8017c02:	d90a      	bls.n	8017c1a <f_lseek+0x42a>
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	699a      	ldr	r2, [r3, #24]
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	60da      	str	r2, [r3, #12]
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	7d1b      	ldrb	r3, [r3, #20]
 8017c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c14:	b2da      	uxtb	r2, r3
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	751a      	strb	r2, [r3, #20]
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	699b      	ldr	r3, [r3, #24]
 8017c1e:	68ba      	ldr	r2, [r7, #8]
 8017c20:	8992      	ldrh	r2, [r2, #12]
 8017c22:	fbb3 f1f2 	udiv	r1, r3, r2
 8017c26:	fb01 f202 	mul.w	r2, r1, r2
 8017c2a:	1a9b      	subs	r3, r3, r2
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d040      	beq.n	8017cb2 <f_lseek+0x4c2>
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	6a1b      	ldr	r3, [r3, #32]
 8017c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017c36:	429a      	cmp	r2, r3
 8017c38:	d03b      	beq.n	8017cb2 <f_lseek+0x4c2>
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	7d1b      	ldrb	r3, [r3, #20]
 8017c3e:	b25b      	sxtb	r3, r3
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	da1d      	bge.n	8017c80 <f_lseek+0x490>
 8017c44:	68bb      	ldr	r3, [r7, #8]
 8017c46:	7858      	ldrb	r0, [r3, #1]
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	6a1a      	ldr	r2, [r3, #32]
 8017c52:	2301      	movs	r3, #1
 8017c54:	f7fd f94c 	bl	8014ef0 <disk_write>
 8017c58:	4603      	mov	r3, r0
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d009      	beq.n	8017c72 <f_lseek+0x482>
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	2201      	movs	r2, #1
 8017c62:	755a      	strb	r2, [r3, #21]
 8017c64:	68bb      	ldr	r3, [r7, #8]
 8017c66:	2101      	movs	r1, #1
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f7fd fa95 	bl	8015198 <unlock_fs>
 8017c6e:	2301      	movs	r3, #1
 8017c70:	e028      	b.n	8017cc4 <f_lseek+0x4d4>
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	7d1b      	ldrb	r3, [r3, #20]
 8017c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017c7a:	b2da      	uxtb	r2, r3
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	751a      	strb	r2, [r3, #20]
 8017c80:	68bb      	ldr	r3, [r7, #8]
 8017c82:	7858      	ldrb	r0, [r3, #1]
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017c8a:	2301      	movs	r3, #1
 8017c8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017c8e:	f7fd f90f 	bl	8014eb0 <disk_read>
 8017c92:	4603      	mov	r3, r0
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d009      	beq.n	8017cac <f_lseek+0x4bc>
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	2201      	movs	r2, #1
 8017c9c:	755a      	strb	r2, [r3, #21]
 8017c9e:	68bb      	ldr	r3, [r7, #8]
 8017ca0:	2101      	movs	r1, #1
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	f7fd fa78 	bl	8015198 <unlock_fs>
 8017ca8:	2301      	movs	r3, #1
 8017caa:	e00b      	b.n	8017cc4 <f_lseek+0x4d4>
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017cb0:	621a      	str	r2, [r3, #32]
 8017cb2:	68bb      	ldr	r3, [r7, #8]
 8017cb4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8017cb8:	4611      	mov	r1, r2
 8017cba:	4618      	mov	r0, r3
 8017cbc:	f7fd fa6c 	bl	8015198 <unlock_fs>
 8017cc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	3740      	adds	r7, #64	; 0x40
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	bd80      	pop	{r7, pc}

08017ccc <f_stat>:
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b090      	sub	sp, #64	; 0x40
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	6078      	str	r0, [r7, #4]
 8017cd4:	6039      	str	r1, [r7, #0]
 8017cd6:	f107 010c 	add.w	r1, r7, #12
 8017cda:	1d3b      	adds	r3, r7, #4
 8017cdc:	2200      	movs	r2, #0
 8017cde:	4618      	mov	r0, r3
 8017ce0:	f7fe fc76 	bl	80165d0 <find_volume>
 8017ce4:	4603      	mov	r3, r0
 8017ce6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8017cea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d11f      	bne.n	8017d32 <f_stat+0x66>
 8017cf2:	687a      	ldr	r2, [r7, #4]
 8017cf4:	f107 030c 	add.w	r3, r7, #12
 8017cf8:	4611      	mov	r1, r2
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f7fe fb58 	bl	80163b0 <follow_path>
 8017d00:	4603      	mov	r3, r0
 8017d02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8017d06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d111      	bne.n	8017d32 <f_stat+0x66>
 8017d0e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017d12:	b25b      	sxtb	r3, r3
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	da03      	bge.n	8017d20 <f_stat+0x54>
 8017d18:	2306      	movs	r3, #6
 8017d1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8017d1e:	e008      	b.n	8017d32 <f_stat+0x66>
 8017d20:	683b      	ldr	r3, [r7, #0]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d005      	beq.n	8017d32 <f_stat+0x66>
 8017d26:	f107 030c 	add.w	r3, r7, #12
 8017d2a:	6839      	ldr	r1, [r7, #0]
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	f7fe fa4b 	bl	80161c8 <get_fileinfo>
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8017d38:	4611      	mov	r1, r2
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	f7fd fa2c 	bl	8015198 <unlock_fs>
 8017d40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017d44:	4618      	mov	r0, r3
 8017d46:	3740      	adds	r7, #64	; 0x40
 8017d48:	46bd      	mov	sp, r7
 8017d4a:	bd80      	pop	{r7, pc}

08017d4c <f_gets>:
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b088      	sub	sp, #32
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	60f8      	str	r0, [r7, #12]
 8017d54:	60b9      	str	r1, [r7, #8]
 8017d56:	607a      	str	r2, [r7, #4]
 8017d58:	2300      	movs	r3, #0
 8017d5a:	61fb      	str	r3, [r7, #28]
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	61bb      	str	r3, [r7, #24]
 8017d60:	e01b      	b.n	8017d9a <f_gets+0x4e>
 8017d62:	f107 0310 	add.w	r3, r7, #16
 8017d66:	f107 0114 	add.w	r1, r7, #20
 8017d6a:	2201      	movs	r2, #1
 8017d6c:	6878      	ldr	r0, [r7, #4]
 8017d6e:	f7ff f936 	bl	8016fde <f_read>
 8017d72:	693b      	ldr	r3, [r7, #16]
 8017d74:	2b01      	cmp	r3, #1
 8017d76:	d116      	bne.n	8017da6 <f_gets+0x5a>
 8017d78:	7d3b      	ldrb	r3, [r7, #20]
 8017d7a:	75fb      	strb	r3, [r7, #23]
 8017d7c:	7dfb      	ldrb	r3, [r7, #23]
 8017d7e:	2b0d      	cmp	r3, #13
 8017d80:	d100      	bne.n	8017d84 <f_gets+0x38>
 8017d82:	e00a      	b.n	8017d9a <f_gets+0x4e>
 8017d84:	69bb      	ldr	r3, [r7, #24]
 8017d86:	1c5a      	adds	r2, r3, #1
 8017d88:	61ba      	str	r2, [r7, #24]
 8017d8a:	7dfa      	ldrb	r2, [r7, #23]
 8017d8c:	701a      	strb	r2, [r3, #0]
 8017d8e:	69fb      	ldr	r3, [r7, #28]
 8017d90:	3301      	adds	r3, #1
 8017d92:	61fb      	str	r3, [r7, #28]
 8017d94:	7dfb      	ldrb	r3, [r7, #23]
 8017d96:	2b0a      	cmp	r3, #10
 8017d98:	d007      	beq.n	8017daa <f_gets+0x5e>
 8017d9a:	68bb      	ldr	r3, [r7, #8]
 8017d9c:	3b01      	subs	r3, #1
 8017d9e:	69fa      	ldr	r2, [r7, #28]
 8017da0:	429a      	cmp	r2, r3
 8017da2:	dbde      	blt.n	8017d62 <f_gets+0x16>
 8017da4:	e002      	b.n	8017dac <f_gets+0x60>
 8017da6:	bf00      	nop
 8017da8:	e000      	b.n	8017dac <f_gets+0x60>
 8017daa:	bf00      	nop
 8017dac:	69bb      	ldr	r3, [r7, #24]
 8017dae:	2200      	movs	r2, #0
 8017db0:	701a      	strb	r2, [r3, #0]
 8017db2:	69fb      	ldr	r3, [r7, #28]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d001      	beq.n	8017dbc <f_gets+0x70>
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	e000      	b.n	8017dbe <f_gets+0x72>
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	3720      	adds	r7, #32
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	bd80      	pop	{r7, pc}

08017dc6 <putc_bfd>:
 8017dc6:	b580      	push	{r7, lr}
 8017dc8:	b084      	sub	sp, #16
 8017dca:	af00      	add	r7, sp, #0
 8017dcc:	6078      	str	r0, [r7, #4]
 8017dce:	460b      	mov	r3, r1
 8017dd0:	70fb      	strb	r3, [r7, #3]
 8017dd2:	78fb      	ldrb	r3, [r7, #3]
 8017dd4:	2b0a      	cmp	r3, #10
 8017dd6:	d103      	bne.n	8017de0 <putc_bfd+0x1a>
 8017dd8:	210d      	movs	r1, #13
 8017dda:	6878      	ldr	r0, [r7, #4]
 8017ddc:	f7ff fff3 	bl	8017dc6 <putc_bfd>
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	685b      	ldr	r3, [r3, #4]
 8017de4:	60fb      	str	r3, [r7, #12]
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	db25      	blt.n	8017e38 <putc_bfd+0x72>
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	1c5a      	adds	r2, r3, #1
 8017df0:	60fa      	str	r2, [r7, #12]
 8017df2:	687a      	ldr	r2, [r7, #4]
 8017df4:	4413      	add	r3, r2
 8017df6:	78fa      	ldrb	r2, [r7, #3]
 8017df8:	731a      	strb	r2, [r3, #12]
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	2b3c      	cmp	r3, #60	; 0x3c
 8017dfe:	dd12      	ble.n	8017e26 <putc_bfd+0x60>
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	6818      	ldr	r0, [r3, #0]
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	f103 010c 	add.w	r1, r3, #12
 8017e0a:	68fa      	ldr	r2, [r7, #12]
 8017e0c:	f107 0308 	add.w	r3, r7, #8
 8017e10:	f7ff fa73 	bl	80172fa <f_write>
 8017e14:	68ba      	ldr	r2, [r7, #8]
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	429a      	cmp	r2, r3
 8017e1a:	d101      	bne.n	8017e20 <putc_bfd+0x5a>
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	e001      	b.n	8017e24 <putc_bfd+0x5e>
 8017e20:	f04f 33ff 	mov.w	r3, #4294967295
 8017e24:	60fb      	str	r3, [r7, #12]
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	68fa      	ldr	r2, [r7, #12]
 8017e2a:	605a      	str	r2, [r3, #4]
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	689b      	ldr	r3, [r3, #8]
 8017e30:	1c5a      	adds	r2, r3, #1
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	609a      	str	r2, [r3, #8]
 8017e36:	e000      	b.n	8017e3a <putc_bfd+0x74>
 8017e38:	bf00      	nop
 8017e3a:	3710      	adds	r7, #16
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bd80      	pop	{r7, pc}

08017e40 <putc_flush>:
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b084      	sub	sp, #16
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	685b      	ldr	r3, [r3, #4]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	db16      	blt.n	8017e7e <putc_flush+0x3e>
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	6818      	ldr	r0, [r3, #0]
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	f103 010c 	add.w	r1, r3, #12
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	685b      	ldr	r3, [r3, #4]
 8017e5e:	461a      	mov	r2, r3
 8017e60:	f107 030c 	add.w	r3, r7, #12
 8017e64:	f7ff fa49 	bl	80172fa <f_write>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d107      	bne.n	8017e7e <putc_flush+0x3e>
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	685b      	ldr	r3, [r3, #4]
 8017e72:	68fa      	ldr	r2, [r7, #12]
 8017e74:	4293      	cmp	r3, r2
 8017e76:	d102      	bne.n	8017e7e <putc_flush+0x3e>
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	689b      	ldr	r3, [r3, #8]
 8017e7c:	e001      	b.n	8017e82 <putc_flush+0x42>
 8017e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8017e82:	4618      	mov	r0, r3
 8017e84:	3710      	adds	r7, #16
 8017e86:	46bd      	mov	sp, r7
 8017e88:	bd80      	pop	{r7, pc}

08017e8a <putc_init>:
 8017e8a:	b480      	push	{r7}
 8017e8c:	b083      	sub	sp, #12
 8017e8e:	af00      	add	r7, sp, #0
 8017e90:	6078      	str	r0, [r7, #4]
 8017e92:	6039      	str	r1, [r7, #0]
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	683a      	ldr	r2, [r7, #0]
 8017e98:	601a      	str	r2, [r3, #0]
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	605a      	str	r2, [r3, #4]
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	685a      	ldr	r2, [r3, #4]
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	609a      	str	r2, [r3, #8]
 8017ea8:	bf00      	nop
 8017eaa:	370c      	adds	r7, #12
 8017eac:	46bd      	mov	sp, r7
 8017eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb2:	4770      	bx	lr

08017eb4 <f_puts>:
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b096      	sub	sp, #88	; 0x58
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6078      	str	r0, [r7, #4]
 8017ebc:	6039      	str	r1, [r7, #0]
 8017ebe:	f107 030c 	add.w	r3, r7, #12
 8017ec2:	6839      	ldr	r1, [r7, #0]
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	f7ff ffe0 	bl	8017e8a <putc_init>
 8017eca:	e009      	b.n	8017ee0 <f_puts+0x2c>
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	1c5a      	adds	r2, r3, #1
 8017ed0:	607a      	str	r2, [r7, #4]
 8017ed2:	781a      	ldrb	r2, [r3, #0]
 8017ed4:	f107 030c 	add.w	r3, r7, #12
 8017ed8:	4611      	mov	r1, r2
 8017eda:	4618      	mov	r0, r3
 8017edc:	f7ff ff73 	bl	8017dc6 <putc_bfd>
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	781b      	ldrb	r3, [r3, #0]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d1f1      	bne.n	8017ecc <f_puts+0x18>
 8017ee8:	f107 030c 	add.w	r3, r7, #12
 8017eec:	4618      	mov	r0, r3
 8017eee:	f7ff ffa7 	bl	8017e40 <putc_flush>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	3758      	adds	r7, #88	; 0x58
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	bd80      	pop	{r7, pc}

08017efc <FATFS_LinkDriverEx>:
 8017efc:	b480      	push	{r7}
 8017efe:	b087      	sub	sp, #28
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	60f8      	str	r0, [r7, #12]
 8017f04:	60b9      	str	r1, [r7, #8]
 8017f06:	4613      	mov	r3, r2
 8017f08:	71fb      	strb	r3, [r7, #7]
 8017f0a:	2301      	movs	r3, #1
 8017f0c:	75fb      	strb	r3, [r7, #23]
 8017f0e:	2300      	movs	r3, #0
 8017f10:	75bb      	strb	r3, [r7, #22]
 8017f12:	4b1f      	ldr	r3, [pc, #124]	; (8017f90 <FATFS_LinkDriverEx+0x94>)
 8017f14:	7a5b      	ldrb	r3, [r3, #9]
 8017f16:	b2db      	uxtb	r3, r3
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d131      	bne.n	8017f80 <FATFS_LinkDriverEx+0x84>
 8017f1c:	4b1c      	ldr	r3, [pc, #112]	; (8017f90 <FATFS_LinkDriverEx+0x94>)
 8017f1e:	7a5b      	ldrb	r3, [r3, #9]
 8017f20:	b2db      	uxtb	r3, r3
 8017f22:	461a      	mov	r2, r3
 8017f24:	4b1a      	ldr	r3, [pc, #104]	; (8017f90 <FATFS_LinkDriverEx+0x94>)
 8017f26:	2100      	movs	r1, #0
 8017f28:	5499      	strb	r1, [r3, r2]
 8017f2a:	4b19      	ldr	r3, [pc, #100]	; (8017f90 <FATFS_LinkDriverEx+0x94>)
 8017f2c:	7a5b      	ldrb	r3, [r3, #9]
 8017f2e:	b2db      	uxtb	r3, r3
 8017f30:	4a17      	ldr	r2, [pc, #92]	; (8017f90 <FATFS_LinkDriverEx+0x94>)
 8017f32:	009b      	lsls	r3, r3, #2
 8017f34:	4413      	add	r3, r2
 8017f36:	68fa      	ldr	r2, [r7, #12]
 8017f38:	605a      	str	r2, [r3, #4]
 8017f3a:	4b15      	ldr	r3, [pc, #84]	; (8017f90 <FATFS_LinkDriverEx+0x94>)
 8017f3c:	7a5b      	ldrb	r3, [r3, #9]
 8017f3e:	b2db      	uxtb	r3, r3
 8017f40:	461a      	mov	r2, r3
 8017f42:	4b13      	ldr	r3, [pc, #76]	; (8017f90 <FATFS_LinkDriverEx+0x94>)
 8017f44:	4413      	add	r3, r2
 8017f46:	79fa      	ldrb	r2, [r7, #7]
 8017f48:	721a      	strb	r2, [r3, #8]
 8017f4a:	4b11      	ldr	r3, [pc, #68]	; (8017f90 <FATFS_LinkDriverEx+0x94>)
 8017f4c:	7a5b      	ldrb	r3, [r3, #9]
 8017f4e:	b2db      	uxtb	r3, r3
 8017f50:	1c5a      	adds	r2, r3, #1
 8017f52:	b2d1      	uxtb	r1, r2
 8017f54:	4a0e      	ldr	r2, [pc, #56]	; (8017f90 <FATFS_LinkDriverEx+0x94>)
 8017f56:	7251      	strb	r1, [r2, #9]
 8017f58:	75bb      	strb	r3, [r7, #22]
 8017f5a:	7dbb      	ldrb	r3, [r7, #22]
 8017f5c:	3330      	adds	r3, #48	; 0x30
 8017f5e:	b2da      	uxtb	r2, r3
 8017f60:	68bb      	ldr	r3, [r7, #8]
 8017f62:	701a      	strb	r2, [r3, #0]
 8017f64:	68bb      	ldr	r3, [r7, #8]
 8017f66:	3301      	adds	r3, #1
 8017f68:	223a      	movs	r2, #58	; 0x3a
 8017f6a:	701a      	strb	r2, [r3, #0]
 8017f6c:	68bb      	ldr	r3, [r7, #8]
 8017f6e:	3302      	adds	r3, #2
 8017f70:	222f      	movs	r2, #47	; 0x2f
 8017f72:	701a      	strb	r2, [r3, #0]
 8017f74:	68bb      	ldr	r3, [r7, #8]
 8017f76:	3303      	adds	r3, #3
 8017f78:	2200      	movs	r2, #0
 8017f7a:	701a      	strb	r2, [r3, #0]
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	75fb      	strb	r3, [r7, #23]
 8017f80:	7dfb      	ldrb	r3, [r7, #23]
 8017f82:	4618      	mov	r0, r3
 8017f84:	371c      	adds	r7, #28
 8017f86:	46bd      	mov	sp, r7
 8017f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f8c:	4770      	bx	lr
 8017f8e:	bf00      	nop
 8017f90:	200045dc 	.word	0x200045dc

08017f94 <FATFS_LinkDriver>:
 8017f94:	b580      	push	{r7, lr}
 8017f96:	b082      	sub	sp, #8
 8017f98:	af00      	add	r7, sp, #0
 8017f9a:	6078      	str	r0, [r7, #4]
 8017f9c:	6039      	str	r1, [r7, #0]
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	6839      	ldr	r1, [r7, #0]
 8017fa2:	6878      	ldr	r0, [r7, #4]
 8017fa4:	f7ff ffaa 	bl	8017efc <FATFS_LinkDriverEx>
 8017fa8:	4603      	mov	r3, r0
 8017faa:	4618      	mov	r0, r3
 8017fac:	3708      	adds	r7, #8
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	bd80      	pop	{r7, pc}

08017fb2 <ff_cre_syncobj>:
 8017fb2:	b580      	push	{r7, lr}
 8017fb4:	b086      	sub	sp, #24
 8017fb6:	af00      	add	r7, sp, #0
 8017fb8:	4603      	mov	r3, r0
 8017fba:	6039      	str	r1, [r7, #0]
 8017fbc:	71fb      	strb	r3, [r7, #7]
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	60fb      	str	r3, [r7, #12]
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	613b      	str	r3, [r7, #16]
 8017fc6:	f107 030c 	add.w	r3, r7, #12
 8017fca:	2101      	movs	r1, #1
 8017fcc:	4618      	mov	r0, r3
 8017fce:	f000 f981 	bl	80182d4 <osSemaphoreCreate>
 8017fd2:	4602      	mov	r2, r0
 8017fd4:	683b      	ldr	r3, [r7, #0]
 8017fd6:	601a      	str	r2, [r3, #0]
 8017fd8:	683b      	ldr	r3, [r7, #0]
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	bf14      	ite	ne
 8017fe0:	2301      	movne	r3, #1
 8017fe2:	2300      	moveq	r3, #0
 8017fe4:	b2db      	uxtb	r3, r3
 8017fe6:	617b      	str	r3, [r7, #20]
 8017fe8:	697b      	ldr	r3, [r7, #20]
 8017fea:	4618      	mov	r0, r3
 8017fec:	3718      	adds	r7, #24
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	bd80      	pop	{r7, pc}

08017ff2 <ff_del_syncobj>:
 8017ff2:	b580      	push	{r7, lr}
 8017ff4:	b082      	sub	sp, #8
 8017ff6:	af00      	add	r7, sp, #0
 8017ff8:	6078      	str	r0, [r7, #4]
 8017ffa:	6878      	ldr	r0, [r7, #4]
 8017ffc:	f000 fa20 	bl	8018440 <osSemaphoreDelete>
 8018000:	2301      	movs	r3, #1
 8018002:	4618      	mov	r0, r3
 8018004:	3708      	adds	r7, #8
 8018006:	46bd      	mov	sp, r7
 8018008:	bd80      	pop	{r7, pc}

0801800a <ff_req_grant>:
 801800a:	b580      	push	{r7, lr}
 801800c:	b084      	sub	sp, #16
 801800e:	af00      	add	r7, sp, #0
 8018010:	6078      	str	r0, [r7, #4]
 8018012:	2300      	movs	r3, #0
 8018014:	60fb      	str	r3, [r7, #12]
 8018016:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801801a:	6878      	ldr	r0, [r7, #4]
 801801c:	f000 f98c 	bl	8018338 <osSemaphoreWait>
 8018020:	4603      	mov	r3, r0
 8018022:	2b00      	cmp	r3, #0
 8018024:	d101      	bne.n	801802a <ff_req_grant+0x20>
 8018026:	2301      	movs	r3, #1
 8018028:	60fb      	str	r3, [r7, #12]
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	4618      	mov	r0, r3
 801802e:	3710      	adds	r7, #16
 8018030:	46bd      	mov	sp, r7
 8018032:	bd80      	pop	{r7, pc}

08018034 <ff_rel_grant>:
 8018034:	b580      	push	{r7, lr}
 8018036:	b082      	sub	sp, #8
 8018038:	af00      	add	r7, sp, #0
 801803a:	6078      	str	r0, [r7, #4]
 801803c:	6878      	ldr	r0, [r7, #4]
 801803e:	f000 f9c9 	bl	80183d4 <osSemaphoreRelease>
 8018042:	bf00      	nop
 8018044:	3708      	adds	r7, #8
 8018046:	46bd      	mov	sp, r7
 8018048:	bd80      	pop	{r7, pc}

0801804a <makeFreeRtosPriority>:
 801804a:	b480      	push	{r7}
 801804c:	b085      	sub	sp, #20
 801804e:	af00      	add	r7, sp, #0
 8018050:	4603      	mov	r3, r0
 8018052:	80fb      	strh	r3, [r7, #6]
 8018054:	2300      	movs	r3, #0
 8018056:	60fb      	str	r3, [r7, #12]
 8018058:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801805c:	2b84      	cmp	r3, #132	; 0x84
 801805e:	d005      	beq.n	801806c <makeFreeRtosPriority+0x22>
 8018060:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	4413      	add	r3, r2
 8018068:	3303      	adds	r3, #3
 801806a:	60fb      	str	r3, [r7, #12]
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	4618      	mov	r0, r3
 8018070:	3714      	adds	r7, #20
 8018072:	46bd      	mov	sp, r7
 8018074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018078:	4770      	bx	lr

0801807a <inHandlerMode>:
 801807a:	b480      	push	{r7}
 801807c:	b083      	sub	sp, #12
 801807e:	af00      	add	r7, sp, #0
 8018080:	f3ef 8305 	mrs	r3, IPSR
 8018084:	607b      	str	r3, [r7, #4]
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	2b00      	cmp	r3, #0
 801808a:	bf14      	ite	ne
 801808c:	2301      	movne	r3, #1
 801808e:	2300      	moveq	r3, #0
 8018090:	b2db      	uxtb	r3, r3
 8018092:	4618      	mov	r0, r3
 8018094:	370c      	adds	r7, #12
 8018096:	46bd      	mov	sp, r7
 8018098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801809c:	4770      	bx	lr

0801809e <osKernelStart>:
 801809e:	b580      	push	{r7, lr}
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	f001 fde1 	bl	8019c68 <vTaskStartScheduler>
 80180a6:	2300      	movs	r3, #0
 80180a8:	4618      	mov	r0, r3
 80180aa:	bd80      	pop	{r7, pc}

080180ac <osThreadCreate>:
 80180ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180ae:	b089      	sub	sp, #36	; 0x24
 80180b0:	af04      	add	r7, sp, #16
 80180b2:	6078      	str	r0, [r7, #4]
 80180b4:	6039      	str	r1, [r7, #0]
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	695b      	ldr	r3, [r3, #20]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d020      	beq.n	8018100 <osThreadCreate+0x54>
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	699b      	ldr	r3, [r3, #24]
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d01c      	beq.n	8018100 <osThreadCreate+0x54>
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	685c      	ldr	r4, [r3, #4]
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	681d      	ldr	r5, [r3, #0]
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	691e      	ldr	r6, [r3, #16]
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80180d8:	4618      	mov	r0, r3
 80180da:	f7ff ffb6 	bl	801804a <makeFreeRtosPriority>
 80180de:	4601      	mov	r1, r0
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	695b      	ldr	r3, [r3, #20]
 80180e4:	687a      	ldr	r2, [r7, #4]
 80180e6:	6992      	ldr	r2, [r2, #24]
 80180e8:	9202      	str	r2, [sp, #8]
 80180ea:	9301      	str	r3, [sp, #4]
 80180ec:	9100      	str	r1, [sp, #0]
 80180ee:	683b      	ldr	r3, [r7, #0]
 80180f0:	4632      	mov	r2, r6
 80180f2:	4629      	mov	r1, r5
 80180f4:	4620      	mov	r0, r4
 80180f6:	f001 fbd9 	bl	80198ac <xTaskCreateStatic>
 80180fa:	4603      	mov	r3, r0
 80180fc:	60fb      	str	r3, [r7, #12]
 80180fe:	e01c      	b.n	801813a <osThreadCreate+0x8e>
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	685c      	ldr	r4, [r3, #4]
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	681d      	ldr	r5, [r3, #0]
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	691b      	ldr	r3, [r3, #16]
 801810c:	b29e      	uxth	r6, r3
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018114:	4618      	mov	r0, r3
 8018116:	f7ff ff98 	bl	801804a <makeFreeRtosPriority>
 801811a:	4602      	mov	r2, r0
 801811c:	f107 030c 	add.w	r3, r7, #12
 8018120:	9301      	str	r3, [sp, #4]
 8018122:	9200      	str	r2, [sp, #0]
 8018124:	683b      	ldr	r3, [r7, #0]
 8018126:	4632      	mov	r2, r6
 8018128:	4629      	mov	r1, r5
 801812a:	4620      	mov	r0, r4
 801812c:	f001 fc1b 	bl	8019966 <xTaskCreate>
 8018130:	4603      	mov	r3, r0
 8018132:	2b01      	cmp	r3, #1
 8018134:	d001      	beq.n	801813a <osThreadCreate+0x8e>
 8018136:	2300      	movs	r3, #0
 8018138:	e000      	b.n	801813c <osThreadCreate+0x90>
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	4618      	mov	r0, r3
 801813e:	3714      	adds	r7, #20
 8018140:	46bd      	mov	sp, r7
 8018142:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018144 <osDelay>:
 8018144:	b580      	push	{r7, lr}
 8018146:	b084      	sub	sp, #16
 8018148:	af00      	add	r7, sp, #0
 801814a:	6078      	str	r0, [r7, #4]
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	60fb      	str	r3, [r7, #12]
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d001      	beq.n	801815a <osDelay+0x16>
 8018156:	68fb      	ldr	r3, [r7, #12]
 8018158:	e000      	b.n	801815c <osDelay+0x18>
 801815a:	2301      	movs	r3, #1
 801815c:	4618      	mov	r0, r3
 801815e:	f001 fd4f 	bl	8019c00 <vTaskDelay>
 8018162:	2300      	movs	r3, #0
 8018164:	4618      	mov	r0, r3
 8018166:	3710      	adds	r7, #16
 8018168:	46bd      	mov	sp, r7
 801816a:	bd80      	pop	{r7, pc}

0801816c <osTimerCreate>:
 801816c:	b580      	push	{r7, lr}
 801816e:	b086      	sub	sp, #24
 8018170:	af02      	add	r7, sp, #8
 8018172:	60f8      	str	r0, [r7, #12]
 8018174:	460b      	mov	r3, r1
 8018176:	607a      	str	r2, [r7, #4]
 8018178:	72fb      	strb	r3, [r7, #11]
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	685b      	ldr	r3, [r3, #4]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d013      	beq.n	80181aa <osTimerCreate+0x3e>
 8018182:	7afb      	ldrb	r3, [r7, #11]
 8018184:	2b01      	cmp	r3, #1
 8018186:	d101      	bne.n	801818c <osTimerCreate+0x20>
 8018188:	2101      	movs	r1, #1
 801818a:	e000      	b.n	801818e <osTimerCreate+0x22>
 801818c:	2100      	movs	r1, #0
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	68fa      	ldr	r2, [r7, #12]
 8018194:	6852      	ldr	r2, [r2, #4]
 8018196:	9201      	str	r2, [sp, #4]
 8018198:	9300      	str	r3, [sp, #0]
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	460a      	mov	r2, r1
 801819e:	2101      	movs	r1, #1
 80181a0:	480b      	ldr	r0, [pc, #44]	; (80181d0 <osTimerCreate+0x64>)
 80181a2:	f002 fe14 	bl	801adce <xTimerCreateStatic>
 80181a6:	4603      	mov	r3, r0
 80181a8:	e00e      	b.n	80181c8 <osTimerCreate+0x5c>
 80181aa:	7afb      	ldrb	r3, [r7, #11]
 80181ac:	2b01      	cmp	r3, #1
 80181ae:	d101      	bne.n	80181b4 <osTimerCreate+0x48>
 80181b0:	2201      	movs	r2, #1
 80181b2:	e000      	b.n	80181b6 <osTimerCreate+0x4a>
 80181b4:	2200      	movs	r2, #0
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	9300      	str	r3, [sp, #0]
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	2101      	movs	r1, #1
 80181c0:	4803      	ldr	r0, [pc, #12]	; (80181d0 <osTimerCreate+0x64>)
 80181c2:	f002 fde3 	bl	801ad8c <xTimerCreate>
 80181c6:	4603      	mov	r3, r0
 80181c8:	4618      	mov	r0, r3
 80181ca:	3710      	adds	r7, #16
 80181cc:	46bd      	mov	sp, r7
 80181ce:	bd80      	pop	{r7, pc}
 80181d0:	08022270 	.word	0x08022270

080181d4 <osTimerStart>:
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b088      	sub	sp, #32
 80181d8:	af02      	add	r7, sp, #8
 80181da:	6078      	str	r0, [r7, #4]
 80181dc:	6039      	str	r1, [r7, #0]
 80181de:	2300      	movs	r3, #0
 80181e0:	617b      	str	r3, [r7, #20]
 80181e2:	2300      	movs	r3, #0
 80181e4:	60fb      	str	r3, [r7, #12]
 80181e6:	683b      	ldr	r3, [r7, #0]
 80181e8:	613b      	str	r3, [r7, #16]
 80181ea:	693b      	ldr	r3, [r7, #16]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d101      	bne.n	80181f4 <osTimerStart+0x20>
 80181f0:	2301      	movs	r3, #1
 80181f2:	613b      	str	r3, [r7, #16]
 80181f4:	f7ff ff41 	bl	801807a <inHandlerMode>
 80181f8:	4603      	mov	r3, r0
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d01a      	beq.n	8018234 <osTimerStart+0x60>
 80181fe:	f107 030c 	add.w	r3, r7, #12
 8018202:	2200      	movs	r2, #0
 8018204:	9200      	str	r2, [sp, #0]
 8018206:	693a      	ldr	r2, [r7, #16]
 8018208:	2109      	movs	r1, #9
 801820a:	6878      	ldr	r0, [r7, #4]
 801820c:	f002 fe58 	bl	801aec0 <xTimerGenericCommand>
 8018210:	4603      	mov	r3, r0
 8018212:	2b01      	cmp	r3, #1
 8018214:	d002      	beq.n	801821c <osTimerStart+0x48>
 8018216:	23ff      	movs	r3, #255	; 0xff
 8018218:	617b      	str	r3, [r7, #20]
 801821a:	e018      	b.n	801824e <osTimerStart+0x7a>
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	2b00      	cmp	r3, #0
 8018220:	d015      	beq.n	801824e <osTimerStart+0x7a>
 8018222:	4b0d      	ldr	r3, [pc, #52]	; (8018258 <osTimerStart+0x84>)
 8018224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018228:	601a      	str	r2, [r3, #0]
 801822a:	f3bf 8f4f 	dsb	sy
 801822e:	f3bf 8f6f 	isb	sy
 8018232:	e00c      	b.n	801824e <osTimerStart+0x7a>
 8018234:	2300      	movs	r3, #0
 8018236:	9300      	str	r3, [sp, #0]
 8018238:	2300      	movs	r3, #0
 801823a:	693a      	ldr	r2, [r7, #16]
 801823c:	2104      	movs	r1, #4
 801823e:	6878      	ldr	r0, [r7, #4]
 8018240:	f002 fe3e 	bl	801aec0 <xTimerGenericCommand>
 8018244:	4603      	mov	r3, r0
 8018246:	2b01      	cmp	r3, #1
 8018248:	d001      	beq.n	801824e <osTimerStart+0x7a>
 801824a:	23ff      	movs	r3, #255	; 0xff
 801824c:	617b      	str	r3, [r7, #20]
 801824e:	697b      	ldr	r3, [r7, #20]
 8018250:	4618      	mov	r0, r3
 8018252:	3718      	adds	r7, #24
 8018254:	46bd      	mov	sp, r7
 8018256:	bd80      	pop	{r7, pc}
 8018258:	e000ed04 	.word	0xe000ed04

0801825c <osTimerStop>:
 801825c:	b580      	push	{r7, lr}
 801825e:	b086      	sub	sp, #24
 8018260:	af02      	add	r7, sp, #8
 8018262:	6078      	str	r0, [r7, #4]
 8018264:	2300      	movs	r3, #0
 8018266:	60fb      	str	r3, [r7, #12]
 8018268:	2300      	movs	r3, #0
 801826a:	60bb      	str	r3, [r7, #8]
 801826c:	f7ff ff05 	bl	801807a <inHandlerMode>
 8018270:	4603      	mov	r3, r0
 8018272:	2b00      	cmp	r3, #0
 8018274:	d019      	beq.n	80182aa <osTimerStop+0x4e>
 8018276:	f107 0308 	add.w	r3, r7, #8
 801827a:	2200      	movs	r2, #0
 801827c:	9200      	str	r2, [sp, #0]
 801827e:	2200      	movs	r2, #0
 8018280:	2108      	movs	r1, #8
 8018282:	6878      	ldr	r0, [r7, #4]
 8018284:	f002 fe1c 	bl	801aec0 <xTimerGenericCommand>
 8018288:	4603      	mov	r3, r0
 801828a:	2b01      	cmp	r3, #1
 801828c:	d001      	beq.n	8018292 <osTimerStop+0x36>
 801828e:	23ff      	movs	r3, #255	; 0xff
 8018290:	e019      	b.n	80182c6 <osTimerStop+0x6a>
 8018292:	68bb      	ldr	r3, [r7, #8]
 8018294:	2b00      	cmp	r3, #0
 8018296:	d015      	beq.n	80182c4 <osTimerStop+0x68>
 8018298:	4b0d      	ldr	r3, [pc, #52]	; (80182d0 <osTimerStop+0x74>)
 801829a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801829e:	601a      	str	r2, [r3, #0]
 80182a0:	f3bf 8f4f 	dsb	sy
 80182a4:	f3bf 8f6f 	isb	sy
 80182a8:	e00c      	b.n	80182c4 <osTimerStop+0x68>
 80182aa:	2300      	movs	r3, #0
 80182ac:	9300      	str	r3, [sp, #0]
 80182ae:	2300      	movs	r3, #0
 80182b0:	2200      	movs	r2, #0
 80182b2:	2103      	movs	r1, #3
 80182b4:	6878      	ldr	r0, [r7, #4]
 80182b6:	f002 fe03 	bl	801aec0 <xTimerGenericCommand>
 80182ba:	4603      	mov	r3, r0
 80182bc:	2b01      	cmp	r3, #1
 80182be:	d001      	beq.n	80182c4 <osTimerStop+0x68>
 80182c0:	23ff      	movs	r3, #255	; 0xff
 80182c2:	60fb      	str	r3, [r7, #12]
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	4618      	mov	r0, r3
 80182c8:	3710      	adds	r7, #16
 80182ca:	46bd      	mov	sp, r7
 80182cc:	bd80      	pop	{r7, pc}
 80182ce:	bf00      	nop
 80182d0:	e000ed04 	.word	0xe000ed04

080182d4 <osSemaphoreCreate>:
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b086      	sub	sp, #24
 80182d8:	af02      	add	r7, sp, #8
 80182da:	6078      	str	r0, [r7, #4]
 80182dc:	6039      	str	r1, [r7, #0]
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	685b      	ldr	r3, [r3, #4]
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d00f      	beq.n	8018306 <osSemaphoreCreate+0x32>
 80182e6:	683b      	ldr	r3, [r7, #0]
 80182e8:	2b01      	cmp	r3, #1
 80182ea:	d10a      	bne.n	8018302 <osSemaphoreCreate+0x2e>
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	685b      	ldr	r3, [r3, #4]
 80182f0:	2203      	movs	r2, #3
 80182f2:	9200      	str	r2, [sp, #0]
 80182f4:	2200      	movs	r2, #0
 80182f6:	2100      	movs	r1, #0
 80182f8:	2001      	movs	r0, #1
 80182fa:	f000 fb9f 	bl	8018a3c <xQueueGenericCreateStatic>
 80182fe:	4603      	mov	r3, r0
 8018300:	e016      	b.n	8018330 <osSemaphoreCreate+0x5c>
 8018302:	2300      	movs	r3, #0
 8018304:	e014      	b.n	8018330 <osSemaphoreCreate+0x5c>
 8018306:	683b      	ldr	r3, [r7, #0]
 8018308:	2b01      	cmp	r3, #1
 801830a:	d110      	bne.n	801832e <osSemaphoreCreate+0x5a>
 801830c:	2203      	movs	r2, #3
 801830e:	2100      	movs	r1, #0
 8018310:	2001      	movs	r0, #1
 8018312:	f000 fc0b 	bl	8018b2c <xQueueGenericCreate>
 8018316:	60f8      	str	r0, [r7, #12]
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d005      	beq.n	801832a <osSemaphoreCreate+0x56>
 801831e:	2300      	movs	r3, #0
 8018320:	2200      	movs	r2, #0
 8018322:	2100      	movs	r1, #0
 8018324:	68f8      	ldr	r0, [r7, #12]
 8018326:	f000 fc5b 	bl	8018be0 <xQueueGenericSend>
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	e000      	b.n	8018330 <osSemaphoreCreate+0x5c>
 801832e:	2300      	movs	r3, #0
 8018330:	4618      	mov	r0, r3
 8018332:	3710      	adds	r7, #16
 8018334:	46bd      	mov	sp, r7
 8018336:	bd80      	pop	{r7, pc}

08018338 <osSemaphoreWait>:
 8018338:	b580      	push	{r7, lr}
 801833a:	b084      	sub	sp, #16
 801833c:	af00      	add	r7, sp, #0
 801833e:	6078      	str	r0, [r7, #4]
 8018340:	6039      	str	r1, [r7, #0]
 8018342:	2300      	movs	r3, #0
 8018344:	60bb      	str	r3, [r7, #8]
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	2b00      	cmp	r3, #0
 801834a:	d101      	bne.n	8018350 <osSemaphoreWait+0x18>
 801834c:	2380      	movs	r3, #128	; 0x80
 801834e:	e03a      	b.n	80183c6 <osSemaphoreWait+0x8e>
 8018350:	2300      	movs	r3, #0
 8018352:	60fb      	str	r3, [r7, #12]
 8018354:	683b      	ldr	r3, [r7, #0]
 8018356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801835a:	d103      	bne.n	8018364 <osSemaphoreWait+0x2c>
 801835c:	f04f 33ff 	mov.w	r3, #4294967295
 8018360:	60fb      	str	r3, [r7, #12]
 8018362:	e009      	b.n	8018378 <osSemaphoreWait+0x40>
 8018364:	683b      	ldr	r3, [r7, #0]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d006      	beq.n	8018378 <osSemaphoreWait+0x40>
 801836a:	683b      	ldr	r3, [r7, #0]
 801836c:	60fb      	str	r3, [r7, #12]
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d101      	bne.n	8018378 <osSemaphoreWait+0x40>
 8018374:	2301      	movs	r3, #1
 8018376:	60fb      	str	r3, [r7, #12]
 8018378:	f7ff fe7f 	bl	801807a <inHandlerMode>
 801837c:	4603      	mov	r3, r0
 801837e:	2b00      	cmp	r3, #0
 8018380:	d017      	beq.n	80183b2 <osSemaphoreWait+0x7a>
 8018382:	f107 0308 	add.w	r3, r7, #8
 8018386:	461a      	mov	r2, r3
 8018388:	2100      	movs	r1, #0
 801838a:	6878      	ldr	r0, [r7, #4]
 801838c:	f001 f83a 	bl	8019404 <xQueueReceiveFromISR>
 8018390:	4603      	mov	r3, r0
 8018392:	2b01      	cmp	r3, #1
 8018394:	d001      	beq.n	801839a <osSemaphoreWait+0x62>
 8018396:	23ff      	movs	r3, #255	; 0xff
 8018398:	e015      	b.n	80183c6 <osSemaphoreWait+0x8e>
 801839a:	68bb      	ldr	r3, [r7, #8]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d011      	beq.n	80183c4 <osSemaphoreWait+0x8c>
 80183a0:	4b0b      	ldr	r3, [pc, #44]	; (80183d0 <osSemaphoreWait+0x98>)
 80183a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80183a6:	601a      	str	r2, [r3, #0]
 80183a8:	f3bf 8f4f 	dsb	sy
 80183ac:	f3bf 8f6f 	isb	sy
 80183b0:	e008      	b.n	80183c4 <osSemaphoreWait+0x8c>
 80183b2:	68f9      	ldr	r1, [r7, #12]
 80183b4:	6878      	ldr	r0, [r7, #4]
 80183b6:	f000 ff19 	bl	80191ec <xQueueSemaphoreTake>
 80183ba:	4603      	mov	r3, r0
 80183bc:	2b01      	cmp	r3, #1
 80183be:	d001      	beq.n	80183c4 <osSemaphoreWait+0x8c>
 80183c0:	23ff      	movs	r3, #255	; 0xff
 80183c2:	e000      	b.n	80183c6 <osSemaphoreWait+0x8e>
 80183c4:	2300      	movs	r3, #0
 80183c6:	4618      	mov	r0, r3
 80183c8:	3710      	adds	r7, #16
 80183ca:	46bd      	mov	sp, r7
 80183cc:	bd80      	pop	{r7, pc}
 80183ce:	bf00      	nop
 80183d0:	e000ed04 	.word	0xe000ed04

080183d4 <osSemaphoreRelease>:
 80183d4:	b580      	push	{r7, lr}
 80183d6:	b084      	sub	sp, #16
 80183d8:	af00      	add	r7, sp, #0
 80183da:	6078      	str	r0, [r7, #4]
 80183dc:	2300      	movs	r3, #0
 80183de:	60fb      	str	r3, [r7, #12]
 80183e0:	2300      	movs	r3, #0
 80183e2:	60bb      	str	r3, [r7, #8]
 80183e4:	f7ff fe49 	bl	801807a <inHandlerMode>
 80183e8:	4603      	mov	r3, r0
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d016      	beq.n	801841c <osSemaphoreRelease+0x48>
 80183ee:	f107 0308 	add.w	r3, r7, #8
 80183f2:	4619      	mov	r1, r3
 80183f4:	6878      	ldr	r0, [r7, #4]
 80183f6:	f000 fd8c 	bl	8018f12 <xQueueGiveFromISR>
 80183fa:	4603      	mov	r3, r0
 80183fc:	2b01      	cmp	r3, #1
 80183fe:	d001      	beq.n	8018404 <osSemaphoreRelease+0x30>
 8018400:	23ff      	movs	r3, #255	; 0xff
 8018402:	e017      	b.n	8018434 <osSemaphoreRelease+0x60>
 8018404:	68bb      	ldr	r3, [r7, #8]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d013      	beq.n	8018432 <osSemaphoreRelease+0x5e>
 801840a:	4b0c      	ldr	r3, [pc, #48]	; (801843c <osSemaphoreRelease+0x68>)
 801840c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018410:	601a      	str	r2, [r3, #0]
 8018412:	f3bf 8f4f 	dsb	sy
 8018416:	f3bf 8f6f 	isb	sy
 801841a:	e00a      	b.n	8018432 <osSemaphoreRelease+0x5e>
 801841c:	2300      	movs	r3, #0
 801841e:	2200      	movs	r2, #0
 8018420:	2100      	movs	r1, #0
 8018422:	6878      	ldr	r0, [r7, #4]
 8018424:	f000 fbdc 	bl	8018be0 <xQueueGenericSend>
 8018428:	4603      	mov	r3, r0
 801842a:	2b01      	cmp	r3, #1
 801842c:	d001      	beq.n	8018432 <osSemaphoreRelease+0x5e>
 801842e:	23ff      	movs	r3, #255	; 0xff
 8018430:	60fb      	str	r3, [r7, #12]
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	4618      	mov	r0, r3
 8018436:	3710      	adds	r7, #16
 8018438:	46bd      	mov	sp, r7
 801843a:	bd80      	pop	{r7, pc}
 801843c:	e000ed04 	.word	0xe000ed04

08018440 <osSemaphoreDelete>:
 8018440:	b580      	push	{r7, lr}
 8018442:	b082      	sub	sp, #8
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
 8018448:	f7ff fe17 	bl	801807a <inHandlerMode>
 801844c:	4603      	mov	r3, r0
 801844e:	2b00      	cmp	r3, #0
 8018450:	d001      	beq.n	8018456 <osSemaphoreDelete+0x16>
 8018452:	2382      	movs	r3, #130	; 0x82
 8018454:	e003      	b.n	801845e <osSemaphoreDelete+0x1e>
 8018456:	6878      	ldr	r0, [r7, #4]
 8018458:	f001 f854 	bl	8019504 <vQueueDelete>
 801845c:	2300      	movs	r3, #0
 801845e:	4618      	mov	r0, r3
 8018460:	3708      	adds	r7, #8
 8018462:	46bd      	mov	sp, r7
 8018464:	bd80      	pop	{r7, pc}

08018466 <xEventGroupCreate>:
 8018466:	b580      	push	{r7, lr}
 8018468:	b082      	sub	sp, #8
 801846a:	af00      	add	r7, sp, #0
 801846c:	201c      	movs	r0, #28
 801846e:	f003 fa63 	bl	801b938 <pvPortMalloc>
 8018472:	6078      	str	r0, [r7, #4]
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	2b00      	cmp	r3, #0
 8018478:	d00a      	beq.n	8018490 <xEventGroupCreate+0x2a>
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	2200      	movs	r2, #0
 801847e:	601a      	str	r2, [r3, #0]
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	3304      	adds	r3, #4
 8018484:	4618      	mov	r0, r3
 8018486:	f000 f9bc 	bl	8018802 <vListInitialise>
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	2200      	movs	r2, #0
 801848e:	761a      	strb	r2, [r3, #24]
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	4618      	mov	r0, r3
 8018494:	3708      	adds	r7, #8
 8018496:	46bd      	mov	sp, r7
 8018498:	bd80      	pop	{r7, pc}
	...

0801849c <xEventGroupWaitBits>:
 801849c:	b580      	push	{r7, lr}
 801849e:	b090      	sub	sp, #64	; 0x40
 80184a0:	af00      	add	r7, sp, #0
 80184a2:	60f8      	str	r0, [r7, #12]
 80184a4:	60b9      	str	r1, [r7, #8]
 80184a6:	607a      	str	r2, [r7, #4]
 80184a8:	603b      	str	r3, [r7, #0]
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	637b      	str	r3, [r7, #52]	; 0x34
 80184ae:	2300      	movs	r3, #0
 80184b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80184b2:	2300      	movs	r3, #0
 80184b4:	633b      	str	r3, [r7, #48]	; 0x30
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d10a      	bne.n	80184d2 <xEventGroupWaitBits+0x36>
 80184bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184c0:	f383 8811 	msr	BASEPRI, r3
 80184c4:	f3bf 8f6f 	isb	sy
 80184c8:	f3bf 8f4f 	dsb	sy
 80184cc:	623b      	str	r3, [r7, #32]
 80184ce:	bf00      	nop
 80184d0:	e7fe      	b.n	80184d0 <xEventGroupWaitBits+0x34>
 80184d2:	68bb      	ldr	r3, [r7, #8]
 80184d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d00a      	beq.n	80184f2 <xEventGroupWaitBits+0x56>
 80184dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184e0:	f383 8811 	msr	BASEPRI, r3
 80184e4:	f3bf 8f6f 	isb	sy
 80184e8:	f3bf 8f4f 	dsb	sy
 80184ec:	61fb      	str	r3, [r7, #28]
 80184ee:	bf00      	nop
 80184f0:	e7fe      	b.n	80184f0 <xEventGroupWaitBits+0x54>
 80184f2:	68bb      	ldr	r3, [r7, #8]
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d10a      	bne.n	801850e <xEventGroupWaitBits+0x72>
 80184f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184fc:	f383 8811 	msr	BASEPRI, r3
 8018500:	f3bf 8f6f 	isb	sy
 8018504:	f3bf 8f4f 	dsb	sy
 8018508:	61bb      	str	r3, [r7, #24]
 801850a:	bf00      	nop
 801850c:	e7fe      	b.n	801850c <xEventGroupWaitBits+0x70>
 801850e:	f002 f89d 	bl	801a64c <xTaskGetSchedulerState>
 8018512:	4603      	mov	r3, r0
 8018514:	2b00      	cmp	r3, #0
 8018516:	d102      	bne.n	801851e <xEventGroupWaitBits+0x82>
 8018518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801851a:	2b00      	cmp	r3, #0
 801851c:	d101      	bne.n	8018522 <xEventGroupWaitBits+0x86>
 801851e:	2301      	movs	r3, #1
 8018520:	e000      	b.n	8018524 <xEventGroupWaitBits+0x88>
 8018522:	2300      	movs	r3, #0
 8018524:	2b00      	cmp	r3, #0
 8018526:	d10a      	bne.n	801853e <xEventGroupWaitBits+0xa2>
 8018528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801852c:	f383 8811 	msr	BASEPRI, r3
 8018530:	f3bf 8f6f 	isb	sy
 8018534:	f3bf 8f4f 	dsb	sy
 8018538:	617b      	str	r3, [r7, #20]
 801853a:	bf00      	nop
 801853c:	e7fe      	b.n	801853c <xEventGroupWaitBits+0xa0>
 801853e:	f001 fc03 	bl	8019d48 <vTaskSuspendAll>
 8018542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018548:	683a      	ldr	r2, [r7, #0]
 801854a:	68b9      	ldr	r1, [r7, #8]
 801854c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801854e:	f000 f936 	bl	80187be <prvTestWaitCondition>
 8018552:	62b8      	str	r0, [r7, #40]	; 0x28
 8018554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018556:	2b00      	cmp	r3, #0
 8018558:	d00e      	beq.n	8018578 <xEventGroupWaitBits+0xdc>
 801855a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801855c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801855e:	2300      	movs	r3, #0
 8018560:	64bb      	str	r3, [r7, #72]	; 0x48
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d028      	beq.n	80185ba <xEventGroupWaitBits+0x11e>
 8018568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801856a:	681a      	ldr	r2, [r3, #0]
 801856c:	68bb      	ldr	r3, [r7, #8]
 801856e:	43db      	mvns	r3, r3
 8018570:	401a      	ands	r2, r3
 8018572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018574:	601a      	str	r2, [r3, #0]
 8018576:	e020      	b.n	80185ba <xEventGroupWaitBits+0x11e>
 8018578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801857a:	2b00      	cmp	r3, #0
 801857c:	d104      	bne.n	8018588 <xEventGroupWaitBits+0xec>
 801857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018582:	2301      	movs	r3, #1
 8018584:	633b      	str	r3, [r7, #48]	; 0x30
 8018586:	e018      	b.n	80185ba <xEventGroupWaitBits+0x11e>
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d003      	beq.n	8018596 <xEventGroupWaitBits+0xfa>
 801858e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018590:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018594:	63bb      	str	r3, [r7, #56]	; 0x38
 8018596:	683b      	ldr	r3, [r7, #0]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d003      	beq.n	80185a4 <xEventGroupWaitBits+0x108>
 801859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801859e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80185a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80185a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185a6:	1d18      	adds	r0, r3, #4
 80185a8:	68ba      	ldr	r2, [r7, #8]
 80185aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185ac:	4313      	orrs	r3, r2
 80185ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80185b0:	4619      	mov	r1, r3
 80185b2:	f001 fdc1 	bl	801a138 <vTaskPlaceOnUnorderedEventList>
 80185b6:	2300      	movs	r3, #0
 80185b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80185ba:	f001 fbd3 	bl	8019d64 <xTaskResumeAll>
 80185be:	6278      	str	r0, [r7, #36]	; 0x24
 80185c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d031      	beq.n	801862a <xEventGroupWaitBits+0x18e>
 80185c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d107      	bne.n	80185dc <xEventGroupWaitBits+0x140>
 80185cc:	4b19      	ldr	r3, [pc, #100]	; (8018634 <xEventGroupWaitBits+0x198>)
 80185ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185d2:	601a      	str	r2, [r3, #0]
 80185d4:	f3bf 8f4f 	dsb	sy
 80185d8:	f3bf 8f6f 	isb	sy
 80185dc:	f002 f9de 	bl	801a99c <uxTaskResetEventItemValue>
 80185e0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80185e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d11a      	bne.n	8018622 <xEventGroupWaitBits+0x186>
 80185ec:	f003 f882 	bl	801b6f4 <vPortEnterCritical>
 80185f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80185f6:	683a      	ldr	r2, [r7, #0]
 80185f8:	68b9      	ldr	r1, [r7, #8]
 80185fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80185fc:	f000 f8df 	bl	80187be <prvTestWaitCondition>
 8018600:	4603      	mov	r3, r0
 8018602:	2b00      	cmp	r3, #0
 8018604:	d009      	beq.n	801861a <xEventGroupWaitBits+0x17e>
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d006      	beq.n	801861a <xEventGroupWaitBits+0x17e>
 801860c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801860e:	681a      	ldr	r2, [r3, #0]
 8018610:	68bb      	ldr	r3, [r7, #8]
 8018612:	43db      	mvns	r3, r3
 8018614:	401a      	ands	r2, r3
 8018616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018618:	601a      	str	r2, [r3, #0]
 801861a:	2301      	movs	r3, #1
 801861c:	633b      	str	r3, [r7, #48]	; 0x30
 801861e:	f003 f899 	bl	801b754 <vPortExitCritical>
 8018622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018624:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018628:	63fb      	str	r3, [r7, #60]	; 0x3c
 801862a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801862c:	4618      	mov	r0, r3
 801862e:	3740      	adds	r7, #64	; 0x40
 8018630:	46bd      	mov	sp, r7
 8018632:	bd80      	pop	{r7, pc}
 8018634:	e000ed04 	.word	0xe000ed04

08018638 <xEventGroupClearBits>:
 8018638:	b580      	push	{r7, lr}
 801863a:	b086      	sub	sp, #24
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
 8018640:	6039      	str	r1, [r7, #0]
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	617b      	str	r3, [r7, #20]
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	2b00      	cmp	r3, #0
 801864a:	d10a      	bne.n	8018662 <xEventGroupClearBits+0x2a>
 801864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018650:	f383 8811 	msr	BASEPRI, r3
 8018654:	f3bf 8f6f 	isb	sy
 8018658:	f3bf 8f4f 	dsb	sy
 801865c:	60fb      	str	r3, [r7, #12]
 801865e:	bf00      	nop
 8018660:	e7fe      	b.n	8018660 <xEventGroupClearBits+0x28>
 8018662:	683b      	ldr	r3, [r7, #0]
 8018664:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018668:	2b00      	cmp	r3, #0
 801866a:	d00a      	beq.n	8018682 <xEventGroupClearBits+0x4a>
 801866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018670:	f383 8811 	msr	BASEPRI, r3
 8018674:	f3bf 8f6f 	isb	sy
 8018678:	f3bf 8f4f 	dsb	sy
 801867c:	60bb      	str	r3, [r7, #8]
 801867e:	bf00      	nop
 8018680:	e7fe      	b.n	8018680 <xEventGroupClearBits+0x48>
 8018682:	f003 f837 	bl	801b6f4 <vPortEnterCritical>
 8018686:	697b      	ldr	r3, [r7, #20]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	613b      	str	r3, [r7, #16]
 801868c:	697b      	ldr	r3, [r7, #20]
 801868e:	681a      	ldr	r2, [r3, #0]
 8018690:	683b      	ldr	r3, [r7, #0]
 8018692:	43db      	mvns	r3, r3
 8018694:	401a      	ands	r2, r3
 8018696:	697b      	ldr	r3, [r7, #20]
 8018698:	601a      	str	r2, [r3, #0]
 801869a:	f003 f85b 	bl	801b754 <vPortExitCritical>
 801869e:	693b      	ldr	r3, [r7, #16]
 80186a0:	4618      	mov	r0, r3
 80186a2:	3718      	adds	r7, #24
 80186a4:	46bd      	mov	sp, r7
 80186a6:	bd80      	pop	{r7, pc}

080186a8 <xEventGroupSetBits>:
 80186a8:	b580      	push	{r7, lr}
 80186aa:	b08e      	sub	sp, #56	; 0x38
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	6078      	str	r0, [r7, #4]
 80186b0:	6039      	str	r1, [r7, #0]
 80186b2:	2300      	movs	r3, #0
 80186b4:	633b      	str	r3, [r7, #48]	; 0x30
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80186ba:	2300      	movs	r3, #0
 80186bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d10a      	bne.n	80186da <xEventGroupSetBits+0x32>
 80186c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186c8:	f383 8811 	msr	BASEPRI, r3
 80186cc:	f3bf 8f6f 	isb	sy
 80186d0:	f3bf 8f4f 	dsb	sy
 80186d4:	613b      	str	r3, [r7, #16]
 80186d6:	bf00      	nop
 80186d8:	e7fe      	b.n	80186d8 <xEventGroupSetBits+0x30>
 80186da:	683b      	ldr	r3, [r7, #0]
 80186dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d00a      	beq.n	80186fa <xEventGroupSetBits+0x52>
 80186e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186e8:	f383 8811 	msr	BASEPRI, r3
 80186ec:	f3bf 8f6f 	isb	sy
 80186f0:	f3bf 8f4f 	dsb	sy
 80186f4:	60fb      	str	r3, [r7, #12]
 80186f6:	bf00      	nop
 80186f8:	e7fe      	b.n	80186f8 <xEventGroupSetBits+0x50>
 80186fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186fc:	3304      	adds	r3, #4
 80186fe:	627b      	str	r3, [r7, #36]	; 0x24
 8018700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018702:	3308      	adds	r3, #8
 8018704:	623b      	str	r3, [r7, #32]
 8018706:	f001 fb1f 	bl	8019d48 <vTaskSuspendAll>
 801870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801870c:	68db      	ldr	r3, [r3, #12]
 801870e:	637b      	str	r3, [r7, #52]	; 0x34
 8018710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018712:	681a      	ldr	r2, [r3, #0]
 8018714:	683b      	ldr	r3, [r7, #0]
 8018716:	431a      	orrs	r2, r3
 8018718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801871a:	601a      	str	r2, [r3, #0]
 801871c:	e03c      	b.n	8018798 <xEventGroupSetBits+0xf0>
 801871e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018720:	685b      	ldr	r3, [r3, #4]
 8018722:	61fb      	str	r3, [r7, #28]
 8018724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	61bb      	str	r3, [r7, #24]
 801872a:	2300      	movs	r3, #0
 801872c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801872e:	69bb      	ldr	r3, [r7, #24]
 8018730:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018734:	617b      	str	r3, [r7, #20]
 8018736:	69bb      	ldr	r3, [r7, #24]
 8018738:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801873c:	61bb      	str	r3, [r7, #24]
 801873e:	697b      	ldr	r3, [r7, #20]
 8018740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8018744:	2b00      	cmp	r3, #0
 8018746:	d108      	bne.n	801875a <xEventGroupSetBits+0xb2>
 8018748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801874a:	681a      	ldr	r2, [r3, #0]
 801874c:	69bb      	ldr	r3, [r7, #24]
 801874e:	4013      	ands	r3, r2
 8018750:	2b00      	cmp	r3, #0
 8018752:	d00b      	beq.n	801876c <xEventGroupSetBits+0xc4>
 8018754:	2301      	movs	r3, #1
 8018756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018758:	e008      	b.n	801876c <xEventGroupSetBits+0xc4>
 801875a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801875c:	681a      	ldr	r2, [r3, #0]
 801875e:	69bb      	ldr	r3, [r7, #24]
 8018760:	4013      	ands	r3, r2
 8018762:	69ba      	ldr	r2, [r7, #24]
 8018764:	429a      	cmp	r2, r3
 8018766:	d101      	bne.n	801876c <xEventGroupSetBits+0xc4>
 8018768:	2301      	movs	r3, #1
 801876a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801876c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801876e:	2b00      	cmp	r3, #0
 8018770:	d010      	beq.n	8018794 <xEventGroupSetBits+0xec>
 8018772:	697b      	ldr	r3, [r7, #20]
 8018774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018778:	2b00      	cmp	r3, #0
 801877a:	d003      	beq.n	8018784 <xEventGroupSetBits+0xdc>
 801877c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801877e:	69bb      	ldr	r3, [r7, #24]
 8018780:	4313      	orrs	r3, r2
 8018782:	633b      	str	r3, [r7, #48]	; 0x30
 8018784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801878c:	4619      	mov	r1, r3
 801878e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018790:	f001 fd9c 	bl	801a2cc <vTaskRemoveFromUnorderedEventList>
 8018794:	69fb      	ldr	r3, [r7, #28]
 8018796:	637b      	str	r3, [r7, #52]	; 0x34
 8018798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801879a:	6a3b      	ldr	r3, [r7, #32]
 801879c:	429a      	cmp	r2, r3
 801879e:	d1be      	bne.n	801871e <xEventGroupSetBits+0x76>
 80187a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187a2:	681a      	ldr	r2, [r3, #0]
 80187a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187a6:	43db      	mvns	r3, r3
 80187a8:	401a      	ands	r2, r3
 80187aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ac:	601a      	str	r2, [r3, #0]
 80187ae:	f001 fad9 	bl	8019d64 <xTaskResumeAll>
 80187b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	4618      	mov	r0, r3
 80187b8:	3738      	adds	r7, #56	; 0x38
 80187ba:	46bd      	mov	sp, r7
 80187bc:	bd80      	pop	{r7, pc}

080187be <prvTestWaitCondition>:
 80187be:	b480      	push	{r7}
 80187c0:	b087      	sub	sp, #28
 80187c2:	af00      	add	r7, sp, #0
 80187c4:	60f8      	str	r0, [r7, #12]
 80187c6:	60b9      	str	r1, [r7, #8]
 80187c8:	607a      	str	r2, [r7, #4]
 80187ca:	2300      	movs	r3, #0
 80187cc:	617b      	str	r3, [r7, #20]
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d107      	bne.n	80187e4 <prvTestWaitCondition+0x26>
 80187d4:	68fa      	ldr	r2, [r7, #12]
 80187d6:	68bb      	ldr	r3, [r7, #8]
 80187d8:	4013      	ands	r3, r2
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d00a      	beq.n	80187f4 <prvTestWaitCondition+0x36>
 80187de:	2301      	movs	r3, #1
 80187e0:	617b      	str	r3, [r7, #20]
 80187e2:	e007      	b.n	80187f4 <prvTestWaitCondition+0x36>
 80187e4:	68fa      	ldr	r2, [r7, #12]
 80187e6:	68bb      	ldr	r3, [r7, #8]
 80187e8:	4013      	ands	r3, r2
 80187ea:	68ba      	ldr	r2, [r7, #8]
 80187ec:	429a      	cmp	r2, r3
 80187ee:	d101      	bne.n	80187f4 <prvTestWaitCondition+0x36>
 80187f0:	2301      	movs	r3, #1
 80187f2:	617b      	str	r3, [r7, #20]
 80187f4:	697b      	ldr	r3, [r7, #20]
 80187f6:	4618      	mov	r0, r3
 80187f8:	371c      	adds	r7, #28
 80187fa:	46bd      	mov	sp, r7
 80187fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018800:	4770      	bx	lr

08018802 <vListInitialise>:
 8018802:	b480      	push	{r7}
 8018804:	b083      	sub	sp, #12
 8018806:	af00      	add	r7, sp, #0
 8018808:	6078      	str	r0, [r7, #4]
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	f103 0208 	add.w	r2, r3, #8
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	605a      	str	r2, [r3, #4]
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	f04f 32ff 	mov.w	r2, #4294967295
 801881a:	609a      	str	r2, [r3, #8]
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	f103 0208 	add.w	r2, r3, #8
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	60da      	str	r2, [r3, #12]
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	f103 0208 	add.w	r2, r3, #8
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	611a      	str	r2, [r3, #16]
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	2200      	movs	r2, #0
 8018834:	601a      	str	r2, [r3, #0]
 8018836:	bf00      	nop
 8018838:	370c      	adds	r7, #12
 801883a:	46bd      	mov	sp, r7
 801883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018840:	4770      	bx	lr

08018842 <vListInitialiseItem>:
 8018842:	b480      	push	{r7}
 8018844:	b083      	sub	sp, #12
 8018846:	af00      	add	r7, sp, #0
 8018848:	6078      	str	r0, [r7, #4]
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	2200      	movs	r2, #0
 801884e:	611a      	str	r2, [r3, #16]
 8018850:	bf00      	nop
 8018852:	370c      	adds	r7, #12
 8018854:	46bd      	mov	sp, r7
 8018856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801885a:	4770      	bx	lr

0801885c <vListInsertEnd>:
 801885c:	b480      	push	{r7}
 801885e:	b085      	sub	sp, #20
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
 8018864:	6039      	str	r1, [r7, #0]
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	685b      	ldr	r3, [r3, #4]
 801886a:	60fb      	str	r3, [r7, #12]
 801886c:	683b      	ldr	r3, [r7, #0]
 801886e:	68fa      	ldr	r2, [r7, #12]
 8018870:	605a      	str	r2, [r3, #4]
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	689a      	ldr	r2, [r3, #8]
 8018876:	683b      	ldr	r3, [r7, #0]
 8018878:	609a      	str	r2, [r3, #8]
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	689b      	ldr	r3, [r3, #8]
 801887e:	683a      	ldr	r2, [r7, #0]
 8018880:	605a      	str	r2, [r3, #4]
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	683a      	ldr	r2, [r7, #0]
 8018886:	609a      	str	r2, [r3, #8]
 8018888:	683b      	ldr	r3, [r7, #0]
 801888a:	687a      	ldr	r2, [r7, #4]
 801888c:	611a      	str	r2, [r3, #16]
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	1c5a      	adds	r2, r3, #1
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	601a      	str	r2, [r3, #0]
 8018898:	bf00      	nop
 801889a:	3714      	adds	r7, #20
 801889c:	46bd      	mov	sp, r7
 801889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188a2:	4770      	bx	lr

080188a4 <vListInsert>:
 80188a4:	b480      	push	{r7}
 80188a6:	b085      	sub	sp, #20
 80188a8:	af00      	add	r7, sp, #0
 80188aa:	6078      	str	r0, [r7, #4]
 80188ac:	6039      	str	r1, [r7, #0]
 80188ae:	683b      	ldr	r3, [r7, #0]
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	60bb      	str	r3, [r7, #8]
 80188b4:	68bb      	ldr	r3, [r7, #8]
 80188b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188ba:	d103      	bne.n	80188c4 <vListInsert+0x20>
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	691b      	ldr	r3, [r3, #16]
 80188c0:	60fb      	str	r3, [r7, #12]
 80188c2:	e00c      	b.n	80188de <vListInsert+0x3a>
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	3308      	adds	r3, #8
 80188c8:	60fb      	str	r3, [r7, #12]
 80188ca:	e002      	b.n	80188d2 <vListInsert+0x2e>
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	685b      	ldr	r3, [r3, #4]
 80188d0:	60fb      	str	r3, [r7, #12]
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	685b      	ldr	r3, [r3, #4]
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	68ba      	ldr	r2, [r7, #8]
 80188da:	429a      	cmp	r2, r3
 80188dc:	d2f6      	bcs.n	80188cc <vListInsert+0x28>
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	685a      	ldr	r2, [r3, #4]
 80188e2:	683b      	ldr	r3, [r7, #0]
 80188e4:	605a      	str	r2, [r3, #4]
 80188e6:	683b      	ldr	r3, [r7, #0]
 80188e8:	685b      	ldr	r3, [r3, #4]
 80188ea:	683a      	ldr	r2, [r7, #0]
 80188ec:	609a      	str	r2, [r3, #8]
 80188ee:	683b      	ldr	r3, [r7, #0]
 80188f0:	68fa      	ldr	r2, [r7, #12]
 80188f2:	609a      	str	r2, [r3, #8]
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	683a      	ldr	r2, [r7, #0]
 80188f8:	605a      	str	r2, [r3, #4]
 80188fa:	683b      	ldr	r3, [r7, #0]
 80188fc:	687a      	ldr	r2, [r7, #4]
 80188fe:	611a      	str	r2, [r3, #16]
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	1c5a      	adds	r2, r3, #1
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	601a      	str	r2, [r3, #0]
 801890a:	bf00      	nop
 801890c:	3714      	adds	r7, #20
 801890e:	46bd      	mov	sp, r7
 8018910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018914:	4770      	bx	lr

08018916 <uxListRemove>:
 8018916:	b480      	push	{r7}
 8018918:	b085      	sub	sp, #20
 801891a:	af00      	add	r7, sp, #0
 801891c:	6078      	str	r0, [r7, #4]
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	691b      	ldr	r3, [r3, #16]
 8018922:	60fb      	str	r3, [r7, #12]
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	685b      	ldr	r3, [r3, #4]
 8018928:	687a      	ldr	r2, [r7, #4]
 801892a:	6892      	ldr	r2, [r2, #8]
 801892c:	609a      	str	r2, [r3, #8]
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	689b      	ldr	r3, [r3, #8]
 8018932:	687a      	ldr	r2, [r7, #4]
 8018934:	6852      	ldr	r2, [r2, #4]
 8018936:	605a      	str	r2, [r3, #4]
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	685b      	ldr	r3, [r3, #4]
 801893c:	687a      	ldr	r2, [r7, #4]
 801893e:	429a      	cmp	r2, r3
 8018940:	d103      	bne.n	801894a <uxListRemove+0x34>
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	689a      	ldr	r2, [r3, #8]
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	605a      	str	r2, [r3, #4]
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	2200      	movs	r2, #0
 801894e:	611a      	str	r2, [r3, #16]
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	1e5a      	subs	r2, r3, #1
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	601a      	str	r2, [r3, #0]
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	4618      	mov	r0, r3
 8018960:	3714      	adds	r7, #20
 8018962:	46bd      	mov	sp, r7
 8018964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018968:	4770      	bx	lr
	...

0801896c <xQueueGenericReset>:
 801896c:	b580      	push	{r7, lr}
 801896e:	b084      	sub	sp, #16
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
 8018974:	6039      	str	r1, [r7, #0]
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	60fb      	str	r3, [r7, #12]
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d10a      	bne.n	8018996 <xQueueGenericReset+0x2a>
 8018980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018984:	f383 8811 	msr	BASEPRI, r3
 8018988:	f3bf 8f6f 	isb	sy
 801898c:	f3bf 8f4f 	dsb	sy
 8018990:	60bb      	str	r3, [r7, #8]
 8018992:	bf00      	nop
 8018994:	e7fe      	b.n	8018994 <xQueueGenericReset+0x28>
 8018996:	f002 fead 	bl	801b6f4 <vPortEnterCritical>
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	681a      	ldr	r2, [r3, #0]
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189a2:	68f9      	ldr	r1, [r7, #12]
 80189a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80189a6:	fb01 f303 	mul.w	r3, r1, r3
 80189aa:	441a      	add	r2, r3
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	609a      	str	r2, [r3, #8]
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	2200      	movs	r2, #0
 80189b4:	639a      	str	r2, [r3, #56]	; 0x38
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	681a      	ldr	r2, [r3, #0]
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	605a      	str	r2, [r3, #4]
 80189be:	68fb      	ldr	r3, [r7, #12]
 80189c0:	681a      	ldr	r2, [r3, #0]
 80189c2:	68fb      	ldr	r3, [r7, #12]
 80189c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189c6:	3b01      	subs	r3, #1
 80189c8:	68f9      	ldr	r1, [r7, #12]
 80189ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80189cc:	fb01 f303 	mul.w	r3, r1, r3
 80189d0:	441a      	add	r2, r3
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	60da      	str	r2, [r3, #12]
 80189d6:	68fb      	ldr	r3, [r7, #12]
 80189d8:	22ff      	movs	r2, #255	; 0xff
 80189da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	22ff      	movs	r2, #255	; 0xff
 80189e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80189e6:	683b      	ldr	r3, [r7, #0]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d114      	bne.n	8018a16 <xQueueGenericReset+0xaa>
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	691b      	ldr	r3, [r3, #16]
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d01a      	beq.n	8018a2a <xQueueGenericReset+0xbe>
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	3310      	adds	r3, #16
 80189f8:	4618      	mov	r0, r3
 80189fa:	f001 fc05 	bl	801a208 <xTaskRemoveFromEventList>
 80189fe:	4603      	mov	r3, r0
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d012      	beq.n	8018a2a <xQueueGenericReset+0xbe>
 8018a04:	4b0c      	ldr	r3, [pc, #48]	; (8018a38 <xQueueGenericReset+0xcc>)
 8018a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a0a:	601a      	str	r2, [r3, #0]
 8018a0c:	f3bf 8f4f 	dsb	sy
 8018a10:	f3bf 8f6f 	isb	sy
 8018a14:	e009      	b.n	8018a2a <xQueueGenericReset+0xbe>
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	3310      	adds	r3, #16
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	f7ff fef1 	bl	8018802 <vListInitialise>
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	3324      	adds	r3, #36	; 0x24
 8018a24:	4618      	mov	r0, r3
 8018a26:	f7ff feec 	bl	8018802 <vListInitialise>
 8018a2a:	f002 fe93 	bl	801b754 <vPortExitCritical>
 8018a2e:	2301      	movs	r3, #1
 8018a30:	4618      	mov	r0, r3
 8018a32:	3710      	adds	r7, #16
 8018a34:	46bd      	mov	sp, r7
 8018a36:	bd80      	pop	{r7, pc}
 8018a38:	e000ed04 	.word	0xe000ed04

08018a3c <xQueueGenericCreateStatic>:
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b08e      	sub	sp, #56	; 0x38
 8018a40:	af02      	add	r7, sp, #8
 8018a42:	60f8      	str	r0, [r7, #12]
 8018a44:	60b9      	str	r1, [r7, #8]
 8018a46:	607a      	str	r2, [r7, #4]
 8018a48:	603b      	str	r3, [r7, #0]
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d10a      	bne.n	8018a66 <xQueueGenericCreateStatic+0x2a>
 8018a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a54:	f383 8811 	msr	BASEPRI, r3
 8018a58:	f3bf 8f6f 	isb	sy
 8018a5c:	f3bf 8f4f 	dsb	sy
 8018a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8018a62:	bf00      	nop
 8018a64:	e7fe      	b.n	8018a64 <xQueueGenericCreateStatic+0x28>
 8018a66:	683b      	ldr	r3, [r7, #0]
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d10a      	bne.n	8018a82 <xQueueGenericCreateStatic+0x46>
 8018a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a70:	f383 8811 	msr	BASEPRI, r3
 8018a74:	f3bf 8f6f 	isb	sy
 8018a78:	f3bf 8f4f 	dsb	sy
 8018a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8018a7e:	bf00      	nop
 8018a80:	e7fe      	b.n	8018a80 <xQueueGenericCreateStatic+0x44>
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d002      	beq.n	8018a8e <xQueueGenericCreateStatic+0x52>
 8018a88:	68bb      	ldr	r3, [r7, #8]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d001      	beq.n	8018a92 <xQueueGenericCreateStatic+0x56>
 8018a8e:	2301      	movs	r3, #1
 8018a90:	e000      	b.n	8018a94 <xQueueGenericCreateStatic+0x58>
 8018a92:	2300      	movs	r3, #0
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d10a      	bne.n	8018aae <xQueueGenericCreateStatic+0x72>
 8018a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a9c:	f383 8811 	msr	BASEPRI, r3
 8018aa0:	f3bf 8f6f 	isb	sy
 8018aa4:	f3bf 8f4f 	dsb	sy
 8018aa8:	623b      	str	r3, [r7, #32]
 8018aaa:	bf00      	nop
 8018aac:	e7fe      	b.n	8018aac <xQueueGenericCreateStatic+0x70>
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d102      	bne.n	8018aba <xQueueGenericCreateStatic+0x7e>
 8018ab4:	68bb      	ldr	r3, [r7, #8]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d101      	bne.n	8018abe <xQueueGenericCreateStatic+0x82>
 8018aba:	2301      	movs	r3, #1
 8018abc:	e000      	b.n	8018ac0 <xQueueGenericCreateStatic+0x84>
 8018abe:	2300      	movs	r3, #0
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d10a      	bne.n	8018ada <xQueueGenericCreateStatic+0x9e>
 8018ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ac8:	f383 8811 	msr	BASEPRI, r3
 8018acc:	f3bf 8f6f 	isb	sy
 8018ad0:	f3bf 8f4f 	dsb	sy
 8018ad4:	61fb      	str	r3, [r7, #28]
 8018ad6:	bf00      	nop
 8018ad8:	e7fe      	b.n	8018ad8 <xQueueGenericCreateStatic+0x9c>
 8018ada:	2348      	movs	r3, #72	; 0x48
 8018adc:	617b      	str	r3, [r7, #20]
 8018ade:	697b      	ldr	r3, [r7, #20]
 8018ae0:	2b48      	cmp	r3, #72	; 0x48
 8018ae2:	d00a      	beq.n	8018afa <xQueueGenericCreateStatic+0xbe>
 8018ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ae8:	f383 8811 	msr	BASEPRI, r3
 8018aec:	f3bf 8f6f 	isb	sy
 8018af0:	f3bf 8f4f 	dsb	sy
 8018af4:	61bb      	str	r3, [r7, #24]
 8018af6:	bf00      	nop
 8018af8:	e7fe      	b.n	8018af8 <xQueueGenericCreateStatic+0xbc>
 8018afa:	697b      	ldr	r3, [r7, #20]
 8018afc:	683b      	ldr	r3, [r7, #0]
 8018afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d00d      	beq.n	8018b22 <xQueueGenericCreateStatic+0xe6>
 8018b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b08:	2201      	movs	r2, #1
 8018b0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8018b0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8018b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b14:	9300      	str	r3, [sp, #0]
 8018b16:	4613      	mov	r3, r2
 8018b18:	687a      	ldr	r2, [r7, #4]
 8018b1a:	68b9      	ldr	r1, [r7, #8]
 8018b1c:	68f8      	ldr	r0, [r7, #12]
 8018b1e:	f000 f83f 	bl	8018ba0 <prvInitialiseNewQueue>
 8018b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b24:	4618      	mov	r0, r3
 8018b26:	3730      	adds	r7, #48	; 0x30
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	bd80      	pop	{r7, pc}

08018b2c <xQueueGenericCreate>:
 8018b2c:	b580      	push	{r7, lr}
 8018b2e:	b08a      	sub	sp, #40	; 0x28
 8018b30:	af02      	add	r7, sp, #8
 8018b32:	60f8      	str	r0, [r7, #12]
 8018b34:	60b9      	str	r1, [r7, #8]
 8018b36:	4613      	mov	r3, r2
 8018b38:	71fb      	strb	r3, [r7, #7]
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d10a      	bne.n	8018b56 <xQueueGenericCreate+0x2a>
 8018b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b44:	f383 8811 	msr	BASEPRI, r3
 8018b48:	f3bf 8f6f 	isb	sy
 8018b4c:	f3bf 8f4f 	dsb	sy
 8018b50:	613b      	str	r3, [r7, #16]
 8018b52:	bf00      	nop
 8018b54:	e7fe      	b.n	8018b54 <xQueueGenericCreate+0x28>
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	68ba      	ldr	r2, [r7, #8]
 8018b5a:	fb02 f303 	mul.w	r3, r2, r3
 8018b5e:	61fb      	str	r3, [r7, #28]
 8018b60:	69fb      	ldr	r3, [r7, #28]
 8018b62:	3348      	adds	r3, #72	; 0x48
 8018b64:	4618      	mov	r0, r3
 8018b66:	f002 fee7 	bl	801b938 <pvPortMalloc>
 8018b6a:	61b8      	str	r0, [r7, #24]
 8018b6c:	69bb      	ldr	r3, [r7, #24]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d011      	beq.n	8018b96 <xQueueGenericCreate+0x6a>
 8018b72:	69bb      	ldr	r3, [r7, #24]
 8018b74:	617b      	str	r3, [r7, #20]
 8018b76:	697b      	ldr	r3, [r7, #20]
 8018b78:	3348      	adds	r3, #72	; 0x48
 8018b7a:	617b      	str	r3, [r7, #20]
 8018b7c:	69bb      	ldr	r3, [r7, #24]
 8018b7e:	2200      	movs	r2, #0
 8018b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8018b84:	79fa      	ldrb	r2, [r7, #7]
 8018b86:	69bb      	ldr	r3, [r7, #24]
 8018b88:	9300      	str	r3, [sp, #0]
 8018b8a:	4613      	mov	r3, r2
 8018b8c:	697a      	ldr	r2, [r7, #20]
 8018b8e:	68b9      	ldr	r1, [r7, #8]
 8018b90:	68f8      	ldr	r0, [r7, #12]
 8018b92:	f000 f805 	bl	8018ba0 <prvInitialiseNewQueue>
 8018b96:	69bb      	ldr	r3, [r7, #24]
 8018b98:	4618      	mov	r0, r3
 8018b9a:	3720      	adds	r7, #32
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	bd80      	pop	{r7, pc}

08018ba0 <prvInitialiseNewQueue>:
 8018ba0:	b580      	push	{r7, lr}
 8018ba2:	b084      	sub	sp, #16
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	60f8      	str	r0, [r7, #12]
 8018ba8:	60b9      	str	r1, [r7, #8]
 8018baa:	607a      	str	r2, [r7, #4]
 8018bac:	70fb      	strb	r3, [r7, #3]
 8018bae:	68bb      	ldr	r3, [r7, #8]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d103      	bne.n	8018bbc <prvInitialiseNewQueue+0x1c>
 8018bb4:	69bb      	ldr	r3, [r7, #24]
 8018bb6:	69ba      	ldr	r2, [r7, #24]
 8018bb8:	601a      	str	r2, [r3, #0]
 8018bba:	e002      	b.n	8018bc2 <prvInitialiseNewQueue+0x22>
 8018bbc:	69bb      	ldr	r3, [r7, #24]
 8018bbe:	687a      	ldr	r2, [r7, #4]
 8018bc0:	601a      	str	r2, [r3, #0]
 8018bc2:	69bb      	ldr	r3, [r7, #24]
 8018bc4:	68fa      	ldr	r2, [r7, #12]
 8018bc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8018bc8:	69bb      	ldr	r3, [r7, #24]
 8018bca:	68ba      	ldr	r2, [r7, #8]
 8018bcc:	641a      	str	r2, [r3, #64]	; 0x40
 8018bce:	2101      	movs	r1, #1
 8018bd0:	69b8      	ldr	r0, [r7, #24]
 8018bd2:	f7ff fecb 	bl	801896c <xQueueGenericReset>
 8018bd6:	bf00      	nop
 8018bd8:	3710      	adds	r7, #16
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bd80      	pop	{r7, pc}
	...

08018be0 <xQueueGenericSend>:
 8018be0:	b580      	push	{r7, lr}
 8018be2:	b08e      	sub	sp, #56	; 0x38
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	60f8      	str	r0, [r7, #12]
 8018be8:	60b9      	str	r1, [r7, #8]
 8018bea:	607a      	str	r2, [r7, #4]
 8018bec:	603b      	str	r3, [r7, #0]
 8018bee:	2300      	movs	r3, #0
 8018bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8018bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d10a      	bne.n	8018c12 <xQueueGenericSend+0x32>
 8018bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c00:	f383 8811 	msr	BASEPRI, r3
 8018c04:	f3bf 8f6f 	isb	sy
 8018c08:	f3bf 8f4f 	dsb	sy
 8018c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8018c0e:	bf00      	nop
 8018c10:	e7fe      	b.n	8018c10 <xQueueGenericSend+0x30>
 8018c12:	68bb      	ldr	r3, [r7, #8]
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d103      	bne.n	8018c20 <xQueueGenericSend+0x40>
 8018c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d101      	bne.n	8018c24 <xQueueGenericSend+0x44>
 8018c20:	2301      	movs	r3, #1
 8018c22:	e000      	b.n	8018c26 <xQueueGenericSend+0x46>
 8018c24:	2300      	movs	r3, #0
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d10a      	bne.n	8018c40 <xQueueGenericSend+0x60>
 8018c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c2e:	f383 8811 	msr	BASEPRI, r3
 8018c32:	f3bf 8f6f 	isb	sy
 8018c36:	f3bf 8f4f 	dsb	sy
 8018c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8018c3c:	bf00      	nop
 8018c3e:	e7fe      	b.n	8018c3e <xQueueGenericSend+0x5e>
 8018c40:	683b      	ldr	r3, [r7, #0]
 8018c42:	2b02      	cmp	r3, #2
 8018c44:	d103      	bne.n	8018c4e <xQueueGenericSend+0x6e>
 8018c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c4a:	2b01      	cmp	r3, #1
 8018c4c:	d101      	bne.n	8018c52 <xQueueGenericSend+0x72>
 8018c4e:	2301      	movs	r3, #1
 8018c50:	e000      	b.n	8018c54 <xQueueGenericSend+0x74>
 8018c52:	2300      	movs	r3, #0
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d10a      	bne.n	8018c6e <xQueueGenericSend+0x8e>
 8018c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c5c:	f383 8811 	msr	BASEPRI, r3
 8018c60:	f3bf 8f6f 	isb	sy
 8018c64:	f3bf 8f4f 	dsb	sy
 8018c68:	623b      	str	r3, [r7, #32]
 8018c6a:	bf00      	nop
 8018c6c:	e7fe      	b.n	8018c6c <xQueueGenericSend+0x8c>
 8018c6e:	f001 fced 	bl	801a64c <xTaskGetSchedulerState>
 8018c72:	4603      	mov	r3, r0
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d102      	bne.n	8018c7e <xQueueGenericSend+0x9e>
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d101      	bne.n	8018c82 <xQueueGenericSend+0xa2>
 8018c7e:	2301      	movs	r3, #1
 8018c80:	e000      	b.n	8018c84 <xQueueGenericSend+0xa4>
 8018c82:	2300      	movs	r3, #0
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d10a      	bne.n	8018c9e <xQueueGenericSend+0xbe>
 8018c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c8c:	f383 8811 	msr	BASEPRI, r3
 8018c90:	f3bf 8f6f 	isb	sy
 8018c94:	f3bf 8f4f 	dsb	sy
 8018c98:	61fb      	str	r3, [r7, #28]
 8018c9a:	bf00      	nop
 8018c9c:	e7fe      	b.n	8018c9c <xQueueGenericSend+0xbc>
 8018c9e:	f002 fd29 	bl	801b6f4 <vPortEnterCritical>
 8018ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018caa:	429a      	cmp	r2, r3
 8018cac:	d302      	bcc.n	8018cb4 <xQueueGenericSend+0xd4>
 8018cae:	683b      	ldr	r3, [r7, #0]
 8018cb0:	2b02      	cmp	r3, #2
 8018cb2:	d129      	bne.n	8018d08 <xQueueGenericSend+0x128>
 8018cb4:	683a      	ldr	r2, [r7, #0]
 8018cb6:	68b9      	ldr	r1, [r7, #8]
 8018cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018cba:	f000 fc5e 	bl	801957a <prvCopyDataToQueue>
 8018cbe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8018cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d010      	beq.n	8018cea <xQueueGenericSend+0x10a>
 8018cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cca:	3324      	adds	r3, #36	; 0x24
 8018ccc:	4618      	mov	r0, r3
 8018cce:	f001 fa9b 	bl	801a208 <xTaskRemoveFromEventList>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d013      	beq.n	8018d00 <xQueueGenericSend+0x120>
 8018cd8:	4b3f      	ldr	r3, [pc, #252]	; (8018dd8 <xQueueGenericSend+0x1f8>)
 8018cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018cde:	601a      	str	r2, [r3, #0]
 8018ce0:	f3bf 8f4f 	dsb	sy
 8018ce4:	f3bf 8f6f 	isb	sy
 8018ce8:	e00a      	b.n	8018d00 <xQueueGenericSend+0x120>
 8018cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d007      	beq.n	8018d00 <xQueueGenericSend+0x120>
 8018cf0:	4b39      	ldr	r3, [pc, #228]	; (8018dd8 <xQueueGenericSend+0x1f8>)
 8018cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018cf6:	601a      	str	r2, [r3, #0]
 8018cf8:	f3bf 8f4f 	dsb	sy
 8018cfc:	f3bf 8f6f 	isb	sy
 8018d00:	f002 fd28 	bl	801b754 <vPortExitCritical>
 8018d04:	2301      	movs	r3, #1
 8018d06:	e063      	b.n	8018dd0 <xQueueGenericSend+0x1f0>
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d103      	bne.n	8018d16 <xQueueGenericSend+0x136>
 8018d0e:	f002 fd21 	bl	801b754 <vPortExitCritical>
 8018d12:	2300      	movs	r3, #0
 8018d14:	e05c      	b.n	8018dd0 <xQueueGenericSend+0x1f0>
 8018d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d106      	bne.n	8018d2a <xQueueGenericSend+0x14a>
 8018d1c:	f107 0314 	add.w	r3, r7, #20
 8018d20:	4618      	mov	r0, r3
 8018d22:	f001 fb35 	bl	801a390 <vTaskInternalSetTimeOutState>
 8018d26:	2301      	movs	r3, #1
 8018d28:	637b      	str	r3, [r7, #52]	; 0x34
 8018d2a:	f002 fd13 	bl	801b754 <vPortExitCritical>
 8018d2e:	f001 f80b 	bl	8019d48 <vTaskSuspendAll>
 8018d32:	f002 fcdf 	bl	801b6f4 <vPortEnterCritical>
 8018d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018d3c:	b25b      	sxtb	r3, r3
 8018d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d42:	d103      	bne.n	8018d4c <xQueueGenericSend+0x16c>
 8018d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d46:	2200      	movs	r2, #0
 8018d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018d52:	b25b      	sxtb	r3, r3
 8018d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d58:	d103      	bne.n	8018d62 <xQueueGenericSend+0x182>
 8018d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d5c:	2200      	movs	r2, #0
 8018d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018d62:	f002 fcf7 	bl	801b754 <vPortExitCritical>
 8018d66:	1d3a      	adds	r2, r7, #4
 8018d68:	f107 0314 	add.w	r3, r7, #20
 8018d6c:	4611      	mov	r1, r2
 8018d6e:	4618      	mov	r0, r3
 8018d70:	f001 fb24 	bl	801a3bc <xTaskCheckForTimeOut>
 8018d74:	4603      	mov	r3, r0
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d124      	bne.n	8018dc4 <xQueueGenericSend+0x1e4>
 8018d7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018d7c:	f000 fcf5 	bl	801976a <prvIsQueueFull>
 8018d80:	4603      	mov	r3, r0
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d018      	beq.n	8018db8 <xQueueGenericSend+0x1d8>
 8018d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d88:	3310      	adds	r3, #16
 8018d8a:	687a      	ldr	r2, [r7, #4]
 8018d8c:	4611      	mov	r1, r2
 8018d8e:	4618      	mov	r0, r3
 8018d90:	f001 f9ae 	bl	801a0f0 <vTaskPlaceOnEventList>
 8018d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018d96:	f000 fc80 	bl	801969a <prvUnlockQueue>
 8018d9a:	f000 ffe3 	bl	8019d64 <xTaskResumeAll>
 8018d9e:	4603      	mov	r3, r0
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	f47f af7c 	bne.w	8018c9e <xQueueGenericSend+0xbe>
 8018da6:	4b0c      	ldr	r3, [pc, #48]	; (8018dd8 <xQueueGenericSend+0x1f8>)
 8018da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018dac:	601a      	str	r2, [r3, #0]
 8018dae:	f3bf 8f4f 	dsb	sy
 8018db2:	f3bf 8f6f 	isb	sy
 8018db6:	e772      	b.n	8018c9e <xQueueGenericSend+0xbe>
 8018db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018dba:	f000 fc6e 	bl	801969a <prvUnlockQueue>
 8018dbe:	f000 ffd1 	bl	8019d64 <xTaskResumeAll>
 8018dc2:	e76c      	b.n	8018c9e <xQueueGenericSend+0xbe>
 8018dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018dc6:	f000 fc68 	bl	801969a <prvUnlockQueue>
 8018dca:	f000 ffcb 	bl	8019d64 <xTaskResumeAll>
 8018dce:	2300      	movs	r3, #0
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	3738      	adds	r7, #56	; 0x38
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	bd80      	pop	{r7, pc}
 8018dd8:	e000ed04 	.word	0xe000ed04

08018ddc <xQueueGenericSendFromISR>:
 8018ddc:	b580      	push	{r7, lr}
 8018dde:	b090      	sub	sp, #64	; 0x40
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	60f8      	str	r0, [r7, #12]
 8018de4:	60b9      	str	r1, [r7, #8]
 8018de6:	607a      	str	r2, [r7, #4]
 8018de8:	603b      	str	r3, [r7, #0]
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	63bb      	str	r3, [r7, #56]	; 0x38
 8018dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d10a      	bne.n	8018e0a <xQueueGenericSendFromISR+0x2e>
 8018df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018df8:	f383 8811 	msr	BASEPRI, r3
 8018dfc:	f3bf 8f6f 	isb	sy
 8018e00:	f3bf 8f4f 	dsb	sy
 8018e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8018e06:	bf00      	nop
 8018e08:	e7fe      	b.n	8018e08 <xQueueGenericSendFromISR+0x2c>
 8018e0a:	68bb      	ldr	r3, [r7, #8]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d103      	bne.n	8018e18 <xQueueGenericSendFromISR+0x3c>
 8018e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d101      	bne.n	8018e1c <xQueueGenericSendFromISR+0x40>
 8018e18:	2301      	movs	r3, #1
 8018e1a:	e000      	b.n	8018e1e <xQueueGenericSendFromISR+0x42>
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d10a      	bne.n	8018e38 <xQueueGenericSendFromISR+0x5c>
 8018e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e26:	f383 8811 	msr	BASEPRI, r3
 8018e2a:	f3bf 8f6f 	isb	sy
 8018e2e:	f3bf 8f4f 	dsb	sy
 8018e32:	627b      	str	r3, [r7, #36]	; 0x24
 8018e34:	bf00      	nop
 8018e36:	e7fe      	b.n	8018e36 <xQueueGenericSendFromISR+0x5a>
 8018e38:	683b      	ldr	r3, [r7, #0]
 8018e3a:	2b02      	cmp	r3, #2
 8018e3c:	d103      	bne.n	8018e46 <xQueueGenericSendFromISR+0x6a>
 8018e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e42:	2b01      	cmp	r3, #1
 8018e44:	d101      	bne.n	8018e4a <xQueueGenericSendFromISR+0x6e>
 8018e46:	2301      	movs	r3, #1
 8018e48:	e000      	b.n	8018e4c <xQueueGenericSendFromISR+0x70>
 8018e4a:	2300      	movs	r3, #0
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d10a      	bne.n	8018e66 <xQueueGenericSendFromISR+0x8a>
 8018e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e54:	f383 8811 	msr	BASEPRI, r3
 8018e58:	f3bf 8f6f 	isb	sy
 8018e5c:	f3bf 8f4f 	dsb	sy
 8018e60:	623b      	str	r3, [r7, #32]
 8018e62:	bf00      	nop
 8018e64:	e7fe      	b.n	8018e64 <xQueueGenericSendFromISR+0x88>
 8018e66:	f002 fd27 	bl	801b8b8 <vPortValidateInterruptPriority>
 8018e6a:	f3ef 8211 	mrs	r2, BASEPRI
 8018e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e72:	f383 8811 	msr	BASEPRI, r3
 8018e76:	f3bf 8f6f 	isb	sy
 8018e7a:	f3bf 8f4f 	dsb	sy
 8018e7e:	61fa      	str	r2, [r7, #28]
 8018e80:	61bb      	str	r3, [r7, #24]
 8018e82:	69fb      	ldr	r3, [r7, #28]
 8018e84:	637b      	str	r3, [r7, #52]	; 0x34
 8018e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e8e:	429a      	cmp	r2, r3
 8018e90:	d302      	bcc.n	8018e98 <xQueueGenericSendFromISR+0xbc>
 8018e92:	683b      	ldr	r3, [r7, #0]
 8018e94:	2b02      	cmp	r3, #2
 8018e96:	d12f      	bne.n	8018ef8 <xQueueGenericSendFromISR+0x11c>
 8018e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018ea8:	683a      	ldr	r2, [r7, #0]
 8018eaa:	68b9      	ldr	r1, [r7, #8]
 8018eac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018eae:	f000 fb64 	bl	801957a <prvCopyDataToQueue>
 8018eb2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8018eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018eba:	d112      	bne.n	8018ee2 <xQueueGenericSendFromISR+0x106>
 8018ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d016      	beq.n	8018ef2 <xQueueGenericSendFromISR+0x116>
 8018ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ec6:	3324      	adds	r3, #36	; 0x24
 8018ec8:	4618      	mov	r0, r3
 8018eca:	f001 f99d 	bl	801a208 <xTaskRemoveFromEventList>
 8018ece:	4603      	mov	r3, r0
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d00e      	beq.n	8018ef2 <xQueueGenericSendFromISR+0x116>
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d00b      	beq.n	8018ef2 <xQueueGenericSendFromISR+0x116>
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	2201      	movs	r2, #1
 8018ede:	601a      	str	r2, [r3, #0]
 8018ee0:	e007      	b.n	8018ef2 <xQueueGenericSendFromISR+0x116>
 8018ee2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8018ee6:	3301      	adds	r3, #1
 8018ee8:	b2db      	uxtb	r3, r3
 8018eea:	b25a      	sxtb	r2, r3
 8018eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018ef2:	2301      	movs	r3, #1
 8018ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018ef6:	e001      	b.n	8018efc <xQueueGenericSendFromISR+0x120>
 8018ef8:	2300      	movs	r3, #0
 8018efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018efe:	617b      	str	r3, [r7, #20]
 8018f00:	697b      	ldr	r3, [r7, #20]
 8018f02:	f383 8811 	msr	BASEPRI, r3
 8018f06:	bf00      	nop
 8018f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	3740      	adds	r7, #64	; 0x40
 8018f0e:	46bd      	mov	sp, r7
 8018f10:	bd80      	pop	{r7, pc}

08018f12 <xQueueGiveFromISR>:
 8018f12:	b580      	push	{r7, lr}
 8018f14:	b08e      	sub	sp, #56	; 0x38
 8018f16:	af00      	add	r7, sp, #0
 8018f18:	6078      	str	r0, [r7, #4]
 8018f1a:	6039      	str	r1, [r7, #0]
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8018f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d10a      	bne.n	8018f3c <xQueueGiveFromISR+0x2a>
 8018f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f2a:	f383 8811 	msr	BASEPRI, r3
 8018f2e:	f3bf 8f6f 	isb	sy
 8018f32:	f3bf 8f4f 	dsb	sy
 8018f36:	623b      	str	r3, [r7, #32]
 8018f38:	bf00      	nop
 8018f3a:	e7fe      	b.n	8018f3a <xQueueGiveFromISR+0x28>
 8018f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d00a      	beq.n	8018f5a <xQueueGiveFromISR+0x48>
 8018f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f48:	f383 8811 	msr	BASEPRI, r3
 8018f4c:	f3bf 8f6f 	isb	sy
 8018f50:	f3bf 8f4f 	dsb	sy
 8018f54:	61fb      	str	r3, [r7, #28]
 8018f56:	bf00      	nop
 8018f58:	e7fe      	b.n	8018f58 <xQueueGiveFromISR+0x46>
 8018f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d103      	bne.n	8018f6a <xQueueGiveFromISR+0x58>
 8018f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f64:	689b      	ldr	r3, [r3, #8]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d101      	bne.n	8018f6e <xQueueGiveFromISR+0x5c>
 8018f6a:	2301      	movs	r3, #1
 8018f6c:	e000      	b.n	8018f70 <xQueueGiveFromISR+0x5e>
 8018f6e:	2300      	movs	r3, #0
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d10a      	bne.n	8018f8a <xQueueGiveFromISR+0x78>
 8018f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f78:	f383 8811 	msr	BASEPRI, r3
 8018f7c:	f3bf 8f6f 	isb	sy
 8018f80:	f3bf 8f4f 	dsb	sy
 8018f84:	61bb      	str	r3, [r7, #24]
 8018f86:	bf00      	nop
 8018f88:	e7fe      	b.n	8018f88 <xQueueGiveFromISR+0x76>
 8018f8a:	f002 fc95 	bl	801b8b8 <vPortValidateInterruptPriority>
 8018f8e:	f3ef 8211 	mrs	r2, BASEPRI
 8018f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f96:	f383 8811 	msr	BASEPRI, r3
 8018f9a:	f3bf 8f6f 	isb	sy
 8018f9e:	f3bf 8f4f 	dsb	sy
 8018fa2:	617a      	str	r2, [r7, #20]
 8018fa4:	613b      	str	r3, [r7, #16]
 8018fa6:	697b      	ldr	r3, [r7, #20]
 8018fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8018fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018fb6:	429a      	cmp	r2, r3
 8018fb8:	d22b      	bcs.n	8019012 <xQueueGiveFromISR+0x100>
 8018fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fc6:	1c5a      	adds	r2, r3, #1
 8018fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fca:	639a      	str	r2, [r3, #56]	; 0x38
 8018fcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018fd4:	d112      	bne.n	8018ffc <xQueueGiveFromISR+0xea>
 8018fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d016      	beq.n	801900c <xQueueGiveFromISR+0xfa>
 8018fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fe0:	3324      	adds	r3, #36	; 0x24
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	f001 f910 	bl	801a208 <xTaskRemoveFromEventList>
 8018fe8:	4603      	mov	r3, r0
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d00e      	beq.n	801900c <xQueueGiveFromISR+0xfa>
 8018fee:	683b      	ldr	r3, [r7, #0]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d00b      	beq.n	801900c <xQueueGiveFromISR+0xfa>
 8018ff4:	683b      	ldr	r3, [r7, #0]
 8018ff6:	2201      	movs	r2, #1
 8018ff8:	601a      	str	r2, [r3, #0]
 8018ffa:	e007      	b.n	801900c <xQueueGiveFromISR+0xfa>
 8018ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019000:	3301      	adds	r3, #1
 8019002:	b2db      	uxtb	r3, r3
 8019004:	b25a      	sxtb	r2, r3
 8019006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801900c:	2301      	movs	r3, #1
 801900e:	637b      	str	r3, [r7, #52]	; 0x34
 8019010:	e001      	b.n	8019016 <xQueueGiveFromISR+0x104>
 8019012:	2300      	movs	r3, #0
 8019014:	637b      	str	r3, [r7, #52]	; 0x34
 8019016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019018:	60fb      	str	r3, [r7, #12]
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	f383 8811 	msr	BASEPRI, r3
 8019020:	bf00      	nop
 8019022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019024:	4618      	mov	r0, r3
 8019026:	3738      	adds	r7, #56	; 0x38
 8019028:	46bd      	mov	sp, r7
 801902a:	bd80      	pop	{r7, pc}

0801902c <xQueueReceive>:
 801902c:	b580      	push	{r7, lr}
 801902e:	b08c      	sub	sp, #48	; 0x30
 8019030:	af00      	add	r7, sp, #0
 8019032:	60f8      	str	r0, [r7, #12]
 8019034:	60b9      	str	r1, [r7, #8]
 8019036:	607a      	str	r2, [r7, #4]
 8019038:	2300      	movs	r3, #0
 801903a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801903c:	68fb      	ldr	r3, [r7, #12]
 801903e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019042:	2b00      	cmp	r3, #0
 8019044:	d10a      	bne.n	801905c <xQueueReceive+0x30>
 8019046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801904a:	f383 8811 	msr	BASEPRI, r3
 801904e:	f3bf 8f6f 	isb	sy
 8019052:	f3bf 8f4f 	dsb	sy
 8019056:	623b      	str	r3, [r7, #32]
 8019058:	bf00      	nop
 801905a:	e7fe      	b.n	801905a <xQueueReceive+0x2e>
 801905c:	68bb      	ldr	r3, [r7, #8]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d103      	bne.n	801906a <xQueueReceive+0x3e>
 8019062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019066:	2b00      	cmp	r3, #0
 8019068:	d101      	bne.n	801906e <xQueueReceive+0x42>
 801906a:	2301      	movs	r3, #1
 801906c:	e000      	b.n	8019070 <xQueueReceive+0x44>
 801906e:	2300      	movs	r3, #0
 8019070:	2b00      	cmp	r3, #0
 8019072:	d10a      	bne.n	801908a <xQueueReceive+0x5e>
 8019074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019078:	f383 8811 	msr	BASEPRI, r3
 801907c:	f3bf 8f6f 	isb	sy
 8019080:	f3bf 8f4f 	dsb	sy
 8019084:	61fb      	str	r3, [r7, #28]
 8019086:	bf00      	nop
 8019088:	e7fe      	b.n	8019088 <xQueueReceive+0x5c>
 801908a:	f001 fadf 	bl	801a64c <xTaskGetSchedulerState>
 801908e:	4603      	mov	r3, r0
 8019090:	2b00      	cmp	r3, #0
 8019092:	d102      	bne.n	801909a <xQueueReceive+0x6e>
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	2b00      	cmp	r3, #0
 8019098:	d101      	bne.n	801909e <xQueueReceive+0x72>
 801909a:	2301      	movs	r3, #1
 801909c:	e000      	b.n	80190a0 <xQueueReceive+0x74>
 801909e:	2300      	movs	r3, #0
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d10a      	bne.n	80190ba <xQueueReceive+0x8e>
 80190a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190a8:	f383 8811 	msr	BASEPRI, r3
 80190ac:	f3bf 8f6f 	isb	sy
 80190b0:	f3bf 8f4f 	dsb	sy
 80190b4:	61bb      	str	r3, [r7, #24]
 80190b6:	bf00      	nop
 80190b8:	e7fe      	b.n	80190b8 <xQueueReceive+0x8c>
 80190ba:	f002 fb1b 	bl	801b6f4 <vPortEnterCritical>
 80190be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80190c2:	627b      	str	r3, [r7, #36]	; 0x24
 80190c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d01f      	beq.n	801910a <xQueueReceive+0xde>
 80190ca:	68b9      	ldr	r1, [r7, #8]
 80190cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80190ce:	f000 fabe 	bl	801964e <prvCopyDataFromQueue>
 80190d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190d4:	1e5a      	subs	r2, r3, #1
 80190d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190d8:	639a      	str	r2, [r3, #56]	; 0x38
 80190da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190dc:	691b      	ldr	r3, [r3, #16]
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d00f      	beq.n	8019102 <xQueueReceive+0xd6>
 80190e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190e4:	3310      	adds	r3, #16
 80190e6:	4618      	mov	r0, r3
 80190e8:	f001 f88e 	bl	801a208 <xTaskRemoveFromEventList>
 80190ec:	4603      	mov	r3, r0
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d007      	beq.n	8019102 <xQueueReceive+0xd6>
 80190f2:	4b3d      	ldr	r3, [pc, #244]	; (80191e8 <xQueueReceive+0x1bc>)
 80190f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80190f8:	601a      	str	r2, [r3, #0]
 80190fa:	f3bf 8f4f 	dsb	sy
 80190fe:	f3bf 8f6f 	isb	sy
 8019102:	f002 fb27 	bl	801b754 <vPortExitCritical>
 8019106:	2301      	movs	r3, #1
 8019108:	e069      	b.n	80191de <xQueueReceive+0x1b2>
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	2b00      	cmp	r3, #0
 801910e:	d103      	bne.n	8019118 <xQueueReceive+0xec>
 8019110:	f002 fb20 	bl	801b754 <vPortExitCritical>
 8019114:	2300      	movs	r3, #0
 8019116:	e062      	b.n	80191de <xQueueReceive+0x1b2>
 8019118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801911a:	2b00      	cmp	r3, #0
 801911c:	d106      	bne.n	801912c <xQueueReceive+0x100>
 801911e:	f107 0310 	add.w	r3, r7, #16
 8019122:	4618      	mov	r0, r3
 8019124:	f001 f934 	bl	801a390 <vTaskInternalSetTimeOutState>
 8019128:	2301      	movs	r3, #1
 801912a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801912c:	f002 fb12 	bl	801b754 <vPortExitCritical>
 8019130:	f000 fe0a 	bl	8019d48 <vTaskSuspendAll>
 8019134:	f002 fade 	bl	801b6f4 <vPortEnterCritical>
 8019138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801913a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801913e:	b25b      	sxtb	r3, r3
 8019140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019144:	d103      	bne.n	801914e <xQueueReceive+0x122>
 8019146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019148:	2200      	movs	r2, #0
 801914a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801914e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019154:	b25b      	sxtb	r3, r3
 8019156:	f1b3 3fff 	cmp.w	r3, #4294967295
 801915a:	d103      	bne.n	8019164 <xQueueReceive+0x138>
 801915c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801915e:	2200      	movs	r2, #0
 8019160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019164:	f002 faf6 	bl	801b754 <vPortExitCritical>
 8019168:	1d3a      	adds	r2, r7, #4
 801916a:	f107 0310 	add.w	r3, r7, #16
 801916e:	4611      	mov	r1, r2
 8019170:	4618      	mov	r0, r3
 8019172:	f001 f923 	bl	801a3bc <xTaskCheckForTimeOut>
 8019176:	4603      	mov	r3, r0
 8019178:	2b00      	cmp	r3, #0
 801917a:	d123      	bne.n	80191c4 <xQueueReceive+0x198>
 801917c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801917e:	f000 fade 	bl	801973e <prvIsQueueEmpty>
 8019182:	4603      	mov	r3, r0
 8019184:	2b00      	cmp	r3, #0
 8019186:	d017      	beq.n	80191b8 <xQueueReceive+0x18c>
 8019188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801918a:	3324      	adds	r3, #36	; 0x24
 801918c:	687a      	ldr	r2, [r7, #4]
 801918e:	4611      	mov	r1, r2
 8019190:	4618      	mov	r0, r3
 8019192:	f000 ffad 	bl	801a0f0 <vTaskPlaceOnEventList>
 8019196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019198:	f000 fa7f 	bl	801969a <prvUnlockQueue>
 801919c:	f000 fde2 	bl	8019d64 <xTaskResumeAll>
 80191a0:	4603      	mov	r3, r0
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d189      	bne.n	80190ba <xQueueReceive+0x8e>
 80191a6:	4b10      	ldr	r3, [pc, #64]	; (80191e8 <xQueueReceive+0x1bc>)
 80191a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80191ac:	601a      	str	r2, [r3, #0]
 80191ae:	f3bf 8f4f 	dsb	sy
 80191b2:	f3bf 8f6f 	isb	sy
 80191b6:	e780      	b.n	80190ba <xQueueReceive+0x8e>
 80191b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80191ba:	f000 fa6e 	bl	801969a <prvUnlockQueue>
 80191be:	f000 fdd1 	bl	8019d64 <xTaskResumeAll>
 80191c2:	e77a      	b.n	80190ba <xQueueReceive+0x8e>
 80191c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80191c6:	f000 fa68 	bl	801969a <prvUnlockQueue>
 80191ca:	f000 fdcb 	bl	8019d64 <xTaskResumeAll>
 80191ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80191d0:	f000 fab5 	bl	801973e <prvIsQueueEmpty>
 80191d4:	4603      	mov	r3, r0
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	f43f af6f 	beq.w	80190ba <xQueueReceive+0x8e>
 80191dc:	2300      	movs	r3, #0
 80191de:	4618      	mov	r0, r3
 80191e0:	3730      	adds	r7, #48	; 0x30
 80191e2:	46bd      	mov	sp, r7
 80191e4:	bd80      	pop	{r7, pc}
 80191e6:	bf00      	nop
 80191e8:	e000ed04 	.word	0xe000ed04

080191ec <xQueueSemaphoreTake>:
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b08e      	sub	sp, #56	; 0x38
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]
 80191f4:	6039      	str	r1, [r7, #0]
 80191f6:	2300      	movs	r3, #0
 80191f8:	637b      	str	r3, [r7, #52]	; 0x34
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80191fe:	2300      	movs	r3, #0
 8019200:	633b      	str	r3, [r7, #48]	; 0x30
 8019202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019204:	2b00      	cmp	r3, #0
 8019206:	d10a      	bne.n	801921e <xQueueSemaphoreTake+0x32>
 8019208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801920c:	f383 8811 	msr	BASEPRI, r3
 8019210:	f3bf 8f6f 	isb	sy
 8019214:	f3bf 8f4f 	dsb	sy
 8019218:	623b      	str	r3, [r7, #32]
 801921a:	bf00      	nop
 801921c:	e7fe      	b.n	801921c <xQueueSemaphoreTake+0x30>
 801921e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019222:	2b00      	cmp	r3, #0
 8019224:	d00a      	beq.n	801923c <xQueueSemaphoreTake+0x50>
 8019226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801922a:	f383 8811 	msr	BASEPRI, r3
 801922e:	f3bf 8f6f 	isb	sy
 8019232:	f3bf 8f4f 	dsb	sy
 8019236:	61fb      	str	r3, [r7, #28]
 8019238:	bf00      	nop
 801923a:	e7fe      	b.n	801923a <xQueueSemaphoreTake+0x4e>
 801923c:	f001 fa06 	bl	801a64c <xTaskGetSchedulerState>
 8019240:	4603      	mov	r3, r0
 8019242:	2b00      	cmp	r3, #0
 8019244:	d102      	bne.n	801924c <xQueueSemaphoreTake+0x60>
 8019246:	683b      	ldr	r3, [r7, #0]
 8019248:	2b00      	cmp	r3, #0
 801924a:	d101      	bne.n	8019250 <xQueueSemaphoreTake+0x64>
 801924c:	2301      	movs	r3, #1
 801924e:	e000      	b.n	8019252 <xQueueSemaphoreTake+0x66>
 8019250:	2300      	movs	r3, #0
 8019252:	2b00      	cmp	r3, #0
 8019254:	d10a      	bne.n	801926c <xQueueSemaphoreTake+0x80>
 8019256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801925a:	f383 8811 	msr	BASEPRI, r3
 801925e:	f3bf 8f6f 	isb	sy
 8019262:	f3bf 8f4f 	dsb	sy
 8019266:	61bb      	str	r3, [r7, #24]
 8019268:	bf00      	nop
 801926a:	e7fe      	b.n	801926a <xQueueSemaphoreTake+0x7e>
 801926c:	f002 fa42 	bl	801b6f4 <vPortEnterCritical>
 8019270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019274:	62bb      	str	r3, [r7, #40]	; 0x28
 8019276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019278:	2b00      	cmp	r3, #0
 801927a:	d024      	beq.n	80192c6 <xQueueSemaphoreTake+0xda>
 801927c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801927e:	1e5a      	subs	r2, r3, #1
 8019280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019282:	639a      	str	r2, [r3, #56]	; 0x38
 8019284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	2b00      	cmp	r3, #0
 801928a:	d104      	bne.n	8019296 <xQueueSemaphoreTake+0xaa>
 801928c:	f001 fb9e 	bl	801a9cc <pvTaskIncrementMutexHeldCount>
 8019290:	4602      	mov	r2, r0
 8019292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019294:	609a      	str	r2, [r3, #8]
 8019296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019298:	691b      	ldr	r3, [r3, #16]
 801929a:	2b00      	cmp	r3, #0
 801929c:	d00f      	beq.n	80192be <xQueueSemaphoreTake+0xd2>
 801929e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192a0:	3310      	adds	r3, #16
 80192a2:	4618      	mov	r0, r3
 80192a4:	f000 ffb0 	bl	801a208 <xTaskRemoveFromEventList>
 80192a8:	4603      	mov	r3, r0
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d007      	beq.n	80192be <xQueueSemaphoreTake+0xd2>
 80192ae:	4b54      	ldr	r3, [pc, #336]	; (8019400 <xQueueSemaphoreTake+0x214>)
 80192b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80192b4:	601a      	str	r2, [r3, #0]
 80192b6:	f3bf 8f4f 	dsb	sy
 80192ba:	f3bf 8f6f 	isb	sy
 80192be:	f002 fa49 	bl	801b754 <vPortExitCritical>
 80192c2:	2301      	movs	r3, #1
 80192c4:	e097      	b.n	80193f6 <xQueueSemaphoreTake+0x20a>
 80192c6:	683b      	ldr	r3, [r7, #0]
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d111      	bne.n	80192f0 <xQueueSemaphoreTake+0x104>
 80192cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d00a      	beq.n	80192e8 <xQueueSemaphoreTake+0xfc>
 80192d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192d6:	f383 8811 	msr	BASEPRI, r3
 80192da:	f3bf 8f6f 	isb	sy
 80192de:	f3bf 8f4f 	dsb	sy
 80192e2:	617b      	str	r3, [r7, #20]
 80192e4:	bf00      	nop
 80192e6:	e7fe      	b.n	80192e6 <xQueueSemaphoreTake+0xfa>
 80192e8:	f002 fa34 	bl	801b754 <vPortExitCritical>
 80192ec:	2300      	movs	r3, #0
 80192ee:	e082      	b.n	80193f6 <xQueueSemaphoreTake+0x20a>
 80192f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d106      	bne.n	8019304 <xQueueSemaphoreTake+0x118>
 80192f6:	f107 030c 	add.w	r3, r7, #12
 80192fa:	4618      	mov	r0, r3
 80192fc:	f001 f848 	bl	801a390 <vTaskInternalSetTimeOutState>
 8019300:	2301      	movs	r3, #1
 8019302:	637b      	str	r3, [r7, #52]	; 0x34
 8019304:	f002 fa26 	bl	801b754 <vPortExitCritical>
 8019308:	f000 fd1e 	bl	8019d48 <vTaskSuspendAll>
 801930c:	f002 f9f2 	bl	801b6f4 <vPortEnterCritical>
 8019310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019312:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019316:	b25b      	sxtb	r3, r3
 8019318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801931c:	d103      	bne.n	8019326 <xQueueSemaphoreTake+0x13a>
 801931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019320:	2200      	movs	r2, #0
 8019322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801932c:	b25b      	sxtb	r3, r3
 801932e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019332:	d103      	bne.n	801933c <xQueueSemaphoreTake+0x150>
 8019334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019336:	2200      	movs	r2, #0
 8019338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801933c:	f002 fa0a 	bl	801b754 <vPortExitCritical>
 8019340:	463a      	mov	r2, r7
 8019342:	f107 030c 	add.w	r3, r7, #12
 8019346:	4611      	mov	r1, r2
 8019348:	4618      	mov	r0, r3
 801934a:	f001 f837 	bl	801a3bc <xTaskCheckForTimeOut>
 801934e:	4603      	mov	r3, r0
 8019350:	2b00      	cmp	r3, #0
 8019352:	d132      	bne.n	80193ba <xQueueSemaphoreTake+0x1ce>
 8019354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019356:	f000 f9f2 	bl	801973e <prvIsQueueEmpty>
 801935a:	4603      	mov	r3, r0
 801935c:	2b00      	cmp	r3, #0
 801935e:	d026      	beq.n	80193ae <xQueueSemaphoreTake+0x1c2>
 8019360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	2b00      	cmp	r3, #0
 8019366:	d109      	bne.n	801937c <xQueueSemaphoreTake+0x190>
 8019368:	f002 f9c4 	bl	801b6f4 <vPortEnterCritical>
 801936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801936e:	689b      	ldr	r3, [r3, #8]
 8019370:	4618      	mov	r0, r3
 8019372:	f001 f989 	bl	801a688 <xTaskPriorityInherit>
 8019376:	6338      	str	r0, [r7, #48]	; 0x30
 8019378:	f002 f9ec 	bl	801b754 <vPortExitCritical>
 801937c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801937e:	3324      	adds	r3, #36	; 0x24
 8019380:	683a      	ldr	r2, [r7, #0]
 8019382:	4611      	mov	r1, r2
 8019384:	4618      	mov	r0, r3
 8019386:	f000 feb3 	bl	801a0f0 <vTaskPlaceOnEventList>
 801938a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801938c:	f000 f985 	bl	801969a <prvUnlockQueue>
 8019390:	f000 fce8 	bl	8019d64 <xTaskResumeAll>
 8019394:	4603      	mov	r3, r0
 8019396:	2b00      	cmp	r3, #0
 8019398:	f47f af68 	bne.w	801926c <xQueueSemaphoreTake+0x80>
 801939c:	4b18      	ldr	r3, [pc, #96]	; (8019400 <xQueueSemaphoreTake+0x214>)
 801939e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193a2:	601a      	str	r2, [r3, #0]
 80193a4:	f3bf 8f4f 	dsb	sy
 80193a8:	f3bf 8f6f 	isb	sy
 80193ac:	e75e      	b.n	801926c <xQueueSemaphoreTake+0x80>
 80193ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80193b0:	f000 f973 	bl	801969a <prvUnlockQueue>
 80193b4:	f000 fcd6 	bl	8019d64 <xTaskResumeAll>
 80193b8:	e758      	b.n	801926c <xQueueSemaphoreTake+0x80>
 80193ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80193bc:	f000 f96d 	bl	801969a <prvUnlockQueue>
 80193c0:	f000 fcd0 	bl	8019d64 <xTaskResumeAll>
 80193c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80193c6:	f000 f9ba 	bl	801973e <prvIsQueueEmpty>
 80193ca:	4603      	mov	r3, r0
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	f43f af4d 	beq.w	801926c <xQueueSemaphoreTake+0x80>
 80193d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d00d      	beq.n	80193f4 <xQueueSemaphoreTake+0x208>
 80193d8:	f002 f98c 	bl	801b6f4 <vPortEnterCritical>
 80193dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80193de:	f000 f8b4 	bl	801954a <prvGetDisinheritPriorityAfterTimeout>
 80193e2:	6278      	str	r0, [r7, #36]	; 0x24
 80193e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193e6:	689b      	ldr	r3, [r3, #8]
 80193e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80193ea:	4618      	mov	r0, r3
 80193ec:	f001 fa48 	bl	801a880 <vTaskPriorityDisinheritAfterTimeout>
 80193f0:	f002 f9b0 	bl	801b754 <vPortExitCritical>
 80193f4:	2300      	movs	r3, #0
 80193f6:	4618      	mov	r0, r3
 80193f8:	3738      	adds	r7, #56	; 0x38
 80193fa:	46bd      	mov	sp, r7
 80193fc:	bd80      	pop	{r7, pc}
 80193fe:	bf00      	nop
 8019400:	e000ed04 	.word	0xe000ed04

08019404 <xQueueReceiveFromISR>:
 8019404:	b580      	push	{r7, lr}
 8019406:	b08e      	sub	sp, #56	; 0x38
 8019408:	af00      	add	r7, sp, #0
 801940a:	60f8      	str	r0, [r7, #12]
 801940c:	60b9      	str	r1, [r7, #8]
 801940e:	607a      	str	r2, [r7, #4]
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	633b      	str	r3, [r7, #48]	; 0x30
 8019414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019416:	2b00      	cmp	r3, #0
 8019418:	d10a      	bne.n	8019430 <xQueueReceiveFromISR+0x2c>
 801941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801941e:	f383 8811 	msr	BASEPRI, r3
 8019422:	f3bf 8f6f 	isb	sy
 8019426:	f3bf 8f4f 	dsb	sy
 801942a:	623b      	str	r3, [r7, #32]
 801942c:	bf00      	nop
 801942e:	e7fe      	b.n	801942e <xQueueReceiveFromISR+0x2a>
 8019430:	68bb      	ldr	r3, [r7, #8]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d103      	bne.n	801943e <xQueueReceiveFromISR+0x3a>
 8019436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801943a:	2b00      	cmp	r3, #0
 801943c:	d101      	bne.n	8019442 <xQueueReceiveFromISR+0x3e>
 801943e:	2301      	movs	r3, #1
 8019440:	e000      	b.n	8019444 <xQueueReceiveFromISR+0x40>
 8019442:	2300      	movs	r3, #0
 8019444:	2b00      	cmp	r3, #0
 8019446:	d10a      	bne.n	801945e <xQueueReceiveFromISR+0x5a>
 8019448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801944c:	f383 8811 	msr	BASEPRI, r3
 8019450:	f3bf 8f6f 	isb	sy
 8019454:	f3bf 8f4f 	dsb	sy
 8019458:	61fb      	str	r3, [r7, #28]
 801945a:	bf00      	nop
 801945c:	e7fe      	b.n	801945c <xQueueReceiveFromISR+0x58>
 801945e:	f002 fa2b 	bl	801b8b8 <vPortValidateInterruptPriority>
 8019462:	f3ef 8211 	mrs	r2, BASEPRI
 8019466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801946a:	f383 8811 	msr	BASEPRI, r3
 801946e:	f3bf 8f6f 	isb	sy
 8019472:	f3bf 8f4f 	dsb	sy
 8019476:	61ba      	str	r2, [r7, #24]
 8019478:	617b      	str	r3, [r7, #20]
 801947a:	69bb      	ldr	r3, [r7, #24]
 801947c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019482:	62bb      	str	r3, [r7, #40]	; 0x28
 8019484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019486:	2b00      	cmp	r3, #0
 8019488:	d02f      	beq.n	80194ea <xQueueReceiveFromISR+0xe6>
 801948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801948c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019494:	68b9      	ldr	r1, [r7, #8]
 8019496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019498:	f000 f8d9 	bl	801964e <prvCopyDataFromQueue>
 801949c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801949e:	1e5a      	subs	r2, r3, #1
 80194a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194a2:	639a      	str	r2, [r3, #56]	; 0x38
 80194a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80194a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194ac:	d112      	bne.n	80194d4 <xQueueReceiveFromISR+0xd0>
 80194ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194b0:	691b      	ldr	r3, [r3, #16]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d016      	beq.n	80194e4 <xQueueReceiveFromISR+0xe0>
 80194b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194b8:	3310      	adds	r3, #16
 80194ba:	4618      	mov	r0, r3
 80194bc:	f000 fea4 	bl	801a208 <xTaskRemoveFromEventList>
 80194c0:	4603      	mov	r3, r0
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d00e      	beq.n	80194e4 <xQueueReceiveFromISR+0xe0>
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d00b      	beq.n	80194e4 <xQueueReceiveFromISR+0xe0>
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	2201      	movs	r2, #1
 80194d0:	601a      	str	r2, [r3, #0]
 80194d2:	e007      	b.n	80194e4 <xQueueReceiveFromISR+0xe0>
 80194d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194d8:	3301      	adds	r3, #1
 80194da:	b2db      	uxtb	r3, r3
 80194dc:	b25a      	sxtb	r2, r3
 80194de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80194e4:	2301      	movs	r3, #1
 80194e6:	637b      	str	r3, [r7, #52]	; 0x34
 80194e8:	e001      	b.n	80194ee <xQueueReceiveFromISR+0xea>
 80194ea:	2300      	movs	r3, #0
 80194ec:	637b      	str	r3, [r7, #52]	; 0x34
 80194ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194f0:	613b      	str	r3, [r7, #16]
 80194f2:	693b      	ldr	r3, [r7, #16]
 80194f4:	f383 8811 	msr	BASEPRI, r3
 80194f8:	bf00      	nop
 80194fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194fc:	4618      	mov	r0, r3
 80194fe:	3738      	adds	r7, #56	; 0x38
 8019500:	46bd      	mov	sp, r7
 8019502:	bd80      	pop	{r7, pc}

08019504 <vQueueDelete>:
 8019504:	b580      	push	{r7, lr}
 8019506:	b084      	sub	sp, #16
 8019508:	af00      	add	r7, sp, #0
 801950a:	6078      	str	r0, [r7, #4]
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	60fb      	str	r3, [r7, #12]
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d10a      	bne.n	801952c <vQueueDelete+0x28>
 8019516:	f04f 0350 	mov.w	r3, #80	; 0x50
 801951a:	f383 8811 	msr	BASEPRI, r3
 801951e:	f3bf 8f6f 	isb	sy
 8019522:	f3bf 8f4f 	dsb	sy
 8019526:	60bb      	str	r3, [r7, #8]
 8019528:	bf00      	nop
 801952a:	e7fe      	b.n	801952a <vQueueDelete+0x26>
 801952c:	68f8      	ldr	r0, [r7, #12]
 801952e:	f000 f95f 	bl	80197f0 <vQueueUnregisterQueue>
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019538:	2b00      	cmp	r3, #0
 801953a:	d102      	bne.n	8019542 <vQueueDelete+0x3e>
 801953c:	68f8      	ldr	r0, [r7, #12]
 801953e:	f002 fac7 	bl	801bad0 <vPortFree>
 8019542:	bf00      	nop
 8019544:	3710      	adds	r7, #16
 8019546:	46bd      	mov	sp, r7
 8019548:	bd80      	pop	{r7, pc}

0801954a <prvGetDisinheritPriorityAfterTimeout>:
 801954a:	b480      	push	{r7}
 801954c:	b085      	sub	sp, #20
 801954e:	af00      	add	r7, sp, #0
 8019550:	6078      	str	r0, [r7, #4]
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019556:	2b00      	cmp	r3, #0
 8019558:	d006      	beq.n	8019568 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	f1c3 0307 	rsb	r3, r3, #7
 8019564:	60fb      	str	r3, [r7, #12]
 8019566:	e001      	b.n	801956c <prvGetDisinheritPriorityAfterTimeout+0x22>
 8019568:	2300      	movs	r3, #0
 801956a:	60fb      	str	r3, [r7, #12]
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	4618      	mov	r0, r3
 8019570:	3714      	adds	r7, #20
 8019572:	46bd      	mov	sp, r7
 8019574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019578:	4770      	bx	lr

0801957a <prvCopyDataToQueue>:
 801957a:	b580      	push	{r7, lr}
 801957c:	b086      	sub	sp, #24
 801957e:	af00      	add	r7, sp, #0
 8019580:	60f8      	str	r0, [r7, #12]
 8019582:	60b9      	str	r1, [r7, #8]
 8019584:	607a      	str	r2, [r7, #4]
 8019586:	2300      	movs	r3, #0
 8019588:	617b      	str	r3, [r7, #20]
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801958e:	613b      	str	r3, [r7, #16]
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019594:	2b00      	cmp	r3, #0
 8019596:	d10d      	bne.n	80195b4 <prvCopyDataToQueue+0x3a>
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	2b00      	cmp	r3, #0
 801959e:	d14d      	bne.n	801963c <prvCopyDataToQueue+0xc2>
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	689b      	ldr	r3, [r3, #8]
 80195a4:	4618      	mov	r0, r3
 80195a6:	f001 f8e5 	bl	801a774 <xTaskPriorityDisinherit>
 80195aa:	6178      	str	r0, [r7, #20]
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	2200      	movs	r2, #0
 80195b0:	609a      	str	r2, [r3, #8]
 80195b2:	e043      	b.n	801963c <prvCopyDataToQueue+0xc2>
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d119      	bne.n	80195ee <prvCopyDataToQueue+0x74>
 80195ba:	68fb      	ldr	r3, [r7, #12]
 80195bc:	6858      	ldr	r0, [r3, #4]
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195c2:	461a      	mov	r2, r3
 80195c4:	68b9      	ldr	r1, [r7, #8]
 80195c6:	f005 f8a3 	bl	801e710 <memcpy>
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	685a      	ldr	r2, [r3, #4]
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195d2:	441a      	add	r2, r3
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	605a      	str	r2, [r3, #4]
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	685a      	ldr	r2, [r3, #4]
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	689b      	ldr	r3, [r3, #8]
 80195e0:	429a      	cmp	r2, r3
 80195e2:	d32b      	bcc.n	801963c <prvCopyDataToQueue+0xc2>
 80195e4:	68fb      	ldr	r3, [r7, #12]
 80195e6:	681a      	ldr	r2, [r3, #0]
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	605a      	str	r2, [r3, #4]
 80195ec:	e026      	b.n	801963c <prvCopyDataToQueue+0xc2>
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	68d8      	ldr	r0, [r3, #12]
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195f6:	461a      	mov	r2, r3
 80195f8:	68b9      	ldr	r1, [r7, #8]
 80195fa:	f005 f889 	bl	801e710 <memcpy>
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	68da      	ldr	r2, [r3, #12]
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019606:	425b      	negs	r3, r3
 8019608:	441a      	add	r2, r3
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	60da      	str	r2, [r3, #12]
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	68da      	ldr	r2, [r3, #12]
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	429a      	cmp	r2, r3
 8019618:	d207      	bcs.n	801962a <prvCopyDataToQueue+0xb0>
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	689a      	ldr	r2, [r3, #8]
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019622:	425b      	negs	r3, r3
 8019624:	441a      	add	r2, r3
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	60da      	str	r2, [r3, #12]
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	2b02      	cmp	r3, #2
 801962e:	d105      	bne.n	801963c <prvCopyDataToQueue+0xc2>
 8019630:	693b      	ldr	r3, [r7, #16]
 8019632:	2b00      	cmp	r3, #0
 8019634:	d002      	beq.n	801963c <prvCopyDataToQueue+0xc2>
 8019636:	693b      	ldr	r3, [r7, #16]
 8019638:	3b01      	subs	r3, #1
 801963a:	613b      	str	r3, [r7, #16]
 801963c:	693b      	ldr	r3, [r7, #16]
 801963e:	1c5a      	adds	r2, r3, #1
 8019640:	68fb      	ldr	r3, [r7, #12]
 8019642:	639a      	str	r2, [r3, #56]	; 0x38
 8019644:	697b      	ldr	r3, [r7, #20]
 8019646:	4618      	mov	r0, r3
 8019648:	3718      	adds	r7, #24
 801964a:	46bd      	mov	sp, r7
 801964c:	bd80      	pop	{r7, pc}

0801964e <prvCopyDataFromQueue>:
 801964e:	b580      	push	{r7, lr}
 8019650:	b082      	sub	sp, #8
 8019652:	af00      	add	r7, sp, #0
 8019654:	6078      	str	r0, [r7, #4]
 8019656:	6039      	str	r1, [r7, #0]
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801965c:	2b00      	cmp	r3, #0
 801965e:	d018      	beq.n	8019692 <prvCopyDataFromQueue+0x44>
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	68da      	ldr	r2, [r3, #12]
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019668:	441a      	add	r2, r3
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	60da      	str	r2, [r3, #12]
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	68da      	ldr	r2, [r3, #12]
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	689b      	ldr	r3, [r3, #8]
 8019676:	429a      	cmp	r2, r3
 8019678:	d303      	bcc.n	8019682 <prvCopyDataFromQueue+0x34>
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	681a      	ldr	r2, [r3, #0]
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	60da      	str	r2, [r3, #12]
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	68d9      	ldr	r1, [r3, #12]
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801968a:	461a      	mov	r2, r3
 801968c:	6838      	ldr	r0, [r7, #0]
 801968e:	f005 f83f 	bl	801e710 <memcpy>
 8019692:	bf00      	nop
 8019694:	3708      	adds	r7, #8
 8019696:	46bd      	mov	sp, r7
 8019698:	bd80      	pop	{r7, pc}

0801969a <prvUnlockQueue>:
 801969a:	b580      	push	{r7, lr}
 801969c:	b084      	sub	sp, #16
 801969e:	af00      	add	r7, sp, #0
 80196a0:	6078      	str	r0, [r7, #4]
 80196a2:	f002 f827 	bl	801b6f4 <vPortEnterCritical>
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80196ac:	73fb      	strb	r3, [r7, #15]
 80196ae:	e011      	b.n	80196d4 <prvUnlockQueue+0x3a>
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d012      	beq.n	80196de <prvUnlockQueue+0x44>
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	3324      	adds	r3, #36	; 0x24
 80196bc:	4618      	mov	r0, r3
 80196be:	f000 fda3 	bl	801a208 <xTaskRemoveFromEventList>
 80196c2:	4603      	mov	r3, r0
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d001      	beq.n	80196cc <prvUnlockQueue+0x32>
 80196c8:	f000 feda 	bl	801a480 <vTaskMissedYield>
 80196cc:	7bfb      	ldrb	r3, [r7, #15]
 80196ce:	3b01      	subs	r3, #1
 80196d0:	b2db      	uxtb	r3, r3
 80196d2:	73fb      	strb	r3, [r7, #15]
 80196d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80196d8:	2b00      	cmp	r3, #0
 80196da:	dce9      	bgt.n	80196b0 <prvUnlockQueue+0x16>
 80196dc:	e000      	b.n	80196e0 <prvUnlockQueue+0x46>
 80196de:	bf00      	nop
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	22ff      	movs	r2, #255	; 0xff
 80196e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80196e8:	f002 f834 	bl	801b754 <vPortExitCritical>
 80196ec:	f002 f802 	bl	801b6f4 <vPortEnterCritical>
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80196f6:	73bb      	strb	r3, [r7, #14]
 80196f8:	e011      	b.n	801971e <prvUnlockQueue+0x84>
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	691b      	ldr	r3, [r3, #16]
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d012      	beq.n	8019728 <prvUnlockQueue+0x8e>
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	3310      	adds	r3, #16
 8019706:	4618      	mov	r0, r3
 8019708:	f000 fd7e 	bl	801a208 <xTaskRemoveFromEventList>
 801970c:	4603      	mov	r3, r0
 801970e:	2b00      	cmp	r3, #0
 8019710:	d001      	beq.n	8019716 <prvUnlockQueue+0x7c>
 8019712:	f000 feb5 	bl	801a480 <vTaskMissedYield>
 8019716:	7bbb      	ldrb	r3, [r7, #14]
 8019718:	3b01      	subs	r3, #1
 801971a:	b2db      	uxtb	r3, r3
 801971c:	73bb      	strb	r3, [r7, #14]
 801971e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019722:	2b00      	cmp	r3, #0
 8019724:	dce9      	bgt.n	80196fa <prvUnlockQueue+0x60>
 8019726:	e000      	b.n	801972a <prvUnlockQueue+0x90>
 8019728:	bf00      	nop
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	22ff      	movs	r2, #255	; 0xff
 801972e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019732:	f002 f80f 	bl	801b754 <vPortExitCritical>
 8019736:	bf00      	nop
 8019738:	3710      	adds	r7, #16
 801973a:	46bd      	mov	sp, r7
 801973c:	bd80      	pop	{r7, pc}

0801973e <prvIsQueueEmpty>:
 801973e:	b580      	push	{r7, lr}
 8019740:	b084      	sub	sp, #16
 8019742:	af00      	add	r7, sp, #0
 8019744:	6078      	str	r0, [r7, #4]
 8019746:	f001 ffd5 	bl	801b6f4 <vPortEnterCritical>
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801974e:	2b00      	cmp	r3, #0
 8019750:	d102      	bne.n	8019758 <prvIsQueueEmpty+0x1a>
 8019752:	2301      	movs	r3, #1
 8019754:	60fb      	str	r3, [r7, #12]
 8019756:	e001      	b.n	801975c <prvIsQueueEmpty+0x1e>
 8019758:	2300      	movs	r3, #0
 801975a:	60fb      	str	r3, [r7, #12]
 801975c:	f001 fffa 	bl	801b754 <vPortExitCritical>
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	4618      	mov	r0, r3
 8019764:	3710      	adds	r7, #16
 8019766:	46bd      	mov	sp, r7
 8019768:	bd80      	pop	{r7, pc}

0801976a <prvIsQueueFull>:
 801976a:	b580      	push	{r7, lr}
 801976c:	b084      	sub	sp, #16
 801976e:	af00      	add	r7, sp, #0
 8019770:	6078      	str	r0, [r7, #4]
 8019772:	f001 ffbf 	bl	801b6f4 <vPortEnterCritical>
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801977e:	429a      	cmp	r2, r3
 8019780:	d102      	bne.n	8019788 <prvIsQueueFull+0x1e>
 8019782:	2301      	movs	r3, #1
 8019784:	60fb      	str	r3, [r7, #12]
 8019786:	e001      	b.n	801978c <prvIsQueueFull+0x22>
 8019788:	2300      	movs	r3, #0
 801978a:	60fb      	str	r3, [r7, #12]
 801978c:	f001 ffe2 	bl	801b754 <vPortExitCritical>
 8019790:	68fb      	ldr	r3, [r7, #12]
 8019792:	4618      	mov	r0, r3
 8019794:	3710      	adds	r7, #16
 8019796:	46bd      	mov	sp, r7
 8019798:	bd80      	pop	{r7, pc}
	...

0801979c <vQueueAddToRegistry>:
 801979c:	b480      	push	{r7}
 801979e:	b085      	sub	sp, #20
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	6078      	str	r0, [r7, #4]
 80197a4:	6039      	str	r1, [r7, #0]
 80197a6:	2300      	movs	r3, #0
 80197a8:	60fb      	str	r3, [r7, #12]
 80197aa:	e014      	b.n	80197d6 <vQueueAddToRegistry+0x3a>
 80197ac:	4a0f      	ldr	r2, [pc, #60]	; (80197ec <vQueueAddToRegistry+0x50>)
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d10b      	bne.n	80197d0 <vQueueAddToRegistry+0x34>
 80197b8:	490c      	ldr	r1, [pc, #48]	; (80197ec <vQueueAddToRegistry+0x50>)
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	683a      	ldr	r2, [r7, #0]
 80197be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80197c2:	4a0a      	ldr	r2, [pc, #40]	; (80197ec <vQueueAddToRegistry+0x50>)
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	00db      	lsls	r3, r3, #3
 80197c8:	4413      	add	r3, r2
 80197ca:	687a      	ldr	r2, [r7, #4]
 80197cc:	605a      	str	r2, [r3, #4]
 80197ce:	e006      	b.n	80197de <vQueueAddToRegistry+0x42>
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	3301      	adds	r3, #1
 80197d4:	60fb      	str	r3, [r7, #12]
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	2b07      	cmp	r3, #7
 80197da:	d9e7      	bls.n	80197ac <vQueueAddToRegistry+0x10>
 80197dc:	bf00      	nop
 80197de:	bf00      	nop
 80197e0:	3714      	adds	r7, #20
 80197e2:	46bd      	mov	sp, r7
 80197e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197e8:	4770      	bx	lr
 80197ea:	bf00      	nop
 80197ec:	200045e8 	.word	0x200045e8

080197f0 <vQueueUnregisterQueue>:
 80197f0:	b480      	push	{r7}
 80197f2:	b085      	sub	sp, #20
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	6078      	str	r0, [r7, #4]
 80197f8:	2300      	movs	r3, #0
 80197fa:	60fb      	str	r3, [r7, #12]
 80197fc:	e016      	b.n	801982c <vQueueUnregisterQueue+0x3c>
 80197fe:	4a10      	ldr	r2, [pc, #64]	; (8019840 <vQueueUnregisterQueue+0x50>)
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	00db      	lsls	r3, r3, #3
 8019804:	4413      	add	r3, r2
 8019806:	685b      	ldr	r3, [r3, #4]
 8019808:	687a      	ldr	r2, [r7, #4]
 801980a:	429a      	cmp	r2, r3
 801980c:	d10b      	bne.n	8019826 <vQueueUnregisterQueue+0x36>
 801980e:	4a0c      	ldr	r2, [pc, #48]	; (8019840 <vQueueUnregisterQueue+0x50>)
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	2100      	movs	r1, #0
 8019814:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8019818:	4a09      	ldr	r2, [pc, #36]	; (8019840 <vQueueUnregisterQueue+0x50>)
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	00db      	lsls	r3, r3, #3
 801981e:	4413      	add	r3, r2
 8019820:	2200      	movs	r2, #0
 8019822:	605a      	str	r2, [r3, #4]
 8019824:	e006      	b.n	8019834 <vQueueUnregisterQueue+0x44>
 8019826:	68fb      	ldr	r3, [r7, #12]
 8019828:	3301      	adds	r3, #1
 801982a:	60fb      	str	r3, [r7, #12]
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	2b07      	cmp	r3, #7
 8019830:	d9e5      	bls.n	80197fe <vQueueUnregisterQueue+0xe>
 8019832:	bf00      	nop
 8019834:	bf00      	nop
 8019836:	3714      	adds	r7, #20
 8019838:	46bd      	mov	sp, r7
 801983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801983e:	4770      	bx	lr
 8019840:	200045e8 	.word	0x200045e8

08019844 <vQueueWaitForMessageRestricted>:
 8019844:	b580      	push	{r7, lr}
 8019846:	b086      	sub	sp, #24
 8019848:	af00      	add	r7, sp, #0
 801984a:	60f8      	str	r0, [r7, #12]
 801984c:	60b9      	str	r1, [r7, #8]
 801984e:	607a      	str	r2, [r7, #4]
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	617b      	str	r3, [r7, #20]
 8019854:	f001 ff4e 	bl	801b6f4 <vPortEnterCritical>
 8019858:	697b      	ldr	r3, [r7, #20]
 801985a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801985e:	b25b      	sxtb	r3, r3
 8019860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019864:	d103      	bne.n	801986e <vQueueWaitForMessageRestricted+0x2a>
 8019866:	697b      	ldr	r3, [r7, #20]
 8019868:	2200      	movs	r2, #0
 801986a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801986e:	697b      	ldr	r3, [r7, #20]
 8019870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019874:	b25b      	sxtb	r3, r3
 8019876:	f1b3 3fff 	cmp.w	r3, #4294967295
 801987a:	d103      	bne.n	8019884 <vQueueWaitForMessageRestricted+0x40>
 801987c:	697b      	ldr	r3, [r7, #20]
 801987e:	2200      	movs	r2, #0
 8019880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019884:	f001 ff66 	bl	801b754 <vPortExitCritical>
 8019888:	697b      	ldr	r3, [r7, #20]
 801988a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801988c:	2b00      	cmp	r3, #0
 801988e:	d106      	bne.n	801989e <vQueueWaitForMessageRestricted+0x5a>
 8019890:	697b      	ldr	r3, [r7, #20]
 8019892:	3324      	adds	r3, #36	; 0x24
 8019894:	687a      	ldr	r2, [r7, #4]
 8019896:	68b9      	ldr	r1, [r7, #8]
 8019898:	4618      	mov	r0, r3
 801989a:	f000 fc89 	bl	801a1b0 <vTaskPlaceOnEventListRestricted>
 801989e:	6978      	ldr	r0, [r7, #20]
 80198a0:	f7ff fefb 	bl	801969a <prvUnlockQueue>
 80198a4:	bf00      	nop
 80198a6:	3718      	adds	r7, #24
 80198a8:	46bd      	mov	sp, r7
 80198aa:	bd80      	pop	{r7, pc}

080198ac <xTaskCreateStatic>:
 80198ac:	b580      	push	{r7, lr}
 80198ae:	b08e      	sub	sp, #56	; 0x38
 80198b0:	af04      	add	r7, sp, #16
 80198b2:	60f8      	str	r0, [r7, #12]
 80198b4:	60b9      	str	r1, [r7, #8]
 80198b6:	607a      	str	r2, [r7, #4]
 80198b8:	603b      	str	r3, [r7, #0]
 80198ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d10a      	bne.n	80198d6 <xTaskCreateStatic+0x2a>
 80198c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198c4:	f383 8811 	msr	BASEPRI, r3
 80198c8:	f3bf 8f6f 	isb	sy
 80198cc:	f3bf 8f4f 	dsb	sy
 80198d0:	623b      	str	r3, [r7, #32]
 80198d2:	bf00      	nop
 80198d4:	e7fe      	b.n	80198d4 <xTaskCreateStatic+0x28>
 80198d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d10a      	bne.n	80198f2 <xTaskCreateStatic+0x46>
 80198dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198e0:	f383 8811 	msr	BASEPRI, r3
 80198e4:	f3bf 8f6f 	isb	sy
 80198e8:	f3bf 8f4f 	dsb	sy
 80198ec:	61fb      	str	r3, [r7, #28]
 80198ee:	bf00      	nop
 80198f0:	e7fe      	b.n	80198f0 <xTaskCreateStatic+0x44>
 80198f2:	23a0      	movs	r3, #160	; 0xa0
 80198f4:	613b      	str	r3, [r7, #16]
 80198f6:	693b      	ldr	r3, [r7, #16]
 80198f8:	2ba0      	cmp	r3, #160	; 0xa0
 80198fa:	d00a      	beq.n	8019912 <xTaskCreateStatic+0x66>
 80198fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019900:	f383 8811 	msr	BASEPRI, r3
 8019904:	f3bf 8f6f 	isb	sy
 8019908:	f3bf 8f4f 	dsb	sy
 801990c:	61bb      	str	r3, [r7, #24]
 801990e:	bf00      	nop
 8019910:	e7fe      	b.n	8019910 <xTaskCreateStatic+0x64>
 8019912:	693b      	ldr	r3, [r7, #16]
 8019914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019916:	2b00      	cmp	r3, #0
 8019918:	d01e      	beq.n	8019958 <xTaskCreateStatic+0xac>
 801991a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801991c:	2b00      	cmp	r3, #0
 801991e:	d01b      	beq.n	8019958 <xTaskCreateStatic+0xac>
 8019920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019922:	627b      	str	r3, [r7, #36]	; 0x24
 8019924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019928:	631a      	str	r2, [r3, #48]	; 0x30
 801992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801992c:	2202      	movs	r2, #2
 801992e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8019932:	2300      	movs	r3, #0
 8019934:	9303      	str	r3, [sp, #12]
 8019936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019938:	9302      	str	r3, [sp, #8]
 801993a:	f107 0314 	add.w	r3, r7, #20
 801993e:	9301      	str	r3, [sp, #4]
 8019940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019942:	9300      	str	r3, [sp, #0]
 8019944:	683b      	ldr	r3, [r7, #0]
 8019946:	687a      	ldr	r2, [r7, #4]
 8019948:	68b9      	ldr	r1, [r7, #8]
 801994a:	68f8      	ldr	r0, [r7, #12]
 801994c:	f000 f850 	bl	80199f0 <prvInitialiseNewTask>
 8019950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019952:	f000 f8eb 	bl	8019b2c <prvAddNewTaskToReadyList>
 8019956:	e001      	b.n	801995c <xTaskCreateStatic+0xb0>
 8019958:	2300      	movs	r3, #0
 801995a:	617b      	str	r3, [r7, #20]
 801995c:	697b      	ldr	r3, [r7, #20]
 801995e:	4618      	mov	r0, r3
 8019960:	3728      	adds	r7, #40	; 0x28
 8019962:	46bd      	mov	sp, r7
 8019964:	bd80      	pop	{r7, pc}

08019966 <xTaskCreate>:
 8019966:	b580      	push	{r7, lr}
 8019968:	b08c      	sub	sp, #48	; 0x30
 801996a:	af04      	add	r7, sp, #16
 801996c:	60f8      	str	r0, [r7, #12]
 801996e:	60b9      	str	r1, [r7, #8]
 8019970:	603b      	str	r3, [r7, #0]
 8019972:	4613      	mov	r3, r2
 8019974:	80fb      	strh	r3, [r7, #6]
 8019976:	88fb      	ldrh	r3, [r7, #6]
 8019978:	009b      	lsls	r3, r3, #2
 801997a:	4618      	mov	r0, r3
 801997c:	f001 ffdc 	bl	801b938 <pvPortMalloc>
 8019980:	6178      	str	r0, [r7, #20]
 8019982:	697b      	ldr	r3, [r7, #20]
 8019984:	2b00      	cmp	r3, #0
 8019986:	d00e      	beq.n	80199a6 <xTaskCreate+0x40>
 8019988:	20a0      	movs	r0, #160	; 0xa0
 801998a:	f001 ffd5 	bl	801b938 <pvPortMalloc>
 801998e:	61f8      	str	r0, [r7, #28]
 8019990:	69fb      	ldr	r3, [r7, #28]
 8019992:	2b00      	cmp	r3, #0
 8019994:	d003      	beq.n	801999e <xTaskCreate+0x38>
 8019996:	69fb      	ldr	r3, [r7, #28]
 8019998:	697a      	ldr	r2, [r7, #20]
 801999a:	631a      	str	r2, [r3, #48]	; 0x30
 801999c:	e005      	b.n	80199aa <xTaskCreate+0x44>
 801999e:	6978      	ldr	r0, [r7, #20]
 80199a0:	f002 f896 	bl	801bad0 <vPortFree>
 80199a4:	e001      	b.n	80199aa <xTaskCreate+0x44>
 80199a6:	2300      	movs	r3, #0
 80199a8:	61fb      	str	r3, [r7, #28]
 80199aa:	69fb      	ldr	r3, [r7, #28]
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d017      	beq.n	80199e0 <xTaskCreate+0x7a>
 80199b0:	69fb      	ldr	r3, [r7, #28]
 80199b2:	2200      	movs	r2, #0
 80199b4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 80199b8:	88fa      	ldrh	r2, [r7, #6]
 80199ba:	2300      	movs	r3, #0
 80199bc:	9303      	str	r3, [sp, #12]
 80199be:	69fb      	ldr	r3, [r7, #28]
 80199c0:	9302      	str	r3, [sp, #8]
 80199c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199c4:	9301      	str	r3, [sp, #4]
 80199c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199c8:	9300      	str	r3, [sp, #0]
 80199ca:	683b      	ldr	r3, [r7, #0]
 80199cc:	68b9      	ldr	r1, [r7, #8]
 80199ce:	68f8      	ldr	r0, [r7, #12]
 80199d0:	f000 f80e 	bl	80199f0 <prvInitialiseNewTask>
 80199d4:	69f8      	ldr	r0, [r7, #28]
 80199d6:	f000 f8a9 	bl	8019b2c <prvAddNewTaskToReadyList>
 80199da:	2301      	movs	r3, #1
 80199dc:	61bb      	str	r3, [r7, #24]
 80199de:	e002      	b.n	80199e6 <xTaskCreate+0x80>
 80199e0:	f04f 33ff 	mov.w	r3, #4294967295
 80199e4:	61bb      	str	r3, [r7, #24]
 80199e6:	69bb      	ldr	r3, [r7, #24]
 80199e8:	4618      	mov	r0, r3
 80199ea:	3720      	adds	r7, #32
 80199ec:	46bd      	mov	sp, r7
 80199ee:	bd80      	pop	{r7, pc}

080199f0 <prvInitialiseNewTask>:
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b088      	sub	sp, #32
 80199f4:	af00      	add	r7, sp, #0
 80199f6:	60f8      	str	r0, [r7, #12]
 80199f8:	60b9      	str	r1, [r7, #8]
 80199fa:	607a      	str	r2, [r7, #4]
 80199fc:	603b      	str	r3, [r7, #0]
 80199fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019a08:	3b01      	subs	r3, #1
 8019a0a:	009b      	lsls	r3, r3, #2
 8019a0c:	4413      	add	r3, r2
 8019a0e:	61bb      	str	r3, [r7, #24]
 8019a10:	69bb      	ldr	r3, [r7, #24]
 8019a12:	f023 0307 	bic.w	r3, r3, #7
 8019a16:	61bb      	str	r3, [r7, #24]
 8019a18:	69bb      	ldr	r3, [r7, #24]
 8019a1a:	f003 0307 	and.w	r3, r3, #7
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d00a      	beq.n	8019a38 <prvInitialiseNewTask+0x48>
 8019a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a26:	f383 8811 	msr	BASEPRI, r3
 8019a2a:	f3bf 8f6f 	isb	sy
 8019a2e:	f3bf 8f4f 	dsb	sy
 8019a32:	617b      	str	r3, [r7, #20]
 8019a34:	bf00      	nop
 8019a36:	e7fe      	b.n	8019a36 <prvInitialiseNewTask+0x46>
 8019a38:	68bb      	ldr	r3, [r7, #8]
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d01f      	beq.n	8019a7e <prvInitialiseNewTask+0x8e>
 8019a3e:	2300      	movs	r3, #0
 8019a40:	61fb      	str	r3, [r7, #28]
 8019a42:	e012      	b.n	8019a6a <prvInitialiseNewTask+0x7a>
 8019a44:	68ba      	ldr	r2, [r7, #8]
 8019a46:	69fb      	ldr	r3, [r7, #28]
 8019a48:	4413      	add	r3, r2
 8019a4a:	7819      	ldrb	r1, [r3, #0]
 8019a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a4e:	69fb      	ldr	r3, [r7, #28]
 8019a50:	4413      	add	r3, r2
 8019a52:	3334      	adds	r3, #52	; 0x34
 8019a54:	460a      	mov	r2, r1
 8019a56:	701a      	strb	r2, [r3, #0]
 8019a58:	68ba      	ldr	r2, [r7, #8]
 8019a5a:	69fb      	ldr	r3, [r7, #28]
 8019a5c:	4413      	add	r3, r2
 8019a5e:	781b      	ldrb	r3, [r3, #0]
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d006      	beq.n	8019a72 <prvInitialiseNewTask+0x82>
 8019a64:	69fb      	ldr	r3, [r7, #28]
 8019a66:	3301      	adds	r3, #1
 8019a68:	61fb      	str	r3, [r7, #28]
 8019a6a:	69fb      	ldr	r3, [r7, #28]
 8019a6c:	2b0f      	cmp	r3, #15
 8019a6e:	d9e9      	bls.n	8019a44 <prvInitialiseNewTask+0x54>
 8019a70:	e000      	b.n	8019a74 <prvInitialiseNewTask+0x84>
 8019a72:	bf00      	nop
 8019a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a76:	2200      	movs	r2, #0
 8019a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019a7c:	e003      	b.n	8019a86 <prvInitialiseNewTask+0x96>
 8019a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a80:	2200      	movs	r2, #0
 8019a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8019a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a88:	2b06      	cmp	r3, #6
 8019a8a:	d901      	bls.n	8019a90 <prvInitialiseNewTask+0xa0>
 8019a8c:	2306      	movs	r3, #6
 8019a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8019a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a9a:	645a      	str	r2, [r3, #68]	; 0x44
 8019a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a9e:	2200      	movs	r2, #0
 8019aa0:	649a      	str	r2, [r3, #72]	; 0x48
 8019aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019aa4:	3304      	adds	r3, #4
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f7fe fecb 	bl	8018842 <vListInitialiseItem>
 8019aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019aae:	3318      	adds	r3, #24
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	f7fe fec6 	bl	8018842 <vListInitialiseItem>
 8019ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019aba:	611a      	str	r2, [r3, #16]
 8019abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019abe:	f1c3 0207 	rsb	r2, r3, #7
 8019ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ac4:	619a      	str	r2, [r3, #24]
 8019ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019aca:	625a      	str	r2, [r3, #36]	; 0x24
 8019acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ace:	2200      	movs	r2, #0
 8019ad0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8019ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ad6:	2200      	movs	r2, #0
 8019ad8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8019adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ade:	334c      	adds	r3, #76	; 0x4c
 8019ae0:	224c      	movs	r2, #76	; 0x4c
 8019ae2:	2100      	movs	r1, #0
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	f004 fd1c 	bl	801e522 <memset>
 8019aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019aec:	4a0c      	ldr	r2, [pc, #48]	; (8019b20 <prvInitialiseNewTask+0x130>)
 8019aee:	651a      	str	r2, [r3, #80]	; 0x50
 8019af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019af2:	4a0c      	ldr	r2, [pc, #48]	; (8019b24 <prvInitialiseNewTask+0x134>)
 8019af4:	655a      	str	r2, [r3, #84]	; 0x54
 8019af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019af8:	4a0b      	ldr	r2, [pc, #44]	; (8019b28 <prvInitialiseNewTask+0x138>)
 8019afa:	659a      	str	r2, [r3, #88]	; 0x58
 8019afc:	683a      	ldr	r2, [r7, #0]
 8019afe:	68f9      	ldr	r1, [r7, #12]
 8019b00:	69b8      	ldr	r0, [r7, #24]
 8019b02:	f001 fcc7 	bl	801b494 <pxPortInitialiseStack>
 8019b06:	4602      	mov	r2, r0
 8019b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b0a:	601a      	str	r2, [r3, #0]
 8019b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d002      	beq.n	8019b18 <prvInitialiseNewTask+0x128>
 8019b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019b16:	601a      	str	r2, [r3, #0]
 8019b18:	bf00      	nop
 8019b1a:	3720      	adds	r7, #32
 8019b1c:	46bd      	mov	sp, r7
 8019b1e:	bd80      	pop	{r7, pc}
 8019b20:	2000a088 	.word	0x2000a088
 8019b24:	2000a0f0 	.word	0x2000a0f0
 8019b28:	2000a158 	.word	0x2000a158

08019b2c <prvAddNewTaskToReadyList>:
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	b082      	sub	sp, #8
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	6078      	str	r0, [r7, #4]
 8019b34:	f001 fdde 	bl	801b6f4 <vPortEnterCritical>
 8019b38:	4b2a      	ldr	r3, [pc, #168]	; (8019be4 <prvAddNewTaskToReadyList+0xb8>)
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	3301      	adds	r3, #1
 8019b3e:	4a29      	ldr	r2, [pc, #164]	; (8019be4 <prvAddNewTaskToReadyList+0xb8>)
 8019b40:	6013      	str	r3, [r2, #0]
 8019b42:	4b29      	ldr	r3, [pc, #164]	; (8019be8 <prvAddNewTaskToReadyList+0xbc>)
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d109      	bne.n	8019b5e <prvAddNewTaskToReadyList+0x32>
 8019b4a:	4a27      	ldr	r2, [pc, #156]	; (8019be8 <prvAddNewTaskToReadyList+0xbc>)
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	6013      	str	r3, [r2, #0]
 8019b50:	4b24      	ldr	r3, [pc, #144]	; (8019be4 <prvAddNewTaskToReadyList+0xb8>)
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	2b01      	cmp	r3, #1
 8019b56:	d110      	bne.n	8019b7a <prvAddNewTaskToReadyList+0x4e>
 8019b58:	f000 fcb6 	bl	801a4c8 <prvInitialiseTaskLists>
 8019b5c:	e00d      	b.n	8019b7a <prvAddNewTaskToReadyList+0x4e>
 8019b5e:	4b23      	ldr	r3, [pc, #140]	; (8019bec <prvAddNewTaskToReadyList+0xc0>)
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d109      	bne.n	8019b7a <prvAddNewTaskToReadyList+0x4e>
 8019b66:	4b20      	ldr	r3, [pc, #128]	; (8019be8 <prvAddNewTaskToReadyList+0xbc>)
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b70:	429a      	cmp	r2, r3
 8019b72:	d802      	bhi.n	8019b7a <prvAddNewTaskToReadyList+0x4e>
 8019b74:	4a1c      	ldr	r2, [pc, #112]	; (8019be8 <prvAddNewTaskToReadyList+0xbc>)
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	6013      	str	r3, [r2, #0]
 8019b7a:	4b1d      	ldr	r3, [pc, #116]	; (8019bf0 <prvAddNewTaskToReadyList+0xc4>)
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	3301      	adds	r3, #1
 8019b80:	4a1b      	ldr	r2, [pc, #108]	; (8019bf0 <prvAddNewTaskToReadyList+0xc4>)
 8019b82:	6013      	str	r3, [r2, #0]
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b88:	2201      	movs	r2, #1
 8019b8a:	409a      	lsls	r2, r3
 8019b8c:	4b19      	ldr	r3, [pc, #100]	; (8019bf4 <prvAddNewTaskToReadyList+0xc8>)
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	4313      	orrs	r3, r2
 8019b92:	4a18      	ldr	r2, [pc, #96]	; (8019bf4 <prvAddNewTaskToReadyList+0xc8>)
 8019b94:	6013      	str	r3, [r2, #0]
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b9a:	4613      	mov	r3, r2
 8019b9c:	009b      	lsls	r3, r3, #2
 8019b9e:	4413      	add	r3, r2
 8019ba0:	009b      	lsls	r3, r3, #2
 8019ba2:	4a15      	ldr	r2, [pc, #84]	; (8019bf8 <prvAddNewTaskToReadyList+0xcc>)
 8019ba4:	441a      	add	r2, r3
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	3304      	adds	r3, #4
 8019baa:	4619      	mov	r1, r3
 8019bac:	4610      	mov	r0, r2
 8019bae:	f7fe fe55 	bl	801885c <vListInsertEnd>
 8019bb2:	f001 fdcf 	bl	801b754 <vPortExitCritical>
 8019bb6:	4b0d      	ldr	r3, [pc, #52]	; (8019bec <prvAddNewTaskToReadyList+0xc0>)
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d00e      	beq.n	8019bdc <prvAddNewTaskToReadyList+0xb0>
 8019bbe:	4b0a      	ldr	r3, [pc, #40]	; (8019be8 <prvAddNewTaskToReadyList+0xbc>)
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bc8:	429a      	cmp	r2, r3
 8019bca:	d207      	bcs.n	8019bdc <prvAddNewTaskToReadyList+0xb0>
 8019bcc:	4b0b      	ldr	r3, [pc, #44]	; (8019bfc <prvAddNewTaskToReadyList+0xd0>)
 8019bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019bd2:	601a      	str	r2, [r3, #0]
 8019bd4:	f3bf 8f4f 	dsb	sy
 8019bd8:	f3bf 8f6f 	isb	sy
 8019bdc:	bf00      	nop
 8019bde:	3708      	adds	r7, #8
 8019be0:	46bd      	mov	sp, r7
 8019be2:	bd80      	pop	{r7, pc}
 8019be4:	20004728 	.word	0x20004728
 8019be8:	20004628 	.word	0x20004628
 8019bec:	20004734 	.word	0x20004734
 8019bf0:	20004744 	.word	0x20004744
 8019bf4:	20004730 	.word	0x20004730
 8019bf8:	2000462c 	.word	0x2000462c
 8019bfc:	e000ed04 	.word	0xe000ed04

08019c00 <vTaskDelay>:
 8019c00:	b580      	push	{r7, lr}
 8019c02:	b084      	sub	sp, #16
 8019c04:	af00      	add	r7, sp, #0
 8019c06:	6078      	str	r0, [r7, #4]
 8019c08:	2300      	movs	r3, #0
 8019c0a:	60fb      	str	r3, [r7, #12]
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d017      	beq.n	8019c42 <vTaskDelay+0x42>
 8019c12:	4b13      	ldr	r3, [pc, #76]	; (8019c60 <vTaskDelay+0x60>)
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d00a      	beq.n	8019c30 <vTaskDelay+0x30>
 8019c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c1e:	f383 8811 	msr	BASEPRI, r3
 8019c22:	f3bf 8f6f 	isb	sy
 8019c26:	f3bf 8f4f 	dsb	sy
 8019c2a:	60bb      	str	r3, [r7, #8]
 8019c2c:	bf00      	nop
 8019c2e:	e7fe      	b.n	8019c2e <vTaskDelay+0x2e>
 8019c30:	f000 f88a 	bl	8019d48 <vTaskSuspendAll>
 8019c34:	2100      	movs	r1, #0
 8019c36:	6878      	ldr	r0, [r7, #4]
 8019c38:	f000 fffa 	bl	801ac30 <prvAddCurrentTaskToDelayedList>
 8019c3c:	f000 f892 	bl	8019d64 <xTaskResumeAll>
 8019c40:	60f8      	str	r0, [r7, #12]
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d107      	bne.n	8019c58 <vTaskDelay+0x58>
 8019c48:	4b06      	ldr	r3, [pc, #24]	; (8019c64 <vTaskDelay+0x64>)
 8019c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019c4e:	601a      	str	r2, [r3, #0]
 8019c50:	f3bf 8f4f 	dsb	sy
 8019c54:	f3bf 8f6f 	isb	sy
 8019c58:	bf00      	nop
 8019c5a:	3710      	adds	r7, #16
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	bd80      	pop	{r7, pc}
 8019c60:	20004750 	.word	0x20004750
 8019c64:	e000ed04 	.word	0xe000ed04

08019c68 <vTaskStartScheduler>:
 8019c68:	b580      	push	{r7, lr}
 8019c6a:	b08a      	sub	sp, #40	; 0x28
 8019c6c:	af04      	add	r7, sp, #16
 8019c6e:	2300      	movs	r3, #0
 8019c70:	60bb      	str	r3, [r7, #8]
 8019c72:	2300      	movs	r3, #0
 8019c74:	607b      	str	r3, [r7, #4]
 8019c76:	463a      	mov	r2, r7
 8019c78:	1d39      	adds	r1, r7, #4
 8019c7a:	f107 0308 	add.w	r3, r7, #8
 8019c7e:	4618      	mov	r0, r3
 8019c80:	f7ef ff7c 	bl	8009b7c <vApplicationGetIdleTaskMemory>
 8019c84:	6839      	ldr	r1, [r7, #0]
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	68ba      	ldr	r2, [r7, #8]
 8019c8a:	9202      	str	r2, [sp, #8]
 8019c8c:	9301      	str	r3, [sp, #4]
 8019c8e:	2300      	movs	r3, #0
 8019c90:	9300      	str	r3, [sp, #0]
 8019c92:	2300      	movs	r3, #0
 8019c94:	460a      	mov	r2, r1
 8019c96:	4924      	ldr	r1, [pc, #144]	; (8019d28 <vTaskStartScheduler+0xc0>)
 8019c98:	4824      	ldr	r0, [pc, #144]	; (8019d2c <vTaskStartScheduler+0xc4>)
 8019c9a:	f7ff fe07 	bl	80198ac <xTaskCreateStatic>
 8019c9e:	4603      	mov	r3, r0
 8019ca0:	4a23      	ldr	r2, [pc, #140]	; (8019d30 <vTaskStartScheduler+0xc8>)
 8019ca2:	6013      	str	r3, [r2, #0]
 8019ca4:	4b22      	ldr	r3, [pc, #136]	; (8019d30 <vTaskStartScheduler+0xc8>)
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d002      	beq.n	8019cb2 <vTaskStartScheduler+0x4a>
 8019cac:	2301      	movs	r3, #1
 8019cae:	617b      	str	r3, [r7, #20]
 8019cb0:	e001      	b.n	8019cb6 <vTaskStartScheduler+0x4e>
 8019cb2:	2300      	movs	r3, #0
 8019cb4:	617b      	str	r3, [r7, #20]
 8019cb6:	697b      	ldr	r3, [r7, #20]
 8019cb8:	2b01      	cmp	r3, #1
 8019cba:	d102      	bne.n	8019cc2 <vTaskStartScheduler+0x5a>
 8019cbc:	f001 f81e 	bl	801acfc <xTimerCreateTimerTask>
 8019cc0:	6178      	str	r0, [r7, #20]
 8019cc2:	697b      	ldr	r3, [r7, #20]
 8019cc4:	2b01      	cmp	r3, #1
 8019cc6:	d11b      	bne.n	8019d00 <vTaskStartScheduler+0x98>
 8019cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ccc:	f383 8811 	msr	BASEPRI, r3
 8019cd0:	f3bf 8f6f 	isb	sy
 8019cd4:	f3bf 8f4f 	dsb	sy
 8019cd8:	613b      	str	r3, [r7, #16]
 8019cda:	bf00      	nop
 8019cdc:	4b15      	ldr	r3, [pc, #84]	; (8019d34 <vTaskStartScheduler+0xcc>)
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	334c      	adds	r3, #76	; 0x4c
 8019ce2:	4a15      	ldr	r2, [pc, #84]	; (8019d38 <vTaskStartScheduler+0xd0>)
 8019ce4:	6013      	str	r3, [r2, #0]
 8019ce6:	4b15      	ldr	r3, [pc, #84]	; (8019d3c <vTaskStartScheduler+0xd4>)
 8019ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8019cec:	601a      	str	r2, [r3, #0]
 8019cee:	4b14      	ldr	r3, [pc, #80]	; (8019d40 <vTaskStartScheduler+0xd8>)
 8019cf0:	2201      	movs	r2, #1
 8019cf2:	601a      	str	r2, [r3, #0]
 8019cf4:	4b13      	ldr	r3, [pc, #76]	; (8019d44 <vTaskStartScheduler+0xdc>)
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	601a      	str	r2, [r3, #0]
 8019cfa:	f001 fc59 	bl	801b5b0 <xPortStartScheduler>
 8019cfe:	e00e      	b.n	8019d1e <vTaskStartScheduler+0xb6>
 8019d00:	697b      	ldr	r3, [r7, #20]
 8019d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d06:	d10a      	bne.n	8019d1e <vTaskStartScheduler+0xb6>
 8019d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d0c:	f383 8811 	msr	BASEPRI, r3
 8019d10:	f3bf 8f6f 	isb	sy
 8019d14:	f3bf 8f4f 	dsb	sy
 8019d18:	60fb      	str	r3, [r7, #12]
 8019d1a:	bf00      	nop
 8019d1c:	e7fe      	b.n	8019d1c <vTaskStartScheduler+0xb4>
 8019d1e:	bf00      	nop
 8019d20:	3718      	adds	r7, #24
 8019d22:	46bd      	mov	sp, r7
 8019d24:	bd80      	pop	{r7, pc}
 8019d26:	bf00      	nop
 8019d28:	08022274 	.word	0x08022274
 8019d2c:	0801a499 	.word	0x0801a499
 8019d30:	2000474c 	.word	0x2000474c
 8019d34:	20004628 	.word	0x20004628
 8019d38:	200002f0 	.word	0x200002f0
 8019d3c:	20004748 	.word	0x20004748
 8019d40:	20004734 	.word	0x20004734
 8019d44:	2000472c 	.word	0x2000472c

08019d48 <vTaskSuspendAll>:
 8019d48:	b480      	push	{r7}
 8019d4a:	af00      	add	r7, sp, #0
 8019d4c:	4b04      	ldr	r3, [pc, #16]	; (8019d60 <vTaskSuspendAll+0x18>)
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	3301      	adds	r3, #1
 8019d52:	4a03      	ldr	r2, [pc, #12]	; (8019d60 <vTaskSuspendAll+0x18>)
 8019d54:	6013      	str	r3, [r2, #0]
 8019d56:	bf00      	nop
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d5e:	4770      	bx	lr
 8019d60:	20004750 	.word	0x20004750

08019d64 <xTaskResumeAll>:
 8019d64:	b580      	push	{r7, lr}
 8019d66:	b084      	sub	sp, #16
 8019d68:	af00      	add	r7, sp, #0
 8019d6a:	2300      	movs	r3, #0
 8019d6c:	60fb      	str	r3, [r7, #12]
 8019d6e:	2300      	movs	r3, #0
 8019d70:	60bb      	str	r3, [r7, #8]
 8019d72:	4b41      	ldr	r3, [pc, #260]	; (8019e78 <xTaskResumeAll+0x114>)
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d10a      	bne.n	8019d90 <xTaskResumeAll+0x2c>
 8019d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d7e:	f383 8811 	msr	BASEPRI, r3
 8019d82:	f3bf 8f6f 	isb	sy
 8019d86:	f3bf 8f4f 	dsb	sy
 8019d8a:	603b      	str	r3, [r7, #0]
 8019d8c:	bf00      	nop
 8019d8e:	e7fe      	b.n	8019d8e <xTaskResumeAll+0x2a>
 8019d90:	f001 fcb0 	bl	801b6f4 <vPortEnterCritical>
 8019d94:	4b38      	ldr	r3, [pc, #224]	; (8019e78 <xTaskResumeAll+0x114>)
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	3b01      	subs	r3, #1
 8019d9a:	4a37      	ldr	r2, [pc, #220]	; (8019e78 <xTaskResumeAll+0x114>)
 8019d9c:	6013      	str	r3, [r2, #0]
 8019d9e:	4b36      	ldr	r3, [pc, #216]	; (8019e78 <xTaskResumeAll+0x114>)
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d161      	bne.n	8019e6a <xTaskResumeAll+0x106>
 8019da6:	4b35      	ldr	r3, [pc, #212]	; (8019e7c <xTaskResumeAll+0x118>)
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d05d      	beq.n	8019e6a <xTaskResumeAll+0x106>
 8019dae:	e02e      	b.n	8019e0e <xTaskResumeAll+0xaa>
 8019db0:	4b33      	ldr	r3, [pc, #204]	; (8019e80 <xTaskResumeAll+0x11c>)
 8019db2:	68db      	ldr	r3, [r3, #12]
 8019db4:	68db      	ldr	r3, [r3, #12]
 8019db6:	60fb      	str	r3, [r7, #12]
 8019db8:	68fb      	ldr	r3, [r7, #12]
 8019dba:	3318      	adds	r3, #24
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	f7fe fdaa 	bl	8018916 <uxListRemove>
 8019dc2:	68fb      	ldr	r3, [r7, #12]
 8019dc4:	3304      	adds	r3, #4
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	f7fe fda5 	bl	8018916 <uxListRemove>
 8019dcc:	68fb      	ldr	r3, [r7, #12]
 8019dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019dd0:	2201      	movs	r2, #1
 8019dd2:	409a      	lsls	r2, r3
 8019dd4:	4b2b      	ldr	r3, [pc, #172]	; (8019e84 <xTaskResumeAll+0x120>)
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	4313      	orrs	r3, r2
 8019dda:	4a2a      	ldr	r2, [pc, #168]	; (8019e84 <xTaskResumeAll+0x120>)
 8019ddc:	6013      	str	r3, [r2, #0]
 8019dde:	68fb      	ldr	r3, [r7, #12]
 8019de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019de2:	4613      	mov	r3, r2
 8019de4:	009b      	lsls	r3, r3, #2
 8019de6:	4413      	add	r3, r2
 8019de8:	009b      	lsls	r3, r3, #2
 8019dea:	4a27      	ldr	r2, [pc, #156]	; (8019e88 <xTaskResumeAll+0x124>)
 8019dec:	441a      	add	r2, r3
 8019dee:	68fb      	ldr	r3, [r7, #12]
 8019df0:	3304      	adds	r3, #4
 8019df2:	4619      	mov	r1, r3
 8019df4:	4610      	mov	r0, r2
 8019df6:	f7fe fd31 	bl	801885c <vListInsertEnd>
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019dfe:	4b23      	ldr	r3, [pc, #140]	; (8019e8c <xTaskResumeAll+0x128>)
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e04:	429a      	cmp	r2, r3
 8019e06:	d302      	bcc.n	8019e0e <xTaskResumeAll+0xaa>
 8019e08:	4b21      	ldr	r3, [pc, #132]	; (8019e90 <xTaskResumeAll+0x12c>)
 8019e0a:	2201      	movs	r2, #1
 8019e0c:	601a      	str	r2, [r3, #0]
 8019e0e:	4b1c      	ldr	r3, [pc, #112]	; (8019e80 <xTaskResumeAll+0x11c>)
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d1cc      	bne.n	8019db0 <xTaskResumeAll+0x4c>
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d001      	beq.n	8019e20 <xTaskResumeAll+0xbc>
 8019e1c:	f000 fbf6 	bl	801a60c <prvResetNextTaskUnblockTime>
 8019e20:	4b1c      	ldr	r3, [pc, #112]	; (8019e94 <xTaskResumeAll+0x130>)
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	607b      	str	r3, [r7, #4]
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d010      	beq.n	8019e4e <xTaskResumeAll+0xea>
 8019e2c:	f000 f846 	bl	8019ebc <xTaskIncrementTick>
 8019e30:	4603      	mov	r3, r0
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d002      	beq.n	8019e3c <xTaskResumeAll+0xd8>
 8019e36:	4b16      	ldr	r3, [pc, #88]	; (8019e90 <xTaskResumeAll+0x12c>)
 8019e38:	2201      	movs	r2, #1
 8019e3a:	601a      	str	r2, [r3, #0]
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	3b01      	subs	r3, #1
 8019e40:	607b      	str	r3, [r7, #4]
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d1f1      	bne.n	8019e2c <xTaskResumeAll+0xc8>
 8019e48:	4b12      	ldr	r3, [pc, #72]	; (8019e94 <xTaskResumeAll+0x130>)
 8019e4a:	2200      	movs	r2, #0
 8019e4c:	601a      	str	r2, [r3, #0]
 8019e4e:	4b10      	ldr	r3, [pc, #64]	; (8019e90 <xTaskResumeAll+0x12c>)
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d009      	beq.n	8019e6a <xTaskResumeAll+0x106>
 8019e56:	2301      	movs	r3, #1
 8019e58:	60bb      	str	r3, [r7, #8]
 8019e5a:	4b0f      	ldr	r3, [pc, #60]	; (8019e98 <xTaskResumeAll+0x134>)
 8019e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e60:	601a      	str	r2, [r3, #0]
 8019e62:	f3bf 8f4f 	dsb	sy
 8019e66:	f3bf 8f6f 	isb	sy
 8019e6a:	f001 fc73 	bl	801b754 <vPortExitCritical>
 8019e6e:	68bb      	ldr	r3, [r7, #8]
 8019e70:	4618      	mov	r0, r3
 8019e72:	3710      	adds	r7, #16
 8019e74:	46bd      	mov	sp, r7
 8019e76:	bd80      	pop	{r7, pc}
 8019e78:	20004750 	.word	0x20004750
 8019e7c:	20004728 	.word	0x20004728
 8019e80:	200046e8 	.word	0x200046e8
 8019e84:	20004730 	.word	0x20004730
 8019e88:	2000462c 	.word	0x2000462c
 8019e8c:	20004628 	.word	0x20004628
 8019e90:	2000473c 	.word	0x2000473c
 8019e94:	20004738 	.word	0x20004738
 8019e98:	e000ed04 	.word	0xe000ed04

08019e9c <xTaskGetTickCount>:
 8019e9c:	b480      	push	{r7}
 8019e9e:	b083      	sub	sp, #12
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	4b05      	ldr	r3, [pc, #20]	; (8019eb8 <xTaskGetTickCount+0x1c>)
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	607b      	str	r3, [r7, #4]
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	4618      	mov	r0, r3
 8019eac:	370c      	adds	r7, #12
 8019eae:	46bd      	mov	sp, r7
 8019eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eb4:	4770      	bx	lr
 8019eb6:	bf00      	nop
 8019eb8:	2000472c 	.word	0x2000472c

08019ebc <xTaskIncrementTick>:
 8019ebc:	b580      	push	{r7, lr}
 8019ebe:	b086      	sub	sp, #24
 8019ec0:	af00      	add	r7, sp, #0
 8019ec2:	2300      	movs	r3, #0
 8019ec4:	617b      	str	r3, [r7, #20]
 8019ec6:	4b4e      	ldr	r3, [pc, #312]	; (801a000 <xTaskIncrementTick+0x144>)
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	f040 808e 	bne.w	8019fec <xTaskIncrementTick+0x130>
 8019ed0:	4b4c      	ldr	r3, [pc, #304]	; (801a004 <xTaskIncrementTick+0x148>)
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	3301      	adds	r3, #1
 8019ed6:	613b      	str	r3, [r7, #16]
 8019ed8:	4a4a      	ldr	r2, [pc, #296]	; (801a004 <xTaskIncrementTick+0x148>)
 8019eda:	693b      	ldr	r3, [r7, #16]
 8019edc:	6013      	str	r3, [r2, #0]
 8019ede:	693b      	ldr	r3, [r7, #16]
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d120      	bne.n	8019f26 <xTaskIncrementTick+0x6a>
 8019ee4:	4b48      	ldr	r3, [pc, #288]	; (801a008 <xTaskIncrementTick+0x14c>)
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d00a      	beq.n	8019f04 <xTaskIncrementTick+0x48>
 8019eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ef2:	f383 8811 	msr	BASEPRI, r3
 8019ef6:	f3bf 8f6f 	isb	sy
 8019efa:	f3bf 8f4f 	dsb	sy
 8019efe:	603b      	str	r3, [r7, #0]
 8019f00:	bf00      	nop
 8019f02:	e7fe      	b.n	8019f02 <xTaskIncrementTick+0x46>
 8019f04:	4b40      	ldr	r3, [pc, #256]	; (801a008 <xTaskIncrementTick+0x14c>)
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	60fb      	str	r3, [r7, #12]
 8019f0a:	4b40      	ldr	r3, [pc, #256]	; (801a00c <xTaskIncrementTick+0x150>)
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	4a3e      	ldr	r2, [pc, #248]	; (801a008 <xTaskIncrementTick+0x14c>)
 8019f10:	6013      	str	r3, [r2, #0]
 8019f12:	4a3e      	ldr	r2, [pc, #248]	; (801a00c <xTaskIncrementTick+0x150>)
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	6013      	str	r3, [r2, #0]
 8019f18:	4b3d      	ldr	r3, [pc, #244]	; (801a010 <xTaskIncrementTick+0x154>)
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	3301      	adds	r3, #1
 8019f1e:	4a3c      	ldr	r2, [pc, #240]	; (801a010 <xTaskIncrementTick+0x154>)
 8019f20:	6013      	str	r3, [r2, #0]
 8019f22:	f000 fb73 	bl	801a60c <prvResetNextTaskUnblockTime>
 8019f26:	4b3b      	ldr	r3, [pc, #236]	; (801a014 <xTaskIncrementTick+0x158>)
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	693a      	ldr	r2, [r7, #16]
 8019f2c:	429a      	cmp	r2, r3
 8019f2e:	d348      	bcc.n	8019fc2 <xTaskIncrementTick+0x106>
 8019f30:	4b35      	ldr	r3, [pc, #212]	; (801a008 <xTaskIncrementTick+0x14c>)
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d104      	bne.n	8019f44 <xTaskIncrementTick+0x88>
 8019f3a:	4b36      	ldr	r3, [pc, #216]	; (801a014 <xTaskIncrementTick+0x158>)
 8019f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8019f40:	601a      	str	r2, [r3, #0]
 8019f42:	e03e      	b.n	8019fc2 <xTaskIncrementTick+0x106>
 8019f44:	4b30      	ldr	r3, [pc, #192]	; (801a008 <xTaskIncrementTick+0x14c>)
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	68db      	ldr	r3, [r3, #12]
 8019f4a:	68db      	ldr	r3, [r3, #12]
 8019f4c:	60bb      	str	r3, [r7, #8]
 8019f4e:	68bb      	ldr	r3, [r7, #8]
 8019f50:	685b      	ldr	r3, [r3, #4]
 8019f52:	607b      	str	r3, [r7, #4]
 8019f54:	693a      	ldr	r2, [r7, #16]
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	429a      	cmp	r2, r3
 8019f5a:	d203      	bcs.n	8019f64 <xTaskIncrementTick+0xa8>
 8019f5c:	4a2d      	ldr	r2, [pc, #180]	; (801a014 <xTaskIncrementTick+0x158>)
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	6013      	str	r3, [r2, #0]
 8019f62:	e02e      	b.n	8019fc2 <xTaskIncrementTick+0x106>
 8019f64:	68bb      	ldr	r3, [r7, #8]
 8019f66:	3304      	adds	r3, #4
 8019f68:	4618      	mov	r0, r3
 8019f6a:	f7fe fcd4 	bl	8018916 <uxListRemove>
 8019f6e:	68bb      	ldr	r3, [r7, #8]
 8019f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d004      	beq.n	8019f80 <xTaskIncrementTick+0xc4>
 8019f76:	68bb      	ldr	r3, [r7, #8]
 8019f78:	3318      	adds	r3, #24
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	f7fe fccb 	bl	8018916 <uxListRemove>
 8019f80:	68bb      	ldr	r3, [r7, #8]
 8019f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f84:	2201      	movs	r2, #1
 8019f86:	409a      	lsls	r2, r3
 8019f88:	4b23      	ldr	r3, [pc, #140]	; (801a018 <xTaskIncrementTick+0x15c>)
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	4313      	orrs	r3, r2
 8019f8e:	4a22      	ldr	r2, [pc, #136]	; (801a018 <xTaskIncrementTick+0x15c>)
 8019f90:	6013      	str	r3, [r2, #0]
 8019f92:	68bb      	ldr	r3, [r7, #8]
 8019f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019f96:	4613      	mov	r3, r2
 8019f98:	009b      	lsls	r3, r3, #2
 8019f9a:	4413      	add	r3, r2
 8019f9c:	009b      	lsls	r3, r3, #2
 8019f9e:	4a1f      	ldr	r2, [pc, #124]	; (801a01c <xTaskIncrementTick+0x160>)
 8019fa0:	441a      	add	r2, r3
 8019fa2:	68bb      	ldr	r3, [r7, #8]
 8019fa4:	3304      	adds	r3, #4
 8019fa6:	4619      	mov	r1, r3
 8019fa8:	4610      	mov	r0, r2
 8019faa:	f7fe fc57 	bl	801885c <vListInsertEnd>
 8019fae:	68bb      	ldr	r3, [r7, #8]
 8019fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019fb2:	4b1b      	ldr	r3, [pc, #108]	; (801a020 <xTaskIncrementTick+0x164>)
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fb8:	429a      	cmp	r2, r3
 8019fba:	d3b9      	bcc.n	8019f30 <xTaskIncrementTick+0x74>
 8019fbc:	2301      	movs	r3, #1
 8019fbe:	617b      	str	r3, [r7, #20]
 8019fc0:	e7b6      	b.n	8019f30 <xTaskIncrementTick+0x74>
 8019fc2:	4b17      	ldr	r3, [pc, #92]	; (801a020 <xTaskIncrementTick+0x164>)
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019fc8:	4914      	ldr	r1, [pc, #80]	; (801a01c <xTaskIncrementTick+0x160>)
 8019fca:	4613      	mov	r3, r2
 8019fcc:	009b      	lsls	r3, r3, #2
 8019fce:	4413      	add	r3, r2
 8019fd0:	009b      	lsls	r3, r3, #2
 8019fd2:	440b      	add	r3, r1
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	2b01      	cmp	r3, #1
 8019fd8:	d901      	bls.n	8019fde <xTaskIncrementTick+0x122>
 8019fda:	2301      	movs	r3, #1
 8019fdc:	617b      	str	r3, [r7, #20]
 8019fde:	4b11      	ldr	r3, [pc, #68]	; (801a024 <xTaskIncrementTick+0x168>)
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d007      	beq.n	8019ff6 <xTaskIncrementTick+0x13a>
 8019fe6:	2301      	movs	r3, #1
 8019fe8:	617b      	str	r3, [r7, #20]
 8019fea:	e004      	b.n	8019ff6 <xTaskIncrementTick+0x13a>
 8019fec:	4b0e      	ldr	r3, [pc, #56]	; (801a028 <xTaskIncrementTick+0x16c>)
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	3301      	adds	r3, #1
 8019ff2:	4a0d      	ldr	r2, [pc, #52]	; (801a028 <xTaskIncrementTick+0x16c>)
 8019ff4:	6013      	str	r3, [r2, #0]
 8019ff6:	697b      	ldr	r3, [r7, #20]
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	3718      	adds	r7, #24
 8019ffc:	46bd      	mov	sp, r7
 8019ffe:	bd80      	pop	{r7, pc}
 801a000:	20004750 	.word	0x20004750
 801a004:	2000472c 	.word	0x2000472c
 801a008:	200046e0 	.word	0x200046e0
 801a00c:	200046e4 	.word	0x200046e4
 801a010:	20004740 	.word	0x20004740
 801a014:	20004748 	.word	0x20004748
 801a018:	20004730 	.word	0x20004730
 801a01c:	2000462c 	.word	0x2000462c
 801a020:	20004628 	.word	0x20004628
 801a024:	2000473c 	.word	0x2000473c
 801a028:	20004738 	.word	0x20004738

0801a02c <vTaskSwitchContext>:
 801a02c:	b480      	push	{r7}
 801a02e:	b087      	sub	sp, #28
 801a030:	af00      	add	r7, sp, #0
 801a032:	4b29      	ldr	r3, [pc, #164]	; (801a0d8 <vTaskSwitchContext+0xac>)
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	2b00      	cmp	r3, #0
 801a038:	d003      	beq.n	801a042 <vTaskSwitchContext+0x16>
 801a03a:	4b28      	ldr	r3, [pc, #160]	; (801a0dc <vTaskSwitchContext+0xb0>)
 801a03c:	2201      	movs	r2, #1
 801a03e:	601a      	str	r2, [r3, #0]
 801a040:	e044      	b.n	801a0cc <vTaskSwitchContext+0xa0>
 801a042:	4b26      	ldr	r3, [pc, #152]	; (801a0dc <vTaskSwitchContext+0xb0>)
 801a044:	2200      	movs	r2, #0
 801a046:	601a      	str	r2, [r3, #0]
 801a048:	4b25      	ldr	r3, [pc, #148]	; (801a0e0 <vTaskSwitchContext+0xb4>)
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	60fb      	str	r3, [r7, #12]
 801a04e:	68fb      	ldr	r3, [r7, #12]
 801a050:	fab3 f383 	clz	r3, r3
 801a054:	72fb      	strb	r3, [r7, #11]
 801a056:	7afb      	ldrb	r3, [r7, #11]
 801a058:	f1c3 031f 	rsb	r3, r3, #31
 801a05c:	617b      	str	r3, [r7, #20]
 801a05e:	4921      	ldr	r1, [pc, #132]	; (801a0e4 <vTaskSwitchContext+0xb8>)
 801a060:	697a      	ldr	r2, [r7, #20]
 801a062:	4613      	mov	r3, r2
 801a064:	009b      	lsls	r3, r3, #2
 801a066:	4413      	add	r3, r2
 801a068:	009b      	lsls	r3, r3, #2
 801a06a:	440b      	add	r3, r1
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d10a      	bne.n	801a088 <vTaskSwitchContext+0x5c>
 801a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a076:	f383 8811 	msr	BASEPRI, r3
 801a07a:	f3bf 8f6f 	isb	sy
 801a07e:	f3bf 8f4f 	dsb	sy
 801a082:	607b      	str	r3, [r7, #4]
 801a084:	bf00      	nop
 801a086:	e7fe      	b.n	801a086 <vTaskSwitchContext+0x5a>
 801a088:	697a      	ldr	r2, [r7, #20]
 801a08a:	4613      	mov	r3, r2
 801a08c:	009b      	lsls	r3, r3, #2
 801a08e:	4413      	add	r3, r2
 801a090:	009b      	lsls	r3, r3, #2
 801a092:	4a14      	ldr	r2, [pc, #80]	; (801a0e4 <vTaskSwitchContext+0xb8>)
 801a094:	4413      	add	r3, r2
 801a096:	613b      	str	r3, [r7, #16]
 801a098:	693b      	ldr	r3, [r7, #16]
 801a09a:	685b      	ldr	r3, [r3, #4]
 801a09c:	685a      	ldr	r2, [r3, #4]
 801a09e:	693b      	ldr	r3, [r7, #16]
 801a0a0:	605a      	str	r2, [r3, #4]
 801a0a2:	693b      	ldr	r3, [r7, #16]
 801a0a4:	685a      	ldr	r2, [r3, #4]
 801a0a6:	693b      	ldr	r3, [r7, #16]
 801a0a8:	3308      	adds	r3, #8
 801a0aa:	429a      	cmp	r2, r3
 801a0ac:	d104      	bne.n	801a0b8 <vTaskSwitchContext+0x8c>
 801a0ae:	693b      	ldr	r3, [r7, #16]
 801a0b0:	685b      	ldr	r3, [r3, #4]
 801a0b2:	685a      	ldr	r2, [r3, #4]
 801a0b4:	693b      	ldr	r3, [r7, #16]
 801a0b6:	605a      	str	r2, [r3, #4]
 801a0b8:	693b      	ldr	r3, [r7, #16]
 801a0ba:	685b      	ldr	r3, [r3, #4]
 801a0bc:	68db      	ldr	r3, [r3, #12]
 801a0be:	4a0a      	ldr	r2, [pc, #40]	; (801a0e8 <vTaskSwitchContext+0xbc>)
 801a0c0:	6013      	str	r3, [r2, #0]
 801a0c2:	4b09      	ldr	r3, [pc, #36]	; (801a0e8 <vTaskSwitchContext+0xbc>)
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	334c      	adds	r3, #76	; 0x4c
 801a0c8:	4a08      	ldr	r2, [pc, #32]	; (801a0ec <vTaskSwitchContext+0xc0>)
 801a0ca:	6013      	str	r3, [r2, #0]
 801a0cc:	bf00      	nop
 801a0ce:	371c      	adds	r7, #28
 801a0d0:	46bd      	mov	sp, r7
 801a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d6:	4770      	bx	lr
 801a0d8:	20004750 	.word	0x20004750
 801a0dc:	2000473c 	.word	0x2000473c
 801a0e0:	20004730 	.word	0x20004730
 801a0e4:	2000462c 	.word	0x2000462c
 801a0e8:	20004628 	.word	0x20004628
 801a0ec:	200002f0 	.word	0x200002f0

0801a0f0 <vTaskPlaceOnEventList>:
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b084      	sub	sp, #16
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
 801a0f8:	6039      	str	r1, [r7, #0]
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d10a      	bne.n	801a116 <vTaskPlaceOnEventList+0x26>
 801a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a104:	f383 8811 	msr	BASEPRI, r3
 801a108:	f3bf 8f6f 	isb	sy
 801a10c:	f3bf 8f4f 	dsb	sy
 801a110:	60fb      	str	r3, [r7, #12]
 801a112:	bf00      	nop
 801a114:	e7fe      	b.n	801a114 <vTaskPlaceOnEventList+0x24>
 801a116:	4b07      	ldr	r3, [pc, #28]	; (801a134 <vTaskPlaceOnEventList+0x44>)
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	3318      	adds	r3, #24
 801a11c:	4619      	mov	r1, r3
 801a11e:	6878      	ldr	r0, [r7, #4]
 801a120:	f7fe fbc0 	bl	80188a4 <vListInsert>
 801a124:	2101      	movs	r1, #1
 801a126:	6838      	ldr	r0, [r7, #0]
 801a128:	f000 fd82 	bl	801ac30 <prvAddCurrentTaskToDelayedList>
 801a12c:	bf00      	nop
 801a12e:	3710      	adds	r7, #16
 801a130:	46bd      	mov	sp, r7
 801a132:	bd80      	pop	{r7, pc}
 801a134:	20004628 	.word	0x20004628

0801a138 <vTaskPlaceOnUnorderedEventList>:
 801a138:	b580      	push	{r7, lr}
 801a13a:	b086      	sub	sp, #24
 801a13c:	af00      	add	r7, sp, #0
 801a13e:	60f8      	str	r0, [r7, #12]
 801a140:	60b9      	str	r1, [r7, #8]
 801a142:	607a      	str	r2, [r7, #4]
 801a144:	68fb      	ldr	r3, [r7, #12]
 801a146:	2b00      	cmp	r3, #0
 801a148:	d10a      	bne.n	801a160 <vTaskPlaceOnUnorderedEventList+0x28>
 801a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a14e:	f383 8811 	msr	BASEPRI, r3
 801a152:	f3bf 8f6f 	isb	sy
 801a156:	f3bf 8f4f 	dsb	sy
 801a15a:	617b      	str	r3, [r7, #20]
 801a15c:	bf00      	nop
 801a15e:	e7fe      	b.n	801a15e <vTaskPlaceOnUnorderedEventList+0x26>
 801a160:	4b11      	ldr	r3, [pc, #68]	; (801a1a8 <vTaskPlaceOnUnorderedEventList+0x70>)
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	2b00      	cmp	r3, #0
 801a166:	d10a      	bne.n	801a17e <vTaskPlaceOnUnorderedEventList+0x46>
 801a168:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a16c:	f383 8811 	msr	BASEPRI, r3
 801a170:	f3bf 8f6f 	isb	sy
 801a174:	f3bf 8f4f 	dsb	sy
 801a178:	613b      	str	r3, [r7, #16]
 801a17a:	bf00      	nop
 801a17c:	e7fe      	b.n	801a17c <vTaskPlaceOnUnorderedEventList+0x44>
 801a17e:	4b0b      	ldr	r3, [pc, #44]	; (801a1ac <vTaskPlaceOnUnorderedEventList+0x74>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	68ba      	ldr	r2, [r7, #8]
 801a184:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801a188:	619a      	str	r2, [r3, #24]
 801a18a:	4b08      	ldr	r3, [pc, #32]	; (801a1ac <vTaskPlaceOnUnorderedEventList+0x74>)
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	3318      	adds	r3, #24
 801a190:	4619      	mov	r1, r3
 801a192:	68f8      	ldr	r0, [r7, #12]
 801a194:	f7fe fb62 	bl	801885c <vListInsertEnd>
 801a198:	2101      	movs	r1, #1
 801a19a:	6878      	ldr	r0, [r7, #4]
 801a19c:	f000 fd48 	bl	801ac30 <prvAddCurrentTaskToDelayedList>
 801a1a0:	bf00      	nop
 801a1a2:	3718      	adds	r7, #24
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	bd80      	pop	{r7, pc}
 801a1a8:	20004750 	.word	0x20004750
 801a1ac:	20004628 	.word	0x20004628

0801a1b0 <vTaskPlaceOnEventListRestricted>:
 801a1b0:	b580      	push	{r7, lr}
 801a1b2:	b086      	sub	sp, #24
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	60f8      	str	r0, [r7, #12]
 801a1b8:	60b9      	str	r1, [r7, #8]
 801a1ba:	607a      	str	r2, [r7, #4]
 801a1bc:	68fb      	ldr	r3, [r7, #12]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d10a      	bne.n	801a1d8 <vTaskPlaceOnEventListRestricted+0x28>
 801a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1c6:	f383 8811 	msr	BASEPRI, r3
 801a1ca:	f3bf 8f6f 	isb	sy
 801a1ce:	f3bf 8f4f 	dsb	sy
 801a1d2:	617b      	str	r3, [r7, #20]
 801a1d4:	bf00      	nop
 801a1d6:	e7fe      	b.n	801a1d6 <vTaskPlaceOnEventListRestricted+0x26>
 801a1d8:	4b0a      	ldr	r3, [pc, #40]	; (801a204 <vTaskPlaceOnEventListRestricted+0x54>)
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	3318      	adds	r3, #24
 801a1de:	4619      	mov	r1, r3
 801a1e0:	68f8      	ldr	r0, [r7, #12]
 801a1e2:	f7fe fb3b 	bl	801885c <vListInsertEnd>
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d002      	beq.n	801a1f2 <vTaskPlaceOnEventListRestricted+0x42>
 801a1ec:	f04f 33ff 	mov.w	r3, #4294967295
 801a1f0:	60bb      	str	r3, [r7, #8]
 801a1f2:	6879      	ldr	r1, [r7, #4]
 801a1f4:	68b8      	ldr	r0, [r7, #8]
 801a1f6:	f000 fd1b 	bl	801ac30 <prvAddCurrentTaskToDelayedList>
 801a1fa:	bf00      	nop
 801a1fc:	3718      	adds	r7, #24
 801a1fe:	46bd      	mov	sp, r7
 801a200:	bd80      	pop	{r7, pc}
 801a202:	bf00      	nop
 801a204:	20004628 	.word	0x20004628

0801a208 <xTaskRemoveFromEventList>:
 801a208:	b580      	push	{r7, lr}
 801a20a:	b086      	sub	sp, #24
 801a20c:	af00      	add	r7, sp, #0
 801a20e:	6078      	str	r0, [r7, #4]
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	68db      	ldr	r3, [r3, #12]
 801a214:	68db      	ldr	r3, [r3, #12]
 801a216:	613b      	str	r3, [r7, #16]
 801a218:	693b      	ldr	r3, [r7, #16]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d10a      	bne.n	801a234 <xTaskRemoveFromEventList+0x2c>
 801a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a222:	f383 8811 	msr	BASEPRI, r3
 801a226:	f3bf 8f6f 	isb	sy
 801a22a:	f3bf 8f4f 	dsb	sy
 801a22e:	60fb      	str	r3, [r7, #12]
 801a230:	bf00      	nop
 801a232:	e7fe      	b.n	801a232 <xTaskRemoveFromEventList+0x2a>
 801a234:	693b      	ldr	r3, [r7, #16]
 801a236:	3318      	adds	r3, #24
 801a238:	4618      	mov	r0, r3
 801a23a:	f7fe fb6c 	bl	8018916 <uxListRemove>
 801a23e:	4b1d      	ldr	r3, [pc, #116]	; (801a2b4 <xTaskRemoveFromEventList+0xac>)
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	2b00      	cmp	r3, #0
 801a244:	d11c      	bne.n	801a280 <xTaskRemoveFromEventList+0x78>
 801a246:	693b      	ldr	r3, [r7, #16]
 801a248:	3304      	adds	r3, #4
 801a24a:	4618      	mov	r0, r3
 801a24c:	f7fe fb63 	bl	8018916 <uxListRemove>
 801a250:	693b      	ldr	r3, [r7, #16]
 801a252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a254:	2201      	movs	r2, #1
 801a256:	409a      	lsls	r2, r3
 801a258:	4b17      	ldr	r3, [pc, #92]	; (801a2b8 <xTaskRemoveFromEventList+0xb0>)
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	4313      	orrs	r3, r2
 801a25e:	4a16      	ldr	r2, [pc, #88]	; (801a2b8 <xTaskRemoveFromEventList+0xb0>)
 801a260:	6013      	str	r3, [r2, #0]
 801a262:	693b      	ldr	r3, [r7, #16]
 801a264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a266:	4613      	mov	r3, r2
 801a268:	009b      	lsls	r3, r3, #2
 801a26a:	4413      	add	r3, r2
 801a26c:	009b      	lsls	r3, r3, #2
 801a26e:	4a13      	ldr	r2, [pc, #76]	; (801a2bc <xTaskRemoveFromEventList+0xb4>)
 801a270:	441a      	add	r2, r3
 801a272:	693b      	ldr	r3, [r7, #16]
 801a274:	3304      	adds	r3, #4
 801a276:	4619      	mov	r1, r3
 801a278:	4610      	mov	r0, r2
 801a27a:	f7fe faef 	bl	801885c <vListInsertEnd>
 801a27e:	e005      	b.n	801a28c <xTaskRemoveFromEventList+0x84>
 801a280:	693b      	ldr	r3, [r7, #16]
 801a282:	3318      	adds	r3, #24
 801a284:	4619      	mov	r1, r3
 801a286:	480e      	ldr	r0, [pc, #56]	; (801a2c0 <xTaskRemoveFromEventList+0xb8>)
 801a288:	f7fe fae8 	bl	801885c <vListInsertEnd>
 801a28c:	693b      	ldr	r3, [r7, #16]
 801a28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a290:	4b0c      	ldr	r3, [pc, #48]	; (801a2c4 <xTaskRemoveFromEventList+0xbc>)
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a296:	429a      	cmp	r2, r3
 801a298:	d905      	bls.n	801a2a6 <xTaskRemoveFromEventList+0x9e>
 801a29a:	2301      	movs	r3, #1
 801a29c:	617b      	str	r3, [r7, #20]
 801a29e:	4b0a      	ldr	r3, [pc, #40]	; (801a2c8 <xTaskRemoveFromEventList+0xc0>)
 801a2a0:	2201      	movs	r2, #1
 801a2a2:	601a      	str	r2, [r3, #0]
 801a2a4:	e001      	b.n	801a2aa <xTaskRemoveFromEventList+0xa2>
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	617b      	str	r3, [r7, #20]
 801a2aa:	697b      	ldr	r3, [r7, #20]
 801a2ac:	4618      	mov	r0, r3
 801a2ae:	3718      	adds	r7, #24
 801a2b0:	46bd      	mov	sp, r7
 801a2b2:	bd80      	pop	{r7, pc}
 801a2b4:	20004750 	.word	0x20004750
 801a2b8:	20004730 	.word	0x20004730
 801a2bc:	2000462c 	.word	0x2000462c
 801a2c0:	200046e8 	.word	0x200046e8
 801a2c4:	20004628 	.word	0x20004628
 801a2c8:	2000473c 	.word	0x2000473c

0801a2cc <vTaskRemoveFromUnorderedEventList>:
 801a2cc:	b580      	push	{r7, lr}
 801a2ce:	b086      	sub	sp, #24
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	6078      	str	r0, [r7, #4]
 801a2d4:	6039      	str	r1, [r7, #0]
 801a2d6:	4b29      	ldr	r3, [pc, #164]	; (801a37c <vTaskRemoveFromUnorderedEventList+0xb0>)
 801a2d8:	681b      	ldr	r3, [r3, #0]
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d10a      	bne.n	801a2f4 <vTaskRemoveFromUnorderedEventList+0x28>
 801a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2e2:	f383 8811 	msr	BASEPRI, r3
 801a2e6:	f3bf 8f6f 	isb	sy
 801a2ea:	f3bf 8f4f 	dsb	sy
 801a2ee:	613b      	str	r3, [r7, #16]
 801a2f0:	bf00      	nop
 801a2f2:	e7fe      	b.n	801a2f2 <vTaskRemoveFromUnorderedEventList+0x26>
 801a2f4:	683b      	ldr	r3, [r7, #0]
 801a2f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	601a      	str	r2, [r3, #0]
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	68db      	ldr	r3, [r3, #12]
 801a302:	617b      	str	r3, [r7, #20]
 801a304:	697b      	ldr	r3, [r7, #20]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d10a      	bne.n	801a320 <vTaskRemoveFromUnorderedEventList+0x54>
 801a30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a30e:	f383 8811 	msr	BASEPRI, r3
 801a312:	f3bf 8f6f 	isb	sy
 801a316:	f3bf 8f4f 	dsb	sy
 801a31a:	60fb      	str	r3, [r7, #12]
 801a31c:	bf00      	nop
 801a31e:	e7fe      	b.n	801a31e <vTaskRemoveFromUnorderedEventList+0x52>
 801a320:	6878      	ldr	r0, [r7, #4]
 801a322:	f7fe faf8 	bl	8018916 <uxListRemove>
 801a326:	697b      	ldr	r3, [r7, #20]
 801a328:	3304      	adds	r3, #4
 801a32a:	4618      	mov	r0, r3
 801a32c:	f7fe faf3 	bl	8018916 <uxListRemove>
 801a330:	697b      	ldr	r3, [r7, #20]
 801a332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a334:	2201      	movs	r2, #1
 801a336:	409a      	lsls	r2, r3
 801a338:	4b11      	ldr	r3, [pc, #68]	; (801a380 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	4313      	orrs	r3, r2
 801a33e:	4a10      	ldr	r2, [pc, #64]	; (801a380 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801a340:	6013      	str	r3, [r2, #0]
 801a342:	697b      	ldr	r3, [r7, #20]
 801a344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a346:	4613      	mov	r3, r2
 801a348:	009b      	lsls	r3, r3, #2
 801a34a:	4413      	add	r3, r2
 801a34c:	009b      	lsls	r3, r3, #2
 801a34e:	4a0d      	ldr	r2, [pc, #52]	; (801a384 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801a350:	441a      	add	r2, r3
 801a352:	697b      	ldr	r3, [r7, #20]
 801a354:	3304      	adds	r3, #4
 801a356:	4619      	mov	r1, r3
 801a358:	4610      	mov	r0, r2
 801a35a:	f7fe fa7f 	bl	801885c <vListInsertEnd>
 801a35e:	697b      	ldr	r3, [r7, #20]
 801a360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a362:	4b09      	ldr	r3, [pc, #36]	; (801a388 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a368:	429a      	cmp	r2, r3
 801a36a:	d902      	bls.n	801a372 <vTaskRemoveFromUnorderedEventList+0xa6>
 801a36c:	4b07      	ldr	r3, [pc, #28]	; (801a38c <vTaskRemoveFromUnorderedEventList+0xc0>)
 801a36e:	2201      	movs	r2, #1
 801a370:	601a      	str	r2, [r3, #0]
 801a372:	bf00      	nop
 801a374:	3718      	adds	r7, #24
 801a376:	46bd      	mov	sp, r7
 801a378:	bd80      	pop	{r7, pc}
 801a37a:	bf00      	nop
 801a37c:	20004750 	.word	0x20004750
 801a380:	20004730 	.word	0x20004730
 801a384:	2000462c 	.word	0x2000462c
 801a388:	20004628 	.word	0x20004628
 801a38c:	2000473c 	.word	0x2000473c

0801a390 <vTaskInternalSetTimeOutState>:
 801a390:	b480      	push	{r7}
 801a392:	b083      	sub	sp, #12
 801a394:	af00      	add	r7, sp, #0
 801a396:	6078      	str	r0, [r7, #4]
 801a398:	4b06      	ldr	r3, [pc, #24]	; (801a3b4 <vTaskInternalSetTimeOutState+0x24>)
 801a39a:	681a      	ldr	r2, [r3, #0]
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	601a      	str	r2, [r3, #0]
 801a3a0:	4b05      	ldr	r3, [pc, #20]	; (801a3b8 <vTaskInternalSetTimeOutState+0x28>)
 801a3a2:	681a      	ldr	r2, [r3, #0]
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	605a      	str	r2, [r3, #4]
 801a3a8:	bf00      	nop
 801a3aa:	370c      	adds	r7, #12
 801a3ac:	46bd      	mov	sp, r7
 801a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3b2:	4770      	bx	lr
 801a3b4:	20004740 	.word	0x20004740
 801a3b8:	2000472c 	.word	0x2000472c

0801a3bc <xTaskCheckForTimeOut>:
 801a3bc:	b580      	push	{r7, lr}
 801a3be:	b088      	sub	sp, #32
 801a3c0:	af00      	add	r7, sp, #0
 801a3c2:	6078      	str	r0, [r7, #4]
 801a3c4:	6039      	str	r1, [r7, #0]
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d10a      	bne.n	801a3e2 <xTaskCheckForTimeOut+0x26>
 801a3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3d0:	f383 8811 	msr	BASEPRI, r3
 801a3d4:	f3bf 8f6f 	isb	sy
 801a3d8:	f3bf 8f4f 	dsb	sy
 801a3dc:	613b      	str	r3, [r7, #16]
 801a3de:	bf00      	nop
 801a3e0:	e7fe      	b.n	801a3e0 <xTaskCheckForTimeOut+0x24>
 801a3e2:	683b      	ldr	r3, [r7, #0]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d10a      	bne.n	801a3fe <xTaskCheckForTimeOut+0x42>
 801a3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3ec:	f383 8811 	msr	BASEPRI, r3
 801a3f0:	f3bf 8f6f 	isb	sy
 801a3f4:	f3bf 8f4f 	dsb	sy
 801a3f8:	60fb      	str	r3, [r7, #12]
 801a3fa:	bf00      	nop
 801a3fc:	e7fe      	b.n	801a3fc <xTaskCheckForTimeOut+0x40>
 801a3fe:	f001 f979 	bl	801b6f4 <vPortEnterCritical>
 801a402:	4b1d      	ldr	r3, [pc, #116]	; (801a478 <xTaskCheckForTimeOut+0xbc>)
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	61bb      	str	r3, [r7, #24]
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	685b      	ldr	r3, [r3, #4]
 801a40c:	69ba      	ldr	r2, [r7, #24]
 801a40e:	1ad3      	subs	r3, r2, r3
 801a410:	617b      	str	r3, [r7, #20]
 801a412:	683b      	ldr	r3, [r7, #0]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a41a:	d102      	bne.n	801a422 <xTaskCheckForTimeOut+0x66>
 801a41c:	2300      	movs	r3, #0
 801a41e:	61fb      	str	r3, [r7, #28]
 801a420:	e023      	b.n	801a46a <xTaskCheckForTimeOut+0xae>
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	681a      	ldr	r2, [r3, #0]
 801a426:	4b15      	ldr	r3, [pc, #84]	; (801a47c <xTaskCheckForTimeOut+0xc0>)
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	429a      	cmp	r2, r3
 801a42c:	d007      	beq.n	801a43e <xTaskCheckForTimeOut+0x82>
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	685b      	ldr	r3, [r3, #4]
 801a432:	69ba      	ldr	r2, [r7, #24]
 801a434:	429a      	cmp	r2, r3
 801a436:	d302      	bcc.n	801a43e <xTaskCheckForTimeOut+0x82>
 801a438:	2301      	movs	r3, #1
 801a43a:	61fb      	str	r3, [r7, #28]
 801a43c:	e015      	b.n	801a46a <xTaskCheckForTimeOut+0xae>
 801a43e:	683b      	ldr	r3, [r7, #0]
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	697a      	ldr	r2, [r7, #20]
 801a444:	429a      	cmp	r2, r3
 801a446:	d20b      	bcs.n	801a460 <xTaskCheckForTimeOut+0xa4>
 801a448:	683b      	ldr	r3, [r7, #0]
 801a44a:	681a      	ldr	r2, [r3, #0]
 801a44c:	697b      	ldr	r3, [r7, #20]
 801a44e:	1ad2      	subs	r2, r2, r3
 801a450:	683b      	ldr	r3, [r7, #0]
 801a452:	601a      	str	r2, [r3, #0]
 801a454:	6878      	ldr	r0, [r7, #4]
 801a456:	f7ff ff9b 	bl	801a390 <vTaskInternalSetTimeOutState>
 801a45a:	2300      	movs	r3, #0
 801a45c:	61fb      	str	r3, [r7, #28]
 801a45e:	e004      	b.n	801a46a <xTaskCheckForTimeOut+0xae>
 801a460:	683b      	ldr	r3, [r7, #0]
 801a462:	2200      	movs	r2, #0
 801a464:	601a      	str	r2, [r3, #0]
 801a466:	2301      	movs	r3, #1
 801a468:	61fb      	str	r3, [r7, #28]
 801a46a:	f001 f973 	bl	801b754 <vPortExitCritical>
 801a46e:	69fb      	ldr	r3, [r7, #28]
 801a470:	4618      	mov	r0, r3
 801a472:	3720      	adds	r7, #32
 801a474:	46bd      	mov	sp, r7
 801a476:	bd80      	pop	{r7, pc}
 801a478:	2000472c 	.word	0x2000472c
 801a47c:	20004740 	.word	0x20004740

0801a480 <vTaskMissedYield>:
 801a480:	b480      	push	{r7}
 801a482:	af00      	add	r7, sp, #0
 801a484:	4b03      	ldr	r3, [pc, #12]	; (801a494 <vTaskMissedYield+0x14>)
 801a486:	2201      	movs	r2, #1
 801a488:	601a      	str	r2, [r3, #0]
 801a48a:	bf00      	nop
 801a48c:	46bd      	mov	sp, r7
 801a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a492:	4770      	bx	lr
 801a494:	2000473c 	.word	0x2000473c

0801a498 <prvIdleTask>:
 801a498:	b580      	push	{r7, lr}
 801a49a:	b082      	sub	sp, #8
 801a49c:	af00      	add	r7, sp, #0
 801a49e:	6078      	str	r0, [r7, #4]
 801a4a0:	f000 f852 	bl	801a548 <prvCheckTasksWaitingTermination>
 801a4a4:	4b06      	ldr	r3, [pc, #24]	; (801a4c0 <prvIdleTask+0x28>)
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	2b01      	cmp	r3, #1
 801a4aa:	d9f9      	bls.n	801a4a0 <prvIdleTask+0x8>
 801a4ac:	4b05      	ldr	r3, [pc, #20]	; (801a4c4 <prvIdleTask+0x2c>)
 801a4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a4b2:	601a      	str	r2, [r3, #0]
 801a4b4:	f3bf 8f4f 	dsb	sy
 801a4b8:	f3bf 8f6f 	isb	sy
 801a4bc:	e7f0      	b.n	801a4a0 <prvIdleTask+0x8>
 801a4be:	bf00      	nop
 801a4c0:	2000462c 	.word	0x2000462c
 801a4c4:	e000ed04 	.word	0xe000ed04

0801a4c8 <prvInitialiseTaskLists>:
 801a4c8:	b580      	push	{r7, lr}
 801a4ca:	b082      	sub	sp, #8
 801a4cc:	af00      	add	r7, sp, #0
 801a4ce:	2300      	movs	r3, #0
 801a4d0:	607b      	str	r3, [r7, #4]
 801a4d2:	e00c      	b.n	801a4ee <prvInitialiseTaskLists+0x26>
 801a4d4:	687a      	ldr	r2, [r7, #4]
 801a4d6:	4613      	mov	r3, r2
 801a4d8:	009b      	lsls	r3, r3, #2
 801a4da:	4413      	add	r3, r2
 801a4dc:	009b      	lsls	r3, r3, #2
 801a4de:	4a12      	ldr	r2, [pc, #72]	; (801a528 <prvInitialiseTaskLists+0x60>)
 801a4e0:	4413      	add	r3, r2
 801a4e2:	4618      	mov	r0, r3
 801a4e4:	f7fe f98d 	bl	8018802 <vListInitialise>
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	3301      	adds	r3, #1
 801a4ec:	607b      	str	r3, [r7, #4]
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	2b06      	cmp	r3, #6
 801a4f2:	d9ef      	bls.n	801a4d4 <prvInitialiseTaskLists+0xc>
 801a4f4:	480d      	ldr	r0, [pc, #52]	; (801a52c <prvInitialiseTaskLists+0x64>)
 801a4f6:	f7fe f984 	bl	8018802 <vListInitialise>
 801a4fa:	480d      	ldr	r0, [pc, #52]	; (801a530 <prvInitialiseTaskLists+0x68>)
 801a4fc:	f7fe f981 	bl	8018802 <vListInitialise>
 801a500:	480c      	ldr	r0, [pc, #48]	; (801a534 <prvInitialiseTaskLists+0x6c>)
 801a502:	f7fe f97e 	bl	8018802 <vListInitialise>
 801a506:	480c      	ldr	r0, [pc, #48]	; (801a538 <prvInitialiseTaskLists+0x70>)
 801a508:	f7fe f97b 	bl	8018802 <vListInitialise>
 801a50c:	480b      	ldr	r0, [pc, #44]	; (801a53c <prvInitialiseTaskLists+0x74>)
 801a50e:	f7fe f978 	bl	8018802 <vListInitialise>
 801a512:	4b0b      	ldr	r3, [pc, #44]	; (801a540 <prvInitialiseTaskLists+0x78>)
 801a514:	4a05      	ldr	r2, [pc, #20]	; (801a52c <prvInitialiseTaskLists+0x64>)
 801a516:	601a      	str	r2, [r3, #0]
 801a518:	4b0a      	ldr	r3, [pc, #40]	; (801a544 <prvInitialiseTaskLists+0x7c>)
 801a51a:	4a05      	ldr	r2, [pc, #20]	; (801a530 <prvInitialiseTaskLists+0x68>)
 801a51c:	601a      	str	r2, [r3, #0]
 801a51e:	bf00      	nop
 801a520:	3708      	adds	r7, #8
 801a522:	46bd      	mov	sp, r7
 801a524:	bd80      	pop	{r7, pc}
 801a526:	bf00      	nop
 801a528:	2000462c 	.word	0x2000462c
 801a52c:	200046b8 	.word	0x200046b8
 801a530:	200046cc 	.word	0x200046cc
 801a534:	200046e8 	.word	0x200046e8
 801a538:	200046fc 	.word	0x200046fc
 801a53c:	20004714 	.word	0x20004714
 801a540:	200046e0 	.word	0x200046e0
 801a544:	200046e4 	.word	0x200046e4

0801a548 <prvCheckTasksWaitingTermination>:
 801a548:	b580      	push	{r7, lr}
 801a54a:	b082      	sub	sp, #8
 801a54c:	af00      	add	r7, sp, #0
 801a54e:	e019      	b.n	801a584 <prvCheckTasksWaitingTermination+0x3c>
 801a550:	f001 f8d0 	bl	801b6f4 <vPortEnterCritical>
 801a554:	4b10      	ldr	r3, [pc, #64]	; (801a598 <prvCheckTasksWaitingTermination+0x50>)
 801a556:	68db      	ldr	r3, [r3, #12]
 801a558:	68db      	ldr	r3, [r3, #12]
 801a55a:	607b      	str	r3, [r7, #4]
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	3304      	adds	r3, #4
 801a560:	4618      	mov	r0, r3
 801a562:	f7fe f9d8 	bl	8018916 <uxListRemove>
 801a566:	4b0d      	ldr	r3, [pc, #52]	; (801a59c <prvCheckTasksWaitingTermination+0x54>)
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	3b01      	subs	r3, #1
 801a56c:	4a0b      	ldr	r2, [pc, #44]	; (801a59c <prvCheckTasksWaitingTermination+0x54>)
 801a56e:	6013      	str	r3, [r2, #0]
 801a570:	4b0b      	ldr	r3, [pc, #44]	; (801a5a0 <prvCheckTasksWaitingTermination+0x58>)
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	3b01      	subs	r3, #1
 801a576:	4a0a      	ldr	r2, [pc, #40]	; (801a5a0 <prvCheckTasksWaitingTermination+0x58>)
 801a578:	6013      	str	r3, [r2, #0]
 801a57a:	f001 f8eb 	bl	801b754 <vPortExitCritical>
 801a57e:	6878      	ldr	r0, [r7, #4]
 801a580:	f000 f810 	bl	801a5a4 <prvDeleteTCB>
 801a584:	4b06      	ldr	r3, [pc, #24]	; (801a5a0 <prvCheckTasksWaitingTermination+0x58>)
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d1e1      	bne.n	801a550 <prvCheckTasksWaitingTermination+0x8>
 801a58c:	bf00      	nop
 801a58e:	bf00      	nop
 801a590:	3708      	adds	r7, #8
 801a592:	46bd      	mov	sp, r7
 801a594:	bd80      	pop	{r7, pc}
 801a596:	bf00      	nop
 801a598:	200046fc 	.word	0x200046fc
 801a59c:	20004728 	.word	0x20004728
 801a5a0:	20004710 	.word	0x20004710

0801a5a4 <prvDeleteTCB>:
 801a5a4:	b580      	push	{r7, lr}
 801a5a6:	b084      	sub	sp, #16
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	6078      	str	r0, [r7, #4]
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	334c      	adds	r3, #76	; 0x4c
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	f003 ffe5 	bl	801e580 <_reclaim_reent>
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d108      	bne.n	801a5d2 <prvDeleteTCB+0x2e>
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	f001 fa83 	bl	801bad0 <vPortFree>
 801a5ca:	6878      	ldr	r0, [r7, #4]
 801a5cc:	f001 fa80 	bl	801bad0 <vPortFree>
 801a5d0:	e018      	b.n	801a604 <prvDeleteTCB+0x60>
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801a5d8:	2b01      	cmp	r3, #1
 801a5da:	d103      	bne.n	801a5e4 <prvDeleteTCB+0x40>
 801a5dc:	6878      	ldr	r0, [r7, #4]
 801a5de:	f001 fa77 	bl	801bad0 <vPortFree>
 801a5e2:	e00f      	b.n	801a604 <prvDeleteTCB+0x60>
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801a5ea:	2b02      	cmp	r3, #2
 801a5ec:	d00a      	beq.n	801a604 <prvDeleteTCB+0x60>
 801a5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5f2:	f383 8811 	msr	BASEPRI, r3
 801a5f6:	f3bf 8f6f 	isb	sy
 801a5fa:	f3bf 8f4f 	dsb	sy
 801a5fe:	60fb      	str	r3, [r7, #12]
 801a600:	bf00      	nop
 801a602:	e7fe      	b.n	801a602 <prvDeleteTCB+0x5e>
 801a604:	bf00      	nop
 801a606:	3710      	adds	r7, #16
 801a608:	46bd      	mov	sp, r7
 801a60a:	bd80      	pop	{r7, pc}

0801a60c <prvResetNextTaskUnblockTime>:
 801a60c:	b480      	push	{r7}
 801a60e:	b083      	sub	sp, #12
 801a610:	af00      	add	r7, sp, #0
 801a612:	4b0c      	ldr	r3, [pc, #48]	; (801a644 <prvResetNextTaskUnblockTime+0x38>)
 801a614:	681b      	ldr	r3, [r3, #0]
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d104      	bne.n	801a626 <prvResetNextTaskUnblockTime+0x1a>
 801a61c:	4b0a      	ldr	r3, [pc, #40]	; (801a648 <prvResetNextTaskUnblockTime+0x3c>)
 801a61e:	f04f 32ff 	mov.w	r2, #4294967295
 801a622:	601a      	str	r2, [r3, #0]
 801a624:	e008      	b.n	801a638 <prvResetNextTaskUnblockTime+0x2c>
 801a626:	4b07      	ldr	r3, [pc, #28]	; (801a644 <prvResetNextTaskUnblockTime+0x38>)
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	68db      	ldr	r3, [r3, #12]
 801a62c:	68db      	ldr	r3, [r3, #12]
 801a62e:	607b      	str	r3, [r7, #4]
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	685b      	ldr	r3, [r3, #4]
 801a634:	4a04      	ldr	r2, [pc, #16]	; (801a648 <prvResetNextTaskUnblockTime+0x3c>)
 801a636:	6013      	str	r3, [r2, #0]
 801a638:	bf00      	nop
 801a63a:	370c      	adds	r7, #12
 801a63c:	46bd      	mov	sp, r7
 801a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a642:	4770      	bx	lr
 801a644:	200046e0 	.word	0x200046e0
 801a648:	20004748 	.word	0x20004748

0801a64c <xTaskGetSchedulerState>:
 801a64c:	b480      	push	{r7}
 801a64e:	b083      	sub	sp, #12
 801a650:	af00      	add	r7, sp, #0
 801a652:	4b0b      	ldr	r3, [pc, #44]	; (801a680 <xTaskGetSchedulerState+0x34>)
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	2b00      	cmp	r3, #0
 801a658:	d102      	bne.n	801a660 <xTaskGetSchedulerState+0x14>
 801a65a:	2301      	movs	r3, #1
 801a65c:	607b      	str	r3, [r7, #4]
 801a65e:	e008      	b.n	801a672 <xTaskGetSchedulerState+0x26>
 801a660:	4b08      	ldr	r3, [pc, #32]	; (801a684 <xTaskGetSchedulerState+0x38>)
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	2b00      	cmp	r3, #0
 801a666:	d102      	bne.n	801a66e <xTaskGetSchedulerState+0x22>
 801a668:	2302      	movs	r3, #2
 801a66a:	607b      	str	r3, [r7, #4]
 801a66c:	e001      	b.n	801a672 <xTaskGetSchedulerState+0x26>
 801a66e:	2300      	movs	r3, #0
 801a670:	607b      	str	r3, [r7, #4]
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	4618      	mov	r0, r3
 801a676:	370c      	adds	r7, #12
 801a678:	46bd      	mov	sp, r7
 801a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a67e:	4770      	bx	lr
 801a680:	20004734 	.word	0x20004734
 801a684:	20004750 	.word	0x20004750

0801a688 <xTaskPriorityInherit>:
 801a688:	b580      	push	{r7, lr}
 801a68a:	b084      	sub	sp, #16
 801a68c:	af00      	add	r7, sp, #0
 801a68e:	6078      	str	r0, [r7, #4]
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	60bb      	str	r3, [r7, #8]
 801a694:	2300      	movs	r3, #0
 801a696:	60fb      	str	r3, [r7, #12]
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d05e      	beq.n	801a75c <xTaskPriorityInherit+0xd4>
 801a69e:	68bb      	ldr	r3, [r7, #8]
 801a6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a6a2:	4b31      	ldr	r3, [pc, #196]	; (801a768 <xTaskPriorityInherit+0xe0>)
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6a8:	429a      	cmp	r2, r3
 801a6aa:	d24e      	bcs.n	801a74a <xTaskPriorityInherit+0xc2>
 801a6ac:	68bb      	ldr	r3, [r7, #8]
 801a6ae:	699b      	ldr	r3, [r3, #24]
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	db06      	blt.n	801a6c2 <xTaskPriorityInherit+0x3a>
 801a6b4:	4b2c      	ldr	r3, [pc, #176]	; (801a768 <xTaskPriorityInherit+0xe0>)
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6ba:	f1c3 0207 	rsb	r2, r3, #7
 801a6be:	68bb      	ldr	r3, [r7, #8]
 801a6c0:	619a      	str	r2, [r3, #24]
 801a6c2:	68bb      	ldr	r3, [r7, #8]
 801a6c4:	6959      	ldr	r1, [r3, #20]
 801a6c6:	68bb      	ldr	r3, [r7, #8]
 801a6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a6ca:	4613      	mov	r3, r2
 801a6cc:	009b      	lsls	r3, r3, #2
 801a6ce:	4413      	add	r3, r2
 801a6d0:	009b      	lsls	r3, r3, #2
 801a6d2:	4a26      	ldr	r2, [pc, #152]	; (801a76c <xTaskPriorityInherit+0xe4>)
 801a6d4:	4413      	add	r3, r2
 801a6d6:	4299      	cmp	r1, r3
 801a6d8:	d12f      	bne.n	801a73a <xTaskPriorityInherit+0xb2>
 801a6da:	68bb      	ldr	r3, [r7, #8]
 801a6dc:	3304      	adds	r3, #4
 801a6de:	4618      	mov	r0, r3
 801a6e0:	f7fe f919 	bl	8018916 <uxListRemove>
 801a6e4:	4603      	mov	r3, r0
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d10a      	bne.n	801a700 <xTaskPriorityInherit+0x78>
 801a6ea:	68bb      	ldr	r3, [r7, #8]
 801a6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6ee:	2201      	movs	r2, #1
 801a6f0:	fa02 f303 	lsl.w	r3, r2, r3
 801a6f4:	43da      	mvns	r2, r3
 801a6f6:	4b1e      	ldr	r3, [pc, #120]	; (801a770 <xTaskPriorityInherit+0xe8>)
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	4013      	ands	r3, r2
 801a6fc:	4a1c      	ldr	r2, [pc, #112]	; (801a770 <xTaskPriorityInherit+0xe8>)
 801a6fe:	6013      	str	r3, [r2, #0]
 801a700:	4b19      	ldr	r3, [pc, #100]	; (801a768 <xTaskPriorityInherit+0xe0>)
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a706:	68bb      	ldr	r3, [r7, #8]
 801a708:	62da      	str	r2, [r3, #44]	; 0x2c
 801a70a:	68bb      	ldr	r3, [r7, #8]
 801a70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a70e:	2201      	movs	r2, #1
 801a710:	409a      	lsls	r2, r3
 801a712:	4b17      	ldr	r3, [pc, #92]	; (801a770 <xTaskPriorityInherit+0xe8>)
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	4313      	orrs	r3, r2
 801a718:	4a15      	ldr	r2, [pc, #84]	; (801a770 <xTaskPriorityInherit+0xe8>)
 801a71a:	6013      	str	r3, [r2, #0]
 801a71c:	68bb      	ldr	r3, [r7, #8]
 801a71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a720:	4613      	mov	r3, r2
 801a722:	009b      	lsls	r3, r3, #2
 801a724:	4413      	add	r3, r2
 801a726:	009b      	lsls	r3, r3, #2
 801a728:	4a10      	ldr	r2, [pc, #64]	; (801a76c <xTaskPriorityInherit+0xe4>)
 801a72a:	441a      	add	r2, r3
 801a72c:	68bb      	ldr	r3, [r7, #8]
 801a72e:	3304      	adds	r3, #4
 801a730:	4619      	mov	r1, r3
 801a732:	4610      	mov	r0, r2
 801a734:	f7fe f892 	bl	801885c <vListInsertEnd>
 801a738:	e004      	b.n	801a744 <xTaskPriorityInherit+0xbc>
 801a73a:	4b0b      	ldr	r3, [pc, #44]	; (801a768 <xTaskPriorityInherit+0xe0>)
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a740:	68bb      	ldr	r3, [r7, #8]
 801a742:	62da      	str	r2, [r3, #44]	; 0x2c
 801a744:	2301      	movs	r3, #1
 801a746:	60fb      	str	r3, [r7, #12]
 801a748:	e008      	b.n	801a75c <xTaskPriorityInherit+0xd4>
 801a74a:	68bb      	ldr	r3, [r7, #8]
 801a74c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a74e:	4b06      	ldr	r3, [pc, #24]	; (801a768 <xTaskPriorityInherit+0xe0>)
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a754:	429a      	cmp	r2, r3
 801a756:	d201      	bcs.n	801a75c <xTaskPriorityInherit+0xd4>
 801a758:	2301      	movs	r3, #1
 801a75a:	60fb      	str	r3, [r7, #12]
 801a75c:	68fb      	ldr	r3, [r7, #12]
 801a75e:	4618      	mov	r0, r3
 801a760:	3710      	adds	r7, #16
 801a762:	46bd      	mov	sp, r7
 801a764:	bd80      	pop	{r7, pc}
 801a766:	bf00      	nop
 801a768:	20004628 	.word	0x20004628
 801a76c:	2000462c 	.word	0x2000462c
 801a770:	20004730 	.word	0x20004730

0801a774 <xTaskPriorityDisinherit>:
 801a774:	b580      	push	{r7, lr}
 801a776:	b086      	sub	sp, #24
 801a778:	af00      	add	r7, sp, #0
 801a77a:	6078      	str	r0, [r7, #4]
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	613b      	str	r3, [r7, #16]
 801a780:	2300      	movs	r3, #0
 801a782:	617b      	str	r3, [r7, #20]
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	2b00      	cmp	r3, #0
 801a788:	d06e      	beq.n	801a868 <xTaskPriorityDisinherit+0xf4>
 801a78a:	4b3a      	ldr	r3, [pc, #232]	; (801a874 <xTaskPriorityDisinherit+0x100>)
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	693a      	ldr	r2, [r7, #16]
 801a790:	429a      	cmp	r2, r3
 801a792:	d00a      	beq.n	801a7aa <xTaskPriorityDisinherit+0x36>
 801a794:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a798:	f383 8811 	msr	BASEPRI, r3
 801a79c:	f3bf 8f6f 	isb	sy
 801a7a0:	f3bf 8f4f 	dsb	sy
 801a7a4:	60fb      	str	r3, [r7, #12]
 801a7a6:	bf00      	nop
 801a7a8:	e7fe      	b.n	801a7a8 <xTaskPriorityDisinherit+0x34>
 801a7aa:	693b      	ldr	r3, [r7, #16]
 801a7ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d10a      	bne.n	801a7c8 <xTaskPriorityDisinherit+0x54>
 801a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7b6:	f383 8811 	msr	BASEPRI, r3
 801a7ba:	f3bf 8f6f 	isb	sy
 801a7be:	f3bf 8f4f 	dsb	sy
 801a7c2:	60bb      	str	r3, [r7, #8]
 801a7c4:	bf00      	nop
 801a7c6:	e7fe      	b.n	801a7c6 <xTaskPriorityDisinherit+0x52>
 801a7c8:	693b      	ldr	r3, [r7, #16]
 801a7ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a7cc:	1e5a      	subs	r2, r3, #1
 801a7ce:	693b      	ldr	r3, [r7, #16]
 801a7d0:	649a      	str	r2, [r3, #72]	; 0x48
 801a7d2:	693b      	ldr	r3, [r7, #16]
 801a7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a7d6:	693b      	ldr	r3, [r7, #16]
 801a7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a7da:	429a      	cmp	r2, r3
 801a7dc:	d044      	beq.n	801a868 <xTaskPriorityDisinherit+0xf4>
 801a7de:	693b      	ldr	r3, [r7, #16]
 801a7e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d140      	bne.n	801a868 <xTaskPriorityDisinherit+0xf4>
 801a7e6:	693b      	ldr	r3, [r7, #16]
 801a7e8:	3304      	adds	r3, #4
 801a7ea:	4618      	mov	r0, r3
 801a7ec:	f7fe f893 	bl	8018916 <uxListRemove>
 801a7f0:	4603      	mov	r3, r0
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d115      	bne.n	801a822 <xTaskPriorityDisinherit+0xae>
 801a7f6:	693b      	ldr	r3, [r7, #16]
 801a7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a7fa:	491f      	ldr	r1, [pc, #124]	; (801a878 <xTaskPriorityDisinherit+0x104>)
 801a7fc:	4613      	mov	r3, r2
 801a7fe:	009b      	lsls	r3, r3, #2
 801a800:	4413      	add	r3, r2
 801a802:	009b      	lsls	r3, r3, #2
 801a804:	440b      	add	r3, r1
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d10a      	bne.n	801a822 <xTaskPriorityDisinherit+0xae>
 801a80c:	693b      	ldr	r3, [r7, #16]
 801a80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a810:	2201      	movs	r2, #1
 801a812:	fa02 f303 	lsl.w	r3, r2, r3
 801a816:	43da      	mvns	r2, r3
 801a818:	4b18      	ldr	r3, [pc, #96]	; (801a87c <xTaskPriorityDisinherit+0x108>)
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	4013      	ands	r3, r2
 801a81e:	4a17      	ldr	r2, [pc, #92]	; (801a87c <xTaskPriorityDisinherit+0x108>)
 801a820:	6013      	str	r3, [r2, #0]
 801a822:	693b      	ldr	r3, [r7, #16]
 801a824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a826:	693b      	ldr	r3, [r7, #16]
 801a828:	62da      	str	r2, [r3, #44]	; 0x2c
 801a82a:	693b      	ldr	r3, [r7, #16]
 801a82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a82e:	f1c3 0207 	rsb	r2, r3, #7
 801a832:	693b      	ldr	r3, [r7, #16]
 801a834:	619a      	str	r2, [r3, #24]
 801a836:	693b      	ldr	r3, [r7, #16]
 801a838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a83a:	2201      	movs	r2, #1
 801a83c:	409a      	lsls	r2, r3
 801a83e:	4b0f      	ldr	r3, [pc, #60]	; (801a87c <xTaskPriorityDisinherit+0x108>)
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	4313      	orrs	r3, r2
 801a844:	4a0d      	ldr	r2, [pc, #52]	; (801a87c <xTaskPriorityDisinherit+0x108>)
 801a846:	6013      	str	r3, [r2, #0]
 801a848:	693b      	ldr	r3, [r7, #16]
 801a84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a84c:	4613      	mov	r3, r2
 801a84e:	009b      	lsls	r3, r3, #2
 801a850:	4413      	add	r3, r2
 801a852:	009b      	lsls	r3, r3, #2
 801a854:	4a08      	ldr	r2, [pc, #32]	; (801a878 <xTaskPriorityDisinherit+0x104>)
 801a856:	441a      	add	r2, r3
 801a858:	693b      	ldr	r3, [r7, #16]
 801a85a:	3304      	adds	r3, #4
 801a85c:	4619      	mov	r1, r3
 801a85e:	4610      	mov	r0, r2
 801a860:	f7fd fffc 	bl	801885c <vListInsertEnd>
 801a864:	2301      	movs	r3, #1
 801a866:	617b      	str	r3, [r7, #20]
 801a868:	697b      	ldr	r3, [r7, #20]
 801a86a:	4618      	mov	r0, r3
 801a86c:	3718      	adds	r7, #24
 801a86e:	46bd      	mov	sp, r7
 801a870:	bd80      	pop	{r7, pc}
 801a872:	bf00      	nop
 801a874:	20004628 	.word	0x20004628
 801a878:	2000462c 	.word	0x2000462c
 801a87c:	20004730 	.word	0x20004730

0801a880 <vTaskPriorityDisinheritAfterTimeout>:
 801a880:	b580      	push	{r7, lr}
 801a882:	b088      	sub	sp, #32
 801a884:	af00      	add	r7, sp, #0
 801a886:	6078      	str	r0, [r7, #4]
 801a888:	6039      	str	r1, [r7, #0]
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	61bb      	str	r3, [r7, #24]
 801a88e:	2301      	movs	r3, #1
 801a890:	617b      	str	r3, [r7, #20]
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	2b00      	cmp	r3, #0
 801a896:	d077      	beq.n	801a988 <vTaskPriorityDisinheritAfterTimeout+0x108>
 801a898:	69bb      	ldr	r3, [r7, #24]
 801a89a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d10a      	bne.n	801a8b6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 801a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8a4:	f383 8811 	msr	BASEPRI, r3
 801a8a8:	f3bf 8f6f 	isb	sy
 801a8ac:	f3bf 8f4f 	dsb	sy
 801a8b0:	60fb      	str	r3, [r7, #12]
 801a8b2:	bf00      	nop
 801a8b4:	e7fe      	b.n	801a8b4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 801a8b6:	69bb      	ldr	r3, [r7, #24]
 801a8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a8ba:	683a      	ldr	r2, [r7, #0]
 801a8bc:	429a      	cmp	r2, r3
 801a8be:	d902      	bls.n	801a8c6 <vTaskPriorityDisinheritAfterTimeout+0x46>
 801a8c0:	683b      	ldr	r3, [r7, #0]
 801a8c2:	61fb      	str	r3, [r7, #28]
 801a8c4:	e002      	b.n	801a8cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
 801a8c6:	69bb      	ldr	r3, [r7, #24]
 801a8c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a8ca:	61fb      	str	r3, [r7, #28]
 801a8cc:	69bb      	ldr	r3, [r7, #24]
 801a8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8d0:	69fa      	ldr	r2, [r7, #28]
 801a8d2:	429a      	cmp	r2, r3
 801a8d4:	d058      	beq.n	801a988 <vTaskPriorityDisinheritAfterTimeout+0x108>
 801a8d6:	69bb      	ldr	r3, [r7, #24]
 801a8d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a8da:	697a      	ldr	r2, [r7, #20]
 801a8dc:	429a      	cmp	r2, r3
 801a8de:	d153      	bne.n	801a988 <vTaskPriorityDisinheritAfterTimeout+0x108>
 801a8e0:	4b2b      	ldr	r3, [pc, #172]	; (801a990 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	69ba      	ldr	r2, [r7, #24]
 801a8e6:	429a      	cmp	r2, r3
 801a8e8:	d10a      	bne.n	801a900 <vTaskPriorityDisinheritAfterTimeout+0x80>
 801a8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8ee:	f383 8811 	msr	BASEPRI, r3
 801a8f2:	f3bf 8f6f 	isb	sy
 801a8f6:	f3bf 8f4f 	dsb	sy
 801a8fa:	60bb      	str	r3, [r7, #8]
 801a8fc:	bf00      	nop
 801a8fe:	e7fe      	b.n	801a8fe <vTaskPriorityDisinheritAfterTimeout+0x7e>
 801a900:	69bb      	ldr	r3, [r7, #24]
 801a902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a904:	613b      	str	r3, [r7, #16]
 801a906:	69bb      	ldr	r3, [r7, #24]
 801a908:	69fa      	ldr	r2, [r7, #28]
 801a90a:	62da      	str	r2, [r3, #44]	; 0x2c
 801a90c:	69bb      	ldr	r3, [r7, #24]
 801a90e:	699b      	ldr	r3, [r3, #24]
 801a910:	2b00      	cmp	r3, #0
 801a912:	db04      	blt.n	801a91e <vTaskPriorityDisinheritAfterTimeout+0x9e>
 801a914:	69fb      	ldr	r3, [r7, #28]
 801a916:	f1c3 0207 	rsb	r2, r3, #7
 801a91a:	69bb      	ldr	r3, [r7, #24]
 801a91c:	619a      	str	r2, [r3, #24]
 801a91e:	69bb      	ldr	r3, [r7, #24]
 801a920:	6959      	ldr	r1, [r3, #20]
 801a922:	693a      	ldr	r2, [r7, #16]
 801a924:	4613      	mov	r3, r2
 801a926:	009b      	lsls	r3, r3, #2
 801a928:	4413      	add	r3, r2
 801a92a:	009b      	lsls	r3, r3, #2
 801a92c:	4a19      	ldr	r2, [pc, #100]	; (801a994 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801a92e:	4413      	add	r3, r2
 801a930:	4299      	cmp	r1, r3
 801a932:	d129      	bne.n	801a988 <vTaskPriorityDisinheritAfterTimeout+0x108>
 801a934:	69bb      	ldr	r3, [r7, #24]
 801a936:	3304      	adds	r3, #4
 801a938:	4618      	mov	r0, r3
 801a93a:	f7fd ffec 	bl	8018916 <uxListRemove>
 801a93e:	4603      	mov	r3, r0
 801a940:	2b00      	cmp	r3, #0
 801a942:	d10a      	bne.n	801a95a <vTaskPriorityDisinheritAfterTimeout+0xda>
 801a944:	69bb      	ldr	r3, [r7, #24]
 801a946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a948:	2201      	movs	r2, #1
 801a94a:	fa02 f303 	lsl.w	r3, r2, r3
 801a94e:	43da      	mvns	r2, r3
 801a950:	4b11      	ldr	r3, [pc, #68]	; (801a998 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	4013      	ands	r3, r2
 801a956:	4a10      	ldr	r2, [pc, #64]	; (801a998 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801a958:	6013      	str	r3, [r2, #0]
 801a95a:	69bb      	ldr	r3, [r7, #24]
 801a95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a95e:	2201      	movs	r2, #1
 801a960:	409a      	lsls	r2, r3
 801a962:	4b0d      	ldr	r3, [pc, #52]	; (801a998 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	4313      	orrs	r3, r2
 801a968:	4a0b      	ldr	r2, [pc, #44]	; (801a998 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801a96a:	6013      	str	r3, [r2, #0]
 801a96c:	69bb      	ldr	r3, [r7, #24]
 801a96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a970:	4613      	mov	r3, r2
 801a972:	009b      	lsls	r3, r3, #2
 801a974:	4413      	add	r3, r2
 801a976:	009b      	lsls	r3, r3, #2
 801a978:	4a06      	ldr	r2, [pc, #24]	; (801a994 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801a97a:	441a      	add	r2, r3
 801a97c:	69bb      	ldr	r3, [r7, #24]
 801a97e:	3304      	adds	r3, #4
 801a980:	4619      	mov	r1, r3
 801a982:	4610      	mov	r0, r2
 801a984:	f7fd ff6a 	bl	801885c <vListInsertEnd>
 801a988:	bf00      	nop
 801a98a:	3720      	adds	r7, #32
 801a98c:	46bd      	mov	sp, r7
 801a98e:	bd80      	pop	{r7, pc}
 801a990:	20004628 	.word	0x20004628
 801a994:	2000462c 	.word	0x2000462c
 801a998:	20004730 	.word	0x20004730

0801a99c <uxTaskResetEventItemValue>:
 801a99c:	b480      	push	{r7}
 801a99e:	b083      	sub	sp, #12
 801a9a0:	af00      	add	r7, sp, #0
 801a9a2:	4b09      	ldr	r3, [pc, #36]	; (801a9c8 <uxTaskResetEventItemValue+0x2c>)
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	699b      	ldr	r3, [r3, #24]
 801a9a8:	607b      	str	r3, [r7, #4]
 801a9aa:	4b07      	ldr	r3, [pc, #28]	; (801a9c8 <uxTaskResetEventItemValue+0x2c>)
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a9b0:	4b05      	ldr	r3, [pc, #20]	; (801a9c8 <uxTaskResetEventItemValue+0x2c>)
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	f1c2 0207 	rsb	r2, r2, #7
 801a9b8:	619a      	str	r2, [r3, #24]
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	4618      	mov	r0, r3
 801a9be:	370c      	adds	r7, #12
 801a9c0:	46bd      	mov	sp, r7
 801a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9c6:	4770      	bx	lr
 801a9c8:	20004628 	.word	0x20004628

0801a9cc <pvTaskIncrementMutexHeldCount>:
 801a9cc:	b480      	push	{r7}
 801a9ce:	af00      	add	r7, sp, #0
 801a9d0:	4b07      	ldr	r3, [pc, #28]	; (801a9f0 <pvTaskIncrementMutexHeldCount+0x24>)
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d004      	beq.n	801a9e2 <pvTaskIncrementMutexHeldCount+0x16>
 801a9d8:	4b05      	ldr	r3, [pc, #20]	; (801a9f0 <pvTaskIncrementMutexHeldCount+0x24>)
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801a9de:	3201      	adds	r2, #1
 801a9e0:	649a      	str	r2, [r3, #72]	; 0x48
 801a9e2:	4b03      	ldr	r3, [pc, #12]	; (801a9f0 <pvTaskIncrementMutexHeldCount+0x24>)
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	4618      	mov	r0, r3
 801a9e8:	46bd      	mov	sp, r7
 801a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ee:	4770      	bx	lr
 801a9f0:	20004628 	.word	0x20004628

0801a9f4 <xTaskNotifyWait>:
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b086      	sub	sp, #24
 801a9f8:	af00      	add	r7, sp, #0
 801a9fa:	60f8      	str	r0, [r7, #12]
 801a9fc:	60b9      	str	r1, [r7, #8]
 801a9fe:	607a      	str	r2, [r7, #4]
 801aa00:	603b      	str	r3, [r7, #0]
 801aa02:	f000 fe77 	bl	801b6f4 <vPortEnterCritical>
 801aa06:	4b29      	ldr	r3, [pc, #164]	; (801aaac <xTaskNotifyWait+0xb8>)
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 801aa0e:	b2db      	uxtb	r3, r3
 801aa10:	2b02      	cmp	r3, #2
 801aa12:	d01c      	beq.n	801aa4e <xTaskNotifyWait+0x5a>
 801aa14:	4b25      	ldr	r3, [pc, #148]	; (801aaac <xTaskNotifyWait+0xb8>)
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 801aa1c:	68fa      	ldr	r2, [r7, #12]
 801aa1e:	43d2      	mvns	r2, r2
 801aa20:	400a      	ands	r2, r1
 801aa22:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801aa26:	4b21      	ldr	r3, [pc, #132]	; (801aaac <xTaskNotifyWait+0xb8>)
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	2201      	movs	r2, #1
 801aa2c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 801aa30:	683b      	ldr	r3, [r7, #0]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d00b      	beq.n	801aa4e <xTaskNotifyWait+0x5a>
 801aa36:	2101      	movs	r1, #1
 801aa38:	6838      	ldr	r0, [r7, #0]
 801aa3a:	f000 f8f9 	bl	801ac30 <prvAddCurrentTaskToDelayedList>
 801aa3e:	4b1c      	ldr	r3, [pc, #112]	; (801aab0 <xTaskNotifyWait+0xbc>)
 801aa40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aa44:	601a      	str	r2, [r3, #0]
 801aa46:	f3bf 8f4f 	dsb	sy
 801aa4a:	f3bf 8f6f 	isb	sy
 801aa4e:	f000 fe81 	bl	801b754 <vPortExitCritical>
 801aa52:	f000 fe4f 	bl	801b6f4 <vPortEnterCritical>
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d005      	beq.n	801aa68 <xTaskNotifyWait+0x74>
 801aa5c:	4b13      	ldr	r3, [pc, #76]	; (801aaac <xTaskNotifyWait+0xb8>)
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	601a      	str	r2, [r3, #0]
 801aa68:	4b10      	ldr	r3, [pc, #64]	; (801aaac <xTaskNotifyWait+0xb8>)
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 801aa70:	b2db      	uxtb	r3, r3
 801aa72:	2b02      	cmp	r3, #2
 801aa74:	d002      	beq.n	801aa7c <xTaskNotifyWait+0x88>
 801aa76:	2300      	movs	r3, #0
 801aa78:	617b      	str	r3, [r7, #20]
 801aa7a:	e00a      	b.n	801aa92 <xTaskNotifyWait+0x9e>
 801aa7c:	4b0b      	ldr	r3, [pc, #44]	; (801aaac <xTaskNotifyWait+0xb8>)
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 801aa84:	68ba      	ldr	r2, [r7, #8]
 801aa86:	43d2      	mvns	r2, r2
 801aa88:	400a      	ands	r2, r1
 801aa8a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801aa8e:	2301      	movs	r3, #1
 801aa90:	617b      	str	r3, [r7, #20]
 801aa92:	4b06      	ldr	r3, [pc, #24]	; (801aaac <xTaskNotifyWait+0xb8>)
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	2200      	movs	r2, #0
 801aa98:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 801aa9c:	f000 fe5a 	bl	801b754 <vPortExitCritical>
 801aaa0:	697b      	ldr	r3, [r7, #20]
 801aaa2:	4618      	mov	r0, r3
 801aaa4:	3718      	adds	r7, #24
 801aaa6:	46bd      	mov	sp, r7
 801aaa8:	bd80      	pop	{r7, pc}
 801aaaa:	bf00      	nop
 801aaac:	20004628 	.word	0x20004628
 801aab0:	e000ed04 	.word	0xe000ed04

0801aab4 <xTaskGenericNotify>:
 801aab4:	b580      	push	{r7, lr}
 801aab6:	b08a      	sub	sp, #40	; 0x28
 801aab8:	af00      	add	r7, sp, #0
 801aaba:	60f8      	str	r0, [r7, #12]
 801aabc:	60b9      	str	r1, [r7, #8]
 801aabe:	603b      	str	r3, [r7, #0]
 801aac0:	4613      	mov	r3, r2
 801aac2:	71fb      	strb	r3, [r7, #7]
 801aac4:	2301      	movs	r3, #1
 801aac6:	627b      	str	r3, [r7, #36]	; 0x24
 801aac8:	68fb      	ldr	r3, [r7, #12]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d10a      	bne.n	801aae4 <xTaskGenericNotify+0x30>
 801aace:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aad2:	f383 8811 	msr	BASEPRI, r3
 801aad6:	f3bf 8f6f 	isb	sy
 801aada:	f3bf 8f4f 	dsb	sy
 801aade:	61bb      	str	r3, [r7, #24]
 801aae0:	bf00      	nop
 801aae2:	e7fe      	b.n	801aae2 <xTaskGenericNotify+0x2e>
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	623b      	str	r3, [r7, #32]
 801aae8:	f000 fe04 	bl	801b6f4 <vPortEnterCritical>
 801aaec:	683b      	ldr	r3, [r7, #0]
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d004      	beq.n	801aafc <xTaskGenericNotify+0x48>
 801aaf2:	6a3b      	ldr	r3, [r7, #32]
 801aaf4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801aaf8:	683b      	ldr	r3, [r7, #0]
 801aafa:	601a      	str	r2, [r3, #0]
 801aafc:	6a3b      	ldr	r3, [r7, #32]
 801aafe:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 801ab02:	77fb      	strb	r3, [r7, #31]
 801ab04:	6a3b      	ldr	r3, [r7, #32]
 801ab06:	2202      	movs	r2, #2
 801ab08:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 801ab0c:	79fb      	ldrb	r3, [r7, #7]
 801ab0e:	2b04      	cmp	r3, #4
 801ab10:	d82d      	bhi.n	801ab6e <xTaskGenericNotify+0xba>
 801ab12:	a201      	add	r2, pc, #4	; (adr r2, 801ab18 <xTaskGenericNotify+0x64>)
 801ab14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab18:	0801ab91 	.word	0x0801ab91
 801ab1c:	0801ab2d 	.word	0x0801ab2d
 801ab20:	0801ab3f 	.word	0x0801ab3f
 801ab24:	0801ab4f 	.word	0x0801ab4f
 801ab28:	0801ab59 	.word	0x0801ab59
 801ab2c:	6a3b      	ldr	r3, [r7, #32]
 801ab2e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801ab32:	68bb      	ldr	r3, [r7, #8]
 801ab34:	431a      	orrs	r2, r3
 801ab36:	6a3b      	ldr	r3, [r7, #32]
 801ab38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801ab3c:	e02b      	b.n	801ab96 <xTaskGenericNotify+0xe2>
 801ab3e:	6a3b      	ldr	r3, [r7, #32]
 801ab40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801ab44:	1c5a      	adds	r2, r3, #1
 801ab46:	6a3b      	ldr	r3, [r7, #32]
 801ab48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801ab4c:	e023      	b.n	801ab96 <xTaskGenericNotify+0xe2>
 801ab4e:	6a3b      	ldr	r3, [r7, #32]
 801ab50:	68ba      	ldr	r2, [r7, #8]
 801ab52:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801ab56:	e01e      	b.n	801ab96 <xTaskGenericNotify+0xe2>
 801ab58:	7ffb      	ldrb	r3, [r7, #31]
 801ab5a:	2b02      	cmp	r3, #2
 801ab5c:	d004      	beq.n	801ab68 <xTaskGenericNotify+0xb4>
 801ab5e:	6a3b      	ldr	r3, [r7, #32]
 801ab60:	68ba      	ldr	r2, [r7, #8]
 801ab62:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801ab66:	e016      	b.n	801ab96 <xTaskGenericNotify+0xe2>
 801ab68:	2300      	movs	r3, #0
 801ab6a:	627b      	str	r3, [r7, #36]	; 0x24
 801ab6c:	e013      	b.n	801ab96 <xTaskGenericNotify+0xe2>
 801ab6e:	6a3b      	ldr	r3, [r7, #32]
 801ab70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801ab74:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab78:	d00c      	beq.n	801ab94 <xTaskGenericNotify+0xe0>
 801ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab7e:	f383 8811 	msr	BASEPRI, r3
 801ab82:	f3bf 8f6f 	isb	sy
 801ab86:	f3bf 8f4f 	dsb	sy
 801ab8a:	617b      	str	r3, [r7, #20]
 801ab8c:	bf00      	nop
 801ab8e:	e7fe      	b.n	801ab8e <xTaskGenericNotify+0xda>
 801ab90:	bf00      	nop
 801ab92:	e000      	b.n	801ab96 <xTaskGenericNotify+0xe2>
 801ab94:	bf00      	nop
 801ab96:	7ffb      	ldrb	r3, [r7, #31]
 801ab98:	2b01      	cmp	r3, #1
 801ab9a:	d139      	bne.n	801ac10 <xTaskGenericNotify+0x15c>
 801ab9c:	6a3b      	ldr	r3, [r7, #32]
 801ab9e:	3304      	adds	r3, #4
 801aba0:	4618      	mov	r0, r3
 801aba2:	f7fd feb8 	bl	8018916 <uxListRemove>
 801aba6:	6a3b      	ldr	r3, [r7, #32]
 801aba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abaa:	2201      	movs	r2, #1
 801abac:	409a      	lsls	r2, r3
 801abae:	4b1c      	ldr	r3, [pc, #112]	; (801ac20 <xTaskGenericNotify+0x16c>)
 801abb0:	681b      	ldr	r3, [r3, #0]
 801abb2:	4313      	orrs	r3, r2
 801abb4:	4a1a      	ldr	r2, [pc, #104]	; (801ac20 <xTaskGenericNotify+0x16c>)
 801abb6:	6013      	str	r3, [r2, #0]
 801abb8:	6a3b      	ldr	r3, [r7, #32]
 801abba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801abbc:	4613      	mov	r3, r2
 801abbe:	009b      	lsls	r3, r3, #2
 801abc0:	4413      	add	r3, r2
 801abc2:	009b      	lsls	r3, r3, #2
 801abc4:	4a17      	ldr	r2, [pc, #92]	; (801ac24 <xTaskGenericNotify+0x170>)
 801abc6:	441a      	add	r2, r3
 801abc8:	6a3b      	ldr	r3, [r7, #32]
 801abca:	3304      	adds	r3, #4
 801abcc:	4619      	mov	r1, r3
 801abce:	4610      	mov	r0, r2
 801abd0:	f7fd fe44 	bl	801885c <vListInsertEnd>
 801abd4:	6a3b      	ldr	r3, [r7, #32]
 801abd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d00a      	beq.n	801abf2 <xTaskGenericNotify+0x13e>
 801abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abe0:	f383 8811 	msr	BASEPRI, r3
 801abe4:	f3bf 8f6f 	isb	sy
 801abe8:	f3bf 8f4f 	dsb	sy
 801abec:	613b      	str	r3, [r7, #16]
 801abee:	bf00      	nop
 801abf0:	e7fe      	b.n	801abf0 <xTaskGenericNotify+0x13c>
 801abf2:	6a3b      	ldr	r3, [r7, #32]
 801abf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801abf6:	4b0c      	ldr	r3, [pc, #48]	; (801ac28 <xTaskGenericNotify+0x174>)
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abfc:	429a      	cmp	r2, r3
 801abfe:	d907      	bls.n	801ac10 <xTaskGenericNotify+0x15c>
 801ac00:	4b0a      	ldr	r3, [pc, #40]	; (801ac2c <xTaskGenericNotify+0x178>)
 801ac02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ac06:	601a      	str	r2, [r3, #0]
 801ac08:	f3bf 8f4f 	dsb	sy
 801ac0c:	f3bf 8f6f 	isb	sy
 801ac10:	f000 fda0 	bl	801b754 <vPortExitCritical>
 801ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac16:	4618      	mov	r0, r3
 801ac18:	3728      	adds	r7, #40	; 0x28
 801ac1a:	46bd      	mov	sp, r7
 801ac1c:	bd80      	pop	{r7, pc}
 801ac1e:	bf00      	nop
 801ac20:	20004730 	.word	0x20004730
 801ac24:	2000462c 	.word	0x2000462c
 801ac28:	20004628 	.word	0x20004628
 801ac2c:	e000ed04 	.word	0xe000ed04

0801ac30 <prvAddCurrentTaskToDelayedList>:
 801ac30:	b580      	push	{r7, lr}
 801ac32:	b084      	sub	sp, #16
 801ac34:	af00      	add	r7, sp, #0
 801ac36:	6078      	str	r0, [r7, #4]
 801ac38:	6039      	str	r1, [r7, #0]
 801ac3a:	4b29      	ldr	r3, [pc, #164]	; (801ace0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	60fb      	str	r3, [r7, #12]
 801ac40:	4b28      	ldr	r3, [pc, #160]	; (801ace4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	3304      	adds	r3, #4
 801ac46:	4618      	mov	r0, r3
 801ac48:	f7fd fe65 	bl	8018916 <uxListRemove>
 801ac4c:	4603      	mov	r3, r0
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d10b      	bne.n	801ac6a <prvAddCurrentTaskToDelayedList+0x3a>
 801ac52:	4b24      	ldr	r3, [pc, #144]	; (801ace4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac58:	2201      	movs	r2, #1
 801ac5a:	fa02 f303 	lsl.w	r3, r2, r3
 801ac5e:	43da      	mvns	r2, r3
 801ac60:	4b21      	ldr	r3, [pc, #132]	; (801ace8 <prvAddCurrentTaskToDelayedList+0xb8>)
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	4013      	ands	r3, r2
 801ac66:	4a20      	ldr	r2, [pc, #128]	; (801ace8 <prvAddCurrentTaskToDelayedList+0xb8>)
 801ac68:	6013      	str	r3, [r2, #0]
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac70:	d10a      	bne.n	801ac88 <prvAddCurrentTaskToDelayedList+0x58>
 801ac72:	683b      	ldr	r3, [r7, #0]
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d007      	beq.n	801ac88 <prvAddCurrentTaskToDelayedList+0x58>
 801ac78:	4b1a      	ldr	r3, [pc, #104]	; (801ace4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	3304      	adds	r3, #4
 801ac7e:	4619      	mov	r1, r3
 801ac80:	481a      	ldr	r0, [pc, #104]	; (801acec <prvAddCurrentTaskToDelayedList+0xbc>)
 801ac82:	f7fd fdeb 	bl	801885c <vListInsertEnd>
 801ac86:	e026      	b.n	801acd6 <prvAddCurrentTaskToDelayedList+0xa6>
 801ac88:	68fa      	ldr	r2, [r7, #12]
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	4413      	add	r3, r2
 801ac8e:	60bb      	str	r3, [r7, #8]
 801ac90:	4b14      	ldr	r3, [pc, #80]	; (801ace4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	68ba      	ldr	r2, [r7, #8]
 801ac96:	605a      	str	r2, [r3, #4]
 801ac98:	68ba      	ldr	r2, [r7, #8]
 801ac9a:	68fb      	ldr	r3, [r7, #12]
 801ac9c:	429a      	cmp	r2, r3
 801ac9e:	d209      	bcs.n	801acb4 <prvAddCurrentTaskToDelayedList+0x84>
 801aca0:	4b13      	ldr	r3, [pc, #76]	; (801acf0 <prvAddCurrentTaskToDelayedList+0xc0>)
 801aca2:	681a      	ldr	r2, [r3, #0]
 801aca4:	4b0f      	ldr	r3, [pc, #60]	; (801ace4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	3304      	adds	r3, #4
 801acaa:	4619      	mov	r1, r3
 801acac:	4610      	mov	r0, r2
 801acae:	f7fd fdf9 	bl	80188a4 <vListInsert>
 801acb2:	e010      	b.n	801acd6 <prvAddCurrentTaskToDelayedList+0xa6>
 801acb4:	4b0f      	ldr	r3, [pc, #60]	; (801acf4 <prvAddCurrentTaskToDelayedList+0xc4>)
 801acb6:	681a      	ldr	r2, [r3, #0]
 801acb8:	4b0a      	ldr	r3, [pc, #40]	; (801ace4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801acba:	681b      	ldr	r3, [r3, #0]
 801acbc:	3304      	adds	r3, #4
 801acbe:	4619      	mov	r1, r3
 801acc0:	4610      	mov	r0, r2
 801acc2:	f7fd fdef 	bl	80188a4 <vListInsert>
 801acc6:	4b0c      	ldr	r3, [pc, #48]	; (801acf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	68ba      	ldr	r2, [r7, #8]
 801accc:	429a      	cmp	r2, r3
 801acce:	d202      	bcs.n	801acd6 <prvAddCurrentTaskToDelayedList+0xa6>
 801acd0:	4a09      	ldr	r2, [pc, #36]	; (801acf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 801acd2:	68bb      	ldr	r3, [r7, #8]
 801acd4:	6013      	str	r3, [r2, #0]
 801acd6:	bf00      	nop
 801acd8:	3710      	adds	r7, #16
 801acda:	46bd      	mov	sp, r7
 801acdc:	bd80      	pop	{r7, pc}
 801acde:	bf00      	nop
 801ace0:	2000472c 	.word	0x2000472c
 801ace4:	20004628 	.word	0x20004628
 801ace8:	20004730 	.word	0x20004730
 801acec:	20004714 	.word	0x20004714
 801acf0:	200046e4 	.word	0x200046e4
 801acf4:	200046e0 	.word	0x200046e0
 801acf8:	20004748 	.word	0x20004748

0801acfc <xTimerCreateTimerTask>:
 801acfc:	b580      	push	{r7, lr}
 801acfe:	b08a      	sub	sp, #40	; 0x28
 801ad00:	af04      	add	r7, sp, #16
 801ad02:	2300      	movs	r3, #0
 801ad04:	617b      	str	r3, [r7, #20]
 801ad06:	f000 fb85 	bl	801b414 <prvCheckForValidListAndQueue>
 801ad0a:	4b1c      	ldr	r3, [pc, #112]	; (801ad7c <xTimerCreateTimerTask+0x80>)
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d021      	beq.n	801ad56 <xTimerCreateTimerTask+0x5a>
 801ad12:	2300      	movs	r3, #0
 801ad14:	60fb      	str	r3, [r7, #12]
 801ad16:	2300      	movs	r3, #0
 801ad18:	60bb      	str	r3, [r7, #8]
 801ad1a:	1d3a      	adds	r2, r7, #4
 801ad1c:	f107 0108 	add.w	r1, r7, #8
 801ad20:	f107 030c 	add.w	r3, r7, #12
 801ad24:	4618      	mov	r0, r3
 801ad26:	f7ee ff43 	bl	8009bb0 <vApplicationGetTimerTaskMemory>
 801ad2a:	6879      	ldr	r1, [r7, #4]
 801ad2c:	68bb      	ldr	r3, [r7, #8]
 801ad2e:	68fa      	ldr	r2, [r7, #12]
 801ad30:	9202      	str	r2, [sp, #8]
 801ad32:	9301      	str	r3, [sp, #4]
 801ad34:	2305      	movs	r3, #5
 801ad36:	9300      	str	r3, [sp, #0]
 801ad38:	2300      	movs	r3, #0
 801ad3a:	460a      	mov	r2, r1
 801ad3c:	4910      	ldr	r1, [pc, #64]	; (801ad80 <xTimerCreateTimerTask+0x84>)
 801ad3e:	4811      	ldr	r0, [pc, #68]	; (801ad84 <xTimerCreateTimerTask+0x88>)
 801ad40:	f7fe fdb4 	bl	80198ac <xTaskCreateStatic>
 801ad44:	4603      	mov	r3, r0
 801ad46:	4a10      	ldr	r2, [pc, #64]	; (801ad88 <xTimerCreateTimerTask+0x8c>)
 801ad48:	6013      	str	r3, [r2, #0]
 801ad4a:	4b0f      	ldr	r3, [pc, #60]	; (801ad88 <xTimerCreateTimerTask+0x8c>)
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d001      	beq.n	801ad56 <xTimerCreateTimerTask+0x5a>
 801ad52:	2301      	movs	r3, #1
 801ad54:	617b      	str	r3, [r7, #20]
 801ad56:	697b      	ldr	r3, [r7, #20]
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d10a      	bne.n	801ad72 <xTimerCreateTimerTask+0x76>
 801ad5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad60:	f383 8811 	msr	BASEPRI, r3
 801ad64:	f3bf 8f6f 	isb	sy
 801ad68:	f3bf 8f4f 	dsb	sy
 801ad6c:	613b      	str	r3, [r7, #16]
 801ad6e:	bf00      	nop
 801ad70:	e7fe      	b.n	801ad70 <xTimerCreateTimerTask+0x74>
 801ad72:	697b      	ldr	r3, [r7, #20]
 801ad74:	4618      	mov	r0, r3
 801ad76:	3718      	adds	r7, #24
 801ad78:	46bd      	mov	sp, r7
 801ad7a:	bd80      	pop	{r7, pc}
 801ad7c:	20004784 	.word	0x20004784
 801ad80:	0802227c 	.word	0x0802227c
 801ad84:	0801aff5 	.word	0x0801aff5
 801ad88:	20004788 	.word	0x20004788

0801ad8c <xTimerCreate>:
 801ad8c:	b580      	push	{r7, lr}
 801ad8e:	b088      	sub	sp, #32
 801ad90:	af02      	add	r7, sp, #8
 801ad92:	60f8      	str	r0, [r7, #12]
 801ad94:	60b9      	str	r1, [r7, #8]
 801ad96:	607a      	str	r2, [r7, #4]
 801ad98:	603b      	str	r3, [r7, #0]
 801ad9a:	2028      	movs	r0, #40	; 0x28
 801ad9c:	f000 fdcc 	bl	801b938 <pvPortMalloc>
 801ada0:	6178      	str	r0, [r7, #20]
 801ada2:	697b      	ldr	r3, [r7, #20]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d00d      	beq.n	801adc4 <xTimerCreate+0x38>
 801ada8:	697b      	ldr	r3, [r7, #20]
 801adaa:	2200      	movs	r2, #0
 801adac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801adb0:	697b      	ldr	r3, [r7, #20]
 801adb2:	9301      	str	r3, [sp, #4]
 801adb4:	6a3b      	ldr	r3, [r7, #32]
 801adb6:	9300      	str	r3, [sp, #0]
 801adb8:	683b      	ldr	r3, [r7, #0]
 801adba:	687a      	ldr	r2, [r7, #4]
 801adbc:	68b9      	ldr	r1, [r7, #8]
 801adbe:	68f8      	ldr	r0, [r7, #12]
 801adc0:	f000 f843 	bl	801ae4a <prvInitialiseNewTimer>
 801adc4:	697b      	ldr	r3, [r7, #20]
 801adc6:	4618      	mov	r0, r3
 801adc8:	3718      	adds	r7, #24
 801adca:	46bd      	mov	sp, r7
 801adcc:	bd80      	pop	{r7, pc}

0801adce <xTimerCreateStatic>:
 801adce:	b580      	push	{r7, lr}
 801add0:	b08a      	sub	sp, #40	; 0x28
 801add2:	af02      	add	r7, sp, #8
 801add4:	60f8      	str	r0, [r7, #12]
 801add6:	60b9      	str	r1, [r7, #8]
 801add8:	607a      	str	r2, [r7, #4]
 801adda:	603b      	str	r3, [r7, #0]
 801addc:	2328      	movs	r3, #40	; 0x28
 801adde:	613b      	str	r3, [r7, #16]
 801ade0:	693b      	ldr	r3, [r7, #16]
 801ade2:	2b28      	cmp	r3, #40	; 0x28
 801ade4:	d00a      	beq.n	801adfc <xTimerCreateStatic+0x2e>
 801ade6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801adea:	f383 8811 	msr	BASEPRI, r3
 801adee:	f3bf 8f6f 	isb	sy
 801adf2:	f3bf 8f4f 	dsb	sy
 801adf6:	61bb      	str	r3, [r7, #24]
 801adf8:	bf00      	nop
 801adfa:	e7fe      	b.n	801adfa <xTimerCreateStatic+0x2c>
 801adfc:	693b      	ldr	r3, [r7, #16]
 801adfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d10a      	bne.n	801ae1a <xTimerCreateStatic+0x4c>
 801ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae08:	f383 8811 	msr	BASEPRI, r3
 801ae0c:	f3bf 8f6f 	isb	sy
 801ae10:	f3bf 8f4f 	dsb	sy
 801ae14:	617b      	str	r3, [r7, #20]
 801ae16:	bf00      	nop
 801ae18:	e7fe      	b.n	801ae18 <xTimerCreateStatic+0x4a>
 801ae1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae1c:	61fb      	str	r3, [r7, #28]
 801ae1e:	69fb      	ldr	r3, [r7, #28]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d00d      	beq.n	801ae40 <xTimerCreateStatic+0x72>
 801ae24:	69fb      	ldr	r3, [r7, #28]
 801ae26:	2202      	movs	r2, #2
 801ae28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801ae2c:	69fb      	ldr	r3, [r7, #28]
 801ae2e:	9301      	str	r3, [sp, #4]
 801ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae32:	9300      	str	r3, [sp, #0]
 801ae34:	683b      	ldr	r3, [r7, #0]
 801ae36:	687a      	ldr	r2, [r7, #4]
 801ae38:	68b9      	ldr	r1, [r7, #8]
 801ae3a:	68f8      	ldr	r0, [r7, #12]
 801ae3c:	f000 f805 	bl	801ae4a <prvInitialiseNewTimer>
 801ae40:	69fb      	ldr	r3, [r7, #28]
 801ae42:	4618      	mov	r0, r3
 801ae44:	3720      	adds	r7, #32
 801ae46:	46bd      	mov	sp, r7
 801ae48:	bd80      	pop	{r7, pc}

0801ae4a <prvInitialiseNewTimer>:
 801ae4a:	b580      	push	{r7, lr}
 801ae4c:	b086      	sub	sp, #24
 801ae4e:	af00      	add	r7, sp, #0
 801ae50:	60f8      	str	r0, [r7, #12]
 801ae52:	60b9      	str	r1, [r7, #8]
 801ae54:	607a      	str	r2, [r7, #4]
 801ae56:	603b      	str	r3, [r7, #0]
 801ae58:	68bb      	ldr	r3, [r7, #8]
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d10a      	bne.n	801ae74 <prvInitialiseNewTimer+0x2a>
 801ae5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae62:	f383 8811 	msr	BASEPRI, r3
 801ae66:	f3bf 8f6f 	isb	sy
 801ae6a:	f3bf 8f4f 	dsb	sy
 801ae6e:	617b      	str	r3, [r7, #20]
 801ae70:	bf00      	nop
 801ae72:	e7fe      	b.n	801ae72 <prvInitialiseNewTimer+0x28>
 801ae74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae76:	2b00      	cmp	r3, #0
 801ae78:	d01e      	beq.n	801aeb8 <prvInitialiseNewTimer+0x6e>
 801ae7a:	f000 facb 	bl	801b414 <prvCheckForValidListAndQueue>
 801ae7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae80:	68fa      	ldr	r2, [r7, #12]
 801ae82:	601a      	str	r2, [r3, #0]
 801ae84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae86:	68ba      	ldr	r2, [r7, #8]
 801ae88:	619a      	str	r2, [r3, #24]
 801ae8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae8c:	683a      	ldr	r2, [r7, #0]
 801ae8e:	61da      	str	r2, [r3, #28]
 801ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae92:	6a3a      	ldr	r2, [r7, #32]
 801ae94:	621a      	str	r2, [r3, #32]
 801ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae98:	3304      	adds	r3, #4
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	f7fd fcd1 	bl	8018842 <vListInitialiseItem>
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d008      	beq.n	801aeb8 <prvInitialiseNewTimer+0x6e>
 801aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aea8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801aeac:	f043 0304 	orr.w	r3, r3, #4
 801aeb0:	b2da      	uxtb	r2, r3
 801aeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aeb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801aeb8:	bf00      	nop
 801aeba:	3718      	adds	r7, #24
 801aebc:	46bd      	mov	sp, r7
 801aebe:	bd80      	pop	{r7, pc}

0801aec0 <xTimerGenericCommand>:
 801aec0:	b580      	push	{r7, lr}
 801aec2:	b08a      	sub	sp, #40	; 0x28
 801aec4:	af00      	add	r7, sp, #0
 801aec6:	60f8      	str	r0, [r7, #12]
 801aec8:	60b9      	str	r1, [r7, #8]
 801aeca:	607a      	str	r2, [r7, #4]
 801aecc:	603b      	str	r3, [r7, #0]
 801aece:	2300      	movs	r3, #0
 801aed0:	627b      	str	r3, [r7, #36]	; 0x24
 801aed2:	68fb      	ldr	r3, [r7, #12]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d10a      	bne.n	801aeee <xTimerGenericCommand+0x2e>
 801aed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aedc:	f383 8811 	msr	BASEPRI, r3
 801aee0:	f3bf 8f6f 	isb	sy
 801aee4:	f3bf 8f4f 	dsb	sy
 801aee8:	623b      	str	r3, [r7, #32]
 801aeea:	bf00      	nop
 801aeec:	e7fe      	b.n	801aeec <xTimerGenericCommand+0x2c>
 801aeee:	4b1a      	ldr	r3, [pc, #104]	; (801af58 <xTimerGenericCommand+0x98>)
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d02a      	beq.n	801af4c <xTimerGenericCommand+0x8c>
 801aef6:	68bb      	ldr	r3, [r7, #8]
 801aef8:	617b      	str	r3, [r7, #20]
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	61bb      	str	r3, [r7, #24]
 801aefe:	68fb      	ldr	r3, [r7, #12]
 801af00:	61fb      	str	r3, [r7, #28]
 801af02:	68bb      	ldr	r3, [r7, #8]
 801af04:	2b05      	cmp	r3, #5
 801af06:	dc18      	bgt.n	801af3a <xTimerGenericCommand+0x7a>
 801af08:	f7ff fba0 	bl	801a64c <xTaskGetSchedulerState>
 801af0c:	4603      	mov	r3, r0
 801af0e:	2b02      	cmp	r3, #2
 801af10:	d109      	bne.n	801af26 <xTimerGenericCommand+0x66>
 801af12:	4b11      	ldr	r3, [pc, #68]	; (801af58 <xTimerGenericCommand+0x98>)
 801af14:	6818      	ldr	r0, [r3, #0]
 801af16:	f107 0114 	add.w	r1, r7, #20
 801af1a:	2300      	movs	r3, #0
 801af1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801af1e:	f7fd fe5f 	bl	8018be0 <xQueueGenericSend>
 801af22:	6278      	str	r0, [r7, #36]	; 0x24
 801af24:	e012      	b.n	801af4c <xTimerGenericCommand+0x8c>
 801af26:	4b0c      	ldr	r3, [pc, #48]	; (801af58 <xTimerGenericCommand+0x98>)
 801af28:	6818      	ldr	r0, [r3, #0]
 801af2a:	f107 0114 	add.w	r1, r7, #20
 801af2e:	2300      	movs	r3, #0
 801af30:	2200      	movs	r2, #0
 801af32:	f7fd fe55 	bl	8018be0 <xQueueGenericSend>
 801af36:	6278      	str	r0, [r7, #36]	; 0x24
 801af38:	e008      	b.n	801af4c <xTimerGenericCommand+0x8c>
 801af3a:	4b07      	ldr	r3, [pc, #28]	; (801af58 <xTimerGenericCommand+0x98>)
 801af3c:	6818      	ldr	r0, [r3, #0]
 801af3e:	f107 0114 	add.w	r1, r7, #20
 801af42:	2300      	movs	r3, #0
 801af44:	683a      	ldr	r2, [r7, #0]
 801af46:	f7fd ff49 	bl	8018ddc <xQueueGenericSendFromISR>
 801af4a:	6278      	str	r0, [r7, #36]	; 0x24
 801af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af4e:	4618      	mov	r0, r3
 801af50:	3728      	adds	r7, #40	; 0x28
 801af52:	46bd      	mov	sp, r7
 801af54:	bd80      	pop	{r7, pc}
 801af56:	bf00      	nop
 801af58:	20004784 	.word	0x20004784

0801af5c <prvProcessExpiredTimer>:
 801af5c:	b580      	push	{r7, lr}
 801af5e:	b088      	sub	sp, #32
 801af60:	af02      	add	r7, sp, #8
 801af62:	6078      	str	r0, [r7, #4]
 801af64:	6039      	str	r1, [r7, #0]
 801af66:	4b22      	ldr	r3, [pc, #136]	; (801aff0 <prvProcessExpiredTimer+0x94>)
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	68db      	ldr	r3, [r3, #12]
 801af6c:	68db      	ldr	r3, [r3, #12]
 801af6e:	617b      	str	r3, [r7, #20]
 801af70:	697b      	ldr	r3, [r7, #20]
 801af72:	3304      	adds	r3, #4
 801af74:	4618      	mov	r0, r3
 801af76:	f7fd fcce 	bl	8018916 <uxListRemove>
 801af7a:	697b      	ldr	r3, [r7, #20]
 801af7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801af80:	f003 0304 	and.w	r3, r3, #4
 801af84:	2b00      	cmp	r3, #0
 801af86:	d022      	beq.n	801afce <prvProcessExpiredTimer+0x72>
 801af88:	697b      	ldr	r3, [r7, #20]
 801af8a:	699a      	ldr	r2, [r3, #24]
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	18d1      	adds	r1, r2, r3
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	683a      	ldr	r2, [r7, #0]
 801af94:	6978      	ldr	r0, [r7, #20]
 801af96:	f000 f8d1 	bl	801b13c <prvInsertTimerInActiveList>
 801af9a:	4603      	mov	r3, r0
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d01f      	beq.n	801afe0 <prvProcessExpiredTimer+0x84>
 801afa0:	2300      	movs	r3, #0
 801afa2:	9300      	str	r3, [sp, #0]
 801afa4:	2300      	movs	r3, #0
 801afa6:	687a      	ldr	r2, [r7, #4]
 801afa8:	2100      	movs	r1, #0
 801afaa:	6978      	ldr	r0, [r7, #20]
 801afac:	f7ff ff88 	bl	801aec0 <xTimerGenericCommand>
 801afb0:	6138      	str	r0, [r7, #16]
 801afb2:	693b      	ldr	r3, [r7, #16]
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d113      	bne.n	801afe0 <prvProcessExpiredTimer+0x84>
 801afb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afbc:	f383 8811 	msr	BASEPRI, r3
 801afc0:	f3bf 8f6f 	isb	sy
 801afc4:	f3bf 8f4f 	dsb	sy
 801afc8:	60fb      	str	r3, [r7, #12]
 801afca:	bf00      	nop
 801afcc:	e7fe      	b.n	801afcc <prvProcessExpiredTimer+0x70>
 801afce:	697b      	ldr	r3, [r7, #20]
 801afd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801afd4:	f023 0301 	bic.w	r3, r3, #1
 801afd8:	b2da      	uxtb	r2, r3
 801afda:	697b      	ldr	r3, [r7, #20]
 801afdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801afe0:	697b      	ldr	r3, [r7, #20]
 801afe2:	6a1b      	ldr	r3, [r3, #32]
 801afe4:	6978      	ldr	r0, [r7, #20]
 801afe6:	4798      	blx	r3
 801afe8:	bf00      	nop
 801afea:	3718      	adds	r7, #24
 801afec:	46bd      	mov	sp, r7
 801afee:	bd80      	pop	{r7, pc}
 801aff0:	2000477c 	.word	0x2000477c

0801aff4 <prvTimerTask>:
 801aff4:	b580      	push	{r7, lr}
 801aff6:	b084      	sub	sp, #16
 801aff8:	af00      	add	r7, sp, #0
 801affa:	6078      	str	r0, [r7, #4]
 801affc:	f107 0308 	add.w	r3, r7, #8
 801b000:	4618      	mov	r0, r3
 801b002:	f000 f857 	bl	801b0b4 <prvGetNextExpireTime>
 801b006:	60f8      	str	r0, [r7, #12]
 801b008:	68bb      	ldr	r3, [r7, #8]
 801b00a:	4619      	mov	r1, r3
 801b00c:	68f8      	ldr	r0, [r7, #12]
 801b00e:	f000 f803 	bl	801b018 <prvProcessTimerOrBlockTask>
 801b012:	f000 f8d5 	bl	801b1c0 <prvProcessReceivedCommands>
 801b016:	e7f1      	b.n	801affc <prvTimerTask+0x8>

0801b018 <prvProcessTimerOrBlockTask>:
 801b018:	b580      	push	{r7, lr}
 801b01a:	b084      	sub	sp, #16
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	6078      	str	r0, [r7, #4]
 801b020:	6039      	str	r1, [r7, #0]
 801b022:	f7fe fe91 	bl	8019d48 <vTaskSuspendAll>
 801b026:	f107 0308 	add.w	r3, r7, #8
 801b02a:	4618      	mov	r0, r3
 801b02c:	f000 f866 	bl	801b0fc <prvSampleTimeNow>
 801b030:	60f8      	str	r0, [r7, #12]
 801b032:	68bb      	ldr	r3, [r7, #8]
 801b034:	2b00      	cmp	r3, #0
 801b036:	d130      	bne.n	801b09a <prvProcessTimerOrBlockTask+0x82>
 801b038:	683b      	ldr	r3, [r7, #0]
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d10a      	bne.n	801b054 <prvProcessTimerOrBlockTask+0x3c>
 801b03e:	687a      	ldr	r2, [r7, #4]
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	429a      	cmp	r2, r3
 801b044:	d806      	bhi.n	801b054 <prvProcessTimerOrBlockTask+0x3c>
 801b046:	f7fe fe8d 	bl	8019d64 <xTaskResumeAll>
 801b04a:	68f9      	ldr	r1, [r7, #12]
 801b04c:	6878      	ldr	r0, [r7, #4]
 801b04e:	f7ff ff85 	bl	801af5c <prvProcessExpiredTimer>
 801b052:	e024      	b.n	801b09e <prvProcessTimerOrBlockTask+0x86>
 801b054:	683b      	ldr	r3, [r7, #0]
 801b056:	2b00      	cmp	r3, #0
 801b058:	d008      	beq.n	801b06c <prvProcessTimerOrBlockTask+0x54>
 801b05a:	4b13      	ldr	r3, [pc, #76]	; (801b0a8 <prvProcessTimerOrBlockTask+0x90>)
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	2b00      	cmp	r3, #0
 801b062:	d101      	bne.n	801b068 <prvProcessTimerOrBlockTask+0x50>
 801b064:	2301      	movs	r3, #1
 801b066:	e000      	b.n	801b06a <prvProcessTimerOrBlockTask+0x52>
 801b068:	2300      	movs	r3, #0
 801b06a:	603b      	str	r3, [r7, #0]
 801b06c:	4b0f      	ldr	r3, [pc, #60]	; (801b0ac <prvProcessTimerOrBlockTask+0x94>)
 801b06e:	6818      	ldr	r0, [r3, #0]
 801b070:	687a      	ldr	r2, [r7, #4]
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	1ad3      	subs	r3, r2, r3
 801b076:	683a      	ldr	r2, [r7, #0]
 801b078:	4619      	mov	r1, r3
 801b07a:	f7fe fbe3 	bl	8019844 <vQueueWaitForMessageRestricted>
 801b07e:	f7fe fe71 	bl	8019d64 <xTaskResumeAll>
 801b082:	4603      	mov	r3, r0
 801b084:	2b00      	cmp	r3, #0
 801b086:	d10a      	bne.n	801b09e <prvProcessTimerOrBlockTask+0x86>
 801b088:	4b09      	ldr	r3, [pc, #36]	; (801b0b0 <prvProcessTimerOrBlockTask+0x98>)
 801b08a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b08e:	601a      	str	r2, [r3, #0]
 801b090:	f3bf 8f4f 	dsb	sy
 801b094:	f3bf 8f6f 	isb	sy
 801b098:	e001      	b.n	801b09e <prvProcessTimerOrBlockTask+0x86>
 801b09a:	f7fe fe63 	bl	8019d64 <xTaskResumeAll>
 801b09e:	bf00      	nop
 801b0a0:	3710      	adds	r7, #16
 801b0a2:	46bd      	mov	sp, r7
 801b0a4:	bd80      	pop	{r7, pc}
 801b0a6:	bf00      	nop
 801b0a8:	20004780 	.word	0x20004780
 801b0ac:	20004784 	.word	0x20004784
 801b0b0:	e000ed04 	.word	0xe000ed04

0801b0b4 <prvGetNextExpireTime>:
 801b0b4:	b480      	push	{r7}
 801b0b6:	b085      	sub	sp, #20
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	6078      	str	r0, [r7, #4]
 801b0bc:	4b0e      	ldr	r3, [pc, #56]	; (801b0f8 <prvGetNextExpireTime+0x44>)
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d101      	bne.n	801b0ca <prvGetNextExpireTime+0x16>
 801b0c6:	2201      	movs	r2, #1
 801b0c8:	e000      	b.n	801b0cc <prvGetNextExpireTime+0x18>
 801b0ca:	2200      	movs	r2, #0
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	601a      	str	r2, [r3, #0]
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d105      	bne.n	801b0e4 <prvGetNextExpireTime+0x30>
 801b0d8:	4b07      	ldr	r3, [pc, #28]	; (801b0f8 <prvGetNextExpireTime+0x44>)
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	68db      	ldr	r3, [r3, #12]
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	60fb      	str	r3, [r7, #12]
 801b0e2:	e001      	b.n	801b0e8 <prvGetNextExpireTime+0x34>
 801b0e4:	2300      	movs	r3, #0
 801b0e6:	60fb      	str	r3, [r7, #12]
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	4618      	mov	r0, r3
 801b0ec:	3714      	adds	r7, #20
 801b0ee:	46bd      	mov	sp, r7
 801b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0f4:	4770      	bx	lr
 801b0f6:	bf00      	nop
 801b0f8:	2000477c 	.word	0x2000477c

0801b0fc <prvSampleTimeNow>:
 801b0fc:	b580      	push	{r7, lr}
 801b0fe:	b084      	sub	sp, #16
 801b100:	af00      	add	r7, sp, #0
 801b102:	6078      	str	r0, [r7, #4]
 801b104:	f7fe feca 	bl	8019e9c <xTaskGetTickCount>
 801b108:	60f8      	str	r0, [r7, #12]
 801b10a:	4b0b      	ldr	r3, [pc, #44]	; (801b138 <prvSampleTimeNow+0x3c>)
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	68fa      	ldr	r2, [r7, #12]
 801b110:	429a      	cmp	r2, r3
 801b112:	d205      	bcs.n	801b120 <prvSampleTimeNow+0x24>
 801b114:	f000 f91a 	bl	801b34c <prvSwitchTimerLists>
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	2201      	movs	r2, #1
 801b11c:	601a      	str	r2, [r3, #0]
 801b11e:	e002      	b.n	801b126 <prvSampleTimeNow+0x2a>
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	2200      	movs	r2, #0
 801b124:	601a      	str	r2, [r3, #0]
 801b126:	4a04      	ldr	r2, [pc, #16]	; (801b138 <prvSampleTimeNow+0x3c>)
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	6013      	str	r3, [r2, #0]
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	4618      	mov	r0, r3
 801b130:	3710      	adds	r7, #16
 801b132:	46bd      	mov	sp, r7
 801b134:	bd80      	pop	{r7, pc}
 801b136:	bf00      	nop
 801b138:	2000478c 	.word	0x2000478c

0801b13c <prvInsertTimerInActiveList>:
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b086      	sub	sp, #24
 801b140:	af00      	add	r7, sp, #0
 801b142:	60f8      	str	r0, [r7, #12]
 801b144:	60b9      	str	r1, [r7, #8]
 801b146:	607a      	str	r2, [r7, #4]
 801b148:	603b      	str	r3, [r7, #0]
 801b14a:	2300      	movs	r3, #0
 801b14c:	617b      	str	r3, [r7, #20]
 801b14e:	68fb      	ldr	r3, [r7, #12]
 801b150:	68ba      	ldr	r2, [r7, #8]
 801b152:	605a      	str	r2, [r3, #4]
 801b154:	68fb      	ldr	r3, [r7, #12]
 801b156:	68fa      	ldr	r2, [r7, #12]
 801b158:	611a      	str	r2, [r3, #16]
 801b15a:	68ba      	ldr	r2, [r7, #8]
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	429a      	cmp	r2, r3
 801b160:	d812      	bhi.n	801b188 <prvInsertTimerInActiveList+0x4c>
 801b162:	687a      	ldr	r2, [r7, #4]
 801b164:	683b      	ldr	r3, [r7, #0]
 801b166:	1ad2      	subs	r2, r2, r3
 801b168:	68fb      	ldr	r3, [r7, #12]
 801b16a:	699b      	ldr	r3, [r3, #24]
 801b16c:	429a      	cmp	r2, r3
 801b16e:	d302      	bcc.n	801b176 <prvInsertTimerInActiveList+0x3a>
 801b170:	2301      	movs	r3, #1
 801b172:	617b      	str	r3, [r7, #20]
 801b174:	e01b      	b.n	801b1ae <prvInsertTimerInActiveList+0x72>
 801b176:	4b10      	ldr	r3, [pc, #64]	; (801b1b8 <prvInsertTimerInActiveList+0x7c>)
 801b178:	681a      	ldr	r2, [r3, #0]
 801b17a:	68fb      	ldr	r3, [r7, #12]
 801b17c:	3304      	adds	r3, #4
 801b17e:	4619      	mov	r1, r3
 801b180:	4610      	mov	r0, r2
 801b182:	f7fd fb8f 	bl	80188a4 <vListInsert>
 801b186:	e012      	b.n	801b1ae <prvInsertTimerInActiveList+0x72>
 801b188:	687a      	ldr	r2, [r7, #4]
 801b18a:	683b      	ldr	r3, [r7, #0]
 801b18c:	429a      	cmp	r2, r3
 801b18e:	d206      	bcs.n	801b19e <prvInsertTimerInActiveList+0x62>
 801b190:	68ba      	ldr	r2, [r7, #8]
 801b192:	683b      	ldr	r3, [r7, #0]
 801b194:	429a      	cmp	r2, r3
 801b196:	d302      	bcc.n	801b19e <prvInsertTimerInActiveList+0x62>
 801b198:	2301      	movs	r3, #1
 801b19a:	617b      	str	r3, [r7, #20]
 801b19c:	e007      	b.n	801b1ae <prvInsertTimerInActiveList+0x72>
 801b19e:	4b07      	ldr	r3, [pc, #28]	; (801b1bc <prvInsertTimerInActiveList+0x80>)
 801b1a0:	681a      	ldr	r2, [r3, #0]
 801b1a2:	68fb      	ldr	r3, [r7, #12]
 801b1a4:	3304      	adds	r3, #4
 801b1a6:	4619      	mov	r1, r3
 801b1a8:	4610      	mov	r0, r2
 801b1aa:	f7fd fb7b 	bl	80188a4 <vListInsert>
 801b1ae:	697b      	ldr	r3, [r7, #20]
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	3718      	adds	r7, #24
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	bd80      	pop	{r7, pc}
 801b1b8:	20004780 	.word	0x20004780
 801b1bc:	2000477c 	.word	0x2000477c

0801b1c0 <prvProcessReceivedCommands>:
 801b1c0:	b580      	push	{r7, lr}
 801b1c2:	b08c      	sub	sp, #48	; 0x30
 801b1c4:	af02      	add	r7, sp, #8
 801b1c6:	e0ae      	b.n	801b326 <prvProcessReceivedCommands+0x166>
 801b1c8:	68bb      	ldr	r3, [r7, #8]
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	f2c0 80ab 	blt.w	801b326 <prvProcessReceivedCommands+0x166>
 801b1d0:	693b      	ldr	r3, [r7, #16]
 801b1d2:	627b      	str	r3, [r7, #36]	; 0x24
 801b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1d6:	695b      	ldr	r3, [r3, #20]
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d004      	beq.n	801b1e6 <prvProcessReceivedCommands+0x26>
 801b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1de:	3304      	adds	r3, #4
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	f7fd fb98 	bl	8018916 <uxListRemove>
 801b1e6:	1d3b      	adds	r3, r7, #4
 801b1e8:	4618      	mov	r0, r3
 801b1ea:	f7ff ff87 	bl	801b0fc <prvSampleTimeNow>
 801b1ee:	6238      	str	r0, [r7, #32]
 801b1f0:	68bb      	ldr	r3, [r7, #8]
 801b1f2:	2b09      	cmp	r3, #9
 801b1f4:	f200 8096 	bhi.w	801b324 <prvProcessReceivedCommands+0x164>
 801b1f8:	a201      	add	r2, pc, #4	; (adr r2, 801b200 <prvProcessReceivedCommands+0x40>)
 801b1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b1fe:	bf00      	nop
 801b200:	0801b229 	.word	0x0801b229
 801b204:	0801b229 	.word	0x0801b229
 801b208:	0801b229 	.word	0x0801b229
 801b20c:	0801b29d 	.word	0x0801b29d
 801b210:	0801b2b1 	.word	0x0801b2b1
 801b214:	0801b2fb 	.word	0x0801b2fb
 801b218:	0801b229 	.word	0x0801b229
 801b21c:	0801b229 	.word	0x0801b229
 801b220:	0801b29d 	.word	0x0801b29d
 801b224:	0801b2b1 	.word	0x0801b2b1
 801b228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b22a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b22e:	f043 0301 	orr.w	r3, r3, #1
 801b232:	b2da      	uxtb	r2, r3
 801b234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801b23a:	68fa      	ldr	r2, [r7, #12]
 801b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b23e:	699b      	ldr	r3, [r3, #24]
 801b240:	18d1      	adds	r1, r2, r3
 801b242:	68fb      	ldr	r3, [r7, #12]
 801b244:	6a3a      	ldr	r2, [r7, #32]
 801b246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b248:	f7ff ff78 	bl	801b13c <prvInsertTimerInActiveList>
 801b24c:	4603      	mov	r3, r0
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d069      	beq.n	801b326 <prvProcessReceivedCommands+0x166>
 801b252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b254:	6a1b      	ldr	r3, [r3, #32]
 801b256:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b258:	4798      	blx	r3
 801b25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b25c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b260:	f003 0304 	and.w	r3, r3, #4
 801b264:	2b00      	cmp	r3, #0
 801b266:	d05e      	beq.n	801b326 <prvProcessReceivedCommands+0x166>
 801b268:	68fa      	ldr	r2, [r7, #12]
 801b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b26c:	699b      	ldr	r3, [r3, #24]
 801b26e:	441a      	add	r2, r3
 801b270:	2300      	movs	r3, #0
 801b272:	9300      	str	r3, [sp, #0]
 801b274:	2300      	movs	r3, #0
 801b276:	2100      	movs	r1, #0
 801b278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b27a:	f7ff fe21 	bl	801aec0 <xTimerGenericCommand>
 801b27e:	61f8      	str	r0, [r7, #28]
 801b280:	69fb      	ldr	r3, [r7, #28]
 801b282:	2b00      	cmp	r3, #0
 801b284:	d14f      	bne.n	801b326 <prvProcessReceivedCommands+0x166>
 801b286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b28a:	f383 8811 	msr	BASEPRI, r3
 801b28e:	f3bf 8f6f 	isb	sy
 801b292:	f3bf 8f4f 	dsb	sy
 801b296:	61bb      	str	r3, [r7, #24]
 801b298:	bf00      	nop
 801b29a:	e7fe      	b.n	801b29a <prvProcessReceivedCommands+0xda>
 801b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b29e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b2a2:	f023 0301 	bic.w	r3, r3, #1
 801b2a6:	b2da      	uxtb	r2, r3
 801b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801b2ae:	e03a      	b.n	801b326 <prvProcessReceivedCommands+0x166>
 801b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b2b6:	f043 0301 	orr.w	r3, r3, #1
 801b2ba:	b2da      	uxtb	r2, r3
 801b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801b2c2:	68fa      	ldr	r2, [r7, #12]
 801b2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2c6:	619a      	str	r2, [r3, #24]
 801b2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2ca:	699b      	ldr	r3, [r3, #24]
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d10a      	bne.n	801b2e6 <prvProcessReceivedCommands+0x126>
 801b2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b2d4:	f383 8811 	msr	BASEPRI, r3
 801b2d8:	f3bf 8f6f 	isb	sy
 801b2dc:	f3bf 8f4f 	dsb	sy
 801b2e0:	617b      	str	r3, [r7, #20]
 801b2e2:	bf00      	nop
 801b2e4:	e7fe      	b.n	801b2e4 <prvProcessReceivedCommands+0x124>
 801b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2e8:	699a      	ldr	r2, [r3, #24]
 801b2ea:	6a3b      	ldr	r3, [r7, #32]
 801b2ec:	18d1      	adds	r1, r2, r3
 801b2ee:	6a3b      	ldr	r3, [r7, #32]
 801b2f0:	6a3a      	ldr	r2, [r7, #32]
 801b2f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b2f4:	f7ff ff22 	bl	801b13c <prvInsertTimerInActiveList>
 801b2f8:	e015      	b.n	801b326 <prvProcessReceivedCommands+0x166>
 801b2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b300:	f003 0302 	and.w	r3, r3, #2
 801b304:	2b00      	cmp	r3, #0
 801b306:	d103      	bne.n	801b310 <prvProcessReceivedCommands+0x150>
 801b308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b30a:	f000 fbe1 	bl	801bad0 <vPortFree>
 801b30e:	e00a      	b.n	801b326 <prvProcessReceivedCommands+0x166>
 801b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b312:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b316:	f023 0301 	bic.w	r3, r3, #1
 801b31a:	b2da      	uxtb	r2, r3
 801b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b31e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801b322:	e000      	b.n	801b326 <prvProcessReceivedCommands+0x166>
 801b324:	bf00      	nop
 801b326:	4b08      	ldr	r3, [pc, #32]	; (801b348 <prvProcessReceivedCommands+0x188>)
 801b328:	681b      	ldr	r3, [r3, #0]
 801b32a:	f107 0108 	add.w	r1, r7, #8
 801b32e:	2200      	movs	r2, #0
 801b330:	4618      	mov	r0, r3
 801b332:	f7fd fe7b 	bl	801902c <xQueueReceive>
 801b336:	4603      	mov	r3, r0
 801b338:	2b00      	cmp	r3, #0
 801b33a:	f47f af45 	bne.w	801b1c8 <prvProcessReceivedCommands+0x8>
 801b33e:	bf00      	nop
 801b340:	bf00      	nop
 801b342:	3728      	adds	r7, #40	; 0x28
 801b344:	46bd      	mov	sp, r7
 801b346:	bd80      	pop	{r7, pc}
 801b348:	20004784 	.word	0x20004784

0801b34c <prvSwitchTimerLists>:
 801b34c:	b580      	push	{r7, lr}
 801b34e:	b088      	sub	sp, #32
 801b350:	af02      	add	r7, sp, #8
 801b352:	e048      	b.n	801b3e6 <prvSwitchTimerLists+0x9a>
 801b354:	4b2d      	ldr	r3, [pc, #180]	; (801b40c <prvSwitchTimerLists+0xc0>)
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	68db      	ldr	r3, [r3, #12]
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	613b      	str	r3, [r7, #16]
 801b35e:	4b2b      	ldr	r3, [pc, #172]	; (801b40c <prvSwitchTimerLists+0xc0>)
 801b360:	681b      	ldr	r3, [r3, #0]
 801b362:	68db      	ldr	r3, [r3, #12]
 801b364:	68db      	ldr	r3, [r3, #12]
 801b366:	60fb      	str	r3, [r7, #12]
 801b368:	68fb      	ldr	r3, [r7, #12]
 801b36a:	3304      	adds	r3, #4
 801b36c:	4618      	mov	r0, r3
 801b36e:	f7fd fad2 	bl	8018916 <uxListRemove>
 801b372:	68fb      	ldr	r3, [r7, #12]
 801b374:	6a1b      	ldr	r3, [r3, #32]
 801b376:	68f8      	ldr	r0, [r7, #12]
 801b378:	4798      	blx	r3
 801b37a:	68fb      	ldr	r3, [r7, #12]
 801b37c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b380:	f003 0304 	and.w	r3, r3, #4
 801b384:	2b00      	cmp	r3, #0
 801b386:	d02e      	beq.n	801b3e6 <prvSwitchTimerLists+0x9a>
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	699b      	ldr	r3, [r3, #24]
 801b38c:	693a      	ldr	r2, [r7, #16]
 801b38e:	4413      	add	r3, r2
 801b390:	60bb      	str	r3, [r7, #8]
 801b392:	68ba      	ldr	r2, [r7, #8]
 801b394:	693b      	ldr	r3, [r7, #16]
 801b396:	429a      	cmp	r2, r3
 801b398:	d90e      	bls.n	801b3b8 <prvSwitchTimerLists+0x6c>
 801b39a:	68fb      	ldr	r3, [r7, #12]
 801b39c:	68ba      	ldr	r2, [r7, #8]
 801b39e:	605a      	str	r2, [r3, #4]
 801b3a0:	68fb      	ldr	r3, [r7, #12]
 801b3a2:	68fa      	ldr	r2, [r7, #12]
 801b3a4:	611a      	str	r2, [r3, #16]
 801b3a6:	4b19      	ldr	r3, [pc, #100]	; (801b40c <prvSwitchTimerLists+0xc0>)
 801b3a8:	681a      	ldr	r2, [r3, #0]
 801b3aa:	68fb      	ldr	r3, [r7, #12]
 801b3ac:	3304      	adds	r3, #4
 801b3ae:	4619      	mov	r1, r3
 801b3b0:	4610      	mov	r0, r2
 801b3b2:	f7fd fa77 	bl	80188a4 <vListInsert>
 801b3b6:	e016      	b.n	801b3e6 <prvSwitchTimerLists+0x9a>
 801b3b8:	2300      	movs	r3, #0
 801b3ba:	9300      	str	r3, [sp, #0]
 801b3bc:	2300      	movs	r3, #0
 801b3be:	693a      	ldr	r2, [r7, #16]
 801b3c0:	2100      	movs	r1, #0
 801b3c2:	68f8      	ldr	r0, [r7, #12]
 801b3c4:	f7ff fd7c 	bl	801aec0 <xTimerGenericCommand>
 801b3c8:	6078      	str	r0, [r7, #4]
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d10a      	bne.n	801b3e6 <prvSwitchTimerLists+0x9a>
 801b3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b3d4:	f383 8811 	msr	BASEPRI, r3
 801b3d8:	f3bf 8f6f 	isb	sy
 801b3dc:	f3bf 8f4f 	dsb	sy
 801b3e0:	603b      	str	r3, [r7, #0]
 801b3e2:	bf00      	nop
 801b3e4:	e7fe      	b.n	801b3e4 <prvSwitchTimerLists+0x98>
 801b3e6:	4b09      	ldr	r3, [pc, #36]	; (801b40c <prvSwitchTimerLists+0xc0>)
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	d1b1      	bne.n	801b354 <prvSwitchTimerLists+0x8>
 801b3f0:	4b06      	ldr	r3, [pc, #24]	; (801b40c <prvSwitchTimerLists+0xc0>)
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	617b      	str	r3, [r7, #20]
 801b3f6:	4b06      	ldr	r3, [pc, #24]	; (801b410 <prvSwitchTimerLists+0xc4>)
 801b3f8:	681b      	ldr	r3, [r3, #0]
 801b3fa:	4a04      	ldr	r2, [pc, #16]	; (801b40c <prvSwitchTimerLists+0xc0>)
 801b3fc:	6013      	str	r3, [r2, #0]
 801b3fe:	4a04      	ldr	r2, [pc, #16]	; (801b410 <prvSwitchTimerLists+0xc4>)
 801b400:	697b      	ldr	r3, [r7, #20]
 801b402:	6013      	str	r3, [r2, #0]
 801b404:	bf00      	nop
 801b406:	3718      	adds	r7, #24
 801b408:	46bd      	mov	sp, r7
 801b40a:	bd80      	pop	{r7, pc}
 801b40c:	2000477c 	.word	0x2000477c
 801b410:	20004780 	.word	0x20004780

0801b414 <prvCheckForValidListAndQueue>:
 801b414:	b580      	push	{r7, lr}
 801b416:	b082      	sub	sp, #8
 801b418:	af02      	add	r7, sp, #8
 801b41a:	f000 f96b 	bl	801b6f4 <vPortEnterCritical>
 801b41e:	4b15      	ldr	r3, [pc, #84]	; (801b474 <prvCheckForValidListAndQueue+0x60>)
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	2b00      	cmp	r3, #0
 801b424:	d120      	bne.n	801b468 <prvCheckForValidListAndQueue+0x54>
 801b426:	4814      	ldr	r0, [pc, #80]	; (801b478 <prvCheckForValidListAndQueue+0x64>)
 801b428:	f7fd f9eb 	bl	8018802 <vListInitialise>
 801b42c:	4813      	ldr	r0, [pc, #76]	; (801b47c <prvCheckForValidListAndQueue+0x68>)
 801b42e:	f7fd f9e8 	bl	8018802 <vListInitialise>
 801b432:	4b13      	ldr	r3, [pc, #76]	; (801b480 <prvCheckForValidListAndQueue+0x6c>)
 801b434:	4a10      	ldr	r2, [pc, #64]	; (801b478 <prvCheckForValidListAndQueue+0x64>)
 801b436:	601a      	str	r2, [r3, #0]
 801b438:	4b12      	ldr	r3, [pc, #72]	; (801b484 <prvCheckForValidListAndQueue+0x70>)
 801b43a:	4a10      	ldr	r2, [pc, #64]	; (801b47c <prvCheckForValidListAndQueue+0x68>)
 801b43c:	601a      	str	r2, [r3, #0]
 801b43e:	2300      	movs	r3, #0
 801b440:	9300      	str	r3, [sp, #0]
 801b442:	4b11      	ldr	r3, [pc, #68]	; (801b488 <prvCheckForValidListAndQueue+0x74>)
 801b444:	4a11      	ldr	r2, [pc, #68]	; (801b48c <prvCheckForValidListAndQueue+0x78>)
 801b446:	210c      	movs	r1, #12
 801b448:	200a      	movs	r0, #10
 801b44a:	f7fd faf7 	bl	8018a3c <xQueueGenericCreateStatic>
 801b44e:	4603      	mov	r3, r0
 801b450:	4a08      	ldr	r2, [pc, #32]	; (801b474 <prvCheckForValidListAndQueue+0x60>)
 801b452:	6013      	str	r3, [r2, #0]
 801b454:	4b07      	ldr	r3, [pc, #28]	; (801b474 <prvCheckForValidListAndQueue+0x60>)
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	2b00      	cmp	r3, #0
 801b45a:	d005      	beq.n	801b468 <prvCheckForValidListAndQueue+0x54>
 801b45c:	4b05      	ldr	r3, [pc, #20]	; (801b474 <prvCheckForValidListAndQueue+0x60>)
 801b45e:	681b      	ldr	r3, [r3, #0]
 801b460:	490b      	ldr	r1, [pc, #44]	; (801b490 <prvCheckForValidListAndQueue+0x7c>)
 801b462:	4618      	mov	r0, r3
 801b464:	f7fe f99a 	bl	801979c <vQueueAddToRegistry>
 801b468:	f000 f974 	bl	801b754 <vPortExitCritical>
 801b46c:	bf00      	nop
 801b46e:	46bd      	mov	sp, r7
 801b470:	bd80      	pop	{r7, pc}
 801b472:	bf00      	nop
 801b474:	20004784 	.word	0x20004784
 801b478:	20004754 	.word	0x20004754
 801b47c:	20004768 	.word	0x20004768
 801b480:	2000477c 	.word	0x2000477c
 801b484:	20004780 	.word	0x20004780
 801b488:	20004808 	.word	0x20004808
 801b48c:	20004790 	.word	0x20004790
 801b490:	08022284 	.word	0x08022284

0801b494 <pxPortInitialiseStack>:
 801b494:	b480      	push	{r7}
 801b496:	b085      	sub	sp, #20
 801b498:	af00      	add	r7, sp, #0
 801b49a:	60f8      	str	r0, [r7, #12]
 801b49c:	60b9      	str	r1, [r7, #8]
 801b49e:	607a      	str	r2, [r7, #4]
 801b4a0:	68fb      	ldr	r3, [r7, #12]
 801b4a2:	3b04      	subs	r3, #4
 801b4a4:	60fb      	str	r3, [r7, #12]
 801b4a6:	68fb      	ldr	r3, [r7, #12]
 801b4a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801b4ac:	601a      	str	r2, [r3, #0]
 801b4ae:	68fb      	ldr	r3, [r7, #12]
 801b4b0:	3b04      	subs	r3, #4
 801b4b2:	60fb      	str	r3, [r7, #12]
 801b4b4:	68bb      	ldr	r3, [r7, #8]
 801b4b6:	f023 0201 	bic.w	r2, r3, #1
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	601a      	str	r2, [r3, #0]
 801b4be:	68fb      	ldr	r3, [r7, #12]
 801b4c0:	3b04      	subs	r3, #4
 801b4c2:	60fb      	str	r3, [r7, #12]
 801b4c4:	4a0c      	ldr	r2, [pc, #48]	; (801b4f8 <pxPortInitialiseStack+0x64>)
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	601a      	str	r2, [r3, #0]
 801b4ca:	68fb      	ldr	r3, [r7, #12]
 801b4cc:	3b14      	subs	r3, #20
 801b4ce:	60fb      	str	r3, [r7, #12]
 801b4d0:	687a      	ldr	r2, [r7, #4]
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	601a      	str	r2, [r3, #0]
 801b4d6:	68fb      	ldr	r3, [r7, #12]
 801b4d8:	3b04      	subs	r3, #4
 801b4da:	60fb      	str	r3, [r7, #12]
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	f06f 0202 	mvn.w	r2, #2
 801b4e2:	601a      	str	r2, [r3, #0]
 801b4e4:	68fb      	ldr	r3, [r7, #12]
 801b4e6:	3b20      	subs	r3, #32
 801b4e8:	60fb      	str	r3, [r7, #12]
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	3714      	adds	r7, #20
 801b4f0:	46bd      	mov	sp, r7
 801b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f6:	4770      	bx	lr
 801b4f8:	0801b4fd 	.word	0x0801b4fd

0801b4fc <prvTaskExitError>:
 801b4fc:	b480      	push	{r7}
 801b4fe:	b085      	sub	sp, #20
 801b500:	af00      	add	r7, sp, #0
 801b502:	2300      	movs	r3, #0
 801b504:	607b      	str	r3, [r7, #4]
 801b506:	4b12      	ldr	r3, [pc, #72]	; (801b550 <prvTaskExitError+0x54>)
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b50e:	d00a      	beq.n	801b526 <prvTaskExitError+0x2a>
 801b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b514:	f383 8811 	msr	BASEPRI, r3
 801b518:	f3bf 8f6f 	isb	sy
 801b51c:	f3bf 8f4f 	dsb	sy
 801b520:	60fb      	str	r3, [r7, #12]
 801b522:	bf00      	nop
 801b524:	e7fe      	b.n	801b524 <prvTaskExitError+0x28>
 801b526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b52a:	f383 8811 	msr	BASEPRI, r3
 801b52e:	f3bf 8f6f 	isb	sy
 801b532:	f3bf 8f4f 	dsb	sy
 801b536:	60bb      	str	r3, [r7, #8]
 801b538:	bf00      	nop
 801b53a:	bf00      	nop
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	2b00      	cmp	r3, #0
 801b540:	d0fc      	beq.n	801b53c <prvTaskExitError+0x40>
 801b542:	bf00      	nop
 801b544:	bf00      	nop
 801b546:	3714      	adds	r7, #20
 801b548:	46bd      	mov	sp, r7
 801b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b54e:	4770      	bx	lr
 801b550:	200000c4 	.word	0x200000c4
	...

0801b560 <SVC_Handler>:
 801b560:	4b07      	ldr	r3, [pc, #28]	; (801b580 <pxCurrentTCBConst2>)
 801b562:	6819      	ldr	r1, [r3, #0]
 801b564:	6808      	ldr	r0, [r1, #0]
 801b566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b56a:	f380 8809 	msr	PSP, r0
 801b56e:	f3bf 8f6f 	isb	sy
 801b572:	f04f 0000 	mov.w	r0, #0
 801b576:	f380 8811 	msr	BASEPRI, r0
 801b57a:	4770      	bx	lr
 801b57c:	f3af 8000 	nop.w

0801b580 <pxCurrentTCBConst2>:
 801b580:	20004628 	.word	0x20004628
 801b584:	bf00      	nop
 801b586:	bf00      	nop

0801b588 <prvPortStartFirstTask>:
 801b588:	4808      	ldr	r0, [pc, #32]	; (801b5ac <prvPortStartFirstTask+0x24>)
 801b58a:	6800      	ldr	r0, [r0, #0]
 801b58c:	6800      	ldr	r0, [r0, #0]
 801b58e:	f380 8808 	msr	MSP, r0
 801b592:	f04f 0000 	mov.w	r0, #0
 801b596:	f380 8814 	msr	CONTROL, r0
 801b59a:	b662      	cpsie	i
 801b59c:	b661      	cpsie	f
 801b59e:	f3bf 8f4f 	dsb	sy
 801b5a2:	f3bf 8f6f 	isb	sy
 801b5a6:	df00      	svc	0
 801b5a8:	bf00      	nop
 801b5aa:	bf00      	nop
 801b5ac:	e000ed08 	.word	0xe000ed08

0801b5b0 <xPortStartScheduler>:
 801b5b0:	b580      	push	{r7, lr}
 801b5b2:	b086      	sub	sp, #24
 801b5b4:	af00      	add	r7, sp, #0
 801b5b6:	4b46      	ldr	r3, [pc, #280]	; (801b6d0 <xPortStartScheduler+0x120>)
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	4a46      	ldr	r2, [pc, #280]	; (801b6d4 <xPortStartScheduler+0x124>)
 801b5bc:	4293      	cmp	r3, r2
 801b5be:	d10a      	bne.n	801b5d6 <xPortStartScheduler+0x26>
 801b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b5c4:	f383 8811 	msr	BASEPRI, r3
 801b5c8:	f3bf 8f6f 	isb	sy
 801b5cc:	f3bf 8f4f 	dsb	sy
 801b5d0:	613b      	str	r3, [r7, #16]
 801b5d2:	bf00      	nop
 801b5d4:	e7fe      	b.n	801b5d4 <xPortStartScheduler+0x24>
 801b5d6:	4b3e      	ldr	r3, [pc, #248]	; (801b6d0 <xPortStartScheduler+0x120>)
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	4a3f      	ldr	r2, [pc, #252]	; (801b6d8 <xPortStartScheduler+0x128>)
 801b5dc:	4293      	cmp	r3, r2
 801b5de:	d10a      	bne.n	801b5f6 <xPortStartScheduler+0x46>
 801b5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b5e4:	f383 8811 	msr	BASEPRI, r3
 801b5e8:	f3bf 8f6f 	isb	sy
 801b5ec:	f3bf 8f4f 	dsb	sy
 801b5f0:	60fb      	str	r3, [r7, #12]
 801b5f2:	bf00      	nop
 801b5f4:	e7fe      	b.n	801b5f4 <xPortStartScheduler+0x44>
 801b5f6:	4b39      	ldr	r3, [pc, #228]	; (801b6dc <xPortStartScheduler+0x12c>)
 801b5f8:	617b      	str	r3, [r7, #20]
 801b5fa:	697b      	ldr	r3, [r7, #20]
 801b5fc:	781b      	ldrb	r3, [r3, #0]
 801b5fe:	b2db      	uxtb	r3, r3
 801b600:	607b      	str	r3, [r7, #4]
 801b602:	697b      	ldr	r3, [r7, #20]
 801b604:	22ff      	movs	r2, #255	; 0xff
 801b606:	701a      	strb	r2, [r3, #0]
 801b608:	697b      	ldr	r3, [r7, #20]
 801b60a:	781b      	ldrb	r3, [r3, #0]
 801b60c:	b2db      	uxtb	r3, r3
 801b60e:	70fb      	strb	r3, [r7, #3]
 801b610:	78fb      	ldrb	r3, [r7, #3]
 801b612:	b2db      	uxtb	r3, r3
 801b614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b618:	b2da      	uxtb	r2, r3
 801b61a:	4b31      	ldr	r3, [pc, #196]	; (801b6e0 <xPortStartScheduler+0x130>)
 801b61c:	701a      	strb	r2, [r3, #0]
 801b61e:	4b31      	ldr	r3, [pc, #196]	; (801b6e4 <xPortStartScheduler+0x134>)
 801b620:	2207      	movs	r2, #7
 801b622:	601a      	str	r2, [r3, #0]
 801b624:	e009      	b.n	801b63a <xPortStartScheduler+0x8a>
 801b626:	4b2f      	ldr	r3, [pc, #188]	; (801b6e4 <xPortStartScheduler+0x134>)
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	3b01      	subs	r3, #1
 801b62c:	4a2d      	ldr	r2, [pc, #180]	; (801b6e4 <xPortStartScheduler+0x134>)
 801b62e:	6013      	str	r3, [r2, #0]
 801b630:	78fb      	ldrb	r3, [r7, #3]
 801b632:	b2db      	uxtb	r3, r3
 801b634:	005b      	lsls	r3, r3, #1
 801b636:	b2db      	uxtb	r3, r3
 801b638:	70fb      	strb	r3, [r7, #3]
 801b63a:	78fb      	ldrb	r3, [r7, #3]
 801b63c:	b2db      	uxtb	r3, r3
 801b63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b642:	2b80      	cmp	r3, #128	; 0x80
 801b644:	d0ef      	beq.n	801b626 <xPortStartScheduler+0x76>
 801b646:	4b27      	ldr	r3, [pc, #156]	; (801b6e4 <xPortStartScheduler+0x134>)
 801b648:	681b      	ldr	r3, [r3, #0]
 801b64a:	f1c3 0307 	rsb	r3, r3, #7
 801b64e:	2b04      	cmp	r3, #4
 801b650:	d00a      	beq.n	801b668 <xPortStartScheduler+0xb8>
 801b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b656:	f383 8811 	msr	BASEPRI, r3
 801b65a:	f3bf 8f6f 	isb	sy
 801b65e:	f3bf 8f4f 	dsb	sy
 801b662:	60bb      	str	r3, [r7, #8]
 801b664:	bf00      	nop
 801b666:	e7fe      	b.n	801b666 <xPortStartScheduler+0xb6>
 801b668:	4b1e      	ldr	r3, [pc, #120]	; (801b6e4 <xPortStartScheduler+0x134>)
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	021b      	lsls	r3, r3, #8
 801b66e:	4a1d      	ldr	r2, [pc, #116]	; (801b6e4 <xPortStartScheduler+0x134>)
 801b670:	6013      	str	r3, [r2, #0]
 801b672:	4b1c      	ldr	r3, [pc, #112]	; (801b6e4 <xPortStartScheduler+0x134>)
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b67a:	4a1a      	ldr	r2, [pc, #104]	; (801b6e4 <xPortStartScheduler+0x134>)
 801b67c:	6013      	str	r3, [r2, #0]
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	b2da      	uxtb	r2, r3
 801b682:	697b      	ldr	r3, [r7, #20]
 801b684:	701a      	strb	r2, [r3, #0]
 801b686:	4b18      	ldr	r3, [pc, #96]	; (801b6e8 <xPortStartScheduler+0x138>)
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	4a17      	ldr	r2, [pc, #92]	; (801b6e8 <xPortStartScheduler+0x138>)
 801b68c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801b690:	6013      	str	r3, [r2, #0]
 801b692:	4b15      	ldr	r3, [pc, #84]	; (801b6e8 <xPortStartScheduler+0x138>)
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	4a14      	ldr	r2, [pc, #80]	; (801b6e8 <xPortStartScheduler+0x138>)
 801b698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801b69c:	6013      	str	r3, [r2, #0]
 801b69e:	f000 f8dd 	bl	801b85c <vPortSetupTimerInterrupt>
 801b6a2:	4b12      	ldr	r3, [pc, #72]	; (801b6ec <xPortStartScheduler+0x13c>)
 801b6a4:	2200      	movs	r2, #0
 801b6a6:	601a      	str	r2, [r3, #0]
 801b6a8:	f000 f8fc 	bl	801b8a4 <vPortEnableVFP>
 801b6ac:	4b10      	ldr	r3, [pc, #64]	; (801b6f0 <xPortStartScheduler+0x140>)
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	4a0f      	ldr	r2, [pc, #60]	; (801b6f0 <xPortStartScheduler+0x140>)
 801b6b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801b6b6:	6013      	str	r3, [r2, #0]
 801b6b8:	f7ff ff66 	bl	801b588 <prvPortStartFirstTask>
 801b6bc:	f7fe fcb6 	bl	801a02c <vTaskSwitchContext>
 801b6c0:	f7ff ff1c 	bl	801b4fc <prvTaskExitError>
 801b6c4:	2300      	movs	r3, #0
 801b6c6:	4618      	mov	r0, r3
 801b6c8:	3718      	adds	r7, #24
 801b6ca:	46bd      	mov	sp, r7
 801b6cc:	bd80      	pop	{r7, pc}
 801b6ce:	bf00      	nop
 801b6d0:	e000ed00 	.word	0xe000ed00
 801b6d4:	410fc271 	.word	0x410fc271
 801b6d8:	410fc270 	.word	0x410fc270
 801b6dc:	e000e400 	.word	0xe000e400
 801b6e0:	20004850 	.word	0x20004850
 801b6e4:	20004854 	.word	0x20004854
 801b6e8:	e000ed20 	.word	0xe000ed20
 801b6ec:	200000c4 	.word	0x200000c4
 801b6f0:	e000ef34 	.word	0xe000ef34

0801b6f4 <vPortEnterCritical>:
 801b6f4:	b480      	push	{r7}
 801b6f6:	b083      	sub	sp, #12
 801b6f8:	af00      	add	r7, sp, #0
 801b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b6fe:	f383 8811 	msr	BASEPRI, r3
 801b702:	f3bf 8f6f 	isb	sy
 801b706:	f3bf 8f4f 	dsb	sy
 801b70a:	607b      	str	r3, [r7, #4]
 801b70c:	bf00      	nop
 801b70e:	4b0f      	ldr	r3, [pc, #60]	; (801b74c <vPortEnterCritical+0x58>)
 801b710:	681b      	ldr	r3, [r3, #0]
 801b712:	3301      	adds	r3, #1
 801b714:	4a0d      	ldr	r2, [pc, #52]	; (801b74c <vPortEnterCritical+0x58>)
 801b716:	6013      	str	r3, [r2, #0]
 801b718:	4b0c      	ldr	r3, [pc, #48]	; (801b74c <vPortEnterCritical+0x58>)
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	2b01      	cmp	r3, #1
 801b71e:	d10f      	bne.n	801b740 <vPortEnterCritical+0x4c>
 801b720:	4b0b      	ldr	r3, [pc, #44]	; (801b750 <vPortEnterCritical+0x5c>)
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	b2db      	uxtb	r3, r3
 801b726:	2b00      	cmp	r3, #0
 801b728:	d00a      	beq.n	801b740 <vPortEnterCritical+0x4c>
 801b72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b72e:	f383 8811 	msr	BASEPRI, r3
 801b732:	f3bf 8f6f 	isb	sy
 801b736:	f3bf 8f4f 	dsb	sy
 801b73a:	603b      	str	r3, [r7, #0]
 801b73c:	bf00      	nop
 801b73e:	e7fe      	b.n	801b73e <vPortEnterCritical+0x4a>
 801b740:	bf00      	nop
 801b742:	370c      	adds	r7, #12
 801b744:	46bd      	mov	sp, r7
 801b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b74a:	4770      	bx	lr
 801b74c:	200000c4 	.word	0x200000c4
 801b750:	e000ed04 	.word	0xe000ed04

0801b754 <vPortExitCritical>:
 801b754:	b480      	push	{r7}
 801b756:	b083      	sub	sp, #12
 801b758:	af00      	add	r7, sp, #0
 801b75a:	4b12      	ldr	r3, [pc, #72]	; (801b7a4 <vPortExitCritical+0x50>)
 801b75c:	681b      	ldr	r3, [r3, #0]
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d10a      	bne.n	801b778 <vPortExitCritical+0x24>
 801b762:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b766:	f383 8811 	msr	BASEPRI, r3
 801b76a:	f3bf 8f6f 	isb	sy
 801b76e:	f3bf 8f4f 	dsb	sy
 801b772:	607b      	str	r3, [r7, #4]
 801b774:	bf00      	nop
 801b776:	e7fe      	b.n	801b776 <vPortExitCritical+0x22>
 801b778:	4b0a      	ldr	r3, [pc, #40]	; (801b7a4 <vPortExitCritical+0x50>)
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	3b01      	subs	r3, #1
 801b77e:	4a09      	ldr	r2, [pc, #36]	; (801b7a4 <vPortExitCritical+0x50>)
 801b780:	6013      	str	r3, [r2, #0]
 801b782:	4b08      	ldr	r3, [pc, #32]	; (801b7a4 <vPortExitCritical+0x50>)
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	2b00      	cmp	r3, #0
 801b788:	d105      	bne.n	801b796 <vPortExitCritical+0x42>
 801b78a:	2300      	movs	r3, #0
 801b78c:	603b      	str	r3, [r7, #0]
 801b78e:	683b      	ldr	r3, [r7, #0]
 801b790:	f383 8811 	msr	BASEPRI, r3
 801b794:	bf00      	nop
 801b796:	bf00      	nop
 801b798:	370c      	adds	r7, #12
 801b79a:	46bd      	mov	sp, r7
 801b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7a0:	4770      	bx	lr
 801b7a2:	bf00      	nop
 801b7a4:	200000c4 	.word	0x200000c4
	...

0801b7b0 <PendSV_Handler>:
 801b7b0:	f3ef 8009 	mrs	r0, PSP
 801b7b4:	f3bf 8f6f 	isb	sy
 801b7b8:	4b15      	ldr	r3, [pc, #84]	; (801b810 <pxCurrentTCBConst>)
 801b7ba:	681a      	ldr	r2, [r3, #0]
 801b7bc:	f01e 0f10 	tst.w	lr, #16
 801b7c0:	bf08      	it	eq
 801b7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7ca:	6010      	str	r0, [r2, #0]
 801b7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b7d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801b7d4:	f380 8811 	msr	BASEPRI, r0
 801b7d8:	f3bf 8f4f 	dsb	sy
 801b7dc:	f3bf 8f6f 	isb	sy
 801b7e0:	f7fe fc24 	bl	801a02c <vTaskSwitchContext>
 801b7e4:	f04f 0000 	mov.w	r0, #0
 801b7e8:	f380 8811 	msr	BASEPRI, r0
 801b7ec:	bc09      	pop	{r0, r3}
 801b7ee:	6819      	ldr	r1, [r3, #0]
 801b7f0:	6808      	ldr	r0, [r1, #0]
 801b7f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7f6:	f01e 0f10 	tst.w	lr, #16
 801b7fa:	bf08      	it	eq
 801b7fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b800:	f380 8809 	msr	PSP, r0
 801b804:	f3bf 8f6f 	isb	sy
 801b808:	4770      	bx	lr
 801b80a:	bf00      	nop
 801b80c:	f3af 8000 	nop.w

0801b810 <pxCurrentTCBConst>:
 801b810:	20004628 	.word	0x20004628
 801b814:	bf00      	nop
 801b816:	bf00      	nop

0801b818 <SysTick_Handler>:
 801b818:	b580      	push	{r7, lr}
 801b81a:	b082      	sub	sp, #8
 801b81c:	af00      	add	r7, sp, #0
 801b81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b822:	f383 8811 	msr	BASEPRI, r3
 801b826:	f3bf 8f6f 	isb	sy
 801b82a:	f3bf 8f4f 	dsb	sy
 801b82e:	607b      	str	r3, [r7, #4]
 801b830:	bf00      	nop
 801b832:	f7fe fb43 	bl	8019ebc <xTaskIncrementTick>
 801b836:	4603      	mov	r3, r0
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d003      	beq.n	801b844 <SysTick_Handler+0x2c>
 801b83c:	4b06      	ldr	r3, [pc, #24]	; (801b858 <SysTick_Handler+0x40>)
 801b83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b842:	601a      	str	r2, [r3, #0]
 801b844:	2300      	movs	r3, #0
 801b846:	603b      	str	r3, [r7, #0]
 801b848:	683b      	ldr	r3, [r7, #0]
 801b84a:	f383 8811 	msr	BASEPRI, r3
 801b84e:	bf00      	nop
 801b850:	bf00      	nop
 801b852:	3708      	adds	r7, #8
 801b854:	46bd      	mov	sp, r7
 801b856:	bd80      	pop	{r7, pc}
 801b858:	e000ed04 	.word	0xe000ed04

0801b85c <vPortSetupTimerInterrupt>:
 801b85c:	b480      	push	{r7}
 801b85e:	af00      	add	r7, sp, #0
 801b860:	4b0b      	ldr	r3, [pc, #44]	; (801b890 <vPortSetupTimerInterrupt+0x34>)
 801b862:	2200      	movs	r2, #0
 801b864:	601a      	str	r2, [r3, #0]
 801b866:	4b0b      	ldr	r3, [pc, #44]	; (801b894 <vPortSetupTimerInterrupt+0x38>)
 801b868:	2200      	movs	r2, #0
 801b86a:	601a      	str	r2, [r3, #0]
 801b86c:	4b0a      	ldr	r3, [pc, #40]	; (801b898 <vPortSetupTimerInterrupt+0x3c>)
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	4a0a      	ldr	r2, [pc, #40]	; (801b89c <vPortSetupTimerInterrupt+0x40>)
 801b872:	fba2 2303 	umull	r2, r3, r2, r3
 801b876:	099b      	lsrs	r3, r3, #6
 801b878:	4a09      	ldr	r2, [pc, #36]	; (801b8a0 <vPortSetupTimerInterrupt+0x44>)
 801b87a:	3b01      	subs	r3, #1
 801b87c:	6013      	str	r3, [r2, #0]
 801b87e:	4b04      	ldr	r3, [pc, #16]	; (801b890 <vPortSetupTimerInterrupt+0x34>)
 801b880:	2207      	movs	r2, #7
 801b882:	601a      	str	r2, [r3, #0]
 801b884:	bf00      	nop
 801b886:	46bd      	mov	sp, r7
 801b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b88c:	4770      	bx	lr
 801b88e:	bf00      	nop
 801b890:	e000e010 	.word	0xe000e010
 801b894:	e000e018 	.word	0xe000e018
 801b898:	20000018 	.word	0x20000018
 801b89c:	10624dd3 	.word	0x10624dd3
 801b8a0:	e000e014 	.word	0xe000e014

0801b8a4 <vPortEnableVFP>:
 801b8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801b8b4 <vPortEnableVFP+0x10>
 801b8a8:	6801      	ldr	r1, [r0, #0]
 801b8aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b8ae:	6001      	str	r1, [r0, #0]
 801b8b0:	4770      	bx	lr
 801b8b2:	bf00      	nop
 801b8b4:	e000ed88 	.word	0xe000ed88

0801b8b8 <vPortValidateInterruptPriority>:
 801b8b8:	b480      	push	{r7}
 801b8ba:	b085      	sub	sp, #20
 801b8bc:	af00      	add	r7, sp, #0
 801b8be:	f3ef 8305 	mrs	r3, IPSR
 801b8c2:	60fb      	str	r3, [r7, #12]
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	2b0f      	cmp	r3, #15
 801b8c8:	d914      	bls.n	801b8f4 <vPortValidateInterruptPriority+0x3c>
 801b8ca:	4a17      	ldr	r2, [pc, #92]	; (801b928 <vPortValidateInterruptPriority+0x70>)
 801b8cc:	68fb      	ldr	r3, [r7, #12]
 801b8ce:	4413      	add	r3, r2
 801b8d0:	781b      	ldrb	r3, [r3, #0]
 801b8d2:	72fb      	strb	r3, [r7, #11]
 801b8d4:	4b15      	ldr	r3, [pc, #84]	; (801b92c <vPortValidateInterruptPriority+0x74>)
 801b8d6:	781b      	ldrb	r3, [r3, #0]
 801b8d8:	7afa      	ldrb	r2, [r7, #11]
 801b8da:	429a      	cmp	r2, r3
 801b8dc:	d20a      	bcs.n	801b8f4 <vPortValidateInterruptPriority+0x3c>
 801b8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b8e2:	f383 8811 	msr	BASEPRI, r3
 801b8e6:	f3bf 8f6f 	isb	sy
 801b8ea:	f3bf 8f4f 	dsb	sy
 801b8ee:	607b      	str	r3, [r7, #4]
 801b8f0:	bf00      	nop
 801b8f2:	e7fe      	b.n	801b8f2 <vPortValidateInterruptPriority+0x3a>
 801b8f4:	4b0e      	ldr	r3, [pc, #56]	; (801b930 <vPortValidateInterruptPriority+0x78>)
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801b8fc:	4b0d      	ldr	r3, [pc, #52]	; (801b934 <vPortValidateInterruptPriority+0x7c>)
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	429a      	cmp	r2, r3
 801b902:	d90a      	bls.n	801b91a <vPortValidateInterruptPriority+0x62>
 801b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b908:	f383 8811 	msr	BASEPRI, r3
 801b90c:	f3bf 8f6f 	isb	sy
 801b910:	f3bf 8f4f 	dsb	sy
 801b914:	603b      	str	r3, [r7, #0]
 801b916:	bf00      	nop
 801b918:	e7fe      	b.n	801b918 <vPortValidateInterruptPriority+0x60>
 801b91a:	bf00      	nop
 801b91c:	3714      	adds	r7, #20
 801b91e:	46bd      	mov	sp, r7
 801b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b924:	4770      	bx	lr
 801b926:	bf00      	nop
 801b928:	e000e3f0 	.word	0xe000e3f0
 801b92c:	20004850 	.word	0x20004850
 801b930:	e000ed0c 	.word	0xe000ed0c
 801b934:	20004854 	.word	0x20004854

0801b938 <pvPortMalloc>:
 801b938:	b580      	push	{r7, lr}
 801b93a:	b08a      	sub	sp, #40	; 0x28
 801b93c:	af00      	add	r7, sp, #0
 801b93e:	6078      	str	r0, [r7, #4]
 801b940:	2300      	movs	r3, #0
 801b942:	61fb      	str	r3, [r7, #28]
 801b944:	f7fe fa00 	bl	8019d48 <vTaskSuspendAll>
 801b948:	4b5b      	ldr	r3, [pc, #364]	; (801bab8 <pvPortMalloc+0x180>)
 801b94a:	681b      	ldr	r3, [r3, #0]
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d101      	bne.n	801b954 <pvPortMalloc+0x1c>
 801b950:	f000 f920 	bl	801bb94 <prvHeapInit>
 801b954:	4b59      	ldr	r3, [pc, #356]	; (801babc <pvPortMalloc+0x184>)
 801b956:	681a      	ldr	r2, [r3, #0]
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	4013      	ands	r3, r2
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	f040 8093 	bne.w	801ba88 <pvPortMalloc+0x150>
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	2b00      	cmp	r3, #0
 801b966:	d01d      	beq.n	801b9a4 <pvPortMalloc+0x6c>
 801b968:	2208      	movs	r2, #8
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	4413      	add	r3, r2
 801b96e:	607b      	str	r3, [r7, #4]
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	f003 0307 	and.w	r3, r3, #7
 801b976:	2b00      	cmp	r3, #0
 801b978:	d014      	beq.n	801b9a4 <pvPortMalloc+0x6c>
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	f023 0307 	bic.w	r3, r3, #7
 801b980:	3308      	adds	r3, #8
 801b982:	607b      	str	r3, [r7, #4]
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	f003 0307 	and.w	r3, r3, #7
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d00a      	beq.n	801b9a4 <pvPortMalloc+0x6c>
 801b98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b992:	f383 8811 	msr	BASEPRI, r3
 801b996:	f3bf 8f6f 	isb	sy
 801b99a:	f3bf 8f4f 	dsb	sy
 801b99e:	617b      	str	r3, [r7, #20]
 801b9a0:	bf00      	nop
 801b9a2:	e7fe      	b.n	801b9a2 <pvPortMalloc+0x6a>
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d06e      	beq.n	801ba88 <pvPortMalloc+0x150>
 801b9aa:	4b45      	ldr	r3, [pc, #276]	; (801bac0 <pvPortMalloc+0x188>)
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	687a      	ldr	r2, [r7, #4]
 801b9b0:	429a      	cmp	r2, r3
 801b9b2:	d869      	bhi.n	801ba88 <pvPortMalloc+0x150>
 801b9b4:	4b43      	ldr	r3, [pc, #268]	; (801bac4 <pvPortMalloc+0x18c>)
 801b9b6:	623b      	str	r3, [r7, #32]
 801b9b8:	4b42      	ldr	r3, [pc, #264]	; (801bac4 <pvPortMalloc+0x18c>)
 801b9ba:	681b      	ldr	r3, [r3, #0]
 801b9bc:	627b      	str	r3, [r7, #36]	; 0x24
 801b9be:	e004      	b.n	801b9ca <pvPortMalloc+0x92>
 801b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9c2:	623b      	str	r3, [r7, #32]
 801b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	627b      	str	r3, [r7, #36]	; 0x24
 801b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9cc:	685b      	ldr	r3, [r3, #4]
 801b9ce:	687a      	ldr	r2, [r7, #4]
 801b9d0:	429a      	cmp	r2, r3
 801b9d2:	d903      	bls.n	801b9dc <pvPortMalloc+0xa4>
 801b9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9d6:	681b      	ldr	r3, [r3, #0]
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d1f1      	bne.n	801b9c0 <pvPortMalloc+0x88>
 801b9dc:	4b36      	ldr	r3, [pc, #216]	; (801bab8 <pvPortMalloc+0x180>)
 801b9de:	681b      	ldr	r3, [r3, #0]
 801b9e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b9e2:	429a      	cmp	r2, r3
 801b9e4:	d050      	beq.n	801ba88 <pvPortMalloc+0x150>
 801b9e6:	6a3b      	ldr	r3, [r7, #32]
 801b9e8:	681b      	ldr	r3, [r3, #0]
 801b9ea:	2208      	movs	r2, #8
 801b9ec:	4413      	add	r3, r2
 801b9ee:	61fb      	str	r3, [r7, #28]
 801b9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9f2:	681a      	ldr	r2, [r3, #0]
 801b9f4:	6a3b      	ldr	r3, [r7, #32]
 801b9f6:	601a      	str	r2, [r3, #0]
 801b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9fa:	685a      	ldr	r2, [r3, #4]
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	1ad2      	subs	r2, r2, r3
 801ba00:	2308      	movs	r3, #8
 801ba02:	005b      	lsls	r3, r3, #1
 801ba04:	429a      	cmp	r2, r3
 801ba06:	d91f      	bls.n	801ba48 <pvPortMalloc+0x110>
 801ba08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	4413      	add	r3, r2
 801ba0e:	61bb      	str	r3, [r7, #24]
 801ba10:	69bb      	ldr	r3, [r7, #24]
 801ba12:	f003 0307 	and.w	r3, r3, #7
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d00a      	beq.n	801ba30 <pvPortMalloc+0xf8>
 801ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba1e:	f383 8811 	msr	BASEPRI, r3
 801ba22:	f3bf 8f6f 	isb	sy
 801ba26:	f3bf 8f4f 	dsb	sy
 801ba2a:	613b      	str	r3, [r7, #16]
 801ba2c:	bf00      	nop
 801ba2e:	e7fe      	b.n	801ba2e <pvPortMalloc+0xf6>
 801ba30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba32:	685a      	ldr	r2, [r3, #4]
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	1ad2      	subs	r2, r2, r3
 801ba38:	69bb      	ldr	r3, [r7, #24]
 801ba3a:	605a      	str	r2, [r3, #4]
 801ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba3e:	687a      	ldr	r2, [r7, #4]
 801ba40:	605a      	str	r2, [r3, #4]
 801ba42:	69b8      	ldr	r0, [r7, #24]
 801ba44:	f000 f908 	bl	801bc58 <prvInsertBlockIntoFreeList>
 801ba48:	4b1d      	ldr	r3, [pc, #116]	; (801bac0 <pvPortMalloc+0x188>)
 801ba4a:	681a      	ldr	r2, [r3, #0]
 801ba4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba4e:	685b      	ldr	r3, [r3, #4]
 801ba50:	1ad3      	subs	r3, r2, r3
 801ba52:	4a1b      	ldr	r2, [pc, #108]	; (801bac0 <pvPortMalloc+0x188>)
 801ba54:	6013      	str	r3, [r2, #0]
 801ba56:	4b1a      	ldr	r3, [pc, #104]	; (801bac0 <pvPortMalloc+0x188>)
 801ba58:	681a      	ldr	r2, [r3, #0]
 801ba5a:	4b1b      	ldr	r3, [pc, #108]	; (801bac8 <pvPortMalloc+0x190>)
 801ba5c:	681b      	ldr	r3, [r3, #0]
 801ba5e:	429a      	cmp	r2, r3
 801ba60:	d203      	bcs.n	801ba6a <pvPortMalloc+0x132>
 801ba62:	4b17      	ldr	r3, [pc, #92]	; (801bac0 <pvPortMalloc+0x188>)
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	4a18      	ldr	r2, [pc, #96]	; (801bac8 <pvPortMalloc+0x190>)
 801ba68:	6013      	str	r3, [r2, #0]
 801ba6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba6c:	685a      	ldr	r2, [r3, #4]
 801ba6e:	4b13      	ldr	r3, [pc, #76]	; (801babc <pvPortMalloc+0x184>)
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	431a      	orrs	r2, r3
 801ba74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba76:	605a      	str	r2, [r3, #4]
 801ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba7a:	2200      	movs	r2, #0
 801ba7c:	601a      	str	r2, [r3, #0]
 801ba7e:	4b13      	ldr	r3, [pc, #76]	; (801bacc <pvPortMalloc+0x194>)
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	3301      	adds	r3, #1
 801ba84:	4a11      	ldr	r2, [pc, #68]	; (801bacc <pvPortMalloc+0x194>)
 801ba86:	6013      	str	r3, [r2, #0]
 801ba88:	f7fe f96c 	bl	8019d64 <xTaskResumeAll>
 801ba8c:	69fb      	ldr	r3, [r7, #28]
 801ba8e:	f003 0307 	and.w	r3, r3, #7
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d00a      	beq.n	801baac <pvPortMalloc+0x174>
 801ba96:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba9a:	f383 8811 	msr	BASEPRI, r3
 801ba9e:	f3bf 8f6f 	isb	sy
 801baa2:	f3bf 8f4f 	dsb	sy
 801baa6:	60fb      	str	r3, [r7, #12]
 801baa8:	bf00      	nop
 801baaa:	e7fe      	b.n	801baaa <pvPortMalloc+0x172>
 801baac:	69fb      	ldr	r3, [r7, #28]
 801baae:	4618      	mov	r0, r3
 801bab0:	3728      	adds	r7, #40	; 0x28
 801bab2:	46bd      	mov	sp, r7
 801bab4:	bd80      	pop	{r7, pc}
 801bab6:	bf00      	nop
 801bab8:	20008460 	.word	0x20008460
 801babc:	20008474 	.word	0x20008474
 801bac0:	20008464 	.word	0x20008464
 801bac4:	20008458 	.word	0x20008458
 801bac8:	20008468 	.word	0x20008468
 801bacc:	2000846c 	.word	0x2000846c

0801bad0 <vPortFree>:
 801bad0:	b580      	push	{r7, lr}
 801bad2:	b086      	sub	sp, #24
 801bad4:	af00      	add	r7, sp, #0
 801bad6:	6078      	str	r0, [r7, #4]
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	617b      	str	r3, [r7, #20]
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d04d      	beq.n	801bb7e <vPortFree+0xae>
 801bae2:	2308      	movs	r3, #8
 801bae4:	425b      	negs	r3, r3
 801bae6:	697a      	ldr	r2, [r7, #20]
 801bae8:	4413      	add	r3, r2
 801baea:	617b      	str	r3, [r7, #20]
 801baec:	697b      	ldr	r3, [r7, #20]
 801baee:	613b      	str	r3, [r7, #16]
 801baf0:	693b      	ldr	r3, [r7, #16]
 801baf2:	685a      	ldr	r2, [r3, #4]
 801baf4:	4b24      	ldr	r3, [pc, #144]	; (801bb88 <vPortFree+0xb8>)
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	4013      	ands	r3, r2
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d10a      	bne.n	801bb14 <vPortFree+0x44>
 801bafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb02:	f383 8811 	msr	BASEPRI, r3
 801bb06:	f3bf 8f6f 	isb	sy
 801bb0a:	f3bf 8f4f 	dsb	sy
 801bb0e:	60fb      	str	r3, [r7, #12]
 801bb10:	bf00      	nop
 801bb12:	e7fe      	b.n	801bb12 <vPortFree+0x42>
 801bb14:	693b      	ldr	r3, [r7, #16]
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d00a      	beq.n	801bb32 <vPortFree+0x62>
 801bb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb20:	f383 8811 	msr	BASEPRI, r3
 801bb24:	f3bf 8f6f 	isb	sy
 801bb28:	f3bf 8f4f 	dsb	sy
 801bb2c:	60bb      	str	r3, [r7, #8]
 801bb2e:	bf00      	nop
 801bb30:	e7fe      	b.n	801bb30 <vPortFree+0x60>
 801bb32:	693b      	ldr	r3, [r7, #16]
 801bb34:	685a      	ldr	r2, [r3, #4]
 801bb36:	4b14      	ldr	r3, [pc, #80]	; (801bb88 <vPortFree+0xb8>)
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	4013      	ands	r3, r2
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d01e      	beq.n	801bb7e <vPortFree+0xae>
 801bb40:	693b      	ldr	r3, [r7, #16]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	2b00      	cmp	r3, #0
 801bb46:	d11a      	bne.n	801bb7e <vPortFree+0xae>
 801bb48:	693b      	ldr	r3, [r7, #16]
 801bb4a:	685a      	ldr	r2, [r3, #4]
 801bb4c:	4b0e      	ldr	r3, [pc, #56]	; (801bb88 <vPortFree+0xb8>)
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	43db      	mvns	r3, r3
 801bb52:	401a      	ands	r2, r3
 801bb54:	693b      	ldr	r3, [r7, #16]
 801bb56:	605a      	str	r2, [r3, #4]
 801bb58:	f7fe f8f6 	bl	8019d48 <vTaskSuspendAll>
 801bb5c:	693b      	ldr	r3, [r7, #16]
 801bb5e:	685a      	ldr	r2, [r3, #4]
 801bb60:	4b0a      	ldr	r3, [pc, #40]	; (801bb8c <vPortFree+0xbc>)
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	4413      	add	r3, r2
 801bb66:	4a09      	ldr	r2, [pc, #36]	; (801bb8c <vPortFree+0xbc>)
 801bb68:	6013      	str	r3, [r2, #0]
 801bb6a:	6938      	ldr	r0, [r7, #16]
 801bb6c:	f000 f874 	bl	801bc58 <prvInsertBlockIntoFreeList>
 801bb70:	4b07      	ldr	r3, [pc, #28]	; (801bb90 <vPortFree+0xc0>)
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	3301      	adds	r3, #1
 801bb76:	4a06      	ldr	r2, [pc, #24]	; (801bb90 <vPortFree+0xc0>)
 801bb78:	6013      	str	r3, [r2, #0]
 801bb7a:	f7fe f8f3 	bl	8019d64 <xTaskResumeAll>
 801bb7e:	bf00      	nop
 801bb80:	3718      	adds	r7, #24
 801bb82:	46bd      	mov	sp, r7
 801bb84:	bd80      	pop	{r7, pc}
 801bb86:	bf00      	nop
 801bb88:	20008474 	.word	0x20008474
 801bb8c:	20008464 	.word	0x20008464
 801bb90:	20008470 	.word	0x20008470

0801bb94 <prvHeapInit>:
 801bb94:	b480      	push	{r7}
 801bb96:	b085      	sub	sp, #20
 801bb98:	af00      	add	r7, sp, #0
 801bb9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801bb9e:	60bb      	str	r3, [r7, #8]
 801bba0:	4b27      	ldr	r3, [pc, #156]	; (801bc40 <prvHeapInit+0xac>)
 801bba2:	60fb      	str	r3, [r7, #12]
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	f003 0307 	and.w	r3, r3, #7
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d00c      	beq.n	801bbc8 <prvHeapInit+0x34>
 801bbae:	68fb      	ldr	r3, [r7, #12]
 801bbb0:	3307      	adds	r3, #7
 801bbb2:	60fb      	str	r3, [r7, #12]
 801bbb4:	68fb      	ldr	r3, [r7, #12]
 801bbb6:	f023 0307 	bic.w	r3, r3, #7
 801bbba:	60fb      	str	r3, [r7, #12]
 801bbbc:	68ba      	ldr	r2, [r7, #8]
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	1ad3      	subs	r3, r2, r3
 801bbc2:	4a1f      	ldr	r2, [pc, #124]	; (801bc40 <prvHeapInit+0xac>)
 801bbc4:	4413      	add	r3, r2
 801bbc6:	60bb      	str	r3, [r7, #8]
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	607b      	str	r3, [r7, #4]
 801bbcc:	4a1d      	ldr	r2, [pc, #116]	; (801bc44 <prvHeapInit+0xb0>)
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	6013      	str	r3, [r2, #0]
 801bbd2:	4b1c      	ldr	r3, [pc, #112]	; (801bc44 <prvHeapInit+0xb0>)
 801bbd4:	2200      	movs	r2, #0
 801bbd6:	605a      	str	r2, [r3, #4]
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	68ba      	ldr	r2, [r7, #8]
 801bbdc:	4413      	add	r3, r2
 801bbde:	60fb      	str	r3, [r7, #12]
 801bbe0:	2208      	movs	r2, #8
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	1a9b      	subs	r3, r3, r2
 801bbe6:	60fb      	str	r3, [r7, #12]
 801bbe8:	68fb      	ldr	r3, [r7, #12]
 801bbea:	f023 0307 	bic.w	r3, r3, #7
 801bbee:	60fb      	str	r3, [r7, #12]
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	4a15      	ldr	r2, [pc, #84]	; (801bc48 <prvHeapInit+0xb4>)
 801bbf4:	6013      	str	r3, [r2, #0]
 801bbf6:	4b14      	ldr	r3, [pc, #80]	; (801bc48 <prvHeapInit+0xb4>)
 801bbf8:	681b      	ldr	r3, [r3, #0]
 801bbfa:	2200      	movs	r2, #0
 801bbfc:	605a      	str	r2, [r3, #4]
 801bbfe:	4b12      	ldr	r3, [pc, #72]	; (801bc48 <prvHeapInit+0xb4>)
 801bc00:	681b      	ldr	r3, [r3, #0]
 801bc02:	2200      	movs	r2, #0
 801bc04:	601a      	str	r2, [r3, #0]
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	603b      	str	r3, [r7, #0]
 801bc0a:	683b      	ldr	r3, [r7, #0]
 801bc0c:	68fa      	ldr	r2, [r7, #12]
 801bc0e:	1ad2      	subs	r2, r2, r3
 801bc10:	683b      	ldr	r3, [r7, #0]
 801bc12:	605a      	str	r2, [r3, #4]
 801bc14:	4b0c      	ldr	r3, [pc, #48]	; (801bc48 <prvHeapInit+0xb4>)
 801bc16:	681a      	ldr	r2, [r3, #0]
 801bc18:	683b      	ldr	r3, [r7, #0]
 801bc1a:	601a      	str	r2, [r3, #0]
 801bc1c:	683b      	ldr	r3, [r7, #0]
 801bc1e:	685b      	ldr	r3, [r3, #4]
 801bc20:	4a0a      	ldr	r2, [pc, #40]	; (801bc4c <prvHeapInit+0xb8>)
 801bc22:	6013      	str	r3, [r2, #0]
 801bc24:	683b      	ldr	r3, [r7, #0]
 801bc26:	685b      	ldr	r3, [r3, #4]
 801bc28:	4a09      	ldr	r2, [pc, #36]	; (801bc50 <prvHeapInit+0xbc>)
 801bc2a:	6013      	str	r3, [r2, #0]
 801bc2c:	4b09      	ldr	r3, [pc, #36]	; (801bc54 <prvHeapInit+0xc0>)
 801bc2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801bc32:	601a      	str	r2, [r3, #0]
 801bc34:	bf00      	nop
 801bc36:	3714      	adds	r7, #20
 801bc38:	46bd      	mov	sp, r7
 801bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc3e:	4770      	bx	lr
 801bc40:	20004858 	.word	0x20004858
 801bc44:	20008458 	.word	0x20008458
 801bc48:	20008460 	.word	0x20008460
 801bc4c:	20008468 	.word	0x20008468
 801bc50:	20008464 	.word	0x20008464
 801bc54:	20008474 	.word	0x20008474

0801bc58 <prvInsertBlockIntoFreeList>:
 801bc58:	b480      	push	{r7}
 801bc5a:	b085      	sub	sp, #20
 801bc5c:	af00      	add	r7, sp, #0
 801bc5e:	6078      	str	r0, [r7, #4]
 801bc60:	4b28      	ldr	r3, [pc, #160]	; (801bd04 <prvInsertBlockIntoFreeList+0xac>)
 801bc62:	60fb      	str	r3, [r7, #12]
 801bc64:	e002      	b.n	801bc6c <prvInsertBlockIntoFreeList+0x14>
 801bc66:	68fb      	ldr	r3, [r7, #12]
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	60fb      	str	r3, [r7, #12]
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	681b      	ldr	r3, [r3, #0]
 801bc70:	687a      	ldr	r2, [r7, #4]
 801bc72:	429a      	cmp	r2, r3
 801bc74:	d8f7      	bhi.n	801bc66 <prvInsertBlockIntoFreeList+0xe>
 801bc76:	68fb      	ldr	r3, [r7, #12]
 801bc78:	60bb      	str	r3, [r7, #8]
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	685b      	ldr	r3, [r3, #4]
 801bc7e:	68ba      	ldr	r2, [r7, #8]
 801bc80:	4413      	add	r3, r2
 801bc82:	687a      	ldr	r2, [r7, #4]
 801bc84:	429a      	cmp	r2, r3
 801bc86:	d108      	bne.n	801bc9a <prvInsertBlockIntoFreeList+0x42>
 801bc88:	68fb      	ldr	r3, [r7, #12]
 801bc8a:	685a      	ldr	r2, [r3, #4]
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	685b      	ldr	r3, [r3, #4]
 801bc90:	441a      	add	r2, r3
 801bc92:	68fb      	ldr	r3, [r7, #12]
 801bc94:	605a      	str	r2, [r3, #4]
 801bc96:	68fb      	ldr	r3, [r7, #12]
 801bc98:	607b      	str	r3, [r7, #4]
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	60bb      	str	r3, [r7, #8]
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	685b      	ldr	r3, [r3, #4]
 801bca2:	68ba      	ldr	r2, [r7, #8]
 801bca4:	441a      	add	r2, r3
 801bca6:	68fb      	ldr	r3, [r7, #12]
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	429a      	cmp	r2, r3
 801bcac:	d118      	bne.n	801bce0 <prvInsertBlockIntoFreeList+0x88>
 801bcae:	68fb      	ldr	r3, [r7, #12]
 801bcb0:	681a      	ldr	r2, [r3, #0]
 801bcb2:	4b15      	ldr	r3, [pc, #84]	; (801bd08 <prvInsertBlockIntoFreeList+0xb0>)
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	429a      	cmp	r2, r3
 801bcb8:	d00d      	beq.n	801bcd6 <prvInsertBlockIntoFreeList+0x7e>
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	685a      	ldr	r2, [r3, #4]
 801bcbe:	68fb      	ldr	r3, [r7, #12]
 801bcc0:	681b      	ldr	r3, [r3, #0]
 801bcc2:	685b      	ldr	r3, [r3, #4]
 801bcc4:	441a      	add	r2, r3
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	605a      	str	r2, [r3, #4]
 801bcca:	68fb      	ldr	r3, [r7, #12]
 801bccc:	681b      	ldr	r3, [r3, #0]
 801bcce:	681a      	ldr	r2, [r3, #0]
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	601a      	str	r2, [r3, #0]
 801bcd4:	e008      	b.n	801bce8 <prvInsertBlockIntoFreeList+0x90>
 801bcd6:	4b0c      	ldr	r3, [pc, #48]	; (801bd08 <prvInsertBlockIntoFreeList+0xb0>)
 801bcd8:	681a      	ldr	r2, [r3, #0]
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	601a      	str	r2, [r3, #0]
 801bcde:	e003      	b.n	801bce8 <prvInsertBlockIntoFreeList+0x90>
 801bce0:	68fb      	ldr	r3, [r7, #12]
 801bce2:	681a      	ldr	r2, [r3, #0]
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	601a      	str	r2, [r3, #0]
 801bce8:	68fa      	ldr	r2, [r7, #12]
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	429a      	cmp	r2, r3
 801bcee:	d002      	beq.n	801bcf6 <prvInsertBlockIntoFreeList+0x9e>
 801bcf0:	68fb      	ldr	r3, [r7, #12]
 801bcf2:	687a      	ldr	r2, [r7, #4]
 801bcf4:	601a      	str	r2, [r3, #0]
 801bcf6:	bf00      	nop
 801bcf8:	3714      	adds	r7, #20
 801bcfa:	46bd      	mov	sp, r7
 801bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd00:	4770      	bx	lr
 801bd02:	bf00      	nop
 801bd04:	20008458 	.word	0x20008458
 801bd08:	20008460 	.word	0x20008460

0801bd0c <MX_USB_DEVICE_Init>:
 801bd0c:	b580      	push	{r7, lr}
 801bd0e:	af00      	add	r7, sp, #0
 801bd10:	2200      	movs	r2, #0
 801bd12:	4912      	ldr	r1, [pc, #72]	; (801bd5c <MX_USB_DEVICE_Init+0x50>)
 801bd14:	4812      	ldr	r0, [pc, #72]	; (801bd60 <MX_USB_DEVICE_Init+0x54>)
 801bd16:	f7f7 fd99 	bl	801384c <USBD_Init>
 801bd1a:	4603      	mov	r3, r0
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	d001      	beq.n	801bd24 <MX_USB_DEVICE_Init+0x18>
 801bd20:	f7ef fa14 	bl	800b14c <Error_Handler>
 801bd24:	490f      	ldr	r1, [pc, #60]	; (801bd64 <MX_USB_DEVICE_Init+0x58>)
 801bd26:	480e      	ldr	r0, [pc, #56]	; (801bd60 <MX_USB_DEVICE_Init+0x54>)
 801bd28:	f7f7 fdc0 	bl	80138ac <USBD_RegisterClass>
 801bd2c:	4603      	mov	r3, r0
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d001      	beq.n	801bd36 <MX_USB_DEVICE_Init+0x2a>
 801bd32:	f7ef fa0b 	bl	800b14c <Error_Handler>
 801bd36:	490c      	ldr	r1, [pc, #48]	; (801bd68 <MX_USB_DEVICE_Init+0x5c>)
 801bd38:	4809      	ldr	r0, [pc, #36]	; (801bd60 <MX_USB_DEVICE_Init+0x54>)
 801bd3a:	f7f7 fcb1 	bl	80136a0 <USBD_CDC_RegisterInterface>
 801bd3e:	4603      	mov	r3, r0
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d001      	beq.n	801bd48 <MX_USB_DEVICE_Init+0x3c>
 801bd44:	f7ef fa02 	bl	800b14c <Error_Handler>
 801bd48:	4805      	ldr	r0, [pc, #20]	; (801bd60 <MX_USB_DEVICE_Init+0x54>)
 801bd4a:	f7f7 fde5 	bl	8013918 <USBD_Start>
 801bd4e:	4603      	mov	r3, r0
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	d001      	beq.n	801bd58 <MX_USB_DEVICE_Init+0x4c>
 801bd54:	f7ef f9fa 	bl	800b14c <Error_Handler>
 801bd58:	bf00      	nop
 801bd5a:	bd80      	pop	{r7, pc}
 801bd5c:	200000dc 	.word	0x200000dc
 801bd60:	20008478 	.word	0x20008478
 801bd64:	20000044 	.word	0x20000044
 801bd68:	200000c8 	.word	0x200000c8

0801bd6c <CDC_Init_FS>:
 801bd6c:	b580      	push	{r7, lr}
 801bd6e:	af00      	add	r7, sp, #0
 801bd70:	2200      	movs	r2, #0
 801bd72:	4905      	ldr	r1, [pc, #20]	; (801bd88 <CDC_Init_FS+0x1c>)
 801bd74:	4805      	ldr	r0, [pc, #20]	; (801bd8c <CDC_Init_FS+0x20>)
 801bd76:	f7f7 fcad 	bl	80136d4 <USBD_CDC_SetTxBuffer>
 801bd7a:	4905      	ldr	r1, [pc, #20]	; (801bd90 <CDC_Init_FS+0x24>)
 801bd7c:	4803      	ldr	r0, [pc, #12]	; (801bd8c <CDC_Init_FS+0x20>)
 801bd7e:	f7f7 fccb 	bl	8013718 <USBD_CDC_SetRxBuffer>
 801bd82:	2300      	movs	r3, #0
 801bd84:	4618      	mov	r0, r3
 801bd86:	bd80      	pop	{r7, pc}
 801bd88:	20008f54 	.word	0x20008f54
 801bd8c:	20008478 	.word	0x20008478
 801bd90:	20008754 	.word	0x20008754

0801bd94 <CDC_DeInit_FS>:
 801bd94:	b480      	push	{r7}
 801bd96:	af00      	add	r7, sp, #0
 801bd98:	2300      	movs	r3, #0
 801bd9a:	4618      	mov	r0, r3
 801bd9c:	46bd      	mov	sp, r7
 801bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bda2:	4770      	bx	lr

0801bda4 <CDC_Control_FS>:
 801bda4:	b480      	push	{r7}
 801bda6:	b083      	sub	sp, #12
 801bda8:	af00      	add	r7, sp, #0
 801bdaa:	4603      	mov	r3, r0
 801bdac:	6039      	str	r1, [r7, #0]
 801bdae:	71fb      	strb	r3, [r7, #7]
 801bdb0:	4613      	mov	r3, r2
 801bdb2:	80bb      	strh	r3, [r7, #4]
 801bdb4:	79fb      	ldrb	r3, [r7, #7]
 801bdb6:	2b23      	cmp	r3, #35	; 0x23
 801bdb8:	d84a      	bhi.n	801be50 <CDC_Control_FS+0xac>
 801bdba:	a201      	add	r2, pc, #4	; (adr r2, 801bdc0 <CDC_Control_FS+0x1c>)
 801bdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bdc0:	0801be51 	.word	0x0801be51
 801bdc4:	0801be51 	.word	0x0801be51
 801bdc8:	0801be51 	.word	0x0801be51
 801bdcc:	0801be51 	.word	0x0801be51
 801bdd0:	0801be51 	.word	0x0801be51
 801bdd4:	0801be51 	.word	0x0801be51
 801bdd8:	0801be51 	.word	0x0801be51
 801bddc:	0801be51 	.word	0x0801be51
 801bde0:	0801be51 	.word	0x0801be51
 801bde4:	0801be51 	.word	0x0801be51
 801bde8:	0801be51 	.word	0x0801be51
 801bdec:	0801be51 	.word	0x0801be51
 801bdf0:	0801be51 	.word	0x0801be51
 801bdf4:	0801be51 	.word	0x0801be51
 801bdf8:	0801be51 	.word	0x0801be51
 801bdfc:	0801be51 	.word	0x0801be51
 801be00:	0801be51 	.word	0x0801be51
 801be04:	0801be51 	.word	0x0801be51
 801be08:	0801be51 	.word	0x0801be51
 801be0c:	0801be51 	.word	0x0801be51
 801be10:	0801be51 	.word	0x0801be51
 801be14:	0801be51 	.word	0x0801be51
 801be18:	0801be51 	.word	0x0801be51
 801be1c:	0801be51 	.word	0x0801be51
 801be20:	0801be51 	.word	0x0801be51
 801be24:	0801be51 	.word	0x0801be51
 801be28:	0801be51 	.word	0x0801be51
 801be2c:	0801be51 	.word	0x0801be51
 801be30:	0801be51 	.word	0x0801be51
 801be34:	0801be51 	.word	0x0801be51
 801be38:	0801be51 	.word	0x0801be51
 801be3c:	0801be51 	.word	0x0801be51
 801be40:	0801be51 	.word	0x0801be51
 801be44:	0801be51 	.word	0x0801be51
 801be48:	0801be51 	.word	0x0801be51
 801be4c:	0801be51 	.word	0x0801be51
 801be50:	bf00      	nop
 801be52:	2300      	movs	r3, #0
 801be54:	4618      	mov	r0, r3
 801be56:	370c      	adds	r7, #12
 801be58:	46bd      	mov	sp, r7
 801be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be5e:	4770      	bx	lr

0801be60 <CDC_Receive_FS>:
 801be60:	b580      	push	{r7, lr}
 801be62:	b082      	sub	sp, #8
 801be64:	af00      	add	r7, sp, #0
 801be66:	6078      	str	r0, [r7, #4]
 801be68:	6039      	str	r1, [r7, #0]
 801be6a:	6879      	ldr	r1, [r7, #4]
 801be6c:	4805      	ldr	r0, [pc, #20]	; (801be84 <CDC_Receive_FS+0x24>)
 801be6e:	f7f7 fc53 	bl	8013718 <USBD_CDC_SetRxBuffer>
 801be72:	4804      	ldr	r0, [pc, #16]	; (801be84 <CDC_Receive_FS+0x24>)
 801be74:	f7f7 fcb4 	bl	80137e0 <USBD_CDC_ReceivePacket>
 801be78:	2300      	movs	r3, #0
 801be7a:	4618      	mov	r0, r3
 801be7c:	3708      	adds	r7, #8
 801be7e:	46bd      	mov	sp, r7
 801be80:	bd80      	pop	{r7, pc}
 801be82:	bf00      	nop
 801be84:	20008478 	.word	0x20008478

0801be88 <CDC_Transmit_FS>:
 801be88:	b580      	push	{r7, lr}
 801be8a:	b084      	sub	sp, #16
 801be8c:	af00      	add	r7, sp, #0
 801be8e:	6078      	str	r0, [r7, #4]
 801be90:	460b      	mov	r3, r1
 801be92:	807b      	strh	r3, [r7, #2]
 801be94:	2300      	movs	r3, #0
 801be96:	73fb      	strb	r3, [r7, #15]
 801be98:	4b0d      	ldr	r3, [pc, #52]	; (801bed0 <CDC_Transmit_FS+0x48>)
 801be9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801be9e:	60bb      	str	r3, [r7, #8]
 801bea0:	68bb      	ldr	r3, [r7, #8]
 801bea2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	d001      	beq.n	801beae <CDC_Transmit_FS+0x26>
 801beaa:	2301      	movs	r3, #1
 801beac:	e00b      	b.n	801bec6 <CDC_Transmit_FS+0x3e>
 801beae:	887b      	ldrh	r3, [r7, #2]
 801beb0:	461a      	mov	r2, r3
 801beb2:	6879      	ldr	r1, [r7, #4]
 801beb4:	4806      	ldr	r0, [pc, #24]	; (801bed0 <CDC_Transmit_FS+0x48>)
 801beb6:	f7f7 fc0d 	bl	80136d4 <USBD_CDC_SetTxBuffer>
 801beba:	4805      	ldr	r0, [pc, #20]	; (801bed0 <CDC_Transmit_FS+0x48>)
 801bebc:	f7f7 fc4a 	bl	8013754 <USBD_CDC_TransmitPacket>
 801bec0:	4603      	mov	r3, r0
 801bec2:	73fb      	strb	r3, [r7, #15]
 801bec4:	7bfb      	ldrb	r3, [r7, #15]
 801bec6:	4618      	mov	r0, r3
 801bec8:	3710      	adds	r7, #16
 801beca:	46bd      	mov	sp, r7
 801becc:	bd80      	pop	{r7, pc}
 801bece:	bf00      	nop
 801bed0:	20008478 	.word	0x20008478

0801bed4 <CDC_TransmitCplt_FS>:
 801bed4:	b480      	push	{r7}
 801bed6:	b087      	sub	sp, #28
 801bed8:	af00      	add	r7, sp, #0
 801beda:	60f8      	str	r0, [r7, #12]
 801bedc:	60b9      	str	r1, [r7, #8]
 801bede:	4613      	mov	r3, r2
 801bee0:	71fb      	strb	r3, [r7, #7]
 801bee2:	2300      	movs	r3, #0
 801bee4:	75fb      	strb	r3, [r7, #23]
 801bee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801beea:	4618      	mov	r0, r3
 801beec:	371c      	adds	r7, #28
 801beee:	46bd      	mov	sp, r7
 801bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bef4:	4770      	bx	lr
	...

0801bef8 <USBD_FS_DeviceDescriptor>:
 801bef8:	b480      	push	{r7}
 801befa:	b083      	sub	sp, #12
 801befc:	af00      	add	r7, sp, #0
 801befe:	4603      	mov	r3, r0
 801bf00:	6039      	str	r1, [r7, #0]
 801bf02:	71fb      	strb	r3, [r7, #7]
 801bf04:	683b      	ldr	r3, [r7, #0]
 801bf06:	2212      	movs	r2, #18
 801bf08:	801a      	strh	r2, [r3, #0]
 801bf0a:	4b03      	ldr	r3, [pc, #12]	; (801bf18 <USBD_FS_DeviceDescriptor+0x20>)
 801bf0c:	4618      	mov	r0, r3
 801bf0e:	370c      	adds	r7, #12
 801bf10:	46bd      	mov	sp, r7
 801bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf16:	4770      	bx	lr
 801bf18:	200000f8 	.word	0x200000f8

0801bf1c <USBD_FS_LangIDStrDescriptor>:
 801bf1c:	b480      	push	{r7}
 801bf1e:	b083      	sub	sp, #12
 801bf20:	af00      	add	r7, sp, #0
 801bf22:	4603      	mov	r3, r0
 801bf24:	6039      	str	r1, [r7, #0]
 801bf26:	71fb      	strb	r3, [r7, #7]
 801bf28:	683b      	ldr	r3, [r7, #0]
 801bf2a:	2204      	movs	r2, #4
 801bf2c:	801a      	strh	r2, [r3, #0]
 801bf2e:	4b03      	ldr	r3, [pc, #12]	; (801bf3c <USBD_FS_LangIDStrDescriptor+0x20>)
 801bf30:	4618      	mov	r0, r3
 801bf32:	370c      	adds	r7, #12
 801bf34:	46bd      	mov	sp, r7
 801bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf3a:	4770      	bx	lr
 801bf3c:	2000010c 	.word	0x2000010c

0801bf40 <USBD_FS_ProductStrDescriptor>:
 801bf40:	b580      	push	{r7, lr}
 801bf42:	b082      	sub	sp, #8
 801bf44:	af00      	add	r7, sp, #0
 801bf46:	4603      	mov	r3, r0
 801bf48:	6039      	str	r1, [r7, #0]
 801bf4a:	71fb      	strb	r3, [r7, #7]
 801bf4c:	79fb      	ldrb	r3, [r7, #7]
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d105      	bne.n	801bf5e <USBD_FS_ProductStrDescriptor+0x1e>
 801bf52:	683a      	ldr	r2, [r7, #0]
 801bf54:	4907      	ldr	r1, [pc, #28]	; (801bf74 <USBD_FS_ProductStrDescriptor+0x34>)
 801bf56:	4808      	ldr	r0, [pc, #32]	; (801bf78 <USBD_FS_ProductStrDescriptor+0x38>)
 801bf58:	f7f8 fe8a 	bl	8014c70 <USBD_GetString>
 801bf5c:	e004      	b.n	801bf68 <USBD_FS_ProductStrDescriptor+0x28>
 801bf5e:	683a      	ldr	r2, [r7, #0]
 801bf60:	4904      	ldr	r1, [pc, #16]	; (801bf74 <USBD_FS_ProductStrDescriptor+0x34>)
 801bf62:	4805      	ldr	r0, [pc, #20]	; (801bf78 <USBD_FS_ProductStrDescriptor+0x38>)
 801bf64:	f7f8 fe84 	bl	8014c70 <USBD_GetString>
 801bf68:	4b02      	ldr	r3, [pc, #8]	; (801bf74 <USBD_FS_ProductStrDescriptor+0x34>)
 801bf6a:	4618      	mov	r0, r3
 801bf6c:	3708      	adds	r7, #8
 801bf6e:	46bd      	mov	sp, r7
 801bf70:	bd80      	pop	{r7, pc}
 801bf72:	bf00      	nop
 801bf74:	20009754 	.word	0x20009754
 801bf78:	0802228c 	.word	0x0802228c

0801bf7c <USBD_FS_ManufacturerStrDescriptor>:
 801bf7c:	b580      	push	{r7, lr}
 801bf7e:	b082      	sub	sp, #8
 801bf80:	af00      	add	r7, sp, #0
 801bf82:	4603      	mov	r3, r0
 801bf84:	6039      	str	r1, [r7, #0]
 801bf86:	71fb      	strb	r3, [r7, #7]
 801bf88:	683a      	ldr	r2, [r7, #0]
 801bf8a:	4904      	ldr	r1, [pc, #16]	; (801bf9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801bf8c:	4804      	ldr	r0, [pc, #16]	; (801bfa0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801bf8e:	f7f8 fe6f 	bl	8014c70 <USBD_GetString>
 801bf92:	4b02      	ldr	r3, [pc, #8]	; (801bf9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801bf94:	4618      	mov	r0, r3
 801bf96:	3708      	adds	r7, #8
 801bf98:	46bd      	mov	sp, r7
 801bf9a:	bd80      	pop	{r7, pc}
 801bf9c:	20009754 	.word	0x20009754
 801bfa0:	080222a4 	.word	0x080222a4

0801bfa4 <USBD_FS_SerialStrDescriptor>:
 801bfa4:	b580      	push	{r7, lr}
 801bfa6:	b082      	sub	sp, #8
 801bfa8:	af00      	add	r7, sp, #0
 801bfaa:	4603      	mov	r3, r0
 801bfac:	6039      	str	r1, [r7, #0]
 801bfae:	71fb      	strb	r3, [r7, #7]
 801bfb0:	683b      	ldr	r3, [r7, #0]
 801bfb2:	221a      	movs	r2, #26
 801bfb4:	801a      	strh	r2, [r3, #0]
 801bfb6:	f000 f843 	bl	801c040 <Get_SerialNum>
 801bfba:	4b02      	ldr	r3, [pc, #8]	; (801bfc4 <USBD_FS_SerialStrDescriptor+0x20>)
 801bfbc:	4618      	mov	r0, r3
 801bfbe:	3708      	adds	r7, #8
 801bfc0:	46bd      	mov	sp, r7
 801bfc2:	bd80      	pop	{r7, pc}
 801bfc4:	20000110 	.word	0x20000110

0801bfc8 <USBD_FS_ConfigStrDescriptor>:
 801bfc8:	b580      	push	{r7, lr}
 801bfca:	b082      	sub	sp, #8
 801bfcc:	af00      	add	r7, sp, #0
 801bfce:	4603      	mov	r3, r0
 801bfd0:	6039      	str	r1, [r7, #0]
 801bfd2:	71fb      	strb	r3, [r7, #7]
 801bfd4:	79fb      	ldrb	r3, [r7, #7]
 801bfd6:	2b00      	cmp	r3, #0
 801bfd8:	d105      	bne.n	801bfe6 <USBD_FS_ConfigStrDescriptor+0x1e>
 801bfda:	683a      	ldr	r2, [r7, #0]
 801bfdc:	4907      	ldr	r1, [pc, #28]	; (801bffc <USBD_FS_ConfigStrDescriptor+0x34>)
 801bfde:	4808      	ldr	r0, [pc, #32]	; (801c000 <USBD_FS_ConfigStrDescriptor+0x38>)
 801bfe0:	f7f8 fe46 	bl	8014c70 <USBD_GetString>
 801bfe4:	e004      	b.n	801bff0 <USBD_FS_ConfigStrDescriptor+0x28>
 801bfe6:	683a      	ldr	r2, [r7, #0]
 801bfe8:	4904      	ldr	r1, [pc, #16]	; (801bffc <USBD_FS_ConfigStrDescriptor+0x34>)
 801bfea:	4805      	ldr	r0, [pc, #20]	; (801c000 <USBD_FS_ConfigStrDescriptor+0x38>)
 801bfec:	f7f8 fe40 	bl	8014c70 <USBD_GetString>
 801bff0:	4b02      	ldr	r3, [pc, #8]	; (801bffc <USBD_FS_ConfigStrDescriptor+0x34>)
 801bff2:	4618      	mov	r0, r3
 801bff4:	3708      	adds	r7, #8
 801bff6:	46bd      	mov	sp, r7
 801bff8:	bd80      	pop	{r7, pc}
 801bffa:	bf00      	nop
 801bffc:	20009754 	.word	0x20009754
 801c000:	080222b8 	.word	0x080222b8

0801c004 <USBD_FS_InterfaceStrDescriptor>:
 801c004:	b580      	push	{r7, lr}
 801c006:	b082      	sub	sp, #8
 801c008:	af00      	add	r7, sp, #0
 801c00a:	4603      	mov	r3, r0
 801c00c:	6039      	str	r1, [r7, #0]
 801c00e:	71fb      	strb	r3, [r7, #7]
 801c010:	79fb      	ldrb	r3, [r7, #7]
 801c012:	2b00      	cmp	r3, #0
 801c014:	d105      	bne.n	801c022 <USBD_FS_InterfaceStrDescriptor+0x1e>
 801c016:	683a      	ldr	r2, [r7, #0]
 801c018:	4907      	ldr	r1, [pc, #28]	; (801c038 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c01a:	4808      	ldr	r0, [pc, #32]	; (801c03c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c01c:	f7f8 fe28 	bl	8014c70 <USBD_GetString>
 801c020:	e004      	b.n	801c02c <USBD_FS_InterfaceStrDescriptor+0x28>
 801c022:	683a      	ldr	r2, [r7, #0]
 801c024:	4904      	ldr	r1, [pc, #16]	; (801c038 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c026:	4805      	ldr	r0, [pc, #20]	; (801c03c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c028:	f7f8 fe22 	bl	8014c70 <USBD_GetString>
 801c02c:	4b02      	ldr	r3, [pc, #8]	; (801c038 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c02e:	4618      	mov	r0, r3
 801c030:	3708      	adds	r7, #8
 801c032:	46bd      	mov	sp, r7
 801c034:	bd80      	pop	{r7, pc}
 801c036:	bf00      	nop
 801c038:	20009754 	.word	0x20009754
 801c03c:	080222c4 	.word	0x080222c4

0801c040 <Get_SerialNum>:
 801c040:	b580      	push	{r7, lr}
 801c042:	b084      	sub	sp, #16
 801c044:	af00      	add	r7, sp, #0
 801c046:	4b0f      	ldr	r3, [pc, #60]	; (801c084 <Get_SerialNum+0x44>)
 801c048:	681b      	ldr	r3, [r3, #0]
 801c04a:	60fb      	str	r3, [r7, #12]
 801c04c:	4b0e      	ldr	r3, [pc, #56]	; (801c088 <Get_SerialNum+0x48>)
 801c04e:	681b      	ldr	r3, [r3, #0]
 801c050:	60bb      	str	r3, [r7, #8]
 801c052:	4b0e      	ldr	r3, [pc, #56]	; (801c08c <Get_SerialNum+0x4c>)
 801c054:	681b      	ldr	r3, [r3, #0]
 801c056:	607b      	str	r3, [r7, #4]
 801c058:	68fa      	ldr	r2, [r7, #12]
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	4413      	add	r3, r2
 801c05e:	60fb      	str	r3, [r7, #12]
 801c060:	68fb      	ldr	r3, [r7, #12]
 801c062:	2b00      	cmp	r3, #0
 801c064:	d009      	beq.n	801c07a <Get_SerialNum+0x3a>
 801c066:	2208      	movs	r2, #8
 801c068:	4909      	ldr	r1, [pc, #36]	; (801c090 <Get_SerialNum+0x50>)
 801c06a:	68f8      	ldr	r0, [r7, #12]
 801c06c:	f000 f814 	bl	801c098 <IntToUnicode>
 801c070:	2204      	movs	r2, #4
 801c072:	4908      	ldr	r1, [pc, #32]	; (801c094 <Get_SerialNum+0x54>)
 801c074:	68b8      	ldr	r0, [r7, #8]
 801c076:	f000 f80f 	bl	801c098 <IntToUnicode>
 801c07a:	bf00      	nop
 801c07c:	3710      	adds	r7, #16
 801c07e:	46bd      	mov	sp, r7
 801c080:	bd80      	pop	{r7, pc}
 801c082:	bf00      	nop
 801c084:	1fff7a10 	.word	0x1fff7a10
 801c088:	1fff7a14 	.word	0x1fff7a14
 801c08c:	1fff7a18 	.word	0x1fff7a18
 801c090:	20000112 	.word	0x20000112
 801c094:	20000122 	.word	0x20000122

0801c098 <IntToUnicode>:
 801c098:	b480      	push	{r7}
 801c09a:	b087      	sub	sp, #28
 801c09c:	af00      	add	r7, sp, #0
 801c09e:	60f8      	str	r0, [r7, #12]
 801c0a0:	60b9      	str	r1, [r7, #8]
 801c0a2:	4613      	mov	r3, r2
 801c0a4:	71fb      	strb	r3, [r7, #7]
 801c0a6:	2300      	movs	r3, #0
 801c0a8:	75fb      	strb	r3, [r7, #23]
 801c0aa:	2300      	movs	r3, #0
 801c0ac:	75fb      	strb	r3, [r7, #23]
 801c0ae:	e027      	b.n	801c100 <IntToUnicode+0x68>
 801c0b0:	68fb      	ldr	r3, [r7, #12]
 801c0b2:	0f1b      	lsrs	r3, r3, #28
 801c0b4:	2b09      	cmp	r3, #9
 801c0b6:	d80b      	bhi.n	801c0d0 <IntToUnicode+0x38>
 801c0b8:	68fb      	ldr	r3, [r7, #12]
 801c0ba:	0f1b      	lsrs	r3, r3, #28
 801c0bc:	b2da      	uxtb	r2, r3
 801c0be:	7dfb      	ldrb	r3, [r7, #23]
 801c0c0:	005b      	lsls	r3, r3, #1
 801c0c2:	4619      	mov	r1, r3
 801c0c4:	68bb      	ldr	r3, [r7, #8]
 801c0c6:	440b      	add	r3, r1
 801c0c8:	3230      	adds	r2, #48	; 0x30
 801c0ca:	b2d2      	uxtb	r2, r2
 801c0cc:	701a      	strb	r2, [r3, #0]
 801c0ce:	e00a      	b.n	801c0e6 <IntToUnicode+0x4e>
 801c0d0:	68fb      	ldr	r3, [r7, #12]
 801c0d2:	0f1b      	lsrs	r3, r3, #28
 801c0d4:	b2da      	uxtb	r2, r3
 801c0d6:	7dfb      	ldrb	r3, [r7, #23]
 801c0d8:	005b      	lsls	r3, r3, #1
 801c0da:	4619      	mov	r1, r3
 801c0dc:	68bb      	ldr	r3, [r7, #8]
 801c0de:	440b      	add	r3, r1
 801c0e0:	3237      	adds	r2, #55	; 0x37
 801c0e2:	b2d2      	uxtb	r2, r2
 801c0e4:	701a      	strb	r2, [r3, #0]
 801c0e6:	68fb      	ldr	r3, [r7, #12]
 801c0e8:	011b      	lsls	r3, r3, #4
 801c0ea:	60fb      	str	r3, [r7, #12]
 801c0ec:	7dfb      	ldrb	r3, [r7, #23]
 801c0ee:	005b      	lsls	r3, r3, #1
 801c0f0:	3301      	adds	r3, #1
 801c0f2:	68ba      	ldr	r2, [r7, #8]
 801c0f4:	4413      	add	r3, r2
 801c0f6:	2200      	movs	r2, #0
 801c0f8:	701a      	strb	r2, [r3, #0]
 801c0fa:	7dfb      	ldrb	r3, [r7, #23]
 801c0fc:	3301      	adds	r3, #1
 801c0fe:	75fb      	strb	r3, [r7, #23]
 801c100:	7dfa      	ldrb	r2, [r7, #23]
 801c102:	79fb      	ldrb	r3, [r7, #7]
 801c104:	429a      	cmp	r2, r3
 801c106:	d3d3      	bcc.n	801c0b0 <IntToUnicode+0x18>
 801c108:	bf00      	nop
 801c10a:	bf00      	nop
 801c10c:	371c      	adds	r7, #28
 801c10e:	46bd      	mov	sp, r7
 801c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c114:	4770      	bx	lr
	...

0801c118 <HAL_PCD_MspInit>:
 801c118:	b580      	push	{r7, lr}
 801c11a:	b08a      	sub	sp, #40	; 0x28
 801c11c:	af00      	add	r7, sp, #0
 801c11e:	6078      	str	r0, [r7, #4]
 801c120:	f107 0314 	add.w	r3, r7, #20
 801c124:	2200      	movs	r2, #0
 801c126:	601a      	str	r2, [r3, #0]
 801c128:	605a      	str	r2, [r3, #4]
 801c12a:	609a      	str	r2, [r3, #8]
 801c12c:	60da      	str	r2, [r3, #12]
 801c12e:	611a      	str	r2, [r3, #16]
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	681b      	ldr	r3, [r3, #0]
 801c134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c138:	d13a      	bne.n	801c1b0 <HAL_PCD_MspInit+0x98>
 801c13a:	2300      	movs	r3, #0
 801c13c:	613b      	str	r3, [r7, #16]
 801c13e:	4b1e      	ldr	r3, [pc, #120]	; (801c1b8 <HAL_PCD_MspInit+0xa0>)
 801c140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c142:	4a1d      	ldr	r2, [pc, #116]	; (801c1b8 <HAL_PCD_MspInit+0xa0>)
 801c144:	f043 0301 	orr.w	r3, r3, #1
 801c148:	6313      	str	r3, [r2, #48]	; 0x30
 801c14a:	4b1b      	ldr	r3, [pc, #108]	; (801c1b8 <HAL_PCD_MspInit+0xa0>)
 801c14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c14e:	f003 0301 	and.w	r3, r3, #1
 801c152:	613b      	str	r3, [r7, #16]
 801c154:	693b      	ldr	r3, [r7, #16]
 801c156:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801c15a:	617b      	str	r3, [r7, #20]
 801c15c:	2302      	movs	r3, #2
 801c15e:	61bb      	str	r3, [r7, #24]
 801c160:	2300      	movs	r3, #0
 801c162:	61fb      	str	r3, [r7, #28]
 801c164:	2303      	movs	r3, #3
 801c166:	623b      	str	r3, [r7, #32]
 801c168:	230a      	movs	r3, #10
 801c16a:	627b      	str	r3, [r7, #36]	; 0x24
 801c16c:	f107 0314 	add.w	r3, r7, #20
 801c170:	4619      	mov	r1, r3
 801c172:	4812      	ldr	r0, [pc, #72]	; (801c1bc <HAL_PCD_MspInit+0xa4>)
 801c174:	f7f1 fc52 	bl	800da1c <HAL_GPIO_Init>
 801c178:	4b0f      	ldr	r3, [pc, #60]	; (801c1b8 <HAL_PCD_MspInit+0xa0>)
 801c17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c17c:	4a0e      	ldr	r2, [pc, #56]	; (801c1b8 <HAL_PCD_MspInit+0xa0>)
 801c17e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c182:	6353      	str	r3, [r2, #52]	; 0x34
 801c184:	2300      	movs	r3, #0
 801c186:	60fb      	str	r3, [r7, #12]
 801c188:	4b0b      	ldr	r3, [pc, #44]	; (801c1b8 <HAL_PCD_MspInit+0xa0>)
 801c18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c18c:	4a0a      	ldr	r2, [pc, #40]	; (801c1b8 <HAL_PCD_MspInit+0xa0>)
 801c18e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801c192:	6453      	str	r3, [r2, #68]	; 0x44
 801c194:	4b08      	ldr	r3, [pc, #32]	; (801c1b8 <HAL_PCD_MspInit+0xa0>)
 801c196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c19c:	60fb      	str	r3, [r7, #12]
 801c19e:	68fb      	ldr	r3, [r7, #12]
 801c1a0:	2200      	movs	r2, #0
 801c1a2:	2105      	movs	r1, #5
 801c1a4:	2043      	movs	r0, #67	; 0x43
 801c1a6:	f7f1 f89f 	bl	800d2e8 <HAL_NVIC_SetPriority>
 801c1aa:	2043      	movs	r0, #67	; 0x43
 801c1ac:	f7f1 f8b8 	bl	800d320 <HAL_NVIC_EnableIRQ>
 801c1b0:	bf00      	nop
 801c1b2:	3728      	adds	r7, #40	; 0x28
 801c1b4:	46bd      	mov	sp, r7
 801c1b6:	bd80      	pop	{r7, pc}
 801c1b8:	40023800 	.word	0x40023800
 801c1bc:	40020000 	.word	0x40020000

0801c1c0 <HAL_PCD_SetupStageCallback>:
 801c1c0:	b580      	push	{r7, lr}
 801c1c2:	b082      	sub	sp, #8
 801c1c4:	af00      	add	r7, sp, #0
 801c1c6:	6078      	str	r0, [r7, #4]
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801c1d4:	4619      	mov	r1, r3
 801c1d6:	4610      	mov	r0, r2
 801c1d8:	f7f7 fbeb 	bl	80139b2 <USBD_LL_SetupStage>
 801c1dc:	bf00      	nop
 801c1de:	3708      	adds	r7, #8
 801c1e0:	46bd      	mov	sp, r7
 801c1e2:	bd80      	pop	{r7, pc}

0801c1e4 <HAL_PCD_DataOutStageCallback>:
 801c1e4:	b580      	push	{r7, lr}
 801c1e6:	b082      	sub	sp, #8
 801c1e8:	af00      	add	r7, sp, #0
 801c1ea:	6078      	str	r0, [r7, #4]
 801c1ec:	460b      	mov	r3, r1
 801c1ee:	70fb      	strb	r3, [r7, #3]
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801c1f6:	78fa      	ldrb	r2, [r7, #3]
 801c1f8:	6879      	ldr	r1, [r7, #4]
 801c1fa:	4613      	mov	r3, r2
 801c1fc:	00db      	lsls	r3, r3, #3
 801c1fe:	4413      	add	r3, r2
 801c200:	009b      	lsls	r3, r3, #2
 801c202:	440b      	add	r3, r1
 801c204:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801c208:	681a      	ldr	r2, [r3, #0]
 801c20a:	78fb      	ldrb	r3, [r7, #3]
 801c20c:	4619      	mov	r1, r3
 801c20e:	f7f7 fc25 	bl	8013a5c <USBD_LL_DataOutStage>
 801c212:	bf00      	nop
 801c214:	3708      	adds	r7, #8
 801c216:	46bd      	mov	sp, r7
 801c218:	bd80      	pop	{r7, pc}

0801c21a <HAL_PCD_DataInStageCallback>:
 801c21a:	b580      	push	{r7, lr}
 801c21c:	b082      	sub	sp, #8
 801c21e:	af00      	add	r7, sp, #0
 801c220:	6078      	str	r0, [r7, #4]
 801c222:	460b      	mov	r3, r1
 801c224:	70fb      	strb	r3, [r7, #3]
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801c22c:	78fa      	ldrb	r2, [r7, #3]
 801c22e:	6879      	ldr	r1, [r7, #4]
 801c230:	4613      	mov	r3, r2
 801c232:	00db      	lsls	r3, r3, #3
 801c234:	4413      	add	r3, r2
 801c236:	009b      	lsls	r3, r3, #2
 801c238:	440b      	add	r3, r1
 801c23a:	334c      	adds	r3, #76	; 0x4c
 801c23c:	681a      	ldr	r2, [r3, #0]
 801c23e:	78fb      	ldrb	r3, [r7, #3]
 801c240:	4619      	mov	r1, r3
 801c242:	f7f7 fcbe 	bl	8013bc2 <USBD_LL_DataInStage>
 801c246:	bf00      	nop
 801c248:	3708      	adds	r7, #8
 801c24a:	46bd      	mov	sp, r7
 801c24c:	bd80      	pop	{r7, pc}

0801c24e <HAL_PCD_SOFCallback>:
 801c24e:	b580      	push	{r7, lr}
 801c250:	b082      	sub	sp, #8
 801c252:	af00      	add	r7, sp, #0
 801c254:	6078      	str	r0, [r7, #4]
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c25c:	4618      	mov	r0, r3
 801c25e:	f7f7 fdf2 	bl	8013e46 <USBD_LL_SOF>
 801c262:	bf00      	nop
 801c264:	3708      	adds	r7, #8
 801c266:	46bd      	mov	sp, r7
 801c268:	bd80      	pop	{r7, pc}

0801c26a <HAL_PCD_ResetCallback>:
 801c26a:	b580      	push	{r7, lr}
 801c26c:	b084      	sub	sp, #16
 801c26e:	af00      	add	r7, sp, #0
 801c270:	6078      	str	r0, [r7, #4]
 801c272:	2301      	movs	r3, #1
 801c274:	73fb      	strb	r3, [r7, #15]
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	68db      	ldr	r3, [r3, #12]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d102      	bne.n	801c284 <HAL_PCD_ResetCallback+0x1a>
 801c27e:	2300      	movs	r3, #0
 801c280:	73fb      	strb	r3, [r7, #15]
 801c282:	e008      	b.n	801c296 <HAL_PCD_ResetCallback+0x2c>
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	68db      	ldr	r3, [r3, #12]
 801c288:	2b02      	cmp	r3, #2
 801c28a:	d102      	bne.n	801c292 <HAL_PCD_ResetCallback+0x28>
 801c28c:	2301      	movs	r3, #1
 801c28e:	73fb      	strb	r3, [r7, #15]
 801c290:	e001      	b.n	801c296 <HAL_PCD_ResetCallback+0x2c>
 801c292:	f7ee ff5b 	bl	800b14c <Error_Handler>
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c29c:	7bfa      	ldrb	r2, [r7, #15]
 801c29e:	4611      	mov	r1, r2
 801c2a0:	4618      	mov	r0, r3
 801c2a2:	f7f7 fd92 	bl	8013dca <USBD_LL_SetSpeed>
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c2ac:	4618      	mov	r0, r3
 801c2ae:	f7f7 fd3a 	bl	8013d26 <USBD_LL_Reset>
 801c2b2:	bf00      	nop
 801c2b4:	3710      	adds	r7, #16
 801c2b6:	46bd      	mov	sp, r7
 801c2b8:	bd80      	pop	{r7, pc}
	...

0801c2bc <HAL_PCD_SuspendCallback>:
 801c2bc:	b580      	push	{r7, lr}
 801c2be:	b082      	sub	sp, #8
 801c2c0:	af00      	add	r7, sp, #0
 801c2c2:	6078      	str	r0, [r7, #4]
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c2ca:	4618      	mov	r0, r3
 801c2cc:	f7f7 fd8d 	bl	8013dea <USBD_LL_Suspend>
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c2d8:	681b      	ldr	r3, [r3, #0]
 801c2da:	687a      	ldr	r2, [r7, #4]
 801c2dc:	6812      	ldr	r2, [r2, #0]
 801c2de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801c2e2:	f043 0301 	orr.w	r3, r3, #1
 801c2e6:	6013      	str	r3, [r2, #0]
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	6a1b      	ldr	r3, [r3, #32]
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	d005      	beq.n	801c2fc <HAL_PCD_SuspendCallback+0x40>
 801c2f0:	4b04      	ldr	r3, [pc, #16]	; (801c304 <HAL_PCD_SuspendCallback+0x48>)
 801c2f2:	691b      	ldr	r3, [r3, #16]
 801c2f4:	4a03      	ldr	r2, [pc, #12]	; (801c304 <HAL_PCD_SuspendCallback+0x48>)
 801c2f6:	f043 0306 	orr.w	r3, r3, #6
 801c2fa:	6113      	str	r3, [r2, #16]
 801c2fc:	bf00      	nop
 801c2fe:	3708      	adds	r7, #8
 801c300:	46bd      	mov	sp, r7
 801c302:	bd80      	pop	{r7, pc}
 801c304:	e000ed00 	.word	0xe000ed00

0801c308 <HAL_PCD_ResumeCallback>:
 801c308:	b580      	push	{r7, lr}
 801c30a:	b082      	sub	sp, #8
 801c30c:	af00      	add	r7, sp, #0
 801c30e:	6078      	str	r0, [r7, #4]
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c316:	4618      	mov	r0, r3
 801c318:	f7f7 fd7d 	bl	8013e16 <USBD_LL_Resume>
 801c31c:	bf00      	nop
 801c31e:	3708      	adds	r7, #8
 801c320:	46bd      	mov	sp, r7
 801c322:	bd80      	pop	{r7, pc}

0801c324 <HAL_PCD_ISOOUTIncompleteCallback>:
 801c324:	b580      	push	{r7, lr}
 801c326:	b082      	sub	sp, #8
 801c328:	af00      	add	r7, sp, #0
 801c32a:	6078      	str	r0, [r7, #4]
 801c32c:	460b      	mov	r3, r1
 801c32e:	70fb      	strb	r3, [r7, #3]
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c336:	78fa      	ldrb	r2, [r7, #3]
 801c338:	4611      	mov	r1, r2
 801c33a:	4618      	mov	r0, r3
 801c33c:	f7f7 fdd5 	bl	8013eea <USBD_LL_IsoOUTIncomplete>
 801c340:	bf00      	nop
 801c342:	3708      	adds	r7, #8
 801c344:	46bd      	mov	sp, r7
 801c346:	bd80      	pop	{r7, pc}

0801c348 <HAL_PCD_ISOINIncompleteCallback>:
 801c348:	b580      	push	{r7, lr}
 801c34a:	b082      	sub	sp, #8
 801c34c:	af00      	add	r7, sp, #0
 801c34e:	6078      	str	r0, [r7, #4]
 801c350:	460b      	mov	r3, r1
 801c352:	70fb      	strb	r3, [r7, #3]
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c35a:	78fa      	ldrb	r2, [r7, #3]
 801c35c:	4611      	mov	r1, r2
 801c35e:	4618      	mov	r0, r3
 801c360:	f7f7 fd91 	bl	8013e86 <USBD_LL_IsoINIncomplete>
 801c364:	bf00      	nop
 801c366:	3708      	adds	r7, #8
 801c368:	46bd      	mov	sp, r7
 801c36a:	bd80      	pop	{r7, pc}

0801c36c <HAL_PCD_ConnectCallback>:
 801c36c:	b580      	push	{r7, lr}
 801c36e:	b082      	sub	sp, #8
 801c370:	af00      	add	r7, sp, #0
 801c372:	6078      	str	r0, [r7, #4]
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c37a:	4618      	mov	r0, r3
 801c37c:	f7f7 fde7 	bl	8013f4e <USBD_LL_DevConnected>
 801c380:	bf00      	nop
 801c382:	3708      	adds	r7, #8
 801c384:	46bd      	mov	sp, r7
 801c386:	bd80      	pop	{r7, pc}

0801c388 <HAL_PCD_DisconnectCallback>:
 801c388:	b580      	push	{r7, lr}
 801c38a:	b082      	sub	sp, #8
 801c38c:	af00      	add	r7, sp, #0
 801c38e:	6078      	str	r0, [r7, #4]
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c396:	4618      	mov	r0, r3
 801c398:	f7f7 fde4 	bl	8013f64 <USBD_LL_DevDisconnected>
 801c39c:	bf00      	nop
 801c39e:	3708      	adds	r7, #8
 801c3a0:	46bd      	mov	sp, r7
 801c3a2:	bd80      	pop	{r7, pc}

0801c3a4 <USBD_LL_Init>:
 801c3a4:	b580      	push	{r7, lr}
 801c3a6:	b082      	sub	sp, #8
 801c3a8:	af00      	add	r7, sp, #0
 801c3aa:	6078      	str	r0, [r7, #4]
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	781b      	ldrb	r3, [r3, #0]
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d13c      	bne.n	801c42e <USBD_LL_Init+0x8a>
 801c3b4:	4a20      	ldr	r2, [pc, #128]	; (801c438 <USBD_LL_Init+0x94>)
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	4a1e      	ldr	r2, [pc, #120]	; (801c438 <USBD_LL_Init+0x94>)
 801c3c0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 801c3c4:	4b1c      	ldr	r3, [pc, #112]	; (801c438 <USBD_LL_Init+0x94>)
 801c3c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801c3ca:	601a      	str	r2, [r3, #0]
 801c3cc:	4b1a      	ldr	r3, [pc, #104]	; (801c438 <USBD_LL_Init+0x94>)
 801c3ce:	2204      	movs	r2, #4
 801c3d0:	605a      	str	r2, [r3, #4]
 801c3d2:	4b19      	ldr	r3, [pc, #100]	; (801c438 <USBD_LL_Init+0x94>)
 801c3d4:	2202      	movs	r2, #2
 801c3d6:	60da      	str	r2, [r3, #12]
 801c3d8:	4b17      	ldr	r3, [pc, #92]	; (801c438 <USBD_LL_Init+0x94>)
 801c3da:	2200      	movs	r2, #0
 801c3dc:	611a      	str	r2, [r3, #16]
 801c3de:	4b16      	ldr	r3, [pc, #88]	; (801c438 <USBD_LL_Init+0x94>)
 801c3e0:	2202      	movs	r2, #2
 801c3e2:	619a      	str	r2, [r3, #24]
 801c3e4:	4b14      	ldr	r3, [pc, #80]	; (801c438 <USBD_LL_Init+0x94>)
 801c3e6:	2200      	movs	r2, #0
 801c3e8:	61da      	str	r2, [r3, #28]
 801c3ea:	4b13      	ldr	r3, [pc, #76]	; (801c438 <USBD_LL_Init+0x94>)
 801c3ec:	2200      	movs	r2, #0
 801c3ee:	621a      	str	r2, [r3, #32]
 801c3f0:	4b11      	ldr	r3, [pc, #68]	; (801c438 <USBD_LL_Init+0x94>)
 801c3f2:	2200      	movs	r2, #0
 801c3f4:	625a      	str	r2, [r3, #36]	; 0x24
 801c3f6:	4b10      	ldr	r3, [pc, #64]	; (801c438 <USBD_LL_Init+0x94>)
 801c3f8:	2200      	movs	r2, #0
 801c3fa:	62da      	str	r2, [r3, #44]	; 0x2c
 801c3fc:	4b0e      	ldr	r3, [pc, #56]	; (801c438 <USBD_LL_Init+0x94>)
 801c3fe:	2200      	movs	r2, #0
 801c400:	631a      	str	r2, [r3, #48]	; 0x30
 801c402:	480d      	ldr	r0, [pc, #52]	; (801c438 <USBD_LL_Init+0x94>)
 801c404:	f7f1 fcf1 	bl	800ddea <HAL_PCD_Init>
 801c408:	4603      	mov	r3, r0
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d001      	beq.n	801c412 <USBD_LL_Init+0x6e>
 801c40e:	f7ee fe9d 	bl	800b14c <Error_Handler>
 801c412:	2180      	movs	r1, #128	; 0x80
 801c414:	4808      	ldr	r0, [pc, #32]	; (801c438 <USBD_LL_Init+0x94>)
 801c416:	f7f2 ff48 	bl	800f2aa <HAL_PCDEx_SetRxFiFo>
 801c41a:	2240      	movs	r2, #64	; 0x40
 801c41c:	2100      	movs	r1, #0
 801c41e:	4806      	ldr	r0, [pc, #24]	; (801c438 <USBD_LL_Init+0x94>)
 801c420:	f7f2 fefc 	bl	800f21c <HAL_PCDEx_SetTxFiFo>
 801c424:	2280      	movs	r2, #128	; 0x80
 801c426:	2101      	movs	r1, #1
 801c428:	4803      	ldr	r0, [pc, #12]	; (801c438 <USBD_LL_Init+0x94>)
 801c42a:	f7f2 fef7 	bl	800f21c <HAL_PCDEx_SetTxFiFo>
 801c42e:	2300      	movs	r3, #0
 801c430:	4618      	mov	r0, r3
 801c432:	3708      	adds	r7, #8
 801c434:	46bd      	mov	sp, r7
 801c436:	bd80      	pop	{r7, pc}
 801c438:	20009954 	.word	0x20009954

0801c43c <USBD_LL_Start>:
 801c43c:	b580      	push	{r7, lr}
 801c43e:	b084      	sub	sp, #16
 801c440:	af00      	add	r7, sp, #0
 801c442:	6078      	str	r0, [r7, #4]
 801c444:	2300      	movs	r3, #0
 801c446:	73fb      	strb	r3, [r7, #15]
 801c448:	2300      	movs	r3, #0
 801c44a:	73bb      	strb	r3, [r7, #14]
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c452:	4618      	mov	r0, r3
 801c454:	f7f1 fde6 	bl	800e024 <HAL_PCD_Start>
 801c458:	4603      	mov	r3, r0
 801c45a:	73fb      	strb	r3, [r7, #15]
 801c45c:	7bfb      	ldrb	r3, [r7, #15]
 801c45e:	4618      	mov	r0, r3
 801c460:	f000 f942 	bl	801c6e8 <USBD_Get_USB_Status>
 801c464:	4603      	mov	r3, r0
 801c466:	73bb      	strb	r3, [r7, #14]
 801c468:	7bbb      	ldrb	r3, [r7, #14]
 801c46a:	4618      	mov	r0, r3
 801c46c:	3710      	adds	r7, #16
 801c46e:	46bd      	mov	sp, r7
 801c470:	bd80      	pop	{r7, pc}

0801c472 <USBD_LL_OpenEP>:
 801c472:	b580      	push	{r7, lr}
 801c474:	b084      	sub	sp, #16
 801c476:	af00      	add	r7, sp, #0
 801c478:	6078      	str	r0, [r7, #4]
 801c47a:	4608      	mov	r0, r1
 801c47c:	4611      	mov	r1, r2
 801c47e:	461a      	mov	r2, r3
 801c480:	4603      	mov	r3, r0
 801c482:	70fb      	strb	r3, [r7, #3]
 801c484:	460b      	mov	r3, r1
 801c486:	70bb      	strb	r3, [r7, #2]
 801c488:	4613      	mov	r3, r2
 801c48a:	803b      	strh	r3, [r7, #0]
 801c48c:	2300      	movs	r3, #0
 801c48e:	73fb      	strb	r3, [r7, #15]
 801c490:	2300      	movs	r3, #0
 801c492:	73bb      	strb	r3, [r7, #14]
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801c49a:	78bb      	ldrb	r3, [r7, #2]
 801c49c:	883a      	ldrh	r2, [r7, #0]
 801c49e:	78f9      	ldrb	r1, [r7, #3]
 801c4a0:	f7f2 fab7 	bl	800ea12 <HAL_PCD_EP_Open>
 801c4a4:	4603      	mov	r3, r0
 801c4a6:	73fb      	strb	r3, [r7, #15]
 801c4a8:	7bfb      	ldrb	r3, [r7, #15]
 801c4aa:	4618      	mov	r0, r3
 801c4ac:	f000 f91c 	bl	801c6e8 <USBD_Get_USB_Status>
 801c4b0:	4603      	mov	r3, r0
 801c4b2:	73bb      	strb	r3, [r7, #14]
 801c4b4:	7bbb      	ldrb	r3, [r7, #14]
 801c4b6:	4618      	mov	r0, r3
 801c4b8:	3710      	adds	r7, #16
 801c4ba:	46bd      	mov	sp, r7
 801c4bc:	bd80      	pop	{r7, pc}

0801c4be <USBD_LL_CloseEP>:
 801c4be:	b580      	push	{r7, lr}
 801c4c0:	b084      	sub	sp, #16
 801c4c2:	af00      	add	r7, sp, #0
 801c4c4:	6078      	str	r0, [r7, #4]
 801c4c6:	460b      	mov	r3, r1
 801c4c8:	70fb      	strb	r3, [r7, #3]
 801c4ca:	2300      	movs	r3, #0
 801c4cc:	73fb      	strb	r3, [r7, #15]
 801c4ce:	2300      	movs	r3, #0
 801c4d0:	73bb      	strb	r3, [r7, #14]
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c4d8:	78fa      	ldrb	r2, [r7, #3]
 801c4da:	4611      	mov	r1, r2
 801c4dc:	4618      	mov	r0, r3
 801c4de:	f7f2 fb00 	bl	800eae2 <HAL_PCD_EP_Close>
 801c4e2:	4603      	mov	r3, r0
 801c4e4:	73fb      	strb	r3, [r7, #15]
 801c4e6:	7bfb      	ldrb	r3, [r7, #15]
 801c4e8:	4618      	mov	r0, r3
 801c4ea:	f000 f8fd 	bl	801c6e8 <USBD_Get_USB_Status>
 801c4ee:	4603      	mov	r3, r0
 801c4f0:	73bb      	strb	r3, [r7, #14]
 801c4f2:	7bbb      	ldrb	r3, [r7, #14]
 801c4f4:	4618      	mov	r0, r3
 801c4f6:	3710      	adds	r7, #16
 801c4f8:	46bd      	mov	sp, r7
 801c4fa:	bd80      	pop	{r7, pc}

0801c4fc <USBD_LL_StallEP>:
 801c4fc:	b580      	push	{r7, lr}
 801c4fe:	b084      	sub	sp, #16
 801c500:	af00      	add	r7, sp, #0
 801c502:	6078      	str	r0, [r7, #4]
 801c504:	460b      	mov	r3, r1
 801c506:	70fb      	strb	r3, [r7, #3]
 801c508:	2300      	movs	r3, #0
 801c50a:	73fb      	strb	r3, [r7, #15]
 801c50c:	2300      	movs	r3, #0
 801c50e:	73bb      	strb	r3, [r7, #14]
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c516:	78fa      	ldrb	r2, [r7, #3]
 801c518:	4611      	mov	r1, r2
 801c51a:	4618      	mov	r0, r3
 801c51c:	f7f2 fbd8 	bl	800ecd0 <HAL_PCD_EP_SetStall>
 801c520:	4603      	mov	r3, r0
 801c522:	73fb      	strb	r3, [r7, #15]
 801c524:	7bfb      	ldrb	r3, [r7, #15]
 801c526:	4618      	mov	r0, r3
 801c528:	f000 f8de 	bl	801c6e8 <USBD_Get_USB_Status>
 801c52c:	4603      	mov	r3, r0
 801c52e:	73bb      	strb	r3, [r7, #14]
 801c530:	7bbb      	ldrb	r3, [r7, #14]
 801c532:	4618      	mov	r0, r3
 801c534:	3710      	adds	r7, #16
 801c536:	46bd      	mov	sp, r7
 801c538:	bd80      	pop	{r7, pc}

0801c53a <USBD_LL_ClearStallEP>:
 801c53a:	b580      	push	{r7, lr}
 801c53c:	b084      	sub	sp, #16
 801c53e:	af00      	add	r7, sp, #0
 801c540:	6078      	str	r0, [r7, #4]
 801c542:	460b      	mov	r3, r1
 801c544:	70fb      	strb	r3, [r7, #3]
 801c546:	2300      	movs	r3, #0
 801c548:	73fb      	strb	r3, [r7, #15]
 801c54a:	2300      	movs	r3, #0
 801c54c:	73bb      	strb	r3, [r7, #14]
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c554:	78fa      	ldrb	r2, [r7, #3]
 801c556:	4611      	mov	r1, r2
 801c558:	4618      	mov	r0, r3
 801c55a:	f7f2 fc1d 	bl	800ed98 <HAL_PCD_EP_ClrStall>
 801c55e:	4603      	mov	r3, r0
 801c560:	73fb      	strb	r3, [r7, #15]
 801c562:	7bfb      	ldrb	r3, [r7, #15]
 801c564:	4618      	mov	r0, r3
 801c566:	f000 f8bf 	bl	801c6e8 <USBD_Get_USB_Status>
 801c56a:	4603      	mov	r3, r0
 801c56c:	73bb      	strb	r3, [r7, #14]
 801c56e:	7bbb      	ldrb	r3, [r7, #14]
 801c570:	4618      	mov	r0, r3
 801c572:	3710      	adds	r7, #16
 801c574:	46bd      	mov	sp, r7
 801c576:	bd80      	pop	{r7, pc}

0801c578 <USBD_LL_IsStallEP>:
 801c578:	b480      	push	{r7}
 801c57a:	b085      	sub	sp, #20
 801c57c:	af00      	add	r7, sp, #0
 801c57e:	6078      	str	r0, [r7, #4]
 801c580:	460b      	mov	r3, r1
 801c582:	70fb      	strb	r3, [r7, #3]
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c58a:	60fb      	str	r3, [r7, #12]
 801c58c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c590:	2b00      	cmp	r3, #0
 801c592:	da0b      	bge.n	801c5ac <USBD_LL_IsStallEP+0x34>
 801c594:	78fb      	ldrb	r3, [r7, #3]
 801c596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c59a:	68f9      	ldr	r1, [r7, #12]
 801c59c:	4613      	mov	r3, r2
 801c59e:	00db      	lsls	r3, r3, #3
 801c5a0:	4413      	add	r3, r2
 801c5a2:	009b      	lsls	r3, r3, #2
 801c5a4:	440b      	add	r3, r1
 801c5a6:	333e      	adds	r3, #62	; 0x3e
 801c5a8:	781b      	ldrb	r3, [r3, #0]
 801c5aa:	e00b      	b.n	801c5c4 <USBD_LL_IsStallEP+0x4c>
 801c5ac:	78fb      	ldrb	r3, [r7, #3]
 801c5ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c5b2:	68f9      	ldr	r1, [r7, #12]
 801c5b4:	4613      	mov	r3, r2
 801c5b6:	00db      	lsls	r3, r3, #3
 801c5b8:	4413      	add	r3, r2
 801c5ba:	009b      	lsls	r3, r3, #2
 801c5bc:	440b      	add	r3, r1
 801c5be:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801c5c2:	781b      	ldrb	r3, [r3, #0]
 801c5c4:	4618      	mov	r0, r3
 801c5c6:	3714      	adds	r7, #20
 801c5c8:	46bd      	mov	sp, r7
 801c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5ce:	4770      	bx	lr

0801c5d0 <USBD_LL_SetUSBAddress>:
 801c5d0:	b580      	push	{r7, lr}
 801c5d2:	b084      	sub	sp, #16
 801c5d4:	af00      	add	r7, sp, #0
 801c5d6:	6078      	str	r0, [r7, #4]
 801c5d8:	460b      	mov	r3, r1
 801c5da:	70fb      	strb	r3, [r7, #3]
 801c5dc:	2300      	movs	r3, #0
 801c5de:	73fb      	strb	r3, [r7, #15]
 801c5e0:	2300      	movs	r3, #0
 801c5e2:	73bb      	strb	r3, [r7, #14]
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c5ea:	78fa      	ldrb	r2, [r7, #3]
 801c5ec:	4611      	mov	r1, r2
 801c5ee:	4618      	mov	r0, r3
 801c5f0:	f7f2 f9ea 	bl	800e9c8 <HAL_PCD_SetAddress>
 801c5f4:	4603      	mov	r3, r0
 801c5f6:	73fb      	strb	r3, [r7, #15]
 801c5f8:	7bfb      	ldrb	r3, [r7, #15]
 801c5fa:	4618      	mov	r0, r3
 801c5fc:	f000 f874 	bl	801c6e8 <USBD_Get_USB_Status>
 801c600:	4603      	mov	r3, r0
 801c602:	73bb      	strb	r3, [r7, #14]
 801c604:	7bbb      	ldrb	r3, [r7, #14]
 801c606:	4618      	mov	r0, r3
 801c608:	3710      	adds	r7, #16
 801c60a:	46bd      	mov	sp, r7
 801c60c:	bd80      	pop	{r7, pc}

0801c60e <USBD_LL_Transmit>:
 801c60e:	b580      	push	{r7, lr}
 801c610:	b086      	sub	sp, #24
 801c612:	af00      	add	r7, sp, #0
 801c614:	60f8      	str	r0, [r7, #12]
 801c616:	607a      	str	r2, [r7, #4]
 801c618:	603b      	str	r3, [r7, #0]
 801c61a:	460b      	mov	r3, r1
 801c61c:	72fb      	strb	r3, [r7, #11]
 801c61e:	2300      	movs	r3, #0
 801c620:	75fb      	strb	r3, [r7, #23]
 801c622:	2300      	movs	r3, #0
 801c624:	75bb      	strb	r3, [r7, #22]
 801c626:	68fb      	ldr	r3, [r7, #12]
 801c628:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801c62c:	7af9      	ldrb	r1, [r7, #11]
 801c62e:	683b      	ldr	r3, [r7, #0]
 801c630:	687a      	ldr	r2, [r7, #4]
 801c632:	f7f2 fb03 	bl	800ec3c <HAL_PCD_EP_Transmit>
 801c636:	4603      	mov	r3, r0
 801c638:	75fb      	strb	r3, [r7, #23]
 801c63a:	7dfb      	ldrb	r3, [r7, #23]
 801c63c:	4618      	mov	r0, r3
 801c63e:	f000 f853 	bl	801c6e8 <USBD_Get_USB_Status>
 801c642:	4603      	mov	r3, r0
 801c644:	75bb      	strb	r3, [r7, #22]
 801c646:	7dbb      	ldrb	r3, [r7, #22]
 801c648:	4618      	mov	r0, r3
 801c64a:	3718      	adds	r7, #24
 801c64c:	46bd      	mov	sp, r7
 801c64e:	bd80      	pop	{r7, pc}

0801c650 <USBD_LL_PrepareReceive>:
 801c650:	b580      	push	{r7, lr}
 801c652:	b086      	sub	sp, #24
 801c654:	af00      	add	r7, sp, #0
 801c656:	60f8      	str	r0, [r7, #12]
 801c658:	607a      	str	r2, [r7, #4]
 801c65a:	603b      	str	r3, [r7, #0]
 801c65c:	460b      	mov	r3, r1
 801c65e:	72fb      	strb	r3, [r7, #11]
 801c660:	2300      	movs	r3, #0
 801c662:	75fb      	strb	r3, [r7, #23]
 801c664:	2300      	movs	r3, #0
 801c666:	75bb      	strb	r3, [r7, #22]
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801c66e:	7af9      	ldrb	r1, [r7, #11]
 801c670:	683b      	ldr	r3, [r7, #0]
 801c672:	687a      	ldr	r2, [r7, #4]
 801c674:	f7f2 fa7f 	bl	800eb76 <HAL_PCD_EP_Receive>
 801c678:	4603      	mov	r3, r0
 801c67a:	75fb      	strb	r3, [r7, #23]
 801c67c:	7dfb      	ldrb	r3, [r7, #23]
 801c67e:	4618      	mov	r0, r3
 801c680:	f000 f832 	bl	801c6e8 <USBD_Get_USB_Status>
 801c684:	4603      	mov	r3, r0
 801c686:	75bb      	strb	r3, [r7, #22]
 801c688:	7dbb      	ldrb	r3, [r7, #22]
 801c68a:	4618      	mov	r0, r3
 801c68c:	3718      	adds	r7, #24
 801c68e:	46bd      	mov	sp, r7
 801c690:	bd80      	pop	{r7, pc}

0801c692 <USBD_LL_GetRxDataSize>:
 801c692:	b580      	push	{r7, lr}
 801c694:	b082      	sub	sp, #8
 801c696:	af00      	add	r7, sp, #0
 801c698:	6078      	str	r0, [r7, #4]
 801c69a:	460b      	mov	r3, r1
 801c69c:	70fb      	strb	r3, [r7, #3]
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c6a4:	78fa      	ldrb	r2, [r7, #3]
 801c6a6:	4611      	mov	r1, r2
 801c6a8:	4618      	mov	r0, r3
 801c6aa:	f7f2 faaf 	bl	800ec0c <HAL_PCD_EP_GetRxCount>
 801c6ae:	4603      	mov	r3, r0
 801c6b0:	4618      	mov	r0, r3
 801c6b2:	3708      	adds	r7, #8
 801c6b4:	46bd      	mov	sp, r7
 801c6b6:	bd80      	pop	{r7, pc}

0801c6b8 <USBD_static_malloc>:
 801c6b8:	b480      	push	{r7}
 801c6ba:	b083      	sub	sp, #12
 801c6bc:	af00      	add	r7, sp, #0
 801c6be:	6078      	str	r0, [r7, #4]
 801c6c0:	4b03      	ldr	r3, [pc, #12]	; (801c6d0 <USBD_static_malloc+0x18>)
 801c6c2:	4618      	mov	r0, r3
 801c6c4:	370c      	adds	r7, #12
 801c6c6:	46bd      	mov	sp, r7
 801c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6cc:	4770      	bx	lr
 801c6ce:	bf00      	nop
 801c6d0:	20009e60 	.word	0x20009e60

0801c6d4 <USBD_static_free>:
 801c6d4:	b480      	push	{r7}
 801c6d6:	b083      	sub	sp, #12
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	6078      	str	r0, [r7, #4]
 801c6dc:	bf00      	nop
 801c6de:	370c      	adds	r7, #12
 801c6e0:	46bd      	mov	sp, r7
 801c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6e6:	4770      	bx	lr

0801c6e8 <USBD_Get_USB_Status>:
 801c6e8:	b480      	push	{r7}
 801c6ea:	b085      	sub	sp, #20
 801c6ec:	af00      	add	r7, sp, #0
 801c6ee:	4603      	mov	r3, r0
 801c6f0:	71fb      	strb	r3, [r7, #7]
 801c6f2:	2300      	movs	r3, #0
 801c6f4:	73fb      	strb	r3, [r7, #15]
 801c6f6:	79fb      	ldrb	r3, [r7, #7]
 801c6f8:	2b03      	cmp	r3, #3
 801c6fa:	d817      	bhi.n	801c72c <USBD_Get_USB_Status+0x44>
 801c6fc:	a201      	add	r2, pc, #4	; (adr r2, 801c704 <USBD_Get_USB_Status+0x1c>)
 801c6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c702:	bf00      	nop
 801c704:	0801c715 	.word	0x0801c715
 801c708:	0801c71b 	.word	0x0801c71b
 801c70c:	0801c721 	.word	0x0801c721
 801c710:	0801c727 	.word	0x0801c727
 801c714:	2300      	movs	r3, #0
 801c716:	73fb      	strb	r3, [r7, #15]
 801c718:	e00b      	b.n	801c732 <USBD_Get_USB_Status+0x4a>
 801c71a:	2303      	movs	r3, #3
 801c71c:	73fb      	strb	r3, [r7, #15]
 801c71e:	e008      	b.n	801c732 <USBD_Get_USB_Status+0x4a>
 801c720:	2301      	movs	r3, #1
 801c722:	73fb      	strb	r3, [r7, #15]
 801c724:	e005      	b.n	801c732 <USBD_Get_USB_Status+0x4a>
 801c726:	2303      	movs	r3, #3
 801c728:	73fb      	strb	r3, [r7, #15]
 801c72a:	e002      	b.n	801c732 <USBD_Get_USB_Status+0x4a>
 801c72c:	2303      	movs	r3, #3
 801c72e:	73fb      	strb	r3, [r7, #15]
 801c730:	bf00      	nop
 801c732:	7bfb      	ldrb	r3, [r7, #15]
 801c734:	4618      	mov	r0, r3
 801c736:	3714      	adds	r7, #20
 801c738:	46bd      	mov	sp, r7
 801c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c73e:	4770      	bx	lr

0801c740 <malloc>:
 801c740:	4b02      	ldr	r3, [pc, #8]	; (801c74c <malloc+0xc>)
 801c742:	4601      	mov	r1, r0
 801c744:	6818      	ldr	r0, [r3, #0]
 801c746:	f000 b82b 	b.w	801c7a0 <_malloc_r>
 801c74a:	bf00      	nop
 801c74c:	200002f0 	.word	0x200002f0

0801c750 <free>:
 801c750:	4b02      	ldr	r3, [pc, #8]	; (801c75c <free+0xc>)
 801c752:	4601      	mov	r1, r0
 801c754:	6818      	ldr	r0, [r3, #0]
 801c756:	f002 be75 	b.w	801f444 <_free_r>
 801c75a:	bf00      	nop
 801c75c:	200002f0 	.word	0x200002f0

0801c760 <sbrk_aligned>:
 801c760:	b570      	push	{r4, r5, r6, lr}
 801c762:	4e0e      	ldr	r6, [pc, #56]	; (801c79c <sbrk_aligned+0x3c>)
 801c764:	460c      	mov	r4, r1
 801c766:	6831      	ldr	r1, [r6, #0]
 801c768:	4605      	mov	r5, r0
 801c76a:	b911      	cbnz	r1, 801c772 <sbrk_aligned+0x12>
 801c76c:	f001 ff82 	bl	801e674 <_sbrk_r>
 801c770:	6030      	str	r0, [r6, #0]
 801c772:	4621      	mov	r1, r4
 801c774:	4628      	mov	r0, r5
 801c776:	f001 ff7d 	bl	801e674 <_sbrk_r>
 801c77a:	1c43      	adds	r3, r0, #1
 801c77c:	d00a      	beq.n	801c794 <sbrk_aligned+0x34>
 801c77e:	1cc4      	adds	r4, r0, #3
 801c780:	f024 0403 	bic.w	r4, r4, #3
 801c784:	42a0      	cmp	r0, r4
 801c786:	d007      	beq.n	801c798 <sbrk_aligned+0x38>
 801c788:	1a21      	subs	r1, r4, r0
 801c78a:	4628      	mov	r0, r5
 801c78c:	f001 ff72 	bl	801e674 <_sbrk_r>
 801c790:	3001      	adds	r0, #1
 801c792:	d101      	bne.n	801c798 <sbrk_aligned+0x38>
 801c794:	f04f 34ff 	mov.w	r4, #4294967295
 801c798:	4620      	mov	r0, r4
 801c79a:	bd70      	pop	{r4, r5, r6, pc}
 801c79c:	2000a084 	.word	0x2000a084

0801c7a0 <_malloc_r>:
 801c7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c7a4:	1ccd      	adds	r5, r1, #3
 801c7a6:	f025 0503 	bic.w	r5, r5, #3
 801c7aa:	3508      	adds	r5, #8
 801c7ac:	2d0c      	cmp	r5, #12
 801c7ae:	bf38      	it	cc
 801c7b0:	250c      	movcc	r5, #12
 801c7b2:	2d00      	cmp	r5, #0
 801c7b4:	4607      	mov	r7, r0
 801c7b6:	db01      	blt.n	801c7bc <_malloc_r+0x1c>
 801c7b8:	42a9      	cmp	r1, r5
 801c7ba:	d905      	bls.n	801c7c8 <_malloc_r+0x28>
 801c7bc:	230c      	movs	r3, #12
 801c7be:	603b      	str	r3, [r7, #0]
 801c7c0:	2600      	movs	r6, #0
 801c7c2:	4630      	mov	r0, r6
 801c7c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c7c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801c89c <_malloc_r+0xfc>
 801c7cc:	f000 f868 	bl	801c8a0 <__malloc_lock>
 801c7d0:	f8d8 3000 	ldr.w	r3, [r8]
 801c7d4:	461c      	mov	r4, r3
 801c7d6:	bb5c      	cbnz	r4, 801c830 <_malloc_r+0x90>
 801c7d8:	4629      	mov	r1, r5
 801c7da:	4638      	mov	r0, r7
 801c7dc:	f7ff ffc0 	bl	801c760 <sbrk_aligned>
 801c7e0:	1c43      	adds	r3, r0, #1
 801c7e2:	4604      	mov	r4, r0
 801c7e4:	d155      	bne.n	801c892 <_malloc_r+0xf2>
 801c7e6:	f8d8 4000 	ldr.w	r4, [r8]
 801c7ea:	4626      	mov	r6, r4
 801c7ec:	2e00      	cmp	r6, #0
 801c7ee:	d145      	bne.n	801c87c <_malloc_r+0xdc>
 801c7f0:	2c00      	cmp	r4, #0
 801c7f2:	d048      	beq.n	801c886 <_malloc_r+0xe6>
 801c7f4:	6823      	ldr	r3, [r4, #0]
 801c7f6:	4631      	mov	r1, r6
 801c7f8:	4638      	mov	r0, r7
 801c7fa:	eb04 0903 	add.w	r9, r4, r3
 801c7fe:	f001 ff39 	bl	801e674 <_sbrk_r>
 801c802:	4581      	cmp	r9, r0
 801c804:	d13f      	bne.n	801c886 <_malloc_r+0xe6>
 801c806:	6821      	ldr	r1, [r4, #0]
 801c808:	1a6d      	subs	r5, r5, r1
 801c80a:	4629      	mov	r1, r5
 801c80c:	4638      	mov	r0, r7
 801c80e:	f7ff ffa7 	bl	801c760 <sbrk_aligned>
 801c812:	3001      	adds	r0, #1
 801c814:	d037      	beq.n	801c886 <_malloc_r+0xe6>
 801c816:	6823      	ldr	r3, [r4, #0]
 801c818:	442b      	add	r3, r5
 801c81a:	6023      	str	r3, [r4, #0]
 801c81c:	f8d8 3000 	ldr.w	r3, [r8]
 801c820:	2b00      	cmp	r3, #0
 801c822:	d038      	beq.n	801c896 <_malloc_r+0xf6>
 801c824:	685a      	ldr	r2, [r3, #4]
 801c826:	42a2      	cmp	r2, r4
 801c828:	d12b      	bne.n	801c882 <_malloc_r+0xe2>
 801c82a:	2200      	movs	r2, #0
 801c82c:	605a      	str	r2, [r3, #4]
 801c82e:	e00f      	b.n	801c850 <_malloc_r+0xb0>
 801c830:	6822      	ldr	r2, [r4, #0]
 801c832:	1b52      	subs	r2, r2, r5
 801c834:	d41f      	bmi.n	801c876 <_malloc_r+0xd6>
 801c836:	2a0b      	cmp	r2, #11
 801c838:	d917      	bls.n	801c86a <_malloc_r+0xca>
 801c83a:	1961      	adds	r1, r4, r5
 801c83c:	42a3      	cmp	r3, r4
 801c83e:	6025      	str	r5, [r4, #0]
 801c840:	bf18      	it	ne
 801c842:	6059      	strne	r1, [r3, #4]
 801c844:	6863      	ldr	r3, [r4, #4]
 801c846:	bf08      	it	eq
 801c848:	f8c8 1000 	streq.w	r1, [r8]
 801c84c:	5162      	str	r2, [r4, r5]
 801c84e:	604b      	str	r3, [r1, #4]
 801c850:	4638      	mov	r0, r7
 801c852:	f104 060b 	add.w	r6, r4, #11
 801c856:	f000 f829 	bl	801c8ac <__malloc_unlock>
 801c85a:	f026 0607 	bic.w	r6, r6, #7
 801c85e:	1d23      	adds	r3, r4, #4
 801c860:	1af2      	subs	r2, r6, r3
 801c862:	d0ae      	beq.n	801c7c2 <_malloc_r+0x22>
 801c864:	1b9b      	subs	r3, r3, r6
 801c866:	50a3      	str	r3, [r4, r2]
 801c868:	e7ab      	b.n	801c7c2 <_malloc_r+0x22>
 801c86a:	42a3      	cmp	r3, r4
 801c86c:	6862      	ldr	r2, [r4, #4]
 801c86e:	d1dd      	bne.n	801c82c <_malloc_r+0x8c>
 801c870:	f8c8 2000 	str.w	r2, [r8]
 801c874:	e7ec      	b.n	801c850 <_malloc_r+0xb0>
 801c876:	4623      	mov	r3, r4
 801c878:	6864      	ldr	r4, [r4, #4]
 801c87a:	e7ac      	b.n	801c7d6 <_malloc_r+0x36>
 801c87c:	4634      	mov	r4, r6
 801c87e:	6876      	ldr	r6, [r6, #4]
 801c880:	e7b4      	b.n	801c7ec <_malloc_r+0x4c>
 801c882:	4613      	mov	r3, r2
 801c884:	e7cc      	b.n	801c820 <_malloc_r+0x80>
 801c886:	230c      	movs	r3, #12
 801c888:	603b      	str	r3, [r7, #0]
 801c88a:	4638      	mov	r0, r7
 801c88c:	f000 f80e 	bl	801c8ac <__malloc_unlock>
 801c890:	e797      	b.n	801c7c2 <_malloc_r+0x22>
 801c892:	6025      	str	r5, [r4, #0]
 801c894:	e7dc      	b.n	801c850 <_malloc_r+0xb0>
 801c896:	605b      	str	r3, [r3, #4]
 801c898:	deff      	udf	#255	; 0xff
 801c89a:	bf00      	nop
 801c89c:	2000a080 	.word	0x2000a080

0801c8a0 <__malloc_lock>:
 801c8a0:	4801      	ldr	r0, [pc, #4]	; (801c8a8 <__malloc_lock+0x8>)
 801c8a2:	f001 bf33 	b.w	801e70c <__retarget_lock_acquire_recursive>
 801c8a6:	bf00      	nop
 801c8a8:	2000a1c8 	.word	0x2000a1c8

0801c8ac <__malloc_unlock>:
 801c8ac:	4801      	ldr	r0, [pc, #4]	; (801c8b4 <__malloc_unlock+0x8>)
 801c8ae:	f001 bf2e 	b.w	801e70e <__retarget_lock_release_recursive>
 801c8b2:	bf00      	nop
 801c8b4:	2000a1c8 	.word	0x2000a1c8

0801c8b8 <realloc>:
 801c8b8:	4b02      	ldr	r3, [pc, #8]	; (801c8c4 <realloc+0xc>)
 801c8ba:	460a      	mov	r2, r1
 801c8bc:	4601      	mov	r1, r0
 801c8be:	6818      	ldr	r0, [r3, #0]
 801c8c0:	f000 b802 	b.w	801c8c8 <_realloc_r>
 801c8c4:	200002f0 	.word	0x200002f0

0801c8c8 <_realloc_r>:
 801c8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8cc:	4680      	mov	r8, r0
 801c8ce:	4614      	mov	r4, r2
 801c8d0:	460e      	mov	r6, r1
 801c8d2:	b921      	cbnz	r1, 801c8de <_realloc_r+0x16>
 801c8d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c8d8:	4611      	mov	r1, r2
 801c8da:	f7ff bf61 	b.w	801c7a0 <_malloc_r>
 801c8de:	b92a      	cbnz	r2, 801c8ec <_realloc_r+0x24>
 801c8e0:	f002 fdb0 	bl	801f444 <_free_r>
 801c8e4:	4625      	mov	r5, r4
 801c8e6:	4628      	mov	r0, r5
 801c8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8ec:	f003 fe0d 	bl	802050a <_malloc_usable_size_r>
 801c8f0:	4284      	cmp	r4, r0
 801c8f2:	4607      	mov	r7, r0
 801c8f4:	d802      	bhi.n	801c8fc <_realloc_r+0x34>
 801c8f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c8fa:	d812      	bhi.n	801c922 <_realloc_r+0x5a>
 801c8fc:	4621      	mov	r1, r4
 801c8fe:	4640      	mov	r0, r8
 801c900:	f7ff ff4e 	bl	801c7a0 <_malloc_r>
 801c904:	4605      	mov	r5, r0
 801c906:	2800      	cmp	r0, #0
 801c908:	d0ed      	beq.n	801c8e6 <_realloc_r+0x1e>
 801c90a:	42bc      	cmp	r4, r7
 801c90c:	4622      	mov	r2, r4
 801c90e:	4631      	mov	r1, r6
 801c910:	bf28      	it	cs
 801c912:	463a      	movcs	r2, r7
 801c914:	f001 fefc 	bl	801e710 <memcpy>
 801c918:	4631      	mov	r1, r6
 801c91a:	4640      	mov	r0, r8
 801c91c:	f002 fd92 	bl	801f444 <_free_r>
 801c920:	e7e1      	b.n	801c8e6 <_realloc_r+0x1e>
 801c922:	4635      	mov	r5, r6
 801c924:	e7df      	b.n	801c8e6 <_realloc_r+0x1e>

0801c926 <sulp>:
 801c926:	b570      	push	{r4, r5, r6, lr}
 801c928:	4604      	mov	r4, r0
 801c92a:	460d      	mov	r5, r1
 801c92c:	ec45 4b10 	vmov	d0, r4, r5
 801c930:	4616      	mov	r6, r2
 801c932:	f003 fca9 	bl	8020288 <__ulp>
 801c936:	ec51 0b10 	vmov	r0, r1, d0
 801c93a:	b17e      	cbz	r6, 801c95c <sulp+0x36>
 801c93c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c940:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c944:	2b00      	cmp	r3, #0
 801c946:	dd09      	ble.n	801c95c <sulp+0x36>
 801c948:	051b      	lsls	r3, r3, #20
 801c94a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801c94e:	2400      	movs	r4, #0
 801c950:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801c954:	4622      	mov	r2, r4
 801c956:	462b      	mov	r3, r5
 801c958:	f7e3 fe4e 	bl	80005f8 <__aeabi_dmul>
 801c95c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c960 <_strtod_l>:
 801c960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c964:	ed2d 8b02 	vpush	{d8}
 801c968:	b09b      	sub	sp, #108	; 0x6c
 801c96a:	4604      	mov	r4, r0
 801c96c:	9213      	str	r2, [sp, #76]	; 0x4c
 801c96e:	2200      	movs	r2, #0
 801c970:	9216      	str	r2, [sp, #88]	; 0x58
 801c972:	460d      	mov	r5, r1
 801c974:	f04f 0800 	mov.w	r8, #0
 801c978:	f04f 0900 	mov.w	r9, #0
 801c97c:	460a      	mov	r2, r1
 801c97e:	9215      	str	r2, [sp, #84]	; 0x54
 801c980:	7811      	ldrb	r1, [r2, #0]
 801c982:	292b      	cmp	r1, #43	; 0x2b
 801c984:	d04c      	beq.n	801ca20 <_strtod_l+0xc0>
 801c986:	d83a      	bhi.n	801c9fe <_strtod_l+0x9e>
 801c988:	290d      	cmp	r1, #13
 801c98a:	d834      	bhi.n	801c9f6 <_strtod_l+0x96>
 801c98c:	2908      	cmp	r1, #8
 801c98e:	d834      	bhi.n	801c9fa <_strtod_l+0x9a>
 801c990:	2900      	cmp	r1, #0
 801c992:	d03d      	beq.n	801ca10 <_strtod_l+0xb0>
 801c994:	2200      	movs	r2, #0
 801c996:	920a      	str	r2, [sp, #40]	; 0x28
 801c998:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801c99a:	7832      	ldrb	r2, [r6, #0]
 801c99c:	2a30      	cmp	r2, #48	; 0x30
 801c99e:	f040 80b4 	bne.w	801cb0a <_strtod_l+0x1aa>
 801c9a2:	7872      	ldrb	r2, [r6, #1]
 801c9a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801c9a8:	2a58      	cmp	r2, #88	; 0x58
 801c9aa:	d170      	bne.n	801ca8e <_strtod_l+0x12e>
 801c9ac:	9302      	str	r3, [sp, #8]
 801c9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c9b0:	9301      	str	r3, [sp, #4]
 801c9b2:	ab16      	add	r3, sp, #88	; 0x58
 801c9b4:	9300      	str	r3, [sp, #0]
 801c9b6:	4a8e      	ldr	r2, [pc, #568]	; (801cbf0 <_strtod_l+0x290>)
 801c9b8:	ab17      	add	r3, sp, #92	; 0x5c
 801c9ba:	a915      	add	r1, sp, #84	; 0x54
 801c9bc:	4620      	mov	r0, r4
 801c9be:	f002 fdf5 	bl	801f5ac <__gethex>
 801c9c2:	f010 070f 	ands.w	r7, r0, #15
 801c9c6:	4605      	mov	r5, r0
 801c9c8:	d005      	beq.n	801c9d6 <_strtod_l+0x76>
 801c9ca:	2f06      	cmp	r7, #6
 801c9cc:	d12a      	bne.n	801ca24 <_strtod_l+0xc4>
 801c9ce:	3601      	adds	r6, #1
 801c9d0:	2300      	movs	r3, #0
 801c9d2:	9615      	str	r6, [sp, #84]	; 0x54
 801c9d4:	930a      	str	r3, [sp, #40]	; 0x28
 801c9d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c9d8:	2b00      	cmp	r3, #0
 801c9da:	f040 857f 	bne.w	801d4dc <_strtod_l+0xb7c>
 801c9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c9e0:	b1db      	cbz	r3, 801ca1a <_strtod_l+0xba>
 801c9e2:	4642      	mov	r2, r8
 801c9e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c9e8:	ec43 2b10 	vmov	d0, r2, r3
 801c9ec:	b01b      	add	sp, #108	; 0x6c
 801c9ee:	ecbd 8b02 	vpop	{d8}
 801c9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9f6:	2920      	cmp	r1, #32
 801c9f8:	d1cc      	bne.n	801c994 <_strtod_l+0x34>
 801c9fa:	3201      	adds	r2, #1
 801c9fc:	e7bf      	b.n	801c97e <_strtod_l+0x1e>
 801c9fe:	292d      	cmp	r1, #45	; 0x2d
 801ca00:	d1c8      	bne.n	801c994 <_strtod_l+0x34>
 801ca02:	2101      	movs	r1, #1
 801ca04:	910a      	str	r1, [sp, #40]	; 0x28
 801ca06:	1c51      	adds	r1, r2, #1
 801ca08:	9115      	str	r1, [sp, #84]	; 0x54
 801ca0a:	7852      	ldrb	r2, [r2, #1]
 801ca0c:	2a00      	cmp	r2, #0
 801ca0e:	d1c3      	bne.n	801c998 <_strtod_l+0x38>
 801ca10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ca12:	9515      	str	r5, [sp, #84]	; 0x54
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	f040 855f 	bne.w	801d4d8 <_strtod_l+0xb78>
 801ca1a:	4642      	mov	r2, r8
 801ca1c:	464b      	mov	r3, r9
 801ca1e:	e7e3      	b.n	801c9e8 <_strtod_l+0x88>
 801ca20:	2100      	movs	r1, #0
 801ca22:	e7ef      	b.n	801ca04 <_strtod_l+0xa4>
 801ca24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ca26:	b13a      	cbz	r2, 801ca38 <_strtod_l+0xd8>
 801ca28:	2135      	movs	r1, #53	; 0x35
 801ca2a:	a818      	add	r0, sp, #96	; 0x60
 801ca2c:	f003 fd29 	bl	8020482 <__copybits>
 801ca30:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ca32:	4620      	mov	r0, r4
 801ca34:	f003 f8fc 	bl	801fc30 <_Bfree>
 801ca38:	3f01      	subs	r7, #1
 801ca3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801ca3c:	2f04      	cmp	r7, #4
 801ca3e:	d806      	bhi.n	801ca4e <_strtod_l+0xee>
 801ca40:	e8df f007 	tbb	[pc, r7]
 801ca44:	201d0314 	.word	0x201d0314
 801ca48:	14          	.byte	0x14
 801ca49:	00          	.byte	0x00
 801ca4a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801ca4e:	05e9      	lsls	r1, r5, #23
 801ca50:	bf48      	it	mi
 801ca52:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801ca56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ca5a:	0d1b      	lsrs	r3, r3, #20
 801ca5c:	051b      	lsls	r3, r3, #20
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d1b9      	bne.n	801c9d6 <_strtod_l+0x76>
 801ca62:	f001 fe29 	bl	801e6b8 <__errno>
 801ca66:	2322      	movs	r3, #34	; 0x22
 801ca68:	6003      	str	r3, [r0, #0]
 801ca6a:	e7b4      	b.n	801c9d6 <_strtod_l+0x76>
 801ca6c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801ca70:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ca74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ca78:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801ca7c:	e7e7      	b.n	801ca4e <_strtod_l+0xee>
 801ca7e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801cbf8 <_strtod_l+0x298>
 801ca82:	e7e4      	b.n	801ca4e <_strtod_l+0xee>
 801ca84:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801ca88:	f04f 38ff 	mov.w	r8, #4294967295
 801ca8c:	e7df      	b.n	801ca4e <_strtod_l+0xee>
 801ca8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ca90:	1c5a      	adds	r2, r3, #1
 801ca92:	9215      	str	r2, [sp, #84]	; 0x54
 801ca94:	785b      	ldrb	r3, [r3, #1]
 801ca96:	2b30      	cmp	r3, #48	; 0x30
 801ca98:	d0f9      	beq.n	801ca8e <_strtod_l+0x12e>
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d09b      	beq.n	801c9d6 <_strtod_l+0x76>
 801ca9e:	2301      	movs	r3, #1
 801caa0:	f04f 0a00 	mov.w	sl, #0
 801caa4:	9304      	str	r3, [sp, #16]
 801caa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801caa8:	930b      	str	r3, [sp, #44]	; 0x2c
 801caaa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801caae:	46d3      	mov	fp, sl
 801cab0:	220a      	movs	r2, #10
 801cab2:	9815      	ldr	r0, [sp, #84]	; 0x54
 801cab4:	7806      	ldrb	r6, [r0, #0]
 801cab6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801caba:	b2d9      	uxtb	r1, r3
 801cabc:	2909      	cmp	r1, #9
 801cabe:	d926      	bls.n	801cb0e <_strtod_l+0x1ae>
 801cac0:	494c      	ldr	r1, [pc, #304]	; (801cbf4 <_strtod_l+0x294>)
 801cac2:	2201      	movs	r2, #1
 801cac4:	f001 fd35 	bl	801e532 <strncmp>
 801cac8:	2800      	cmp	r0, #0
 801caca:	d030      	beq.n	801cb2e <_strtod_l+0x1ce>
 801cacc:	2000      	movs	r0, #0
 801cace:	4632      	mov	r2, r6
 801cad0:	9005      	str	r0, [sp, #20]
 801cad2:	465e      	mov	r6, fp
 801cad4:	4603      	mov	r3, r0
 801cad6:	2a65      	cmp	r2, #101	; 0x65
 801cad8:	d001      	beq.n	801cade <_strtod_l+0x17e>
 801cada:	2a45      	cmp	r2, #69	; 0x45
 801cadc:	d113      	bne.n	801cb06 <_strtod_l+0x1a6>
 801cade:	b91e      	cbnz	r6, 801cae8 <_strtod_l+0x188>
 801cae0:	9a04      	ldr	r2, [sp, #16]
 801cae2:	4302      	orrs	r2, r0
 801cae4:	d094      	beq.n	801ca10 <_strtod_l+0xb0>
 801cae6:	2600      	movs	r6, #0
 801cae8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801caea:	1c6a      	adds	r2, r5, #1
 801caec:	9215      	str	r2, [sp, #84]	; 0x54
 801caee:	786a      	ldrb	r2, [r5, #1]
 801caf0:	2a2b      	cmp	r2, #43	; 0x2b
 801caf2:	d074      	beq.n	801cbde <_strtod_l+0x27e>
 801caf4:	2a2d      	cmp	r2, #45	; 0x2d
 801caf6:	d078      	beq.n	801cbea <_strtod_l+0x28a>
 801caf8:	f04f 0c00 	mov.w	ip, #0
 801cafc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801cb00:	2909      	cmp	r1, #9
 801cb02:	d97f      	bls.n	801cc04 <_strtod_l+0x2a4>
 801cb04:	9515      	str	r5, [sp, #84]	; 0x54
 801cb06:	2700      	movs	r7, #0
 801cb08:	e09e      	b.n	801cc48 <_strtod_l+0x2e8>
 801cb0a:	2300      	movs	r3, #0
 801cb0c:	e7c8      	b.n	801caa0 <_strtod_l+0x140>
 801cb0e:	f1bb 0f08 	cmp.w	fp, #8
 801cb12:	bfd8      	it	le
 801cb14:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801cb16:	f100 0001 	add.w	r0, r0, #1
 801cb1a:	bfda      	itte	le
 801cb1c:	fb02 3301 	mlale	r3, r2, r1, r3
 801cb20:	9309      	strle	r3, [sp, #36]	; 0x24
 801cb22:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801cb26:	f10b 0b01 	add.w	fp, fp, #1
 801cb2a:	9015      	str	r0, [sp, #84]	; 0x54
 801cb2c:	e7c1      	b.n	801cab2 <_strtod_l+0x152>
 801cb2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cb30:	1c5a      	adds	r2, r3, #1
 801cb32:	9215      	str	r2, [sp, #84]	; 0x54
 801cb34:	785a      	ldrb	r2, [r3, #1]
 801cb36:	f1bb 0f00 	cmp.w	fp, #0
 801cb3a:	d037      	beq.n	801cbac <_strtod_l+0x24c>
 801cb3c:	9005      	str	r0, [sp, #20]
 801cb3e:	465e      	mov	r6, fp
 801cb40:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801cb44:	2b09      	cmp	r3, #9
 801cb46:	d912      	bls.n	801cb6e <_strtod_l+0x20e>
 801cb48:	2301      	movs	r3, #1
 801cb4a:	e7c4      	b.n	801cad6 <_strtod_l+0x176>
 801cb4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cb4e:	1c5a      	adds	r2, r3, #1
 801cb50:	9215      	str	r2, [sp, #84]	; 0x54
 801cb52:	785a      	ldrb	r2, [r3, #1]
 801cb54:	3001      	adds	r0, #1
 801cb56:	2a30      	cmp	r2, #48	; 0x30
 801cb58:	d0f8      	beq.n	801cb4c <_strtod_l+0x1ec>
 801cb5a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801cb5e:	2b08      	cmp	r3, #8
 801cb60:	f200 84c1 	bhi.w	801d4e6 <_strtod_l+0xb86>
 801cb64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cb66:	9005      	str	r0, [sp, #20]
 801cb68:	2000      	movs	r0, #0
 801cb6a:	930b      	str	r3, [sp, #44]	; 0x2c
 801cb6c:	4606      	mov	r6, r0
 801cb6e:	3a30      	subs	r2, #48	; 0x30
 801cb70:	f100 0301 	add.w	r3, r0, #1
 801cb74:	d014      	beq.n	801cba0 <_strtod_l+0x240>
 801cb76:	9905      	ldr	r1, [sp, #20]
 801cb78:	4419      	add	r1, r3
 801cb7a:	9105      	str	r1, [sp, #20]
 801cb7c:	4633      	mov	r3, r6
 801cb7e:	eb00 0c06 	add.w	ip, r0, r6
 801cb82:	210a      	movs	r1, #10
 801cb84:	4563      	cmp	r3, ip
 801cb86:	d113      	bne.n	801cbb0 <_strtod_l+0x250>
 801cb88:	1833      	adds	r3, r6, r0
 801cb8a:	2b08      	cmp	r3, #8
 801cb8c:	f106 0601 	add.w	r6, r6, #1
 801cb90:	4406      	add	r6, r0
 801cb92:	dc1a      	bgt.n	801cbca <_strtod_l+0x26a>
 801cb94:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cb96:	230a      	movs	r3, #10
 801cb98:	fb03 2301 	mla	r3, r3, r1, r2
 801cb9c:	9309      	str	r3, [sp, #36]	; 0x24
 801cb9e:	2300      	movs	r3, #0
 801cba0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801cba2:	1c51      	adds	r1, r2, #1
 801cba4:	9115      	str	r1, [sp, #84]	; 0x54
 801cba6:	7852      	ldrb	r2, [r2, #1]
 801cba8:	4618      	mov	r0, r3
 801cbaa:	e7c9      	b.n	801cb40 <_strtod_l+0x1e0>
 801cbac:	4658      	mov	r0, fp
 801cbae:	e7d2      	b.n	801cb56 <_strtod_l+0x1f6>
 801cbb0:	2b08      	cmp	r3, #8
 801cbb2:	f103 0301 	add.w	r3, r3, #1
 801cbb6:	dc03      	bgt.n	801cbc0 <_strtod_l+0x260>
 801cbb8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801cbba:	434f      	muls	r7, r1
 801cbbc:	9709      	str	r7, [sp, #36]	; 0x24
 801cbbe:	e7e1      	b.n	801cb84 <_strtod_l+0x224>
 801cbc0:	2b10      	cmp	r3, #16
 801cbc2:	bfd8      	it	le
 801cbc4:	fb01 fa0a 	mulle.w	sl, r1, sl
 801cbc8:	e7dc      	b.n	801cb84 <_strtod_l+0x224>
 801cbca:	2e10      	cmp	r6, #16
 801cbcc:	bfdc      	itt	le
 801cbce:	230a      	movle	r3, #10
 801cbd0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801cbd4:	e7e3      	b.n	801cb9e <_strtod_l+0x23e>
 801cbd6:	2300      	movs	r3, #0
 801cbd8:	9305      	str	r3, [sp, #20]
 801cbda:	2301      	movs	r3, #1
 801cbdc:	e780      	b.n	801cae0 <_strtod_l+0x180>
 801cbde:	f04f 0c00 	mov.w	ip, #0
 801cbe2:	1caa      	adds	r2, r5, #2
 801cbe4:	9215      	str	r2, [sp, #84]	; 0x54
 801cbe6:	78aa      	ldrb	r2, [r5, #2]
 801cbe8:	e788      	b.n	801cafc <_strtod_l+0x19c>
 801cbea:	f04f 0c01 	mov.w	ip, #1
 801cbee:	e7f8      	b.n	801cbe2 <_strtod_l+0x282>
 801cbf0:	080226fc 	.word	0x080226fc
 801cbf4:	080226f8 	.word	0x080226f8
 801cbf8:	7ff00000 	.word	0x7ff00000
 801cbfc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801cbfe:	1c51      	adds	r1, r2, #1
 801cc00:	9115      	str	r1, [sp, #84]	; 0x54
 801cc02:	7852      	ldrb	r2, [r2, #1]
 801cc04:	2a30      	cmp	r2, #48	; 0x30
 801cc06:	d0f9      	beq.n	801cbfc <_strtod_l+0x29c>
 801cc08:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801cc0c:	2908      	cmp	r1, #8
 801cc0e:	f63f af7a 	bhi.w	801cb06 <_strtod_l+0x1a6>
 801cc12:	3a30      	subs	r2, #48	; 0x30
 801cc14:	9208      	str	r2, [sp, #32]
 801cc16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801cc18:	920c      	str	r2, [sp, #48]	; 0x30
 801cc1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801cc1c:	1c57      	adds	r7, r2, #1
 801cc1e:	9715      	str	r7, [sp, #84]	; 0x54
 801cc20:	7852      	ldrb	r2, [r2, #1]
 801cc22:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801cc26:	f1be 0f09 	cmp.w	lr, #9
 801cc2a:	d938      	bls.n	801cc9e <_strtod_l+0x33e>
 801cc2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801cc2e:	1a7f      	subs	r7, r7, r1
 801cc30:	2f08      	cmp	r7, #8
 801cc32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801cc36:	dc03      	bgt.n	801cc40 <_strtod_l+0x2e0>
 801cc38:	9908      	ldr	r1, [sp, #32]
 801cc3a:	428f      	cmp	r7, r1
 801cc3c:	bfa8      	it	ge
 801cc3e:	460f      	movge	r7, r1
 801cc40:	f1bc 0f00 	cmp.w	ip, #0
 801cc44:	d000      	beq.n	801cc48 <_strtod_l+0x2e8>
 801cc46:	427f      	negs	r7, r7
 801cc48:	2e00      	cmp	r6, #0
 801cc4a:	d14f      	bne.n	801ccec <_strtod_l+0x38c>
 801cc4c:	9904      	ldr	r1, [sp, #16]
 801cc4e:	4301      	orrs	r1, r0
 801cc50:	f47f aec1 	bne.w	801c9d6 <_strtod_l+0x76>
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	f47f aedb 	bne.w	801ca10 <_strtod_l+0xb0>
 801cc5a:	2a69      	cmp	r2, #105	; 0x69
 801cc5c:	d029      	beq.n	801ccb2 <_strtod_l+0x352>
 801cc5e:	dc26      	bgt.n	801ccae <_strtod_l+0x34e>
 801cc60:	2a49      	cmp	r2, #73	; 0x49
 801cc62:	d026      	beq.n	801ccb2 <_strtod_l+0x352>
 801cc64:	2a4e      	cmp	r2, #78	; 0x4e
 801cc66:	f47f aed3 	bne.w	801ca10 <_strtod_l+0xb0>
 801cc6a:	499b      	ldr	r1, [pc, #620]	; (801ced8 <_strtod_l+0x578>)
 801cc6c:	a815      	add	r0, sp, #84	; 0x54
 801cc6e:	f002 fedd 	bl	801fa2c <__match>
 801cc72:	2800      	cmp	r0, #0
 801cc74:	f43f aecc 	beq.w	801ca10 <_strtod_l+0xb0>
 801cc78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cc7a:	781b      	ldrb	r3, [r3, #0]
 801cc7c:	2b28      	cmp	r3, #40	; 0x28
 801cc7e:	d12f      	bne.n	801cce0 <_strtod_l+0x380>
 801cc80:	4996      	ldr	r1, [pc, #600]	; (801cedc <_strtod_l+0x57c>)
 801cc82:	aa18      	add	r2, sp, #96	; 0x60
 801cc84:	a815      	add	r0, sp, #84	; 0x54
 801cc86:	f002 fee5 	bl	801fa54 <__hexnan>
 801cc8a:	2805      	cmp	r0, #5
 801cc8c:	d128      	bne.n	801cce0 <_strtod_l+0x380>
 801cc8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cc90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801cc94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801cc98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801cc9c:	e69b      	b.n	801c9d6 <_strtod_l+0x76>
 801cc9e:	9f08      	ldr	r7, [sp, #32]
 801cca0:	210a      	movs	r1, #10
 801cca2:	fb01 2107 	mla	r1, r1, r7, r2
 801cca6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801ccaa:	9208      	str	r2, [sp, #32]
 801ccac:	e7b5      	b.n	801cc1a <_strtod_l+0x2ba>
 801ccae:	2a6e      	cmp	r2, #110	; 0x6e
 801ccb0:	e7d9      	b.n	801cc66 <_strtod_l+0x306>
 801ccb2:	498b      	ldr	r1, [pc, #556]	; (801cee0 <_strtod_l+0x580>)
 801ccb4:	a815      	add	r0, sp, #84	; 0x54
 801ccb6:	f002 feb9 	bl	801fa2c <__match>
 801ccba:	2800      	cmp	r0, #0
 801ccbc:	f43f aea8 	beq.w	801ca10 <_strtod_l+0xb0>
 801ccc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ccc2:	4988      	ldr	r1, [pc, #544]	; (801cee4 <_strtod_l+0x584>)
 801ccc4:	3b01      	subs	r3, #1
 801ccc6:	a815      	add	r0, sp, #84	; 0x54
 801ccc8:	9315      	str	r3, [sp, #84]	; 0x54
 801ccca:	f002 feaf 	bl	801fa2c <__match>
 801ccce:	b910      	cbnz	r0, 801ccd6 <_strtod_l+0x376>
 801ccd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ccd2:	3301      	adds	r3, #1
 801ccd4:	9315      	str	r3, [sp, #84]	; 0x54
 801ccd6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801cef4 <_strtod_l+0x594>
 801ccda:	f04f 0800 	mov.w	r8, #0
 801ccde:	e67a      	b.n	801c9d6 <_strtod_l+0x76>
 801cce0:	4881      	ldr	r0, [pc, #516]	; (801cee8 <_strtod_l+0x588>)
 801cce2:	f001 fd25 	bl	801e730 <nan>
 801cce6:	ec59 8b10 	vmov	r8, r9, d0
 801ccea:	e674      	b.n	801c9d6 <_strtod_l+0x76>
 801ccec:	9b05      	ldr	r3, [sp, #20]
 801ccee:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ccf0:	1afb      	subs	r3, r7, r3
 801ccf2:	f1bb 0f00 	cmp.w	fp, #0
 801ccf6:	bf08      	it	eq
 801ccf8:	46b3      	moveq	fp, r6
 801ccfa:	2e10      	cmp	r6, #16
 801ccfc:	9308      	str	r3, [sp, #32]
 801ccfe:	4635      	mov	r5, r6
 801cd00:	bfa8      	it	ge
 801cd02:	2510      	movge	r5, #16
 801cd04:	f7e3 fbfe 	bl	8000504 <__aeabi_ui2d>
 801cd08:	2e09      	cmp	r6, #9
 801cd0a:	4680      	mov	r8, r0
 801cd0c:	4689      	mov	r9, r1
 801cd0e:	dd13      	ble.n	801cd38 <_strtod_l+0x3d8>
 801cd10:	4b76      	ldr	r3, [pc, #472]	; (801ceec <_strtod_l+0x58c>)
 801cd12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801cd16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801cd1a:	f7e3 fc6d 	bl	80005f8 <__aeabi_dmul>
 801cd1e:	4680      	mov	r8, r0
 801cd20:	4650      	mov	r0, sl
 801cd22:	4689      	mov	r9, r1
 801cd24:	f7e3 fbee 	bl	8000504 <__aeabi_ui2d>
 801cd28:	4602      	mov	r2, r0
 801cd2a:	460b      	mov	r3, r1
 801cd2c:	4640      	mov	r0, r8
 801cd2e:	4649      	mov	r1, r9
 801cd30:	f7e3 faac 	bl	800028c <__adddf3>
 801cd34:	4680      	mov	r8, r0
 801cd36:	4689      	mov	r9, r1
 801cd38:	2e0f      	cmp	r6, #15
 801cd3a:	dc38      	bgt.n	801cdae <_strtod_l+0x44e>
 801cd3c:	9b08      	ldr	r3, [sp, #32]
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	f43f ae49 	beq.w	801c9d6 <_strtod_l+0x76>
 801cd44:	dd24      	ble.n	801cd90 <_strtod_l+0x430>
 801cd46:	2b16      	cmp	r3, #22
 801cd48:	dc0b      	bgt.n	801cd62 <_strtod_l+0x402>
 801cd4a:	4968      	ldr	r1, [pc, #416]	; (801ceec <_strtod_l+0x58c>)
 801cd4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801cd50:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cd54:	4642      	mov	r2, r8
 801cd56:	464b      	mov	r3, r9
 801cd58:	f7e3 fc4e 	bl	80005f8 <__aeabi_dmul>
 801cd5c:	4680      	mov	r8, r0
 801cd5e:	4689      	mov	r9, r1
 801cd60:	e639      	b.n	801c9d6 <_strtod_l+0x76>
 801cd62:	9a08      	ldr	r2, [sp, #32]
 801cd64:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801cd68:	4293      	cmp	r3, r2
 801cd6a:	db20      	blt.n	801cdae <_strtod_l+0x44e>
 801cd6c:	4c5f      	ldr	r4, [pc, #380]	; (801ceec <_strtod_l+0x58c>)
 801cd6e:	f1c6 060f 	rsb	r6, r6, #15
 801cd72:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801cd76:	4642      	mov	r2, r8
 801cd78:	464b      	mov	r3, r9
 801cd7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cd7e:	f7e3 fc3b 	bl	80005f8 <__aeabi_dmul>
 801cd82:	9b08      	ldr	r3, [sp, #32]
 801cd84:	1b9e      	subs	r6, r3, r6
 801cd86:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801cd8a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801cd8e:	e7e3      	b.n	801cd58 <_strtod_l+0x3f8>
 801cd90:	9b08      	ldr	r3, [sp, #32]
 801cd92:	3316      	adds	r3, #22
 801cd94:	db0b      	blt.n	801cdae <_strtod_l+0x44e>
 801cd96:	9b05      	ldr	r3, [sp, #20]
 801cd98:	1bdf      	subs	r7, r3, r7
 801cd9a:	4b54      	ldr	r3, [pc, #336]	; (801ceec <_strtod_l+0x58c>)
 801cd9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801cda0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cda4:	4640      	mov	r0, r8
 801cda6:	4649      	mov	r1, r9
 801cda8:	f7e3 fd50 	bl	800084c <__aeabi_ddiv>
 801cdac:	e7d6      	b.n	801cd5c <_strtod_l+0x3fc>
 801cdae:	9b08      	ldr	r3, [sp, #32]
 801cdb0:	1b75      	subs	r5, r6, r5
 801cdb2:	441d      	add	r5, r3
 801cdb4:	2d00      	cmp	r5, #0
 801cdb6:	dd70      	ble.n	801ce9a <_strtod_l+0x53a>
 801cdb8:	f015 030f 	ands.w	r3, r5, #15
 801cdbc:	d00a      	beq.n	801cdd4 <_strtod_l+0x474>
 801cdbe:	494b      	ldr	r1, [pc, #300]	; (801ceec <_strtod_l+0x58c>)
 801cdc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801cdc4:	4642      	mov	r2, r8
 801cdc6:	464b      	mov	r3, r9
 801cdc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cdcc:	f7e3 fc14 	bl	80005f8 <__aeabi_dmul>
 801cdd0:	4680      	mov	r8, r0
 801cdd2:	4689      	mov	r9, r1
 801cdd4:	f035 050f 	bics.w	r5, r5, #15
 801cdd8:	d04d      	beq.n	801ce76 <_strtod_l+0x516>
 801cdda:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801cdde:	dd22      	ble.n	801ce26 <_strtod_l+0x4c6>
 801cde0:	2500      	movs	r5, #0
 801cde2:	46ab      	mov	fp, r5
 801cde4:	9509      	str	r5, [sp, #36]	; 0x24
 801cde6:	9505      	str	r5, [sp, #20]
 801cde8:	2322      	movs	r3, #34	; 0x22
 801cdea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801cef4 <_strtod_l+0x594>
 801cdee:	6023      	str	r3, [r4, #0]
 801cdf0:	f04f 0800 	mov.w	r8, #0
 801cdf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	f43f aded 	beq.w	801c9d6 <_strtod_l+0x76>
 801cdfc:	9916      	ldr	r1, [sp, #88]	; 0x58
 801cdfe:	4620      	mov	r0, r4
 801ce00:	f002 ff16 	bl	801fc30 <_Bfree>
 801ce04:	9905      	ldr	r1, [sp, #20]
 801ce06:	4620      	mov	r0, r4
 801ce08:	f002 ff12 	bl	801fc30 <_Bfree>
 801ce0c:	4659      	mov	r1, fp
 801ce0e:	4620      	mov	r0, r4
 801ce10:	f002 ff0e 	bl	801fc30 <_Bfree>
 801ce14:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ce16:	4620      	mov	r0, r4
 801ce18:	f002 ff0a 	bl	801fc30 <_Bfree>
 801ce1c:	4629      	mov	r1, r5
 801ce1e:	4620      	mov	r0, r4
 801ce20:	f002 ff06 	bl	801fc30 <_Bfree>
 801ce24:	e5d7      	b.n	801c9d6 <_strtod_l+0x76>
 801ce26:	4b32      	ldr	r3, [pc, #200]	; (801cef0 <_strtod_l+0x590>)
 801ce28:	9304      	str	r3, [sp, #16]
 801ce2a:	2300      	movs	r3, #0
 801ce2c:	112d      	asrs	r5, r5, #4
 801ce2e:	4640      	mov	r0, r8
 801ce30:	4649      	mov	r1, r9
 801ce32:	469a      	mov	sl, r3
 801ce34:	2d01      	cmp	r5, #1
 801ce36:	dc21      	bgt.n	801ce7c <_strtod_l+0x51c>
 801ce38:	b10b      	cbz	r3, 801ce3e <_strtod_l+0x4de>
 801ce3a:	4680      	mov	r8, r0
 801ce3c:	4689      	mov	r9, r1
 801ce3e:	492c      	ldr	r1, [pc, #176]	; (801cef0 <_strtod_l+0x590>)
 801ce40:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801ce44:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801ce48:	4642      	mov	r2, r8
 801ce4a:	464b      	mov	r3, r9
 801ce4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ce50:	f7e3 fbd2 	bl	80005f8 <__aeabi_dmul>
 801ce54:	4b27      	ldr	r3, [pc, #156]	; (801cef4 <_strtod_l+0x594>)
 801ce56:	460a      	mov	r2, r1
 801ce58:	400b      	ands	r3, r1
 801ce5a:	4927      	ldr	r1, [pc, #156]	; (801cef8 <_strtod_l+0x598>)
 801ce5c:	428b      	cmp	r3, r1
 801ce5e:	4680      	mov	r8, r0
 801ce60:	d8be      	bhi.n	801cde0 <_strtod_l+0x480>
 801ce62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ce66:	428b      	cmp	r3, r1
 801ce68:	bf86      	itte	hi
 801ce6a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801cefc <_strtod_l+0x59c>
 801ce6e:	f04f 38ff 	movhi.w	r8, #4294967295
 801ce72:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801ce76:	2300      	movs	r3, #0
 801ce78:	9304      	str	r3, [sp, #16]
 801ce7a:	e07b      	b.n	801cf74 <_strtod_l+0x614>
 801ce7c:	07ea      	lsls	r2, r5, #31
 801ce7e:	d505      	bpl.n	801ce8c <_strtod_l+0x52c>
 801ce80:	9b04      	ldr	r3, [sp, #16]
 801ce82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce86:	f7e3 fbb7 	bl	80005f8 <__aeabi_dmul>
 801ce8a:	2301      	movs	r3, #1
 801ce8c:	9a04      	ldr	r2, [sp, #16]
 801ce8e:	3208      	adds	r2, #8
 801ce90:	f10a 0a01 	add.w	sl, sl, #1
 801ce94:	106d      	asrs	r5, r5, #1
 801ce96:	9204      	str	r2, [sp, #16]
 801ce98:	e7cc      	b.n	801ce34 <_strtod_l+0x4d4>
 801ce9a:	d0ec      	beq.n	801ce76 <_strtod_l+0x516>
 801ce9c:	426d      	negs	r5, r5
 801ce9e:	f015 020f 	ands.w	r2, r5, #15
 801cea2:	d00a      	beq.n	801ceba <_strtod_l+0x55a>
 801cea4:	4b11      	ldr	r3, [pc, #68]	; (801ceec <_strtod_l+0x58c>)
 801cea6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ceaa:	4640      	mov	r0, r8
 801ceac:	4649      	mov	r1, r9
 801ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceb2:	f7e3 fccb 	bl	800084c <__aeabi_ddiv>
 801ceb6:	4680      	mov	r8, r0
 801ceb8:	4689      	mov	r9, r1
 801ceba:	112d      	asrs	r5, r5, #4
 801cebc:	d0db      	beq.n	801ce76 <_strtod_l+0x516>
 801cebe:	2d1f      	cmp	r5, #31
 801cec0:	dd1e      	ble.n	801cf00 <_strtod_l+0x5a0>
 801cec2:	2500      	movs	r5, #0
 801cec4:	46ab      	mov	fp, r5
 801cec6:	9509      	str	r5, [sp, #36]	; 0x24
 801cec8:	9505      	str	r5, [sp, #20]
 801ceca:	2322      	movs	r3, #34	; 0x22
 801cecc:	f04f 0800 	mov.w	r8, #0
 801ced0:	f04f 0900 	mov.w	r9, #0
 801ced4:	6023      	str	r3, [r4, #0]
 801ced6:	e78d      	b.n	801cdf4 <_strtod_l+0x494>
 801ced8:	0802285e 	.word	0x0802285e
 801cedc:	08022710 	.word	0x08022710
 801cee0:	08022856 	.word	0x08022856
 801cee4:	08022893 	.word	0x08022893
 801cee8:	08022b3b 	.word	0x08022b3b
 801ceec:	08022a00 	.word	0x08022a00
 801cef0:	080229d8 	.word	0x080229d8
 801cef4:	7ff00000 	.word	0x7ff00000
 801cef8:	7ca00000 	.word	0x7ca00000
 801cefc:	7fefffff 	.word	0x7fefffff
 801cf00:	f015 0310 	ands.w	r3, r5, #16
 801cf04:	bf18      	it	ne
 801cf06:	236a      	movne	r3, #106	; 0x6a
 801cf08:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801d2ac <_strtod_l+0x94c>
 801cf0c:	9304      	str	r3, [sp, #16]
 801cf0e:	4640      	mov	r0, r8
 801cf10:	4649      	mov	r1, r9
 801cf12:	2300      	movs	r3, #0
 801cf14:	07ea      	lsls	r2, r5, #31
 801cf16:	d504      	bpl.n	801cf22 <_strtod_l+0x5c2>
 801cf18:	e9da 2300 	ldrd	r2, r3, [sl]
 801cf1c:	f7e3 fb6c 	bl	80005f8 <__aeabi_dmul>
 801cf20:	2301      	movs	r3, #1
 801cf22:	106d      	asrs	r5, r5, #1
 801cf24:	f10a 0a08 	add.w	sl, sl, #8
 801cf28:	d1f4      	bne.n	801cf14 <_strtod_l+0x5b4>
 801cf2a:	b10b      	cbz	r3, 801cf30 <_strtod_l+0x5d0>
 801cf2c:	4680      	mov	r8, r0
 801cf2e:	4689      	mov	r9, r1
 801cf30:	9b04      	ldr	r3, [sp, #16]
 801cf32:	b1bb      	cbz	r3, 801cf64 <_strtod_l+0x604>
 801cf34:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801cf38:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	4649      	mov	r1, r9
 801cf40:	dd10      	ble.n	801cf64 <_strtod_l+0x604>
 801cf42:	2b1f      	cmp	r3, #31
 801cf44:	f340 811e 	ble.w	801d184 <_strtod_l+0x824>
 801cf48:	2b34      	cmp	r3, #52	; 0x34
 801cf4a:	bfde      	ittt	le
 801cf4c:	f04f 33ff 	movle.w	r3, #4294967295
 801cf50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801cf54:	4093      	lslle	r3, r2
 801cf56:	f04f 0800 	mov.w	r8, #0
 801cf5a:	bfcc      	ite	gt
 801cf5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801cf60:	ea03 0901 	andle.w	r9, r3, r1
 801cf64:	2200      	movs	r2, #0
 801cf66:	2300      	movs	r3, #0
 801cf68:	4640      	mov	r0, r8
 801cf6a:	4649      	mov	r1, r9
 801cf6c:	f7e3 fdac 	bl	8000ac8 <__aeabi_dcmpeq>
 801cf70:	2800      	cmp	r0, #0
 801cf72:	d1a6      	bne.n	801cec2 <_strtod_l+0x562>
 801cf74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf76:	9300      	str	r3, [sp, #0]
 801cf78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cf7a:	4633      	mov	r3, r6
 801cf7c:	465a      	mov	r2, fp
 801cf7e:	4620      	mov	r0, r4
 801cf80:	f002 febe 	bl	801fd00 <__s2b>
 801cf84:	9009      	str	r0, [sp, #36]	; 0x24
 801cf86:	2800      	cmp	r0, #0
 801cf88:	f43f af2a 	beq.w	801cde0 <_strtod_l+0x480>
 801cf8c:	9a08      	ldr	r2, [sp, #32]
 801cf8e:	9b05      	ldr	r3, [sp, #20]
 801cf90:	2a00      	cmp	r2, #0
 801cf92:	eba3 0307 	sub.w	r3, r3, r7
 801cf96:	bfa8      	it	ge
 801cf98:	2300      	movge	r3, #0
 801cf9a:	930c      	str	r3, [sp, #48]	; 0x30
 801cf9c:	2500      	movs	r5, #0
 801cf9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801cfa2:	9312      	str	r3, [sp, #72]	; 0x48
 801cfa4:	46ab      	mov	fp, r5
 801cfa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cfa8:	4620      	mov	r0, r4
 801cfaa:	6859      	ldr	r1, [r3, #4]
 801cfac:	f002 fe00 	bl	801fbb0 <_Balloc>
 801cfb0:	9005      	str	r0, [sp, #20]
 801cfb2:	2800      	cmp	r0, #0
 801cfb4:	f43f af18 	beq.w	801cde8 <_strtod_l+0x488>
 801cfb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cfba:	691a      	ldr	r2, [r3, #16]
 801cfbc:	3202      	adds	r2, #2
 801cfbe:	f103 010c 	add.w	r1, r3, #12
 801cfc2:	0092      	lsls	r2, r2, #2
 801cfc4:	300c      	adds	r0, #12
 801cfc6:	f001 fba3 	bl	801e710 <memcpy>
 801cfca:	ec49 8b10 	vmov	d0, r8, r9
 801cfce:	aa18      	add	r2, sp, #96	; 0x60
 801cfd0:	a917      	add	r1, sp, #92	; 0x5c
 801cfd2:	4620      	mov	r0, r4
 801cfd4:	f003 f9c8 	bl	8020368 <__d2b>
 801cfd8:	ec49 8b18 	vmov	d8, r8, r9
 801cfdc:	9016      	str	r0, [sp, #88]	; 0x58
 801cfde:	2800      	cmp	r0, #0
 801cfe0:	f43f af02 	beq.w	801cde8 <_strtod_l+0x488>
 801cfe4:	2101      	movs	r1, #1
 801cfe6:	4620      	mov	r0, r4
 801cfe8:	f002 ff22 	bl	801fe30 <__i2b>
 801cfec:	4683      	mov	fp, r0
 801cfee:	2800      	cmp	r0, #0
 801cff0:	f43f aefa 	beq.w	801cde8 <_strtod_l+0x488>
 801cff4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801cff6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cff8:	2e00      	cmp	r6, #0
 801cffa:	bfab      	itete	ge
 801cffc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801cffe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801d000:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801d002:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801d006:	bfac      	ite	ge
 801d008:	eb06 0a03 	addge.w	sl, r6, r3
 801d00c:	1b9f      	sublt	r7, r3, r6
 801d00e:	9b04      	ldr	r3, [sp, #16]
 801d010:	1af6      	subs	r6, r6, r3
 801d012:	4416      	add	r6, r2
 801d014:	4ba0      	ldr	r3, [pc, #640]	; (801d298 <_strtod_l+0x938>)
 801d016:	3e01      	subs	r6, #1
 801d018:	429e      	cmp	r6, r3
 801d01a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d01e:	f280 80c4 	bge.w	801d1aa <_strtod_l+0x84a>
 801d022:	1b9b      	subs	r3, r3, r6
 801d024:	2b1f      	cmp	r3, #31
 801d026:	eba2 0203 	sub.w	r2, r2, r3
 801d02a:	f04f 0101 	mov.w	r1, #1
 801d02e:	f300 80b0 	bgt.w	801d192 <_strtod_l+0x832>
 801d032:	fa01 f303 	lsl.w	r3, r1, r3
 801d036:	930e      	str	r3, [sp, #56]	; 0x38
 801d038:	2300      	movs	r3, #0
 801d03a:	930d      	str	r3, [sp, #52]	; 0x34
 801d03c:	eb0a 0602 	add.w	r6, sl, r2
 801d040:	9b04      	ldr	r3, [sp, #16]
 801d042:	45b2      	cmp	sl, r6
 801d044:	4417      	add	r7, r2
 801d046:	441f      	add	r7, r3
 801d048:	4653      	mov	r3, sl
 801d04a:	bfa8      	it	ge
 801d04c:	4633      	movge	r3, r6
 801d04e:	42bb      	cmp	r3, r7
 801d050:	bfa8      	it	ge
 801d052:	463b      	movge	r3, r7
 801d054:	2b00      	cmp	r3, #0
 801d056:	bfc2      	ittt	gt
 801d058:	1af6      	subgt	r6, r6, r3
 801d05a:	1aff      	subgt	r7, r7, r3
 801d05c:	ebaa 0a03 	subgt.w	sl, sl, r3
 801d060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d062:	2b00      	cmp	r3, #0
 801d064:	dd17      	ble.n	801d096 <_strtod_l+0x736>
 801d066:	4659      	mov	r1, fp
 801d068:	461a      	mov	r2, r3
 801d06a:	4620      	mov	r0, r4
 801d06c:	f002 ffa0 	bl	801ffb0 <__pow5mult>
 801d070:	4683      	mov	fp, r0
 801d072:	2800      	cmp	r0, #0
 801d074:	f43f aeb8 	beq.w	801cde8 <_strtod_l+0x488>
 801d078:	4601      	mov	r1, r0
 801d07a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d07c:	4620      	mov	r0, r4
 801d07e:	f002 feed 	bl	801fe5c <__multiply>
 801d082:	900b      	str	r0, [sp, #44]	; 0x2c
 801d084:	2800      	cmp	r0, #0
 801d086:	f43f aeaf 	beq.w	801cde8 <_strtod_l+0x488>
 801d08a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d08c:	4620      	mov	r0, r4
 801d08e:	f002 fdcf 	bl	801fc30 <_Bfree>
 801d092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d094:	9316      	str	r3, [sp, #88]	; 0x58
 801d096:	2e00      	cmp	r6, #0
 801d098:	f300 808c 	bgt.w	801d1b4 <_strtod_l+0x854>
 801d09c:	9b08      	ldr	r3, [sp, #32]
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	dd08      	ble.n	801d0b4 <_strtod_l+0x754>
 801d0a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d0a4:	9905      	ldr	r1, [sp, #20]
 801d0a6:	4620      	mov	r0, r4
 801d0a8:	f002 ff82 	bl	801ffb0 <__pow5mult>
 801d0ac:	9005      	str	r0, [sp, #20]
 801d0ae:	2800      	cmp	r0, #0
 801d0b0:	f43f ae9a 	beq.w	801cde8 <_strtod_l+0x488>
 801d0b4:	2f00      	cmp	r7, #0
 801d0b6:	dd08      	ble.n	801d0ca <_strtod_l+0x76a>
 801d0b8:	9905      	ldr	r1, [sp, #20]
 801d0ba:	463a      	mov	r2, r7
 801d0bc:	4620      	mov	r0, r4
 801d0be:	f002 ffd1 	bl	8020064 <__lshift>
 801d0c2:	9005      	str	r0, [sp, #20]
 801d0c4:	2800      	cmp	r0, #0
 801d0c6:	f43f ae8f 	beq.w	801cde8 <_strtod_l+0x488>
 801d0ca:	f1ba 0f00 	cmp.w	sl, #0
 801d0ce:	dd08      	ble.n	801d0e2 <_strtod_l+0x782>
 801d0d0:	4659      	mov	r1, fp
 801d0d2:	4652      	mov	r2, sl
 801d0d4:	4620      	mov	r0, r4
 801d0d6:	f002 ffc5 	bl	8020064 <__lshift>
 801d0da:	4683      	mov	fp, r0
 801d0dc:	2800      	cmp	r0, #0
 801d0de:	f43f ae83 	beq.w	801cde8 <_strtod_l+0x488>
 801d0e2:	9a05      	ldr	r2, [sp, #20]
 801d0e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d0e6:	4620      	mov	r0, r4
 801d0e8:	f003 f844 	bl	8020174 <__mdiff>
 801d0ec:	4605      	mov	r5, r0
 801d0ee:	2800      	cmp	r0, #0
 801d0f0:	f43f ae7a 	beq.w	801cde8 <_strtod_l+0x488>
 801d0f4:	68c3      	ldr	r3, [r0, #12]
 801d0f6:	930b      	str	r3, [sp, #44]	; 0x2c
 801d0f8:	2300      	movs	r3, #0
 801d0fa:	60c3      	str	r3, [r0, #12]
 801d0fc:	4659      	mov	r1, fp
 801d0fe:	f003 f81d 	bl	802013c <__mcmp>
 801d102:	2800      	cmp	r0, #0
 801d104:	da60      	bge.n	801d1c8 <_strtod_l+0x868>
 801d106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d108:	ea53 0308 	orrs.w	r3, r3, r8
 801d10c:	f040 8084 	bne.w	801d218 <_strtod_l+0x8b8>
 801d110:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d114:	2b00      	cmp	r3, #0
 801d116:	d17f      	bne.n	801d218 <_strtod_l+0x8b8>
 801d118:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d11c:	0d1b      	lsrs	r3, r3, #20
 801d11e:	051b      	lsls	r3, r3, #20
 801d120:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801d124:	d978      	bls.n	801d218 <_strtod_l+0x8b8>
 801d126:	696b      	ldr	r3, [r5, #20]
 801d128:	b913      	cbnz	r3, 801d130 <_strtod_l+0x7d0>
 801d12a:	692b      	ldr	r3, [r5, #16]
 801d12c:	2b01      	cmp	r3, #1
 801d12e:	dd73      	ble.n	801d218 <_strtod_l+0x8b8>
 801d130:	4629      	mov	r1, r5
 801d132:	2201      	movs	r2, #1
 801d134:	4620      	mov	r0, r4
 801d136:	f002 ff95 	bl	8020064 <__lshift>
 801d13a:	4659      	mov	r1, fp
 801d13c:	4605      	mov	r5, r0
 801d13e:	f002 fffd 	bl	802013c <__mcmp>
 801d142:	2800      	cmp	r0, #0
 801d144:	dd68      	ble.n	801d218 <_strtod_l+0x8b8>
 801d146:	9904      	ldr	r1, [sp, #16]
 801d148:	4a54      	ldr	r2, [pc, #336]	; (801d29c <_strtod_l+0x93c>)
 801d14a:	464b      	mov	r3, r9
 801d14c:	2900      	cmp	r1, #0
 801d14e:	f000 8084 	beq.w	801d25a <_strtod_l+0x8fa>
 801d152:	ea02 0109 	and.w	r1, r2, r9
 801d156:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801d15a:	dc7e      	bgt.n	801d25a <_strtod_l+0x8fa>
 801d15c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801d160:	f77f aeb3 	ble.w	801ceca <_strtod_l+0x56a>
 801d164:	4b4e      	ldr	r3, [pc, #312]	; (801d2a0 <_strtod_l+0x940>)
 801d166:	4640      	mov	r0, r8
 801d168:	4649      	mov	r1, r9
 801d16a:	2200      	movs	r2, #0
 801d16c:	f7e3 fa44 	bl	80005f8 <__aeabi_dmul>
 801d170:	4b4a      	ldr	r3, [pc, #296]	; (801d29c <_strtod_l+0x93c>)
 801d172:	400b      	ands	r3, r1
 801d174:	4680      	mov	r8, r0
 801d176:	4689      	mov	r9, r1
 801d178:	2b00      	cmp	r3, #0
 801d17a:	f47f ae3f 	bne.w	801cdfc <_strtod_l+0x49c>
 801d17e:	2322      	movs	r3, #34	; 0x22
 801d180:	6023      	str	r3, [r4, #0]
 801d182:	e63b      	b.n	801cdfc <_strtod_l+0x49c>
 801d184:	f04f 32ff 	mov.w	r2, #4294967295
 801d188:	fa02 f303 	lsl.w	r3, r2, r3
 801d18c:	ea03 0808 	and.w	r8, r3, r8
 801d190:	e6e8      	b.n	801cf64 <_strtod_l+0x604>
 801d192:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801d196:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801d19a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801d19e:	36e2      	adds	r6, #226	; 0xe2
 801d1a0:	fa01 f306 	lsl.w	r3, r1, r6
 801d1a4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801d1a8:	e748      	b.n	801d03c <_strtod_l+0x6dc>
 801d1aa:	2100      	movs	r1, #0
 801d1ac:	2301      	movs	r3, #1
 801d1ae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801d1b2:	e743      	b.n	801d03c <_strtod_l+0x6dc>
 801d1b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d1b6:	4632      	mov	r2, r6
 801d1b8:	4620      	mov	r0, r4
 801d1ba:	f002 ff53 	bl	8020064 <__lshift>
 801d1be:	9016      	str	r0, [sp, #88]	; 0x58
 801d1c0:	2800      	cmp	r0, #0
 801d1c2:	f47f af6b 	bne.w	801d09c <_strtod_l+0x73c>
 801d1c6:	e60f      	b.n	801cde8 <_strtod_l+0x488>
 801d1c8:	46ca      	mov	sl, r9
 801d1ca:	d171      	bne.n	801d2b0 <_strtod_l+0x950>
 801d1cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d1ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d1d2:	b352      	cbz	r2, 801d22a <_strtod_l+0x8ca>
 801d1d4:	4a33      	ldr	r2, [pc, #204]	; (801d2a4 <_strtod_l+0x944>)
 801d1d6:	4293      	cmp	r3, r2
 801d1d8:	d12a      	bne.n	801d230 <_strtod_l+0x8d0>
 801d1da:	9b04      	ldr	r3, [sp, #16]
 801d1dc:	4641      	mov	r1, r8
 801d1de:	b1fb      	cbz	r3, 801d220 <_strtod_l+0x8c0>
 801d1e0:	4b2e      	ldr	r3, [pc, #184]	; (801d29c <_strtod_l+0x93c>)
 801d1e2:	ea09 0303 	and.w	r3, r9, r3
 801d1e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d1ea:	f04f 32ff 	mov.w	r2, #4294967295
 801d1ee:	d81a      	bhi.n	801d226 <_strtod_l+0x8c6>
 801d1f0:	0d1b      	lsrs	r3, r3, #20
 801d1f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d1f6:	fa02 f303 	lsl.w	r3, r2, r3
 801d1fa:	4299      	cmp	r1, r3
 801d1fc:	d118      	bne.n	801d230 <_strtod_l+0x8d0>
 801d1fe:	4b2a      	ldr	r3, [pc, #168]	; (801d2a8 <_strtod_l+0x948>)
 801d200:	459a      	cmp	sl, r3
 801d202:	d102      	bne.n	801d20a <_strtod_l+0x8aa>
 801d204:	3101      	adds	r1, #1
 801d206:	f43f adef 	beq.w	801cde8 <_strtod_l+0x488>
 801d20a:	4b24      	ldr	r3, [pc, #144]	; (801d29c <_strtod_l+0x93c>)
 801d20c:	ea0a 0303 	and.w	r3, sl, r3
 801d210:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801d214:	f04f 0800 	mov.w	r8, #0
 801d218:	9b04      	ldr	r3, [sp, #16]
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d1a2      	bne.n	801d164 <_strtod_l+0x804>
 801d21e:	e5ed      	b.n	801cdfc <_strtod_l+0x49c>
 801d220:	f04f 33ff 	mov.w	r3, #4294967295
 801d224:	e7e9      	b.n	801d1fa <_strtod_l+0x89a>
 801d226:	4613      	mov	r3, r2
 801d228:	e7e7      	b.n	801d1fa <_strtod_l+0x89a>
 801d22a:	ea53 0308 	orrs.w	r3, r3, r8
 801d22e:	d08a      	beq.n	801d146 <_strtod_l+0x7e6>
 801d230:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d232:	b1e3      	cbz	r3, 801d26e <_strtod_l+0x90e>
 801d234:	ea13 0f0a 	tst.w	r3, sl
 801d238:	d0ee      	beq.n	801d218 <_strtod_l+0x8b8>
 801d23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d23c:	9a04      	ldr	r2, [sp, #16]
 801d23e:	4640      	mov	r0, r8
 801d240:	4649      	mov	r1, r9
 801d242:	b1c3      	cbz	r3, 801d276 <_strtod_l+0x916>
 801d244:	f7ff fb6f 	bl	801c926 <sulp>
 801d248:	4602      	mov	r2, r0
 801d24a:	460b      	mov	r3, r1
 801d24c:	ec51 0b18 	vmov	r0, r1, d8
 801d250:	f7e3 f81c 	bl	800028c <__adddf3>
 801d254:	4680      	mov	r8, r0
 801d256:	4689      	mov	r9, r1
 801d258:	e7de      	b.n	801d218 <_strtod_l+0x8b8>
 801d25a:	4013      	ands	r3, r2
 801d25c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801d260:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801d264:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801d268:	f04f 38ff 	mov.w	r8, #4294967295
 801d26c:	e7d4      	b.n	801d218 <_strtod_l+0x8b8>
 801d26e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d270:	ea13 0f08 	tst.w	r3, r8
 801d274:	e7e0      	b.n	801d238 <_strtod_l+0x8d8>
 801d276:	f7ff fb56 	bl	801c926 <sulp>
 801d27a:	4602      	mov	r2, r0
 801d27c:	460b      	mov	r3, r1
 801d27e:	ec51 0b18 	vmov	r0, r1, d8
 801d282:	f7e3 f801 	bl	8000288 <__aeabi_dsub>
 801d286:	2200      	movs	r2, #0
 801d288:	2300      	movs	r3, #0
 801d28a:	4680      	mov	r8, r0
 801d28c:	4689      	mov	r9, r1
 801d28e:	f7e3 fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 801d292:	2800      	cmp	r0, #0
 801d294:	d0c0      	beq.n	801d218 <_strtod_l+0x8b8>
 801d296:	e618      	b.n	801ceca <_strtod_l+0x56a>
 801d298:	fffffc02 	.word	0xfffffc02
 801d29c:	7ff00000 	.word	0x7ff00000
 801d2a0:	39500000 	.word	0x39500000
 801d2a4:	000fffff 	.word	0x000fffff
 801d2a8:	7fefffff 	.word	0x7fefffff
 801d2ac:	08022728 	.word	0x08022728
 801d2b0:	4659      	mov	r1, fp
 801d2b2:	4628      	mov	r0, r5
 801d2b4:	f003 f8b2 	bl	802041c <__ratio>
 801d2b8:	ec57 6b10 	vmov	r6, r7, d0
 801d2bc:	ee10 0a10 	vmov	r0, s0
 801d2c0:	2200      	movs	r2, #0
 801d2c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d2c6:	4639      	mov	r1, r7
 801d2c8:	f7e3 fc12 	bl	8000af0 <__aeabi_dcmple>
 801d2cc:	2800      	cmp	r0, #0
 801d2ce:	d071      	beq.n	801d3b4 <_strtod_l+0xa54>
 801d2d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d17c      	bne.n	801d3d0 <_strtod_l+0xa70>
 801d2d6:	f1b8 0f00 	cmp.w	r8, #0
 801d2da:	d15a      	bne.n	801d392 <_strtod_l+0xa32>
 801d2dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d2e0:	2b00      	cmp	r3, #0
 801d2e2:	d15d      	bne.n	801d3a0 <_strtod_l+0xa40>
 801d2e4:	4b90      	ldr	r3, [pc, #576]	; (801d528 <_strtod_l+0xbc8>)
 801d2e6:	2200      	movs	r2, #0
 801d2e8:	4630      	mov	r0, r6
 801d2ea:	4639      	mov	r1, r7
 801d2ec:	f7e3 fbf6 	bl	8000adc <__aeabi_dcmplt>
 801d2f0:	2800      	cmp	r0, #0
 801d2f2:	d15c      	bne.n	801d3ae <_strtod_l+0xa4e>
 801d2f4:	4630      	mov	r0, r6
 801d2f6:	4639      	mov	r1, r7
 801d2f8:	4b8c      	ldr	r3, [pc, #560]	; (801d52c <_strtod_l+0xbcc>)
 801d2fa:	2200      	movs	r2, #0
 801d2fc:	f7e3 f97c 	bl	80005f8 <__aeabi_dmul>
 801d300:	4606      	mov	r6, r0
 801d302:	460f      	mov	r7, r1
 801d304:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801d308:	9606      	str	r6, [sp, #24]
 801d30a:	9307      	str	r3, [sp, #28]
 801d30c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d310:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801d314:	4b86      	ldr	r3, [pc, #536]	; (801d530 <_strtod_l+0xbd0>)
 801d316:	ea0a 0303 	and.w	r3, sl, r3
 801d31a:	930d      	str	r3, [sp, #52]	; 0x34
 801d31c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d31e:	4b85      	ldr	r3, [pc, #532]	; (801d534 <_strtod_l+0xbd4>)
 801d320:	429a      	cmp	r2, r3
 801d322:	f040 8090 	bne.w	801d446 <_strtod_l+0xae6>
 801d326:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801d32a:	ec49 8b10 	vmov	d0, r8, r9
 801d32e:	f002 ffab 	bl	8020288 <__ulp>
 801d332:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d336:	ec51 0b10 	vmov	r0, r1, d0
 801d33a:	f7e3 f95d 	bl	80005f8 <__aeabi_dmul>
 801d33e:	4642      	mov	r2, r8
 801d340:	464b      	mov	r3, r9
 801d342:	f7e2 ffa3 	bl	800028c <__adddf3>
 801d346:	460b      	mov	r3, r1
 801d348:	4979      	ldr	r1, [pc, #484]	; (801d530 <_strtod_l+0xbd0>)
 801d34a:	4a7b      	ldr	r2, [pc, #492]	; (801d538 <_strtod_l+0xbd8>)
 801d34c:	4019      	ands	r1, r3
 801d34e:	4291      	cmp	r1, r2
 801d350:	4680      	mov	r8, r0
 801d352:	d944      	bls.n	801d3de <_strtod_l+0xa7e>
 801d354:	ee18 2a90 	vmov	r2, s17
 801d358:	4b78      	ldr	r3, [pc, #480]	; (801d53c <_strtod_l+0xbdc>)
 801d35a:	429a      	cmp	r2, r3
 801d35c:	d104      	bne.n	801d368 <_strtod_l+0xa08>
 801d35e:	ee18 3a10 	vmov	r3, s16
 801d362:	3301      	adds	r3, #1
 801d364:	f43f ad40 	beq.w	801cde8 <_strtod_l+0x488>
 801d368:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801d53c <_strtod_l+0xbdc>
 801d36c:	f04f 38ff 	mov.w	r8, #4294967295
 801d370:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d372:	4620      	mov	r0, r4
 801d374:	f002 fc5c 	bl	801fc30 <_Bfree>
 801d378:	9905      	ldr	r1, [sp, #20]
 801d37a:	4620      	mov	r0, r4
 801d37c:	f002 fc58 	bl	801fc30 <_Bfree>
 801d380:	4659      	mov	r1, fp
 801d382:	4620      	mov	r0, r4
 801d384:	f002 fc54 	bl	801fc30 <_Bfree>
 801d388:	4629      	mov	r1, r5
 801d38a:	4620      	mov	r0, r4
 801d38c:	f002 fc50 	bl	801fc30 <_Bfree>
 801d390:	e609      	b.n	801cfa6 <_strtod_l+0x646>
 801d392:	f1b8 0f01 	cmp.w	r8, #1
 801d396:	d103      	bne.n	801d3a0 <_strtod_l+0xa40>
 801d398:	f1b9 0f00 	cmp.w	r9, #0
 801d39c:	f43f ad95 	beq.w	801ceca <_strtod_l+0x56a>
 801d3a0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801d4f8 <_strtod_l+0xb98>
 801d3a4:	4f60      	ldr	r7, [pc, #384]	; (801d528 <_strtod_l+0xbc8>)
 801d3a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d3aa:	2600      	movs	r6, #0
 801d3ac:	e7ae      	b.n	801d30c <_strtod_l+0x9ac>
 801d3ae:	4f5f      	ldr	r7, [pc, #380]	; (801d52c <_strtod_l+0xbcc>)
 801d3b0:	2600      	movs	r6, #0
 801d3b2:	e7a7      	b.n	801d304 <_strtod_l+0x9a4>
 801d3b4:	4b5d      	ldr	r3, [pc, #372]	; (801d52c <_strtod_l+0xbcc>)
 801d3b6:	4630      	mov	r0, r6
 801d3b8:	4639      	mov	r1, r7
 801d3ba:	2200      	movs	r2, #0
 801d3bc:	f7e3 f91c 	bl	80005f8 <__aeabi_dmul>
 801d3c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d3c2:	4606      	mov	r6, r0
 801d3c4:	460f      	mov	r7, r1
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d09c      	beq.n	801d304 <_strtod_l+0x9a4>
 801d3ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801d3ce:	e79d      	b.n	801d30c <_strtod_l+0x9ac>
 801d3d0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801d500 <_strtod_l+0xba0>
 801d3d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d3d8:	ec57 6b17 	vmov	r6, r7, d7
 801d3dc:	e796      	b.n	801d30c <_strtod_l+0x9ac>
 801d3de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801d3e2:	9b04      	ldr	r3, [sp, #16]
 801d3e4:	46ca      	mov	sl, r9
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	d1c2      	bne.n	801d370 <_strtod_l+0xa10>
 801d3ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d3ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d3f0:	0d1b      	lsrs	r3, r3, #20
 801d3f2:	051b      	lsls	r3, r3, #20
 801d3f4:	429a      	cmp	r2, r3
 801d3f6:	d1bb      	bne.n	801d370 <_strtod_l+0xa10>
 801d3f8:	4630      	mov	r0, r6
 801d3fa:	4639      	mov	r1, r7
 801d3fc:	f7e3 fc5c 	bl	8000cb8 <__aeabi_d2lz>
 801d400:	f7e3 f8cc 	bl	800059c <__aeabi_l2d>
 801d404:	4602      	mov	r2, r0
 801d406:	460b      	mov	r3, r1
 801d408:	4630      	mov	r0, r6
 801d40a:	4639      	mov	r1, r7
 801d40c:	f7e2 ff3c 	bl	8000288 <__aeabi_dsub>
 801d410:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d412:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d416:	ea43 0308 	orr.w	r3, r3, r8
 801d41a:	4313      	orrs	r3, r2
 801d41c:	4606      	mov	r6, r0
 801d41e:	460f      	mov	r7, r1
 801d420:	d054      	beq.n	801d4cc <_strtod_l+0xb6c>
 801d422:	a339      	add	r3, pc, #228	; (adr r3, 801d508 <_strtod_l+0xba8>)
 801d424:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d428:	f7e3 fb58 	bl	8000adc <__aeabi_dcmplt>
 801d42c:	2800      	cmp	r0, #0
 801d42e:	f47f ace5 	bne.w	801cdfc <_strtod_l+0x49c>
 801d432:	a337      	add	r3, pc, #220	; (adr r3, 801d510 <_strtod_l+0xbb0>)
 801d434:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d438:	4630      	mov	r0, r6
 801d43a:	4639      	mov	r1, r7
 801d43c:	f7e3 fb6c 	bl	8000b18 <__aeabi_dcmpgt>
 801d440:	2800      	cmp	r0, #0
 801d442:	d095      	beq.n	801d370 <_strtod_l+0xa10>
 801d444:	e4da      	b.n	801cdfc <_strtod_l+0x49c>
 801d446:	9b04      	ldr	r3, [sp, #16]
 801d448:	b333      	cbz	r3, 801d498 <_strtod_l+0xb38>
 801d44a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d44c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d450:	d822      	bhi.n	801d498 <_strtod_l+0xb38>
 801d452:	a331      	add	r3, pc, #196	; (adr r3, 801d518 <_strtod_l+0xbb8>)
 801d454:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d458:	4630      	mov	r0, r6
 801d45a:	4639      	mov	r1, r7
 801d45c:	f7e3 fb48 	bl	8000af0 <__aeabi_dcmple>
 801d460:	b1a0      	cbz	r0, 801d48c <_strtod_l+0xb2c>
 801d462:	4639      	mov	r1, r7
 801d464:	4630      	mov	r0, r6
 801d466:	f7e3 fb9f 	bl	8000ba8 <__aeabi_d2uiz>
 801d46a:	2801      	cmp	r0, #1
 801d46c:	bf38      	it	cc
 801d46e:	2001      	movcc	r0, #1
 801d470:	f7e3 f848 	bl	8000504 <__aeabi_ui2d>
 801d474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d476:	4606      	mov	r6, r0
 801d478:	460f      	mov	r7, r1
 801d47a:	bb23      	cbnz	r3, 801d4c6 <_strtod_l+0xb66>
 801d47c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d480:	9010      	str	r0, [sp, #64]	; 0x40
 801d482:	9311      	str	r3, [sp, #68]	; 0x44
 801d484:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801d488:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801d48c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d48e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d490:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801d494:	1a9b      	subs	r3, r3, r2
 801d496:	930f      	str	r3, [sp, #60]	; 0x3c
 801d498:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801d49c:	eeb0 0a48 	vmov.f32	s0, s16
 801d4a0:	eef0 0a68 	vmov.f32	s1, s17
 801d4a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801d4a8:	f002 feee 	bl	8020288 <__ulp>
 801d4ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801d4b0:	ec53 2b10 	vmov	r2, r3, d0
 801d4b4:	f7e3 f8a0 	bl	80005f8 <__aeabi_dmul>
 801d4b8:	ec53 2b18 	vmov	r2, r3, d8
 801d4bc:	f7e2 fee6 	bl	800028c <__adddf3>
 801d4c0:	4680      	mov	r8, r0
 801d4c2:	4689      	mov	r9, r1
 801d4c4:	e78d      	b.n	801d3e2 <_strtod_l+0xa82>
 801d4c6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801d4ca:	e7db      	b.n	801d484 <_strtod_l+0xb24>
 801d4cc:	a314      	add	r3, pc, #80	; (adr r3, 801d520 <_strtod_l+0xbc0>)
 801d4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4d2:	f7e3 fb03 	bl	8000adc <__aeabi_dcmplt>
 801d4d6:	e7b3      	b.n	801d440 <_strtod_l+0xae0>
 801d4d8:	2300      	movs	r3, #0
 801d4da:	930a      	str	r3, [sp, #40]	; 0x28
 801d4dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d4de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d4e0:	6013      	str	r3, [r2, #0]
 801d4e2:	f7ff ba7c 	b.w	801c9de <_strtod_l+0x7e>
 801d4e6:	2a65      	cmp	r2, #101	; 0x65
 801d4e8:	f43f ab75 	beq.w	801cbd6 <_strtod_l+0x276>
 801d4ec:	2a45      	cmp	r2, #69	; 0x45
 801d4ee:	f43f ab72 	beq.w	801cbd6 <_strtod_l+0x276>
 801d4f2:	2301      	movs	r3, #1
 801d4f4:	f7ff bbaa 	b.w	801cc4c <_strtod_l+0x2ec>
 801d4f8:	00000000 	.word	0x00000000
 801d4fc:	bff00000 	.word	0xbff00000
 801d500:	00000000 	.word	0x00000000
 801d504:	3ff00000 	.word	0x3ff00000
 801d508:	94a03595 	.word	0x94a03595
 801d50c:	3fdfffff 	.word	0x3fdfffff
 801d510:	35afe535 	.word	0x35afe535
 801d514:	3fe00000 	.word	0x3fe00000
 801d518:	ffc00000 	.word	0xffc00000
 801d51c:	41dfffff 	.word	0x41dfffff
 801d520:	94a03595 	.word	0x94a03595
 801d524:	3fcfffff 	.word	0x3fcfffff
 801d528:	3ff00000 	.word	0x3ff00000
 801d52c:	3fe00000 	.word	0x3fe00000
 801d530:	7ff00000 	.word	0x7ff00000
 801d534:	7fe00000 	.word	0x7fe00000
 801d538:	7c9fffff 	.word	0x7c9fffff
 801d53c:	7fefffff 	.word	0x7fefffff

0801d540 <_strtod_r>:
 801d540:	4b01      	ldr	r3, [pc, #4]	; (801d548 <_strtod_r+0x8>)
 801d542:	f7ff ba0d 	b.w	801c960 <_strtod_l>
 801d546:	bf00      	nop
 801d548:	20000138 	.word	0x20000138

0801d54c <__cvt>:
 801d54c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d550:	ec55 4b10 	vmov	r4, r5, d0
 801d554:	2d00      	cmp	r5, #0
 801d556:	460e      	mov	r6, r1
 801d558:	4619      	mov	r1, r3
 801d55a:	462b      	mov	r3, r5
 801d55c:	bfbb      	ittet	lt
 801d55e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801d562:	461d      	movlt	r5, r3
 801d564:	2300      	movge	r3, #0
 801d566:	232d      	movlt	r3, #45	; 0x2d
 801d568:	700b      	strb	r3, [r1, #0]
 801d56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d56c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801d570:	4691      	mov	r9, r2
 801d572:	f023 0820 	bic.w	r8, r3, #32
 801d576:	bfbc      	itt	lt
 801d578:	4622      	movlt	r2, r4
 801d57a:	4614      	movlt	r4, r2
 801d57c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d580:	d005      	beq.n	801d58e <__cvt+0x42>
 801d582:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801d586:	d100      	bne.n	801d58a <__cvt+0x3e>
 801d588:	3601      	adds	r6, #1
 801d58a:	2102      	movs	r1, #2
 801d58c:	e000      	b.n	801d590 <__cvt+0x44>
 801d58e:	2103      	movs	r1, #3
 801d590:	ab03      	add	r3, sp, #12
 801d592:	9301      	str	r3, [sp, #4]
 801d594:	ab02      	add	r3, sp, #8
 801d596:	9300      	str	r3, [sp, #0]
 801d598:	ec45 4b10 	vmov	d0, r4, r5
 801d59c:	4653      	mov	r3, sl
 801d59e:	4632      	mov	r2, r6
 801d5a0:	f001 f95e 	bl	801e860 <_dtoa_r>
 801d5a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801d5a8:	4607      	mov	r7, r0
 801d5aa:	d102      	bne.n	801d5b2 <__cvt+0x66>
 801d5ac:	f019 0f01 	tst.w	r9, #1
 801d5b0:	d022      	beq.n	801d5f8 <__cvt+0xac>
 801d5b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d5b6:	eb07 0906 	add.w	r9, r7, r6
 801d5ba:	d110      	bne.n	801d5de <__cvt+0x92>
 801d5bc:	783b      	ldrb	r3, [r7, #0]
 801d5be:	2b30      	cmp	r3, #48	; 0x30
 801d5c0:	d10a      	bne.n	801d5d8 <__cvt+0x8c>
 801d5c2:	2200      	movs	r2, #0
 801d5c4:	2300      	movs	r3, #0
 801d5c6:	4620      	mov	r0, r4
 801d5c8:	4629      	mov	r1, r5
 801d5ca:	f7e3 fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 801d5ce:	b918      	cbnz	r0, 801d5d8 <__cvt+0x8c>
 801d5d0:	f1c6 0601 	rsb	r6, r6, #1
 801d5d4:	f8ca 6000 	str.w	r6, [sl]
 801d5d8:	f8da 3000 	ldr.w	r3, [sl]
 801d5dc:	4499      	add	r9, r3
 801d5de:	2200      	movs	r2, #0
 801d5e0:	2300      	movs	r3, #0
 801d5e2:	4620      	mov	r0, r4
 801d5e4:	4629      	mov	r1, r5
 801d5e6:	f7e3 fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 801d5ea:	b108      	cbz	r0, 801d5f0 <__cvt+0xa4>
 801d5ec:	f8cd 900c 	str.w	r9, [sp, #12]
 801d5f0:	2230      	movs	r2, #48	; 0x30
 801d5f2:	9b03      	ldr	r3, [sp, #12]
 801d5f4:	454b      	cmp	r3, r9
 801d5f6:	d307      	bcc.n	801d608 <__cvt+0xbc>
 801d5f8:	9b03      	ldr	r3, [sp, #12]
 801d5fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d5fc:	1bdb      	subs	r3, r3, r7
 801d5fe:	4638      	mov	r0, r7
 801d600:	6013      	str	r3, [r2, #0]
 801d602:	b004      	add	sp, #16
 801d604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d608:	1c59      	adds	r1, r3, #1
 801d60a:	9103      	str	r1, [sp, #12]
 801d60c:	701a      	strb	r2, [r3, #0]
 801d60e:	e7f0      	b.n	801d5f2 <__cvt+0xa6>

0801d610 <__exponent>:
 801d610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d612:	4603      	mov	r3, r0
 801d614:	2900      	cmp	r1, #0
 801d616:	bfb8      	it	lt
 801d618:	4249      	neglt	r1, r1
 801d61a:	f803 2b02 	strb.w	r2, [r3], #2
 801d61e:	bfb4      	ite	lt
 801d620:	222d      	movlt	r2, #45	; 0x2d
 801d622:	222b      	movge	r2, #43	; 0x2b
 801d624:	2909      	cmp	r1, #9
 801d626:	7042      	strb	r2, [r0, #1]
 801d628:	dd2a      	ble.n	801d680 <__exponent+0x70>
 801d62a:	f10d 0207 	add.w	r2, sp, #7
 801d62e:	4617      	mov	r7, r2
 801d630:	260a      	movs	r6, #10
 801d632:	4694      	mov	ip, r2
 801d634:	fb91 f5f6 	sdiv	r5, r1, r6
 801d638:	fb06 1415 	mls	r4, r6, r5, r1
 801d63c:	3430      	adds	r4, #48	; 0x30
 801d63e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801d642:	460c      	mov	r4, r1
 801d644:	2c63      	cmp	r4, #99	; 0x63
 801d646:	f102 32ff 	add.w	r2, r2, #4294967295
 801d64a:	4629      	mov	r1, r5
 801d64c:	dcf1      	bgt.n	801d632 <__exponent+0x22>
 801d64e:	3130      	adds	r1, #48	; 0x30
 801d650:	f1ac 0402 	sub.w	r4, ip, #2
 801d654:	f802 1c01 	strb.w	r1, [r2, #-1]
 801d658:	1c41      	adds	r1, r0, #1
 801d65a:	4622      	mov	r2, r4
 801d65c:	42ba      	cmp	r2, r7
 801d65e:	d30a      	bcc.n	801d676 <__exponent+0x66>
 801d660:	f10d 0209 	add.w	r2, sp, #9
 801d664:	eba2 020c 	sub.w	r2, r2, ip
 801d668:	42bc      	cmp	r4, r7
 801d66a:	bf88      	it	hi
 801d66c:	2200      	movhi	r2, #0
 801d66e:	4413      	add	r3, r2
 801d670:	1a18      	subs	r0, r3, r0
 801d672:	b003      	add	sp, #12
 801d674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d676:	f812 5b01 	ldrb.w	r5, [r2], #1
 801d67a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801d67e:	e7ed      	b.n	801d65c <__exponent+0x4c>
 801d680:	2330      	movs	r3, #48	; 0x30
 801d682:	3130      	adds	r1, #48	; 0x30
 801d684:	7083      	strb	r3, [r0, #2]
 801d686:	70c1      	strb	r1, [r0, #3]
 801d688:	1d03      	adds	r3, r0, #4
 801d68a:	e7f1      	b.n	801d670 <__exponent+0x60>

0801d68c <_printf_float>:
 801d68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d690:	ed2d 8b02 	vpush	{d8}
 801d694:	b08d      	sub	sp, #52	; 0x34
 801d696:	460c      	mov	r4, r1
 801d698:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d69c:	4616      	mov	r6, r2
 801d69e:	461f      	mov	r7, r3
 801d6a0:	4605      	mov	r5, r0
 801d6a2:	f000 ff59 	bl	801e558 <_localeconv_r>
 801d6a6:	f8d0 a000 	ldr.w	sl, [r0]
 801d6aa:	4650      	mov	r0, sl
 801d6ac:	f7e2 fde0 	bl	8000270 <strlen>
 801d6b0:	2300      	movs	r3, #0
 801d6b2:	930a      	str	r3, [sp, #40]	; 0x28
 801d6b4:	6823      	ldr	r3, [r4, #0]
 801d6b6:	9305      	str	r3, [sp, #20]
 801d6b8:	f8d8 3000 	ldr.w	r3, [r8]
 801d6bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 801d6c0:	3307      	adds	r3, #7
 801d6c2:	f023 0307 	bic.w	r3, r3, #7
 801d6c6:	f103 0208 	add.w	r2, r3, #8
 801d6ca:	f8c8 2000 	str.w	r2, [r8]
 801d6ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d6d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d6d6:	9307      	str	r3, [sp, #28]
 801d6d8:	f8cd 8018 	str.w	r8, [sp, #24]
 801d6dc:	ee08 0a10 	vmov	s16, r0
 801d6e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801d6e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d6e8:	4b9e      	ldr	r3, [pc, #632]	; (801d964 <_printf_float+0x2d8>)
 801d6ea:	f04f 32ff 	mov.w	r2, #4294967295
 801d6ee:	f7e3 fa1d 	bl	8000b2c <__aeabi_dcmpun>
 801d6f2:	bb88      	cbnz	r0, 801d758 <_printf_float+0xcc>
 801d6f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d6f8:	4b9a      	ldr	r3, [pc, #616]	; (801d964 <_printf_float+0x2d8>)
 801d6fa:	f04f 32ff 	mov.w	r2, #4294967295
 801d6fe:	f7e3 f9f7 	bl	8000af0 <__aeabi_dcmple>
 801d702:	bb48      	cbnz	r0, 801d758 <_printf_float+0xcc>
 801d704:	2200      	movs	r2, #0
 801d706:	2300      	movs	r3, #0
 801d708:	4640      	mov	r0, r8
 801d70a:	4649      	mov	r1, r9
 801d70c:	f7e3 f9e6 	bl	8000adc <__aeabi_dcmplt>
 801d710:	b110      	cbz	r0, 801d718 <_printf_float+0x8c>
 801d712:	232d      	movs	r3, #45	; 0x2d
 801d714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d718:	4a93      	ldr	r2, [pc, #588]	; (801d968 <_printf_float+0x2dc>)
 801d71a:	4b94      	ldr	r3, [pc, #592]	; (801d96c <_printf_float+0x2e0>)
 801d71c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801d720:	bf94      	ite	ls
 801d722:	4690      	movls	r8, r2
 801d724:	4698      	movhi	r8, r3
 801d726:	2303      	movs	r3, #3
 801d728:	6123      	str	r3, [r4, #16]
 801d72a:	9b05      	ldr	r3, [sp, #20]
 801d72c:	f023 0304 	bic.w	r3, r3, #4
 801d730:	6023      	str	r3, [r4, #0]
 801d732:	f04f 0900 	mov.w	r9, #0
 801d736:	9700      	str	r7, [sp, #0]
 801d738:	4633      	mov	r3, r6
 801d73a:	aa0b      	add	r2, sp, #44	; 0x2c
 801d73c:	4621      	mov	r1, r4
 801d73e:	4628      	mov	r0, r5
 801d740:	f000 f9da 	bl	801daf8 <_printf_common>
 801d744:	3001      	adds	r0, #1
 801d746:	f040 8090 	bne.w	801d86a <_printf_float+0x1de>
 801d74a:	f04f 30ff 	mov.w	r0, #4294967295
 801d74e:	b00d      	add	sp, #52	; 0x34
 801d750:	ecbd 8b02 	vpop	{d8}
 801d754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d758:	4642      	mov	r2, r8
 801d75a:	464b      	mov	r3, r9
 801d75c:	4640      	mov	r0, r8
 801d75e:	4649      	mov	r1, r9
 801d760:	f7e3 f9e4 	bl	8000b2c <__aeabi_dcmpun>
 801d764:	b140      	cbz	r0, 801d778 <_printf_float+0xec>
 801d766:	464b      	mov	r3, r9
 801d768:	2b00      	cmp	r3, #0
 801d76a:	bfbc      	itt	lt
 801d76c:	232d      	movlt	r3, #45	; 0x2d
 801d76e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801d772:	4a7f      	ldr	r2, [pc, #508]	; (801d970 <_printf_float+0x2e4>)
 801d774:	4b7f      	ldr	r3, [pc, #508]	; (801d974 <_printf_float+0x2e8>)
 801d776:	e7d1      	b.n	801d71c <_printf_float+0x90>
 801d778:	6863      	ldr	r3, [r4, #4]
 801d77a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801d77e:	9206      	str	r2, [sp, #24]
 801d780:	1c5a      	adds	r2, r3, #1
 801d782:	d13f      	bne.n	801d804 <_printf_float+0x178>
 801d784:	2306      	movs	r3, #6
 801d786:	6063      	str	r3, [r4, #4]
 801d788:	9b05      	ldr	r3, [sp, #20]
 801d78a:	6861      	ldr	r1, [r4, #4]
 801d78c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801d790:	2300      	movs	r3, #0
 801d792:	9303      	str	r3, [sp, #12]
 801d794:	ab0a      	add	r3, sp, #40	; 0x28
 801d796:	e9cd b301 	strd	fp, r3, [sp, #4]
 801d79a:	ab09      	add	r3, sp, #36	; 0x24
 801d79c:	ec49 8b10 	vmov	d0, r8, r9
 801d7a0:	9300      	str	r3, [sp, #0]
 801d7a2:	6022      	str	r2, [r4, #0]
 801d7a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801d7a8:	4628      	mov	r0, r5
 801d7aa:	f7ff fecf 	bl	801d54c <__cvt>
 801d7ae:	9b06      	ldr	r3, [sp, #24]
 801d7b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d7b2:	2b47      	cmp	r3, #71	; 0x47
 801d7b4:	4680      	mov	r8, r0
 801d7b6:	d108      	bne.n	801d7ca <_printf_float+0x13e>
 801d7b8:	1cc8      	adds	r0, r1, #3
 801d7ba:	db02      	blt.n	801d7c2 <_printf_float+0x136>
 801d7bc:	6863      	ldr	r3, [r4, #4]
 801d7be:	4299      	cmp	r1, r3
 801d7c0:	dd41      	ble.n	801d846 <_printf_float+0x1ba>
 801d7c2:	f1ab 0302 	sub.w	r3, fp, #2
 801d7c6:	fa5f fb83 	uxtb.w	fp, r3
 801d7ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d7ce:	d820      	bhi.n	801d812 <_printf_float+0x186>
 801d7d0:	3901      	subs	r1, #1
 801d7d2:	465a      	mov	r2, fp
 801d7d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801d7d8:	9109      	str	r1, [sp, #36]	; 0x24
 801d7da:	f7ff ff19 	bl	801d610 <__exponent>
 801d7de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d7e0:	1813      	adds	r3, r2, r0
 801d7e2:	2a01      	cmp	r2, #1
 801d7e4:	4681      	mov	r9, r0
 801d7e6:	6123      	str	r3, [r4, #16]
 801d7e8:	dc02      	bgt.n	801d7f0 <_printf_float+0x164>
 801d7ea:	6822      	ldr	r2, [r4, #0]
 801d7ec:	07d2      	lsls	r2, r2, #31
 801d7ee:	d501      	bpl.n	801d7f4 <_printf_float+0x168>
 801d7f0:	3301      	adds	r3, #1
 801d7f2:	6123      	str	r3, [r4, #16]
 801d7f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d09c      	beq.n	801d736 <_printf_float+0xaa>
 801d7fc:	232d      	movs	r3, #45	; 0x2d
 801d7fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d802:	e798      	b.n	801d736 <_printf_float+0xaa>
 801d804:	9a06      	ldr	r2, [sp, #24]
 801d806:	2a47      	cmp	r2, #71	; 0x47
 801d808:	d1be      	bne.n	801d788 <_printf_float+0xfc>
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	d1bc      	bne.n	801d788 <_printf_float+0xfc>
 801d80e:	2301      	movs	r3, #1
 801d810:	e7b9      	b.n	801d786 <_printf_float+0xfa>
 801d812:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801d816:	d118      	bne.n	801d84a <_printf_float+0x1be>
 801d818:	2900      	cmp	r1, #0
 801d81a:	6863      	ldr	r3, [r4, #4]
 801d81c:	dd0b      	ble.n	801d836 <_printf_float+0x1aa>
 801d81e:	6121      	str	r1, [r4, #16]
 801d820:	b913      	cbnz	r3, 801d828 <_printf_float+0x19c>
 801d822:	6822      	ldr	r2, [r4, #0]
 801d824:	07d0      	lsls	r0, r2, #31
 801d826:	d502      	bpl.n	801d82e <_printf_float+0x1a2>
 801d828:	3301      	adds	r3, #1
 801d82a:	440b      	add	r3, r1
 801d82c:	6123      	str	r3, [r4, #16]
 801d82e:	65a1      	str	r1, [r4, #88]	; 0x58
 801d830:	f04f 0900 	mov.w	r9, #0
 801d834:	e7de      	b.n	801d7f4 <_printf_float+0x168>
 801d836:	b913      	cbnz	r3, 801d83e <_printf_float+0x1b2>
 801d838:	6822      	ldr	r2, [r4, #0]
 801d83a:	07d2      	lsls	r2, r2, #31
 801d83c:	d501      	bpl.n	801d842 <_printf_float+0x1b6>
 801d83e:	3302      	adds	r3, #2
 801d840:	e7f4      	b.n	801d82c <_printf_float+0x1a0>
 801d842:	2301      	movs	r3, #1
 801d844:	e7f2      	b.n	801d82c <_printf_float+0x1a0>
 801d846:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801d84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d84c:	4299      	cmp	r1, r3
 801d84e:	db05      	blt.n	801d85c <_printf_float+0x1d0>
 801d850:	6823      	ldr	r3, [r4, #0]
 801d852:	6121      	str	r1, [r4, #16]
 801d854:	07d8      	lsls	r0, r3, #31
 801d856:	d5ea      	bpl.n	801d82e <_printf_float+0x1a2>
 801d858:	1c4b      	adds	r3, r1, #1
 801d85a:	e7e7      	b.n	801d82c <_printf_float+0x1a0>
 801d85c:	2900      	cmp	r1, #0
 801d85e:	bfd4      	ite	le
 801d860:	f1c1 0202 	rsble	r2, r1, #2
 801d864:	2201      	movgt	r2, #1
 801d866:	4413      	add	r3, r2
 801d868:	e7e0      	b.n	801d82c <_printf_float+0x1a0>
 801d86a:	6823      	ldr	r3, [r4, #0]
 801d86c:	055a      	lsls	r2, r3, #21
 801d86e:	d407      	bmi.n	801d880 <_printf_float+0x1f4>
 801d870:	6923      	ldr	r3, [r4, #16]
 801d872:	4642      	mov	r2, r8
 801d874:	4631      	mov	r1, r6
 801d876:	4628      	mov	r0, r5
 801d878:	47b8      	blx	r7
 801d87a:	3001      	adds	r0, #1
 801d87c:	d12c      	bne.n	801d8d8 <_printf_float+0x24c>
 801d87e:	e764      	b.n	801d74a <_printf_float+0xbe>
 801d880:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d884:	f240 80e0 	bls.w	801da48 <_printf_float+0x3bc>
 801d888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d88c:	2200      	movs	r2, #0
 801d88e:	2300      	movs	r3, #0
 801d890:	f7e3 f91a 	bl	8000ac8 <__aeabi_dcmpeq>
 801d894:	2800      	cmp	r0, #0
 801d896:	d034      	beq.n	801d902 <_printf_float+0x276>
 801d898:	4a37      	ldr	r2, [pc, #220]	; (801d978 <_printf_float+0x2ec>)
 801d89a:	2301      	movs	r3, #1
 801d89c:	4631      	mov	r1, r6
 801d89e:	4628      	mov	r0, r5
 801d8a0:	47b8      	blx	r7
 801d8a2:	3001      	adds	r0, #1
 801d8a4:	f43f af51 	beq.w	801d74a <_printf_float+0xbe>
 801d8a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d8ac:	429a      	cmp	r2, r3
 801d8ae:	db02      	blt.n	801d8b6 <_printf_float+0x22a>
 801d8b0:	6823      	ldr	r3, [r4, #0]
 801d8b2:	07d8      	lsls	r0, r3, #31
 801d8b4:	d510      	bpl.n	801d8d8 <_printf_float+0x24c>
 801d8b6:	ee18 3a10 	vmov	r3, s16
 801d8ba:	4652      	mov	r2, sl
 801d8bc:	4631      	mov	r1, r6
 801d8be:	4628      	mov	r0, r5
 801d8c0:	47b8      	blx	r7
 801d8c2:	3001      	adds	r0, #1
 801d8c4:	f43f af41 	beq.w	801d74a <_printf_float+0xbe>
 801d8c8:	f04f 0800 	mov.w	r8, #0
 801d8cc:	f104 091a 	add.w	r9, r4, #26
 801d8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d8d2:	3b01      	subs	r3, #1
 801d8d4:	4543      	cmp	r3, r8
 801d8d6:	dc09      	bgt.n	801d8ec <_printf_float+0x260>
 801d8d8:	6823      	ldr	r3, [r4, #0]
 801d8da:	079b      	lsls	r3, r3, #30
 801d8dc:	f100 8107 	bmi.w	801daee <_printf_float+0x462>
 801d8e0:	68e0      	ldr	r0, [r4, #12]
 801d8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d8e4:	4298      	cmp	r0, r3
 801d8e6:	bfb8      	it	lt
 801d8e8:	4618      	movlt	r0, r3
 801d8ea:	e730      	b.n	801d74e <_printf_float+0xc2>
 801d8ec:	2301      	movs	r3, #1
 801d8ee:	464a      	mov	r2, r9
 801d8f0:	4631      	mov	r1, r6
 801d8f2:	4628      	mov	r0, r5
 801d8f4:	47b8      	blx	r7
 801d8f6:	3001      	adds	r0, #1
 801d8f8:	f43f af27 	beq.w	801d74a <_printf_float+0xbe>
 801d8fc:	f108 0801 	add.w	r8, r8, #1
 801d900:	e7e6      	b.n	801d8d0 <_printf_float+0x244>
 801d902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d904:	2b00      	cmp	r3, #0
 801d906:	dc39      	bgt.n	801d97c <_printf_float+0x2f0>
 801d908:	4a1b      	ldr	r2, [pc, #108]	; (801d978 <_printf_float+0x2ec>)
 801d90a:	2301      	movs	r3, #1
 801d90c:	4631      	mov	r1, r6
 801d90e:	4628      	mov	r0, r5
 801d910:	47b8      	blx	r7
 801d912:	3001      	adds	r0, #1
 801d914:	f43f af19 	beq.w	801d74a <_printf_float+0xbe>
 801d918:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801d91c:	4313      	orrs	r3, r2
 801d91e:	d102      	bne.n	801d926 <_printf_float+0x29a>
 801d920:	6823      	ldr	r3, [r4, #0]
 801d922:	07d9      	lsls	r1, r3, #31
 801d924:	d5d8      	bpl.n	801d8d8 <_printf_float+0x24c>
 801d926:	ee18 3a10 	vmov	r3, s16
 801d92a:	4652      	mov	r2, sl
 801d92c:	4631      	mov	r1, r6
 801d92e:	4628      	mov	r0, r5
 801d930:	47b8      	blx	r7
 801d932:	3001      	adds	r0, #1
 801d934:	f43f af09 	beq.w	801d74a <_printf_float+0xbe>
 801d938:	f04f 0900 	mov.w	r9, #0
 801d93c:	f104 0a1a 	add.w	sl, r4, #26
 801d940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d942:	425b      	negs	r3, r3
 801d944:	454b      	cmp	r3, r9
 801d946:	dc01      	bgt.n	801d94c <_printf_float+0x2c0>
 801d948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d94a:	e792      	b.n	801d872 <_printf_float+0x1e6>
 801d94c:	2301      	movs	r3, #1
 801d94e:	4652      	mov	r2, sl
 801d950:	4631      	mov	r1, r6
 801d952:	4628      	mov	r0, r5
 801d954:	47b8      	blx	r7
 801d956:	3001      	adds	r0, #1
 801d958:	f43f aef7 	beq.w	801d74a <_printf_float+0xbe>
 801d95c:	f109 0901 	add.w	r9, r9, #1
 801d960:	e7ee      	b.n	801d940 <_printf_float+0x2b4>
 801d962:	bf00      	nop
 801d964:	7fefffff 	.word	0x7fefffff
 801d968:	08022851 	.word	0x08022851
 801d96c:	08022855 	.word	0x08022855
 801d970:	08022859 	.word	0x08022859
 801d974:	0802285d 	.word	0x0802285d
 801d978:	08022afb 	.word	0x08022afb
 801d97c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d97e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d980:	429a      	cmp	r2, r3
 801d982:	bfa8      	it	ge
 801d984:	461a      	movge	r2, r3
 801d986:	2a00      	cmp	r2, #0
 801d988:	4691      	mov	r9, r2
 801d98a:	dc37      	bgt.n	801d9fc <_printf_float+0x370>
 801d98c:	f04f 0b00 	mov.w	fp, #0
 801d990:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d994:	f104 021a 	add.w	r2, r4, #26
 801d998:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d99a:	9305      	str	r3, [sp, #20]
 801d99c:	eba3 0309 	sub.w	r3, r3, r9
 801d9a0:	455b      	cmp	r3, fp
 801d9a2:	dc33      	bgt.n	801da0c <_printf_float+0x380>
 801d9a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d9a8:	429a      	cmp	r2, r3
 801d9aa:	db3b      	blt.n	801da24 <_printf_float+0x398>
 801d9ac:	6823      	ldr	r3, [r4, #0]
 801d9ae:	07da      	lsls	r2, r3, #31
 801d9b0:	d438      	bmi.n	801da24 <_printf_float+0x398>
 801d9b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801d9b6:	eba2 0903 	sub.w	r9, r2, r3
 801d9ba:	9b05      	ldr	r3, [sp, #20]
 801d9bc:	1ad2      	subs	r2, r2, r3
 801d9be:	4591      	cmp	r9, r2
 801d9c0:	bfa8      	it	ge
 801d9c2:	4691      	movge	r9, r2
 801d9c4:	f1b9 0f00 	cmp.w	r9, #0
 801d9c8:	dc35      	bgt.n	801da36 <_printf_float+0x3aa>
 801d9ca:	f04f 0800 	mov.w	r8, #0
 801d9ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d9d2:	f104 0a1a 	add.w	sl, r4, #26
 801d9d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d9da:	1a9b      	subs	r3, r3, r2
 801d9dc:	eba3 0309 	sub.w	r3, r3, r9
 801d9e0:	4543      	cmp	r3, r8
 801d9e2:	f77f af79 	ble.w	801d8d8 <_printf_float+0x24c>
 801d9e6:	2301      	movs	r3, #1
 801d9e8:	4652      	mov	r2, sl
 801d9ea:	4631      	mov	r1, r6
 801d9ec:	4628      	mov	r0, r5
 801d9ee:	47b8      	blx	r7
 801d9f0:	3001      	adds	r0, #1
 801d9f2:	f43f aeaa 	beq.w	801d74a <_printf_float+0xbe>
 801d9f6:	f108 0801 	add.w	r8, r8, #1
 801d9fa:	e7ec      	b.n	801d9d6 <_printf_float+0x34a>
 801d9fc:	4613      	mov	r3, r2
 801d9fe:	4631      	mov	r1, r6
 801da00:	4642      	mov	r2, r8
 801da02:	4628      	mov	r0, r5
 801da04:	47b8      	blx	r7
 801da06:	3001      	adds	r0, #1
 801da08:	d1c0      	bne.n	801d98c <_printf_float+0x300>
 801da0a:	e69e      	b.n	801d74a <_printf_float+0xbe>
 801da0c:	2301      	movs	r3, #1
 801da0e:	4631      	mov	r1, r6
 801da10:	4628      	mov	r0, r5
 801da12:	9205      	str	r2, [sp, #20]
 801da14:	47b8      	blx	r7
 801da16:	3001      	adds	r0, #1
 801da18:	f43f ae97 	beq.w	801d74a <_printf_float+0xbe>
 801da1c:	9a05      	ldr	r2, [sp, #20]
 801da1e:	f10b 0b01 	add.w	fp, fp, #1
 801da22:	e7b9      	b.n	801d998 <_printf_float+0x30c>
 801da24:	ee18 3a10 	vmov	r3, s16
 801da28:	4652      	mov	r2, sl
 801da2a:	4631      	mov	r1, r6
 801da2c:	4628      	mov	r0, r5
 801da2e:	47b8      	blx	r7
 801da30:	3001      	adds	r0, #1
 801da32:	d1be      	bne.n	801d9b2 <_printf_float+0x326>
 801da34:	e689      	b.n	801d74a <_printf_float+0xbe>
 801da36:	9a05      	ldr	r2, [sp, #20]
 801da38:	464b      	mov	r3, r9
 801da3a:	4442      	add	r2, r8
 801da3c:	4631      	mov	r1, r6
 801da3e:	4628      	mov	r0, r5
 801da40:	47b8      	blx	r7
 801da42:	3001      	adds	r0, #1
 801da44:	d1c1      	bne.n	801d9ca <_printf_float+0x33e>
 801da46:	e680      	b.n	801d74a <_printf_float+0xbe>
 801da48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801da4a:	2a01      	cmp	r2, #1
 801da4c:	dc01      	bgt.n	801da52 <_printf_float+0x3c6>
 801da4e:	07db      	lsls	r3, r3, #31
 801da50:	d53a      	bpl.n	801dac8 <_printf_float+0x43c>
 801da52:	2301      	movs	r3, #1
 801da54:	4642      	mov	r2, r8
 801da56:	4631      	mov	r1, r6
 801da58:	4628      	mov	r0, r5
 801da5a:	47b8      	blx	r7
 801da5c:	3001      	adds	r0, #1
 801da5e:	f43f ae74 	beq.w	801d74a <_printf_float+0xbe>
 801da62:	ee18 3a10 	vmov	r3, s16
 801da66:	4652      	mov	r2, sl
 801da68:	4631      	mov	r1, r6
 801da6a:	4628      	mov	r0, r5
 801da6c:	47b8      	blx	r7
 801da6e:	3001      	adds	r0, #1
 801da70:	f43f ae6b 	beq.w	801d74a <_printf_float+0xbe>
 801da74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801da78:	2200      	movs	r2, #0
 801da7a:	2300      	movs	r3, #0
 801da7c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801da80:	f7e3 f822 	bl	8000ac8 <__aeabi_dcmpeq>
 801da84:	b9d8      	cbnz	r0, 801dabe <_printf_float+0x432>
 801da86:	f10a 33ff 	add.w	r3, sl, #4294967295
 801da8a:	f108 0201 	add.w	r2, r8, #1
 801da8e:	4631      	mov	r1, r6
 801da90:	4628      	mov	r0, r5
 801da92:	47b8      	blx	r7
 801da94:	3001      	adds	r0, #1
 801da96:	d10e      	bne.n	801dab6 <_printf_float+0x42a>
 801da98:	e657      	b.n	801d74a <_printf_float+0xbe>
 801da9a:	2301      	movs	r3, #1
 801da9c:	4652      	mov	r2, sl
 801da9e:	4631      	mov	r1, r6
 801daa0:	4628      	mov	r0, r5
 801daa2:	47b8      	blx	r7
 801daa4:	3001      	adds	r0, #1
 801daa6:	f43f ae50 	beq.w	801d74a <_printf_float+0xbe>
 801daaa:	f108 0801 	add.w	r8, r8, #1
 801daae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dab0:	3b01      	subs	r3, #1
 801dab2:	4543      	cmp	r3, r8
 801dab4:	dcf1      	bgt.n	801da9a <_printf_float+0x40e>
 801dab6:	464b      	mov	r3, r9
 801dab8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801dabc:	e6da      	b.n	801d874 <_printf_float+0x1e8>
 801dabe:	f04f 0800 	mov.w	r8, #0
 801dac2:	f104 0a1a 	add.w	sl, r4, #26
 801dac6:	e7f2      	b.n	801daae <_printf_float+0x422>
 801dac8:	2301      	movs	r3, #1
 801daca:	4642      	mov	r2, r8
 801dacc:	e7df      	b.n	801da8e <_printf_float+0x402>
 801dace:	2301      	movs	r3, #1
 801dad0:	464a      	mov	r2, r9
 801dad2:	4631      	mov	r1, r6
 801dad4:	4628      	mov	r0, r5
 801dad6:	47b8      	blx	r7
 801dad8:	3001      	adds	r0, #1
 801dada:	f43f ae36 	beq.w	801d74a <_printf_float+0xbe>
 801dade:	f108 0801 	add.w	r8, r8, #1
 801dae2:	68e3      	ldr	r3, [r4, #12]
 801dae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801dae6:	1a5b      	subs	r3, r3, r1
 801dae8:	4543      	cmp	r3, r8
 801daea:	dcf0      	bgt.n	801dace <_printf_float+0x442>
 801daec:	e6f8      	b.n	801d8e0 <_printf_float+0x254>
 801daee:	f04f 0800 	mov.w	r8, #0
 801daf2:	f104 0919 	add.w	r9, r4, #25
 801daf6:	e7f4      	b.n	801dae2 <_printf_float+0x456>

0801daf8 <_printf_common>:
 801daf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dafc:	4616      	mov	r6, r2
 801dafe:	4699      	mov	r9, r3
 801db00:	688a      	ldr	r2, [r1, #8]
 801db02:	690b      	ldr	r3, [r1, #16]
 801db04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801db08:	4293      	cmp	r3, r2
 801db0a:	bfb8      	it	lt
 801db0c:	4613      	movlt	r3, r2
 801db0e:	6033      	str	r3, [r6, #0]
 801db10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801db14:	4607      	mov	r7, r0
 801db16:	460c      	mov	r4, r1
 801db18:	b10a      	cbz	r2, 801db1e <_printf_common+0x26>
 801db1a:	3301      	adds	r3, #1
 801db1c:	6033      	str	r3, [r6, #0]
 801db1e:	6823      	ldr	r3, [r4, #0]
 801db20:	0699      	lsls	r1, r3, #26
 801db22:	bf42      	ittt	mi
 801db24:	6833      	ldrmi	r3, [r6, #0]
 801db26:	3302      	addmi	r3, #2
 801db28:	6033      	strmi	r3, [r6, #0]
 801db2a:	6825      	ldr	r5, [r4, #0]
 801db2c:	f015 0506 	ands.w	r5, r5, #6
 801db30:	d106      	bne.n	801db40 <_printf_common+0x48>
 801db32:	f104 0a19 	add.w	sl, r4, #25
 801db36:	68e3      	ldr	r3, [r4, #12]
 801db38:	6832      	ldr	r2, [r6, #0]
 801db3a:	1a9b      	subs	r3, r3, r2
 801db3c:	42ab      	cmp	r3, r5
 801db3e:	dc26      	bgt.n	801db8e <_printf_common+0x96>
 801db40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801db44:	1e13      	subs	r3, r2, #0
 801db46:	6822      	ldr	r2, [r4, #0]
 801db48:	bf18      	it	ne
 801db4a:	2301      	movne	r3, #1
 801db4c:	0692      	lsls	r2, r2, #26
 801db4e:	d42b      	bmi.n	801dba8 <_printf_common+0xb0>
 801db50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801db54:	4649      	mov	r1, r9
 801db56:	4638      	mov	r0, r7
 801db58:	47c0      	blx	r8
 801db5a:	3001      	adds	r0, #1
 801db5c:	d01e      	beq.n	801db9c <_printf_common+0xa4>
 801db5e:	6823      	ldr	r3, [r4, #0]
 801db60:	6922      	ldr	r2, [r4, #16]
 801db62:	f003 0306 	and.w	r3, r3, #6
 801db66:	2b04      	cmp	r3, #4
 801db68:	bf02      	ittt	eq
 801db6a:	68e5      	ldreq	r5, [r4, #12]
 801db6c:	6833      	ldreq	r3, [r6, #0]
 801db6e:	1aed      	subeq	r5, r5, r3
 801db70:	68a3      	ldr	r3, [r4, #8]
 801db72:	bf0c      	ite	eq
 801db74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801db78:	2500      	movne	r5, #0
 801db7a:	4293      	cmp	r3, r2
 801db7c:	bfc4      	itt	gt
 801db7e:	1a9b      	subgt	r3, r3, r2
 801db80:	18ed      	addgt	r5, r5, r3
 801db82:	2600      	movs	r6, #0
 801db84:	341a      	adds	r4, #26
 801db86:	42b5      	cmp	r5, r6
 801db88:	d11a      	bne.n	801dbc0 <_printf_common+0xc8>
 801db8a:	2000      	movs	r0, #0
 801db8c:	e008      	b.n	801dba0 <_printf_common+0xa8>
 801db8e:	2301      	movs	r3, #1
 801db90:	4652      	mov	r2, sl
 801db92:	4649      	mov	r1, r9
 801db94:	4638      	mov	r0, r7
 801db96:	47c0      	blx	r8
 801db98:	3001      	adds	r0, #1
 801db9a:	d103      	bne.n	801dba4 <_printf_common+0xac>
 801db9c:	f04f 30ff 	mov.w	r0, #4294967295
 801dba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dba4:	3501      	adds	r5, #1
 801dba6:	e7c6      	b.n	801db36 <_printf_common+0x3e>
 801dba8:	18e1      	adds	r1, r4, r3
 801dbaa:	1c5a      	adds	r2, r3, #1
 801dbac:	2030      	movs	r0, #48	; 0x30
 801dbae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801dbb2:	4422      	add	r2, r4
 801dbb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801dbb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801dbbc:	3302      	adds	r3, #2
 801dbbe:	e7c7      	b.n	801db50 <_printf_common+0x58>
 801dbc0:	2301      	movs	r3, #1
 801dbc2:	4622      	mov	r2, r4
 801dbc4:	4649      	mov	r1, r9
 801dbc6:	4638      	mov	r0, r7
 801dbc8:	47c0      	blx	r8
 801dbca:	3001      	adds	r0, #1
 801dbcc:	d0e6      	beq.n	801db9c <_printf_common+0xa4>
 801dbce:	3601      	adds	r6, #1
 801dbd0:	e7d9      	b.n	801db86 <_printf_common+0x8e>
	...

0801dbd4 <_printf_i>:
 801dbd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dbd8:	7e0f      	ldrb	r7, [r1, #24]
 801dbda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dbdc:	2f78      	cmp	r7, #120	; 0x78
 801dbde:	4691      	mov	r9, r2
 801dbe0:	4680      	mov	r8, r0
 801dbe2:	460c      	mov	r4, r1
 801dbe4:	469a      	mov	sl, r3
 801dbe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801dbea:	d807      	bhi.n	801dbfc <_printf_i+0x28>
 801dbec:	2f62      	cmp	r7, #98	; 0x62
 801dbee:	d80a      	bhi.n	801dc06 <_printf_i+0x32>
 801dbf0:	2f00      	cmp	r7, #0
 801dbf2:	f000 80d4 	beq.w	801dd9e <_printf_i+0x1ca>
 801dbf6:	2f58      	cmp	r7, #88	; 0x58
 801dbf8:	f000 80c0 	beq.w	801dd7c <_printf_i+0x1a8>
 801dbfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dc00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801dc04:	e03a      	b.n	801dc7c <_printf_i+0xa8>
 801dc06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801dc0a:	2b15      	cmp	r3, #21
 801dc0c:	d8f6      	bhi.n	801dbfc <_printf_i+0x28>
 801dc0e:	a101      	add	r1, pc, #4	; (adr r1, 801dc14 <_printf_i+0x40>)
 801dc10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801dc14:	0801dc6d 	.word	0x0801dc6d
 801dc18:	0801dc81 	.word	0x0801dc81
 801dc1c:	0801dbfd 	.word	0x0801dbfd
 801dc20:	0801dbfd 	.word	0x0801dbfd
 801dc24:	0801dbfd 	.word	0x0801dbfd
 801dc28:	0801dbfd 	.word	0x0801dbfd
 801dc2c:	0801dc81 	.word	0x0801dc81
 801dc30:	0801dbfd 	.word	0x0801dbfd
 801dc34:	0801dbfd 	.word	0x0801dbfd
 801dc38:	0801dbfd 	.word	0x0801dbfd
 801dc3c:	0801dbfd 	.word	0x0801dbfd
 801dc40:	0801dd85 	.word	0x0801dd85
 801dc44:	0801dcad 	.word	0x0801dcad
 801dc48:	0801dd3f 	.word	0x0801dd3f
 801dc4c:	0801dbfd 	.word	0x0801dbfd
 801dc50:	0801dbfd 	.word	0x0801dbfd
 801dc54:	0801dda7 	.word	0x0801dda7
 801dc58:	0801dbfd 	.word	0x0801dbfd
 801dc5c:	0801dcad 	.word	0x0801dcad
 801dc60:	0801dbfd 	.word	0x0801dbfd
 801dc64:	0801dbfd 	.word	0x0801dbfd
 801dc68:	0801dd47 	.word	0x0801dd47
 801dc6c:	682b      	ldr	r3, [r5, #0]
 801dc6e:	1d1a      	adds	r2, r3, #4
 801dc70:	681b      	ldr	r3, [r3, #0]
 801dc72:	602a      	str	r2, [r5, #0]
 801dc74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dc78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801dc7c:	2301      	movs	r3, #1
 801dc7e:	e09f      	b.n	801ddc0 <_printf_i+0x1ec>
 801dc80:	6820      	ldr	r0, [r4, #0]
 801dc82:	682b      	ldr	r3, [r5, #0]
 801dc84:	0607      	lsls	r7, r0, #24
 801dc86:	f103 0104 	add.w	r1, r3, #4
 801dc8a:	6029      	str	r1, [r5, #0]
 801dc8c:	d501      	bpl.n	801dc92 <_printf_i+0xbe>
 801dc8e:	681e      	ldr	r6, [r3, #0]
 801dc90:	e003      	b.n	801dc9a <_printf_i+0xc6>
 801dc92:	0646      	lsls	r6, r0, #25
 801dc94:	d5fb      	bpl.n	801dc8e <_printf_i+0xba>
 801dc96:	f9b3 6000 	ldrsh.w	r6, [r3]
 801dc9a:	2e00      	cmp	r6, #0
 801dc9c:	da03      	bge.n	801dca6 <_printf_i+0xd2>
 801dc9e:	232d      	movs	r3, #45	; 0x2d
 801dca0:	4276      	negs	r6, r6
 801dca2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dca6:	485a      	ldr	r0, [pc, #360]	; (801de10 <_printf_i+0x23c>)
 801dca8:	230a      	movs	r3, #10
 801dcaa:	e012      	b.n	801dcd2 <_printf_i+0xfe>
 801dcac:	682b      	ldr	r3, [r5, #0]
 801dcae:	6820      	ldr	r0, [r4, #0]
 801dcb0:	1d19      	adds	r1, r3, #4
 801dcb2:	6029      	str	r1, [r5, #0]
 801dcb4:	0605      	lsls	r5, r0, #24
 801dcb6:	d501      	bpl.n	801dcbc <_printf_i+0xe8>
 801dcb8:	681e      	ldr	r6, [r3, #0]
 801dcba:	e002      	b.n	801dcc2 <_printf_i+0xee>
 801dcbc:	0641      	lsls	r1, r0, #25
 801dcbe:	d5fb      	bpl.n	801dcb8 <_printf_i+0xe4>
 801dcc0:	881e      	ldrh	r6, [r3, #0]
 801dcc2:	4853      	ldr	r0, [pc, #332]	; (801de10 <_printf_i+0x23c>)
 801dcc4:	2f6f      	cmp	r7, #111	; 0x6f
 801dcc6:	bf0c      	ite	eq
 801dcc8:	2308      	moveq	r3, #8
 801dcca:	230a      	movne	r3, #10
 801dccc:	2100      	movs	r1, #0
 801dcce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801dcd2:	6865      	ldr	r5, [r4, #4]
 801dcd4:	60a5      	str	r5, [r4, #8]
 801dcd6:	2d00      	cmp	r5, #0
 801dcd8:	bfa2      	ittt	ge
 801dcda:	6821      	ldrge	r1, [r4, #0]
 801dcdc:	f021 0104 	bicge.w	r1, r1, #4
 801dce0:	6021      	strge	r1, [r4, #0]
 801dce2:	b90e      	cbnz	r6, 801dce8 <_printf_i+0x114>
 801dce4:	2d00      	cmp	r5, #0
 801dce6:	d04b      	beq.n	801dd80 <_printf_i+0x1ac>
 801dce8:	4615      	mov	r5, r2
 801dcea:	fbb6 f1f3 	udiv	r1, r6, r3
 801dcee:	fb03 6711 	mls	r7, r3, r1, r6
 801dcf2:	5dc7      	ldrb	r7, [r0, r7]
 801dcf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801dcf8:	4637      	mov	r7, r6
 801dcfa:	42bb      	cmp	r3, r7
 801dcfc:	460e      	mov	r6, r1
 801dcfe:	d9f4      	bls.n	801dcea <_printf_i+0x116>
 801dd00:	2b08      	cmp	r3, #8
 801dd02:	d10b      	bne.n	801dd1c <_printf_i+0x148>
 801dd04:	6823      	ldr	r3, [r4, #0]
 801dd06:	07de      	lsls	r6, r3, #31
 801dd08:	d508      	bpl.n	801dd1c <_printf_i+0x148>
 801dd0a:	6923      	ldr	r3, [r4, #16]
 801dd0c:	6861      	ldr	r1, [r4, #4]
 801dd0e:	4299      	cmp	r1, r3
 801dd10:	bfde      	ittt	le
 801dd12:	2330      	movle	r3, #48	; 0x30
 801dd14:	f805 3c01 	strble.w	r3, [r5, #-1]
 801dd18:	f105 35ff 	addle.w	r5, r5, #4294967295
 801dd1c:	1b52      	subs	r2, r2, r5
 801dd1e:	6122      	str	r2, [r4, #16]
 801dd20:	f8cd a000 	str.w	sl, [sp]
 801dd24:	464b      	mov	r3, r9
 801dd26:	aa03      	add	r2, sp, #12
 801dd28:	4621      	mov	r1, r4
 801dd2a:	4640      	mov	r0, r8
 801dd2c:	f7ff fee4 	bl	801daf8 <_printf_common>
 801dd30:	3001      	adds	r0, #1
 801dd32:	d14a      	bne.n	801ddca <_printf_i+0x1f6>
 801dd34:	f04f 30ff 	mov.w	r0, #4294967295
 801dd38:	b004      	add	sp, #16
 801dd3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd3e:	6823      	ldr	r3, [r4, #0]
 801dd40:	f043 0320 	orr.w	r3, r3, #32
 801dd44:	6023      	str	r3, [r4, #0]
 801dd46:	4833      	ldr	r0, [pc, #204]	; (801de14 <_printf_i+0x240>)
 801dd48:	2778      	movs	r7, #120	; 0x78
 801dd4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801dd4e:	6823      	ldr	r3, [r4, #0]
 801dd50:	6829      	ldr	r1, [r5, #0]
 801dd52:	061f      	lsls	r7, r3, #24
 801dd54:	f851 6b04 	ldr.w	r6, [r1], #4
 801dd58:	d402      	bmi.n	801dd60 <_printf_i+0x18c>
 801dd5a:	065f      	lsls	r7, r3, #25
 801dd5c:	bf48      	it	mi
 801dd5e:	b2b6      	uxthmi	r6, r6
 801dd60:	07df      	lsls	r7, r3, #31
 801dd62:	bf48      	it	mi
 801dd64:	f043 0320 	orrmi.w	r3, r3, #32
 801dd68:	6029      	str	r1, [r5, #0]
 801dd6a:	bf48      	it	mi
 801dd6c:	6023      	strmi	r3, [r4, #0]
 801dd6e:	b91e      	cbnz	r6, 801dd78 <_printf_i+0x1a4>
 801dd70:	6823      	ldr	r3, [r4, #0]
 801dd72:	f023 0320 	bic.w	r3, r3, #32
 801dd76:	6023      	str	r3, [r4, #0]
 801dd78:	2310      	movs	r3, #16
 801dd7a:	e7a7      	b.n	801dccc <_printf_i+0xf8>
 801dd7c:	4824      	ldr	r0, [pc, #144]	; (801de10 <_printf_i+0x23c>)
 801dd7e:	e7e4      	b.n	801dd4a <_printf_i+0x176>
 801dd80:	4615      	mov	r5, r2
 801dd82:	e7bd      	b.n	801dd00 <_printf_i+0x12c>
 801dd84:	682b      	ldr	r3, [r5, #0]
 801dd86:	6826      	ldr	r6, [r4, #0]
 801dd88:	6961      	ldr	r1, [r4, #20]
 801dd8a:	1d18      	adds	r0, r3, #4
 801dd8c:	6028      	str	r0, [r5, #0]
 801dd8e:	0635      	lsls	r5, r6, #24
 801dd90:	681b      	ldr	r3, [r3, #0]
 801dd92:	d501      	bpl.n	801dd98 <_printf_i+0x1c4>
 801dd94:	6019      	str	r1, [r3, #0]
 801dd96:	e002      	b.n	801dd9e <_printf_i+0x1ca>
 801dd98:	0670      	lsls	r0, r6, #25
 801dd9a:	d5fb      	bpl.n	801dd94 <_printf_i+0x1c0>
 801dd9c:	8019      	strh	r1, [r3, #0]
 801dd9e:	2300      	movs	r3, #0
 801dda0:	6123      	str	r3, [r4, #16]
 801dda2:	4615      	mov	r5, r2
 801dda4:	e7bc      	b.n	801dd20 <_printf_i+0x14c>
 801dda6:	682b      	ldr	r3, [r5, #0]
 801dda8:	1d1a      	adds	r2, r3, #4
 801ddaa:	602a      	str	r2, [r5, #0]
 801ddac:	681d      	ldr	r5, [r3, #0]
 801ddae:	6862      	ldr	r2, [r4, #4]
 801ddb0:	2100      	movs	r1, #0
 801ddb2:	4628      	mov	r0, r5
 801ddb4:	f7e2 fa0c 	bl	80001d0 <memchr>
 801ddb8:	b108      	cbz	r0, 801ddbe <_printf_i+0x1ea>
 801ddba:	1b40      	subs	r0, r0, r5
 801ddbc:	6060      	str	r0, [r4, #4]
 801ddbe:	6863      	ldr	r3, [r4, #4]
 801ddc0:	6123      	str	r3, [r4, #16]
 801ddc2:	2300      	movs	r3, #0
 801ddc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ddc8:	e7aa      	b.n	801dd20 <_printf_i+0x14c>
 801ddca:	6923      	ldr	r3, [r4, #16]
 801ddcc:	462a      	mov	r2, r5
 801ddce:	4649      	mov	r1, r9
 801ddd0:	4640      	mov	r0, r8
 801ddd2:	47d0      	blx	sl
 801ddd4:	3001      	adds	r0, #1
 801ddd6:	d0ad      	beq.n	801dd34 <_printf_i+0x160>
 801ddd8:	6823      	ldr	r3, [r4, #0]
 801ddda:	079b      	lsls	r3, r3, #30
 801dddc:	d413      	bmi.n	801de06 <_printf_i+0x232>
 801ddde:	68e0      	ldr	r0, [r4, #12]
 801dde0:	9b03      	ldr	r3, [sp, #12]
 801dde2:	4298      	cmp	r0, r3
 801dde4:	bfb8      	it	lt
 801dde6:	4618      	movlt	r0, r3
 801dde8:	e7a6      	b.n	801dd38 <_printf_i+0x164>
 801ddea:	2301      	movs	r3, #1
 801ddec:	4632      	mov	r2, r6
 801ddee:	4649      	mov	r1, r9
 801ddf0:	4640      	mov	r0, r8
 801ddf2:	47d0      	blx	sl
 801ddf4:	3001      	adds	r0, #1
 801ddf6:	d09d      	beq.n	801dd34 <_printf_i+0x160>
 801ddf8:	3501      	adds	r5, #1
 801ddfa:	68e3      	ldr	r3, [r4, #12]
 801ddfc:	9903      	ldr	r1, [sp, #12]
 801ddfe:	1a5b      	subs	r3, r3, r1
 801de00:	42ab      	cmp	r3, r5
 801de02:	dcf2      	bgt.n	801ddea <_printf_i+0x216>
 801de04:	e7eb      	b.n	801ddde <_printf_i+0x20a>
 801de06:	2500      	movs	r5, #0
 801de08:	f104 0619 	add.w	r6, r4, #25
 801de0c:	e7f5      	b.n	801ddfa <_printf_i+0x226>
 801de0e:	bf00      	nop
 801de10:	08022861 	.word	0x08022861
 801de14:	08022872 	.word	0x08022872

0801de18 <_scanf_float>:
 801de18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de1c:	b087      	sub	sp, #28
 801de1e:	4617      	mov	r7, r2
 801de20:	9303      	str	r3, [sp, #12]
 801de22:	688b      	ldr	r3, [r1, #8]
 801de24:	1e5a      	subs	r2, r3, #1
 801de26:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801de2a:	bf83      	ittte	hi
 801de2c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801de30:	195b      	addhi	r3, r3, r5
 801de32:	9302      	strhi	r3, [sp, #8]
 801de34:	2300      	movls	r3, #0
 801de36:	bf86      	itte	hi
 801de38:	f240 135d 	movwhi	r3, #349	; 0x15d
 801de3c:	608b      	strhi	r3, [r1, #8]
 801de3e:	9302      	strls	r3, [sp, #8]
 801de40:	680b      	ldr	r3, [r1, #0]
 801de42:	468b      	mov	fp, r1
 801de44:	2500      	movs	r5, #0
 801de46:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801de4a:	f84b 3b1c 	str.w	r3, [fp], #28
 801de4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801de52:	4680      	mov	r8, r0
 801de54:	460c      	mov	r4, r1
 801de56:	465e      	mov	r6, fp
 801de58:	46aa      	mov	sl, r5
 801de5a:	46a9      	mov	r9, r5
 801de5c:	9501      	str	r5, [sp, #4]
 801de5e:	68a2      	ldr	r2, [r4, #8]
 801de60:	b152      	cbz	r2, 801de78 <_scanf_float+0x60>
 801de62:	683b      	ldr	r3, [r7, #0]
 801de64:	781b      	ldrb	r3, [r3, #0]
 801de66:	2b4e      	cmp	r3, #78	; 0x4e
 801de68:	d864      	bhi.n	801df34 <_scanf_float+0x11c>
 801de6a:	2b40      	cmp	r3, #64	; 0x40
 801de6c:	d83c      	bhi.n	801dee8 <_scanf_float+0xd0>
 801de6e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801de72:	b2c8      	uxtb	r0, r1
 801de74:	280e      	cmp	r0, #14
 801de76:	d93a      	bls.n	801deee <_scanf_float+0xd6>
 801de78:	f1b9 0f00 	cmp.w	r9, #0
 801de7c:	d003      	beq.n	801de86 <_scanf_float+0x6e>
 801de7e:	6823      	ldr	r3, [r4, #0]
 801de80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801de84:	6023      	str	r3, [r4, #0]
 801de86:	f10a 3aff 	add.w	sl, sl, #4294967295
 801de8a:	f1ba 0f01 	cmp.w	sl, #1
 801de8e:	f200 8113 	bhi.w	801e0b8 <_scanf_float+0x2a0>
 801de92:	455e      	cmp	r6, fp
 801de94:	f200 8105 	bhi.w	801e0a2 <_scanf_float+0x28a>
 801de98:	2501      	movs	r5, #1
 801de9a:	4628      	mov	r0, r5
 801de9c:	b007      	add	sp, #28
 801de9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dea2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801dea6:	2a0d      	cmp	r2, #13
 801dea8:	d8e6      	bhi.n	801de78 <_scanf_float+0x60>
 801deaa:	a101      	add	r1, pc, #4	; (adr r1, 801deb0 <_scanf_float+0x98>)
 801deac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801deb0:	0801dfef 	.word	0x0801dfef
 801deb4:	0801de79 	.word	0x0801de79
 801deb8:	0801de79 	.word	0x0801de79
 801debc:	0801de79 	.word	0x0801de79
 801dec0:	0801e04f 	.word	0x0801e04f
 801dec4:	0801e027 	.word	0x0801e027
 801dec8:	0801de79 	.word	0x0801de79
 801decc:	0801de79 	.word	0x0801de79
 801ded0:	0801dffd 	.word	0x0801dffd
 801ded4:	0801de79 	.word	0x0801de79
 801ded8:	0801de79 	.word	0x0801de79
 801dedc:	0801de79 	.word	0x0801de79
 801dee0:	0801de79 	.word	0x0801de79
 801dee4:	0801dfb5 	.word	0x0801dfb5
 801dee8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801deec:	e7db      	b.n	801dea6 <_scanf_float+0x8e>
 801deee:	290e      	cmp	r1, #14
 801def0:	d8c2      	bhi.n	801de78 <_scanf_float+0x60>
 801def2:	a001      	add	r0, pc, #4	; (adr r0, 801def8 <_scanf_float+0xe0>)
 801def4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801def8:	0801dfa7 	.word	0x0801dfa7
 801defc:	0801de79 	.word	0x0801de79
 801df00:	0801dfa7 	.word	0x0801dfa7
 801df04:	0801e03b 	.word	0x0801e03b
 801df08:	0801de79 	.word	0x0801de79
 801df0c:	0801df55 	.word	0x0801df55
 801df10:	0801df91 	.word	0x0801df91
 801df14:	0801df91 	.word	0x0801df91
 801df18:	0801df91 	.word	0x0801df91
 801df1c:	0801df91 	.word	0x0801df91
 801df20:	0801df91 	.word	0x0801df91
 801df24:	0801df91 	.word	0x0801df91
 801df28:	0801df91 	.word	0x0801df91
 801df2c:	0801df91 	.word	0x0801df91
 801df30:	0801df91 	.word	0x0801df91
 801df34:	2b6e      	cmp	r3, #110	; 0x6e
 801df36:	d809      	bhi.n	801df4c <_scanf_float+0x134>
 801df38:	2b60      	cmp	r3, #96	; 0x60
 801df3a:	d8b2      	bhi.n	801dea2 <_scanf_float+0x8a>
 801df3c:	2b54      	cmp	r3, #84	; 0x54
 801df3e:	d077      	beq.n	801e030 <_scanf_float+0x218>
 801df40:	2b59      	cmp	r3, #89	; 0x59
 801df42:	d199      	bne.n	801de78 <_scanf_float+0x60>
 801df44:	2d07      	cmp	r5, #7
 801df46:	d197      	bne.n	801de78 <_scanf_float+0x60>
 801df48:	2508      	movs	r5, #8
 801df4a:	e029      	b.n	801dfa0 <_scanf_float+0x188>
 801df4c:	2b74      	cmp	r3, #116	; 0x74
 801df4e:	d06f      	beq.n	801e030 <_scanf_float+0x218>
 801df50:	2b79      	cmp	r3, #121	; 0x79
 801df52:	e7f6      	b.n	801df42 <_scanf_float+0x12a>
 801df54:	6821      	ldr	r1, [r4, #0]
 801df56:	05c8      	lsls	r0, r1, #23
 801df58:	d51a      	bpl.n	801df90 <_scanf_float+0x178>
 801df5a:	9b02      	ldr	r3, [sp, #8]
 801df5c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801df60:	6021      	str	r1, [r4, #0]
 801df62:	f109 0901 	add.w	r9, r9, #1
 801df66:	b11b      	cbz	r3, 801df70 <_scanf_float+0x158>
 801df68:	3b01      	subs	r3, #1
 801df6a:	3201      	adds	r2, #1
 801df6c:	9302      	str	r3, [sp, #8]
 801df6e:	60a2      	str	r2, [r4, #8]
 801df70:	68a3      	ldr	r3, [r4, #8]
 801df72:	3b01      	subs	r3, #1
 801df74:	60a3      	str	r3, [r4, #8]
 801df76:	6923      	ldr	r3, [r4, #16]
 801df78:	3301      	adds	r3, #1
 801df7a:	6123      	str	r3, [r4, #16]
 801df7c:	687b      	ldr	r3, [r7, #4]
 801df7e:	3b01      	subs	r3, #1
 801df80:	2b00      	cmp	r3, #0
 801df82:	607b      	str	r3, [r7, #4]
 801df84:	f340 8084 	ble.w	801e090 <_scanf_float+0x278>
 801df88:	683b      	ldr	r3, [r7, #0]
 801df8a:	3301      	adds	r3, #1
 801df8c:	603b      	str	r3, [r7, #0]
 801df8e:	e766      	b.n	801de5e <_scanf_float+0x46>
 801df90:	eb1a 0f05 	cmn.w	sl, r5
 801df94:	f47f af70 	bne.w	801de78 <_scanf_float+0x60>
 801df98:	6822      	ldr	r2, [r4, #0]
 801df9a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801df9e:	6022      	str	r2, [r4, #0]
 801dfa0:	f806 3b01 	strb.w	r3, [r6], #1
 801dfa4:	e7e4      	b.n	801df70 <_scanf_float+0x158>
 801dfa6:	6822      	ldr	r2, [r4, #0]
 801dfa8:	0610      	lsls	r0, r2, #24
 801dfaa:	f57f af65 	bpl.w	801de78 <_scanf_float+0x60>
 801dfae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801dfb2:	e7f4      	b.n	801df9e <_scanf_float+0x186>
 801dfb4:	f1ba 0f00 	cmp.w	sl, #0
 801dfb8:	d10e      	bne.n	801dfd8 <_scanf_float+0x1c0>
 801dfba:	f1b9 0f00 	cmp.w	r9, #0
 801dfbe:	d10e      	bne.n	801dfde <_scanf_float+0x1c6>
 801dfc0:	6822      	ldr	r2, [r4, #0]
 801dfc2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801dfc6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801dfca:	d108      	bne.n	801dfde <_scanf_float+0x1c6>
 801dfcc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801dfd0:	6022      	str	r2, [r4, #0]
 801dfd2:	f04f 0a01 	mov.w	sl, #1
 801dfd6:	e7e3      	b.n	801dfa0 <_scanf_float+0x188>
 801dfd8:	f1ba 0f02 	cmp.w	sl, #2
 801dfdc:	d055      	beq.n	801e08a <_scanf_float+0x272>
 801dfde:	2d01      	cmp	r5, #1
 801dfe0:	d002      	beq.n	801dfe8 <_scanf_float+0x1d0>
 801dfe2:	2d04      	cmp	r5, #4
 801dfe4:	f47f af48 	bne.w	801de78 <_scanf_float+0x60>
 801dfe8:	3501      	adds	r5, #1
 801dfea:	b2ed      	uxtb	r5, r5
 801dfec:	e7d8      	b.n	801dfa0 <_scanf_float+0x188>
 801dfee:	f1ba 0f01 	cmp.w	sl, #1
 801dff2:	f47f af41 	bne.w	801de78 <_scanf_float+0x60>
 801dff6:	f04f 0a02 	mov.w	sl, #2
 801dffa:	e7d1      	b.n	801dfa0 <_scanf_float+0x188>
 801dffc:	b97d      	cbnz	r5, 801e01e <_scanf_float+0x206>
 801dffe:	f1b9 0f00 	cmp.w	r9, #0
 801e002:	f47f af3c 	bne.w	801de7e <_scanf_float+0x66>
 801e006:	6822      	ldr	r2, [r4, #0]
 801e008:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801e00c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801e010:	f47f af39 	bne.w	801de86 <_scanf_float+0x6e>
 801e014:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801e018:	6022      	str	r2, [r4, #0]
 801e01a:	2501      	movs	r5, #1
 801e01c:	e7c0      	b.n	801dfa0 <_scanf_float+0x188>
 801e01e:	2d03      	cmp	r5, #3
 801e020:	d0e2      	beq.n	801dfe8 <_scanf_float+0x1d0>
 801e022:	2d05      	cmp	r5, #5
 801e024:	e7de      	b.n	801dfe4 <_scanf_float+0x1cc>
 801e026:	2d02      	cmp	r5, #2
 801e028:	f47f af26 	bne.w	801de78 <_scanf_float+0x60>
 801e02c:	2503      	movs	r5, #3
 801e02e:	e7b7      	b.n	801dfa0 <_scanf_float+0x188>
 801e030:	2d06      	cmp	r5, #6
 801e032:	f47f af21 	bne.w	801de78 <_scanf_float+0x60>
 801e036:	2507      	movs	r5, #7
 801e038:	e7b2      	b.n	801dfa0 <_scanf_float+0x188>
 801e03a:	6822      	ldr	r2, [r4, #0]
 801e03c:	0591      	lsls	r1, r2, #22
 801e03e:	f57f af1b 	bpl.w	801de78 <_scanf_float+0x60>
 801e042:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801e046:	6022      	str	r2, [r4, #0]
 801e048:	f8cd 9004 	str.w	r9, [sp, #4]
 801e04c:	e7a8      	b.n	801dfa0 <_scanf_float+0x188>
 801e04e:	6822      	ldr	r2, [r4, #0]
 801e050:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801e054:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801e058:	d006      	beq.n	801e068 <_scanf_float+0x250>
 801e05a:	0550      	lsls	r0, r2, #21
 801e05c:	f57f af0c 	bpl.w	801de78 <_scanf_float+0x60>
 801e060:	f1b9 0f00 	cmp.w	r9, #0
 801e064:	f43f af0f 	beq.w	801de86 <_scanf_float+0x6e>
 801e068:	0591      	lsls	r1, r2, #22
 801e06a:	bf58      	it	pl
 801e06c:	9901      	ldrpl	r1, [sp, #4]
 801e06e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801e072:	bf58      	it	pl
 801e074:	eba9 0101 	subpl.w	r1, r9, r1
 801e078:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801e07c:	bf58      	it	pl
 801e07e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801e082:	6022      	str	r2, [r4, #0]
 801e084:	f04f 0900 	mov.w	r9, #0
 801e088:	e78a      	b.n	801dfa0 <_scanf_float+0x188>
 801e08a:	f04f 0a03 	mov.w	sl, #3
 801e08e:	e787      	b.n	801dfa0 <_scanf_float+0x188>
 801e090:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e094:	4639      	mov	r1, r7
 801e096:	4640      	mov	r0, r8
 801e098:	4798      	blx	r3
 801e09a:	2800      	cmp	r0, #0
 801e09c:	f43f aedf 	beq.w	801de5e <_scanf_float+0x46>
 801e0a0:	e6ea      	b.n	801de78 <_scanf_float+0x60>
 801e0a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e0a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e0aa:	463a      	mov	r2, r7
 801e0ac:	4640      	mov	r0, r8
 801e0ae:	4798      	blx	r3
 801e0b0:	6923      	ldr	r3, [r4, #16]
 801e0b2:	3b01      	subs	r3, #1
 801e0b4:	6123      	str	r3, [r4, #16]
 801e0b6:	e6ec      	b.n	801de92 <_scanf_float+0x7a>
 801e0b8:	1e6b      	subs	r3, r5, #1
 801e0ba:	2b06      	cmp	r3, #6
 801e0bc:	d825      	bhi.n	801e10a <_scanf_float+0x2f2>
 801e0be:	2d02      	cmp	r5, #2
 801e0c0:	d836      	bhi.n	801e130 <_scanf_float+0x318>
 801e0c2:	455e      	cmp	r6, fp
 801e0c4:	f67f aee8 	bls.w	801de98 <_scanf_float+0x80>
 801e0c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e0cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e0d0:	463a      	mov	r2, r7
 801e0d2:	4640      	mov	r0, r8
 801e0d4:	4798      	blx	r3
 801e0d6:	6923      	ldr	r3, [r4, #16]
 801e0d8:	3b01      	subs	r3, #1
 801e0da:	6123      	str	r3, [r4, #16]
 801e0dc:	e7f1      	b.n	801e0c2 <_scanf_float+0x2aa>
 801e0de:	9802      	ldr	r0, [sp, #8]
 801e0e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e0e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801e0e8:	9002      	str	r0, [sp, #8]
 801e0ea:	463a      	mov	r2, r7
 801e0ec:	4640      	mov	r0, r8
 801e0ee:	4798      	blx	r3
 801e0f0:	6923      	ldr	r3, [r4, #16]
 801e0f2:	3b01      	subs	r3, #1
 801e0f4:	6123      	str	r3, [r4, #16]
 801e0f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e0fa:	fa5f fa8a 	uxtb.w	sl, sl
 801e0fe:	f1ba 0f02 	cmp.w	sl, #2
 801e102:	d1ec      	bne.n	801e0de <_scanf_float+0x2c6>
 801e104:	3d03      	subs	r5, #3
 801e106:	b2ed      	uxtb	r5, r5
 801e108:	1b76      	subs	r6, r6, r5
 801e10a:	6823      	ldr	r3, [r4, #0]
 801e10c:	05da      	lsls	r2, r3, #23
 801e10e:	d52f      	bpl.n	801e170 <_scanf_float+0x358>
 801e110:	055b      	lsls	r3, r3, #21
 801e112:	d510      	bpl.n	801e136 <_scanf_float+0x31e>
 801e114:	455e      	cmp	r6, fp
 801e116:	f67f aebf 	bls.w	801de98 <_scanf_float+0x80>
 801e11a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e11e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e122:	463a      	mov	r2, r7
 801e124:	4640      	mov	r0, r8
 801e126:	4798      	blx	r3
 801e128:	6923      	ldr	r3, [r4, #16]
 801e12a:	3b01      	subs	r3, #1
 801e12c:	6123      	str	r3, [r4, #16]
 801e12e:	e7f1      	b.n	801e114 <_scanf_float+0x2fc>
 801e130:	46aa      	mov	sl, r5
 801e132:	9602      	str	r6, [sp, #8]
 801e134:	e7df      	b.n	801e0f6 <_scanf_float+0x2de>
 801e136:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801e13a:	6923      	ldr	r3, [r4, #16]
 801e13c:	2965      	cmp	r1, #101	; 0x65
 801e13e:	f103 33ff 	add.w	r3, r3, #4294967295
 801e142:	f106 35ff 	add.w	r5, r6, #4294967295
 801e146:	6123      	str	r3, [r4, #16]
 801e148:	d00c      	beq.n	801e164 <_scanf_float+0x34c>
 801e14a:	2945      	cmp	r1, #69	; 0x45
 801e14c:	d00a      	beq.n	801e164 <_scanf_float+0x34c>
 801e14e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e152:	463a      	mov	r2, r7
 801e154:	4640      	mov	r0, r8
 801e156:	4798      	blx	r3
 801e158:	6923      	ldr	r3, [r4, #16]
 801e15a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801e15e:	3b01      	subs	r3, #1
 801e160:	1eb5      	subs	r5, r6, #2
 801e162:	6123      	str	r3, [r4, #16]
 801e164:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e168:	463a      	mov	r2, r7
 801e16a:	4640      	mov	r0, r8
 801e16c:	4798      	blx	r3
 801e16e:	462e      	mov	r6, r5
 801e170:	6825      	ldr	r5, [r4, #0]
 801e172:	f015 0510 	ands.w	r5, r5, #16
 801e176:	d158      	bne.n	801e22a <_scanf_float+0x412>
 801e178:	7035      	strb	r5, [r6, #0]
 801e17a:	6823      	ldr	r3, [r4, #0]
 801e17c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801e180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e184:	d11c      	bne.n	801e1c0 <_scanf_float+0x3a8>
 801e186:	9b01      	ldr	r3, [sp, #4]
 801e188:	454b      	cmp	r3, r9
 801e18a:	eba3 0209 	sub.w	r2, r3, r9
 801e18e:	d124      	bne.n	801e1da <_scanf_float+0x3c2>
 801e190:	2200      	movs	r2, #0
 801e192:	4659      	mov	r1, fp
 801e194:	4640      	mov	r0, r8
 801e196:	f7ff f9d3 	bl	801d540 <_strtod_r>
 801e19a:	9b03      	ldr	r3, [sp, #12]
 801e19c:	6821      	ldr	r1, [r4, #0]
 801e19e:	681b      	ldr	r3, [r3, #0]
 801e1a0:	f011 0f02 	tst.w	r1, #2
 801e1a4:	ec57 6b10 	vmov	r6, r7, d0
 801e1a8:	f103 0204 	add.w	r2, r3, #4
 801e1ac:	d020      	beq.n	801e1f0 <_scanf_float+0x3d8>
 801e1ae:	9903      	ldr	r1, [sp, #12]
 801e1b0:	600a      	str	r2, [r1, #0]
 801e1b2:	681b      	ldr	r3, [r3, #0]
 801e1b4:	e9c3 6700 	strd	r6, r7, [r3]
 801e1b8:	68e3      	ldr	r3, [r4, #12]
 801e1ba:	3301      	adds	r3, #1
 801e1bc:	60e3      	str	r3, [r4, #12]
 801e1be:	e66c      	b.n	801de9a <_scanf_float+0x82>
 801e1c0:	9b04      	ldr	r3, [sp, #16]
 801e1c2:	2b00      	cmp	r3, #0
 801e1c4:	d0e4      	beq.n	801e190 <_scanf_float+0x378>
 801e1c6:	9905      	ldr	r1, [sp, #20]
 801e1c8:	230a      	movs	r3, #10
 801e1ca:	462a      	mov	r2, r5
 801e1cc:	3101      	adds	r1, #1
 801e1ce:	4640      	mov	r0, r8
 801e1d0:	f002 fa26 	bl	8020620 <_strtol_r>
 801e1d4:	9b04      	ldr	r3, [sp, #16]
 801e1d6:	9e05      	ldr	r6, [sp, #20]
 801e1d8:	1ac2      	subs	r2, r0, r3
 801e1da:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801e1de:	429e      	cmp	r6, r3
 801e1e0:	bf28      	it	cs
 801e1e2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801e1e6:	4912      	ldr	r1, [pc, #72]	; (801e230 <_scanf_float+0x418>)
 801e1e8:	4630      	mov	r0, r6
 801e1ea:	f000 f909 	bl	801e400 <siprintf>
 801e1ee:	e7cf      	b.n	801e190 <_scanf_float+0x378>
 801e1f0:	f011 0f04 	tst.w	r1, #4
 801e1f4:	9903      	ldr	r1, [sp, #12]
 801e1f6:	600a      	str	r2, [r1, #0]
 801e1f8:	d1db      	bne.n	801e1b2 <_scanf_float+0x39a>
 801e1fa:	f8d3 8000 	ldr.w	r8, [r3]
 801e1fe:	ee10 2a10 	vmov	r2, s0
 801e202:	ee10 0a10 	vmov	r0, s0
 801e206:	463b      	mov	r3, r7
 801e208:	4639      	mov	r1, r7
 801e20a:	f7e2 fc8f 	bl	8000b2c <__aeabi_dcmpun>
 801e20e:	b128      	cbz	r0, 801e21c <_scanf_float+0x404>
 801e210:	4808      	ldr	r0, [pc, #32]	; (801e234 <_scanf_float+0x41c>)
 801e212:	f000 fa95 	bl	801e740 <nanf>
 801e216:	ed88 0a00 	vstr	s0, [r8]
 801e21a:	e7cd      	b.n	801e1b8 <_scanf_float+0x3a0>
 801e21c:	4630      	mov	r0, r6
 801e21e:	4639      	mov	r1, r7
 801e220:	f7e2 fce2 	bl	8000be8 <__aeabi_d2f>
 801e224:	f8c8 0000 	str.w	r0, [r8]
 801e228:	e7c6      	b.n	801e1b8 <_scanf_float+0x3a0>
 801e22a:	2500      	movs	r5, #0
 801e22c:	e635      	b.n	801de9a <_scanf_float+0x82>
 801e22e:	bf00      	nop
 801e230:	08022883 	.word	0x08022883
 801e234:	08022b3b 	.word	0x08022b3b

0801e238 <std>:
 801e238:	2300      	movs	r3, #0
 801e23a:	b510      	push	{r4, lr}
 801e23c:	4604      	mov	r4, r0
 801e23e:	e9c0 3300 	strd	r3, r3, [r0]
 801e242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e246:	6083      	str	r3, [r0, #8]
 801e248:	8181      	strh	r1, [r0, #12]
 801e24a:	6643      	str	r3, [r0, #100]	; 0x64
 801e24c:	81c2      	strh	r2, [r0, #14]
 801e24e:	6183      	str	r3, [r0, #24]
 801e250:	4619      	mov	r1, r3
 801e252:	2208      	movs	r2, #8
 801e254:	305c      	adds	r0, #92	; 0x5c
 801e256:	f000 f964 	bl	801e522 <memset>
 801e25a:	4b05      	ldr	r3, [pc, #20]	; (801e270 <std+0x38>)
 801e25c:	6263      	str	r3, [r4, #36]	; 0x24
 801e25e:	4b05      	ldr	r3, [pc, #20]	; (801e274 <std+0x3c>)
 801e260:	62a3      	str	r3, [r4, #40]	; 0x28
 801e262:	4b05      	ldr	r3, [pc, #20]	; (801e278 <std+0x40>)
 801e264:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e266:	4b05      	ldr	r3, [pc, #20]	; (801e27c <std+0x44>)
 801e268:	6224      	str	r4, [r4, #32]
 801e26a:	6323      	str	r3, [r4, #48]	; 0x30
 801e26c:	bd10      	pop	{r4, pc}
 801e26e:	bf00      	nop
 801e270:	0801e499 	.word	0x0801e499
 801e274:	0801e4bf 	.word	0x0801e4bf
 801e278:	0801e4f7 	.word	0x0801e4f7
 801e27c:	0801e51b 	.word	0x0801e51b

0801e280 <stdio_exit_handler>:
 801e280:	4a02      	ldr	r2, [pc, #8]	; (801e28c <stdio_exit_handler+0xc>)
 801e282:	4903      	ldr	r1, [pc, #12]	; (801e290 <stdio_exit_handler+0x10>)
 801e284:	4803      	ldr	r0, [pc, #12]	; (801e294 <stdio_exit_handler+0x14>)
 801e286:	f000 b869 	b.w	801e35c <_fwalk_sglue>
 801e28a:	bf00      	nop
 801e28c:	2000012c 	.word	0x2000012c
 801e290:	0802103d 	.word	0x0802103d
 801e294:	200002a4 	.word	0x200002a4

0801e298 <cleanup_stdio>:
 801e298:	6841      	ldr	r1, [r0, #4]
 801e29a:	4b0c      	ldr	r3, [pc, #48]	; (801e2cc <cleanup_stdio+0x34>)
 801e29c:	4299      	cmp	r1, r3
 801e29e:	b510      	push	{r4, lr}
 801e2a0:	4604      	mov	r4, r0
 801e2a2:	d001      	beq.n	801e2a8 <cleanup_stdio+0x10>
 801e2a4:	f002 feca 	bl	802103c <_fflush_r>
 801e2a8:	68a1      	ldr	r1, [r4, #8]
 801e2aa:	4b09      	ldr	r3, [pc, #36]	; (801e2d0 <cleanup_stdio+0x38>)
 801e2ac:	4299      	cmp	r1, r3
 801e2ae:	d002      	beq.n	801e2b6 <cleanup_stdio+0x1e>
 801e2b0:	4620      	mov	r0, r4
 801e2b2:	f002 fec3 	bl	802103c <_fflush_r>
 801e2b6:	68e1      	ldr	r1, [r4, #12]
 801e2b8:	4b06      	ldr	r3, [pc, #24]	; (801e2d4 <cleanup_stdio+0x3c>)
 801e2ba:	4299      	cmp	r1, r3
 801e2bc:	d004      	beq.n	801e2c8 <cleanup_stdio+0x30>
 801e2be:	4620      	mov	r0, r4
 801e2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e2c4:	f002 beba 	b.w	802103c <_fflush_r>
 801e2c8:	bd10      	pop	{r4, pc}
 801e2ca:	bf00      	nop
 801e2cc:	2000a088 	.word	0x2000a088
 801e2d0:	2000a0f0 	.word	0x2000a0f0
 801e2d4:	2000a158 	.word	0x2000a158

0801e2d8 <global_stdio_init.part.0>:
 801e2d8:	b510      	push	{r4, lr}
 801e2da:	4b0b      	ldr	r3, [pc, #44]	; (801e308 <global_stdio_init.part.0+0x30>)
 801e2dc:	4c0b      	ldr	r4, [pc, #44]	; (801e30c <global_stdio_init.part.0+0x34>)
 801e2de:	4a0c      	ldr	r2, [pc, #48]	; (801e310 <global_stdio_init.part.0+0x38>)
 801e2e0:	601a      	str	r2, [r3, #0]
 801e2e2:	4620      	mov	r0, r4
 801e2e4:	2200      	movs	r2, #0
 801e2e6:	2104      	movs	r1, #4
 801e2e8:	f7ff ffa6 	bl	801e238 <std>
 801e2ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801e2f0:	2201      	movs	r2, #1
 801e2f2:	2109      	movs	r1, #9
 801e2f4:	f7ff ffa0 	bl	801e238 <std>
 801e2f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801e2fc:	2202      	movs	r2, #2
 801e2fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e302:	2112      	movs	r1, #18
 801e304:	f7ff bf98 	b.w	801e238 <std>
 801e308:	2000a1c0 	.word	0x2000a1c0
 801e30c:	2000a088 	.word	0x2000a088
 801e310:	0801e281 	.word	0x0801e281

0801e314 <__sfp_lock_acquire>:
 801e314:	4801      	ldr	r0, [pc, #4]	; (801e31c <__sfp_lock_acquire+0x8>)
 801e316:	f000 b9f9 	b.w	801e70c <__retarget_lock_acquire_recursive>
 801e31a:	bf00      	nop
 801e31c:	2000a1c9 	.word	0x2000a1c9

0801e320 <__sfp_lock_release>:
 801e320:	4801      	ldr	r0, [pc, #4]	; (801e328 <__sfp_lock_release+0x8>)
 801e322:	f000 b9f4 	b.w	801e70e <__retarget_lock_release_recursive>
 801e326:	bf00      	nop
 801e328:	2000a1c9 	.word	0x2000a1c9

0801e32c <__sinit>:
 801e32c:	b510      	push	{r4, lr}
 801e32e:	4604      	mov	r4, r0
 801e330:	f7ff fff0 	bl	801e314 <__sfp_lock_acquire>
 801e334:	6a23      	ldr	r3, [r4, #32]
 801e336:	b11b      	cbz	r3, 801e340 <__sinit+0x14>
 801e338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e33c:	f7ff bff0 	b.w	801e320 <__sfp_lock_release>
 801e340:	4b04      	ldr	r3, [pc, #16]	; (801e354 <__sinit+0x28>)
 801e342:	6223      	str	r3, [r4, #32]
 801e344:	4b04      	ldr	r3, [pc, #16]	; (801e358 <__sinit+0x2c>)
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	2b00      	cmp	r3, #0
 801e34a:	d1f5      	bne.n	801e338 <__sinit+0xc>
 801e34c:	f7ff ffc4 	bl	801e2d8 <global_stdio_init.part.0>
 801e350:	e7f2      	b.n	801e338 <__sinit+0xc>
 801e352:	bf00      	nop
 801e354:	0801e299 	.word	0x0801e299
 801e358:	2000a1c0 	.word	0x2000a1c0

0801e35c <_fwalk_sglue>:
 801e35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e360:	4607      	mov	r7, r0
 801e362:	4688      	mov	r8, r1
 801e364:	4614      	mov	r4, r2
 801e366:	2600      	movs	r6, #0
 801e368:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e36c:	f1b9 0901 	subs.w	r9, r9, #1
 801e370:	d505      	bpl.n	801e37e <_fwalk_sglue+0x22>
 801e372:	6824      	ldr	r4, [r4, #0]
 801e374:	2c00      	cmp	r4, #0
 801e376:	d1f7      	bne.n	801e368 <_fwalk_sglue+0xc>
 801e378:	4630      	mov	r0, r6
 801e37a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e37e:	89ab      	ldrh	r3, [r5, #12]
 801e380:	2b01      	cmp	r3, #1
 801e382:	d907      	bls.n	801e394 <_fwalk_sglue+0x38>
 801e384:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e388:	3301      	adds	r3, #1
 801e38a:	d003      	beq.n	801e394 <_fwalk_sglue+0x38>
 801e38c:	4629      	mov	r1, r5
 801e38e:	4638      	mov	r0, r7
 801e390:	47c0      	blx	r8
 801e392:	4306      	orrs	r6, r0
 801e394:	3568      	adds	r5, #104	; 0x68
 801e396:	e7e9      	b.n	801e36c <_fwalk_sglue+0x10>

0801e398 <sniprintf>:
 801e398:	b40c      	push	{r2, r3}
 801e39a:	b530      	push	{r4, r5, lr}
 801e39c:	4b17      	ldr	r3, [pc, #92]	; (801e3fc <sniprintf+0x64>)
 801e39e:	1e0c      	subs	r4, r1, #0
 801e3a0:	681d      	ldr	r5, [r3, #0]
 801e3a2:	b09d      	sub	sp, #116	; 0x74
 801e3a4:	da08      	bge.n	801e3b8 <sniprintf+0x20>
 801e3a6:	238b      	movs	r3, #139	; 0x8b
 801e3a8:	602b      	str	r3, [r5, #0]
 801e3aa:	f04f 30ff 	mov.w	r0, #4294967295
 801e3ae:	b01d      	add	sp, #116	; 0x74
 801e3b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e3b4:	b002      	add	sp, #8
 801e3b6:	4770      	bx	lr
 801e3b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801e3bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e3c0:	bf14      	ite	ne
 801e3c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 801e3c6:	4623      	moveq	r3, r4
 801e3c8:	9304      	str	r3, [sp, #16]
 801e3ca:	9307      	str	r3, [sp, #28]
 801e3cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e3d0:	9002      	str	r0, [sp, #8]
 801e3d2:	9006      	str	r0, [sp, #24]
 801e3d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e3d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e3da:	ab21      	add	r3, sp, #132	; 0x84
 801e3dc:	a902      	add	r1, sp, #8
 801e3de:	4628      	mov	r0, r5
 801e3e0:	9301      	str	r3, [sp, #4]
 801e3e2:	f002 f987 	bl	80206f4 <_svfiprintf_r>
 801e3e6:	1c43      	adds	r3, r0, #1
 801e3e8:	bfbc      	itt	lt
 801e3ea:	238b      	movlt	r3, #139	; 0x8b
 801e3ec:	602b      	strlt	r3, [r5, #0]
 801e3ee:	2c00      	cmp	r4, #0
 801e3f0:	d0dd      	beq.n	801e3ae <sniprintf+0x16>
 801e3f2:	9b02      	ldr	r3, [sp, #8]
 801e3f4:	2200      	movs	r2, #0
 801e3f6:	701a      	strb	r2, [r3, #0]
 801e3f8:	e7d9      	b.n	801e3ae <sniprintf+0x16>
 801e3fa:	bf00      	nop
 801e3fc:	200002f0 	.word	0x200002f0

0801e400 <siprintf>:
 801e400:	b40e      	push	{r1, r2, r3}
 801e402:	b500      	push	{lr}
 801e404:	b09c      	sub	sp, #112	; 0x70
 801e406:	ab1d      	add	r3, sp, #116	; 0x74
 801e408:	9002      	str	r0, [sp, #8]
 801e40a:	9006      	str	r0, [sp, #24]
 801e40c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e410:	4809      	ldr	r0, [pc, #36]	; (801e438 <siprintf+0x38>)
 801e412:	9107      	str	r1, [sp, #28]
 801e414:	9104      	str	r1, [sp, #16]
 801e416:	4909      	ldr	r1, [pc, #36]	; (801e43c <siprintf+0x3c>)
 801e418:	f853 2b04 	ldr.w	r2, [r3], #4
 801e41c:	9105      	str	r1, [sp, #20]
 801e41e:	6800      	ldr	r0, [r0, #0]
 801e420:	9301      	str	r3, [sp, #4]
 801e422:	a902      	add	r1, sp, #8
 801e424:	f002 f966 	bl	80206f4 <_svfiprintf_r>
 801e428:	9b02      	ldr	r3, [sp, #8]
 801e42a:	2200      	movs	r2, #0
 801e42c:	701a      	strb	r2, [r3, #0]
 801e42e:	b01c      	add	sp, #112	; 0x70
 801e430:	f85d eb04 	ldr.w	lr, [sp], #4
 801e434:	b003      	add	sp, #12
 801e436:	4770      	bx	lr
 801e438:	200002f0 	.word	0x200002f0
 801e43c:	ffff0208 	.word	0xffff0208

0801e440 <siscanf>:
 801e440:	b40e      	push	{r1, r2, r3}
 801e442:	b510      	push	{r4, lr}
 801e444:	b09f      	sub	sp, #124	; 0x7c
 801e446:	ac21      	add	r4, sp, #132	; 0x84
 801e448:	f44f 7101 	mov.w	r1, #516	; 0x204
 801e44c:	f854 2b04 	ldr.w	r2, [r4], #4
 801e450:	9201      	str	r2, [sp, #4]
 801e452:	f8ad 101c 	strh.w	r1, [sp, #28]
 801e456:	9004      	str	r0, [sp, #16]
 801e458:	9008      	str	r0, [sp, #32]
 801e45a:	f7e1 ff09 	bl	8000270 <strlen>
 801e45e:	4b0c      	ldr	r3, [pc, #48]	; (801e490 <siscanf+0x50>)
 801e460:	9005      	str	r0, [sp, #20]
 801e462:	9009      	str	r0, [sp, #36]	; 0x24
 801e464:	930d      	str	r3, [sp, #52]	; 0x34
 801e466:	480b      	ldr	r0, [pc, #44]	; (801e494 <siscanf+0x54>)
 801e468:	9a01      	ldr	r2, [sp, #4]
 801e46a:	6800      	ldr	r0, [r0, #0]
 801e46c:	9403      	str	r4, [sp, #12]
 801e46e:	2300      	movs	r3, #0
 801e470:	9311      	str	r3, [sp, #68]	; 0x44
 801e472:	9316      	str	r3, [sp, #88]	; 0x58
 801e474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e478:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e47c:	a904      	add	r1, sp, #16
 801e47e:	4623      	mov	r3, r4
 801e480:	f002 fa90 	bl	80209a4 <__ssvfiscanf_r>
 801e484:	b01f      	add	sp, #124	; 0x7c
 801e486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e48a:	b003      	add	sp, #12
 801e48c:	4770      	bx	lr
 801e48e:	bf00      	nop
 801e490:	0801e4bb 	.word	0x0801e4bb
 801e494:	200002f0 	.word	0x200002f0

0801e498 <__sread>:
 801e498:	b510      	push	{r4, lr}
 801e49a:	460c      	mov	r4, r1
 801e49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e4a0:	f000 f8d6 	bl	801e650 <_read_r>
 801e4a4:	2800      	cmp	r0, #0
 801e4a6:	bfab      	itete	ge
 801e4a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e4aa:	89a3      	ldrhlt	r3, [r4, #12]
 801e4ac:	181b      	addge	r3, r3, r0
 801e4ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e4b2:	bfac      	ite	ge
 801e4b4:	6563      	strge	r3, [r4, #84]	; 0x54
 801e4b6:	81a3      	strhlt	r3, [r4, #12]
 801e4b8:	bd10      	pop	{r4, pc}

0801e4ba <__seofread>:
 801e4ba:	2000      	movs	r0, #0
 801e4bc:	4770      	bx	lr

0801e4be <__swrite>:
 801e4be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4c2:	461f      	mov	r7, r3
 801e4c4:	898b      	ldrh	r3, [r1, #12]
 801e4c6:	05db      	lsls	r3, r3, #23
 801e4c8:	4605      	mov	r5, r0
 801e4ca:	460c      	mov	r4, r1
 801e4cc:	4616      	mov	r6, r2
 801e4ce:	d505      	bpl.n	801e4dc <__swrite+0x1e>
 801e4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e4d4:	2302      	movs	r3, #2
 801e4d6:	2200      	movs	r2, #0
 801e4d8:	f000 f8a8 	bl	801e62c <_lseek_r>
 801e4dc:	89a3      	ldrh	r3, [r4, #12]
 801e4de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e4e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e4e6:	81a3      	strh	r3, [r4, #12]
 801e4e8:	4632      	mov	r2, r6
 801e4ea:	463b      	mov	r3, r7
 801e4ec:	4628      	mov	r0, r5
 801e4ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e4f2:	f000 b8cf 	b.w	801e694 <_write_r>

0801e4f6 <__sseek>:
 801e4f6:	b510      	push	{r4, lr}
 801e4f8:	460c      	mov	r4, r1
 801e4fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e4fe:	f000 f895 	bl	801e62c <_lseek_r>
 801e502:	1c43      	adds	r3, r0, #1
 801e504:	89a3      	ldrh	r3, [r4, #12]
 801e506:	bf15      	itete	ne
 801e508:	6560      	strne	r0, [r4, #84]	; 0x54
 801e50a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e50e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e512:	81a3      	strheq	r3, [r4, #12]
 801e514:	bf18      	it	ne
 801e516:	81a3      	strhne	r3, [r4, #12]
 801e518:	bd10      	pop	{r4, pc}

0801e51a <__sclose>:
 801e51a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e51e:	f000 b81f 	b.w	801e560 <_close_r>

0801e522 <memset>:
 801e522:	4402      	add	r2, r0
 801e524:	4603      	mov	r3, r0
 801e526:	4293      	cmp	r3, r2
 801e528:	d100      	bne.n	801e52c <memset+0xa>
 801e52a:	4770      	bx	lr
 801e52c:	f803 1b01 	strb.w	r1, [r3], #1
 801e530:	e7f9      	b.n	801e526 <memset+0x4>

0801e532 <strncmp>:
 801e532:	b510      	push	{r4, lr}
 801e534:	b16a      	cbz	r2, 801e552 <strncmp+0x20>
 801e536:	3901      	subs	r1, #1
 801e538:	1884      	adds	r4, r0, r2
 801e53a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e53e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e542:	429a      	cmp	r2, r3
 801e544:	d103      	bne.n	801e54e <strncmp+0x1c>
 801e546:	42a0      	cmp	r0, r4
 801e548:	d001      	beq.n	801e54e <strncmp+0x1c>
 801e54a:	2a00      	cmp	r2, #0
 801e54c:	d1f5      	bne.n	801e53a <strncmp+0x8>
 801e54e:	1ad0      	subs	r0, r2, r3
 801e550:	bd10      	pop	{r4, pc}
 801e552:	4610      	mov	r0, r2
 801e554:	e7fc      	b.n	801e550 <strncmp+0x1e>
	...

0801e558 <_localeconv_r>:
 801e558:	4800      	ldr	r0, [pc, #0]	; (801e55c <_localeconv_r+0x4>)
 801e55a:	4770      	bx	lr
 801e55c:	20000228 	.word	0x20000228

0801e560 <_close_r>:
 801e560:	b538      	push	{r3, r4, r5, lr}
 801e562:	4d06      	ldr	r5, [pc, #24]	; (801e57c <_close_r+0x1c>)
 801e564:	2300      	movs	r3, #0
 801e566:	4604      	mov	r4, r0
 801e568:	4608      	mov	r0, r1
 801e56a:	602b      	str	r3, [r5, #0]
 801e56c:	f7ed f891 	bl	800b692 <_close>
 801e570:	1c43      	adds	r3, r0, #1
 801e572:	d102      	bne.n	801e57a <_close_r+0x1a>
 801e574:	682b      	ldr	r3, [r5, #0]
 801e576:	b103      	cbz	r3, 801e57a <_close_r+0x1a>
 801e578:	6023      	str	r3, [r4, #0]
 801e57a:	bd38      	pop	{r3, r4, r5, pc}
 801e57c:	2000a1c4 	.word	0x2000a1c4

0801e580 <_reclaim_reent>:
 801e580:	4b29      	ldr	r3, [pc, #164]	; (801e628 <_reclaim_reent+0xa8>)
 801e582:	681b      	ldr	r3, [r3, #0]
 801e584:	4283      	cmp	r3, r0
 801e586:	b570      	push	{r4, r5, r6, lr}
 801e588:	4604      	mov	r4, r0
 801e58a:	d04b      	beq.n	801e624 <_reclaim_reent+0xa4>
 801e58c:	69c3      	ldr	r3, [r0, #28]
 801e58e:	b143      	cbz	r3, 801e5a2 <_reclaim_reent+0x22>
 801e590:	68db      	ldr	r3, [r3, #12]
 801e592:	2b00      	cmp	r3, #0
 801e594:	d144      	bne.n	801e620 <_reclaim_reent+0xa0>
 801e596:	69e3      	ldr	r3, [r4, #28]
 801e598:	6819      	ldr	r1, [r3, #0]
 801e59a:	b111      	cbz	r1, 801e5a2 <_reclaim_reent+0x22>
 801e59c:	4620      	mov	r0, r4
 801e59e:	f000 ff51 	bl	801f444 <_free_r>
 801e5a2:	6961      	ldr	r1, [r4, #20]
 801e5a4:	b111      	cbz	r1, 801e5ac <_reclaim_reent+0x2c>
 801e5a6:	4620      	mov	r0, r4
 801e5a8:	f000 ff4c 	bl	801f444 <_free_r>
 801e5ac:	69e1      	ldr	r1, [r4, #28]
 801e5ae:	b111      	cbz	r1, 801e5b6 <_reclaim_reent+0x36>
 801e5b0:	4620      	mov	r0, r4
 801e5b2:	f000 ff47 	bl	801f444 <_free_r>
 801e5b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801e5b8:	b111      	cbz	r1, 801e5c0 <_reclaim_reent+0x40>
 801e5ba:	4620      	mov	r0, r4
 801e5bc:	f000 ff42 	bl	801f444 <_free_r>
 801e5c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e5c2:	b111      	cbz	r1, 801e5ca <_reclaim_reent+0x4a>
 801e5c4:	4620      	mov	r0, r4
 801e5c6:	f000 ff3d 	bl	801f444 <_free_r>
 801e5ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801e5cc:	b111      	cbz	r1, 801e5d4 <_reclaim_reent+0x54>
 801e5ce:	4620      	mov	r0, r4
 801e5d0:	f000 ff38 	bl	801f444 <_free_r>
 801e5d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801e5d6:	b111      	cbz	r1, 801e5de <_reclaim_reent+0x5e>
 801e5d8:	4620      	mov	r0, r4
 801e5da:	f000 ff33 	bl	801f444 <_free_r>
 801e5de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801e5e0:	b111      	cbz	r1, 801e5e8 <_reclaim_reent+0x68>
 801e5e2:	4620      	mov	r0, r4
 801e5e4:	f000 ff2e 	bl	801f444 <_free_r>
 801e5e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801e5ea:	b111      	cbz	r1, 801e5f2 <_reclaim_reent+0x72>
 801e5ec:	4620      	mov	r0, r4
 801e5ee:	f000 ff29 	bl	801f444 <_free_r>
 801e5f2:	6a23      	ldr	r3, [r4, #32]
 801e5f4:	b1b3      	cbz	r3, 801e624 <_reclaim_reent+0xa4>
 801e5f6:	4620      	mov	r0, r4
 801e5f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e5fc:	4718      	bx	r3
 801e5fe:	5949      	ldr	r1, [r1, r5]
 801e600:	b941      	cbnz	r1, 801e614 <_reclaim_reent+0x94>
 801e602:	3504      	adds	r5, #4
 801e604:	69e3      	ldr	r3, [r4, #28]
 801e606:	2d80      	cmp	r5, #128	; 0x80
 801e608:	68d9      	ldr	r1, [r3, #12]
 801e60a:	d1f8      	bne.n	801e5fe <_reclaim_reent+0x7e>
 801e60c:	4620      	mov	r0, r4
 801e60e:	f000 ff19 	bl	801f444 <_free_r>
 801e612:	e7c0      	b.n	801e596 <_reclaim_reent+0x16>
 801e614:	680e      	ldr	r6, [r1, #0]
 801e616:	4620      	mov	r0, r4
 801e618:	f000 ff14 	bl	801f444 <_free_r>
 801e61c:	4631      	mov	r1, r6
 801e61e:	e7ef      	b.n	801e600 <_reclaim_reent+0x80>
 801e620:	2500      	movs	r5, #0
 801e622:	e7ef      	b.n	801e604 <_reclaim_reent+0x84>
 801e624:	bd70      	pop	{r4, r5, r6, pc}
 801e626:	bf00      	nop
 801e628:	200002f0 	.word	0x200002f0

0801e62c <_lseek_r>:
 801e62c:	b538      	push	{r3, r4, r5, lr}
 801e62e:	4d07      	ldr	r5, [pc, #28]	; (801e64c <_lseek_r+0x20>)
 801e630:	4604      	mov	r4, r0
 801e632:	4608      	mov	r0, r1
 801e634:	4611      	mov	r1, r2
 801e636:	2200      	movs	r2, #0
 801e638:	602a      	str	r2, [r5, #0]
 801e63a:	461a      	mov	r2, r3
 801e63c:	f7ed f850 	bl	800b6e0 <_lseek>
 801e640:	1c43      	adds	r3, r0, #1
 801e642:	d102      	bne.n	801e64a <_lseek_r+0x1e>
 801e644:	682b      	ldr	r3, [r5, #0]
 801e646:	b103      	cbz	r3, 801e64a <_lseek_r+0x1e>
 801e648:	6023      	str	r3, [r4, #0]
 801e64a:	bd38      	pop	{r3, r4, r5, pc}
 801e64c:	2000a1c4 	.word	0x2000a1c4

0801e650 <_read_r>:
 801e650:	b538      	push	{r3, r4, r5, lr}
 801e652:	4d07      	ldr	r5, [pc, #28]	; (801e670 <_read_r+0x20>)
 801e654:	4604      	mov	r4, r0
 801e656:	4608      	mov	r0, r1
 801e658:	4611      	mov	r1, r2
 801e65a:	2200      	movs	r2, #0
 801e65c:	602a      	str	r2, [r5, #0]
 801e65e:	461a      	mov	r2, r3
 801e660:	f7ec ffde 	bl	800b620 <_read>
 801e664:	1c43      	adds	r3, r0, #1
 801e666:	d102      	bne.n	801e66e <_read_r+0x1e>
 801e668:	682b      	ldr	r3, [r5, #0]
 801e66a:	b103      	cbz	r3, 801e66e <_read_r+0x1e>
 801e66c:	6023      	str	r3, [r4, #0]
 801e66e:	bd38      	pop	{r3, r4, r5, pc}
 801e670:	2000a1c4 	.word	0x2000a1c4

0801e674 <_sbrk_r>:
 801e674:	b538      	push	{r3, r4, r5, lr}
 801e676:	4d06      	ldr	r5, [pc, #24]	; (801e690 <_sbrk_r+0x1c>)
 801e678:	2300      	movs	r3, #0
 801e67a:	4604      	mov	r4, r0
 801e67c:	4608      	mov	r0, r1
 801e67e:	602b      	str	r3, [r5, #0]
 801e680:	f7ed f83c 	bl	800b6fc <_sbrk>
 801e684:	1c43      	adds	r3, r0, #1
 801e686:	d102      	bne.n	801e68e <_sbrk_r+0x1a>
 801e688:	682b      	ldr	r3, [r5, #0]
 801e68a:	b103      	cbz	r3, 801e68e <_sbrk_r+0x1a>
 801e68c:	6023      	str	r3, [r4, #0]
 801e68e:	bd38      	pop	{r3, r4, r5, pc}
 801e690:	2000a1c4 	.word	0x2000a1c4

0801e694 <_write_r>:
 801e694:	b538      	push	{r3, r4, r5, lr}
 801e696:	4d07      	ldr	r5, [pc, #28]	; (801e6b4 <_write_r+0x20>)
 801e698:	4604      	mov	r4, r0
 801e69a:	4608      	mov	r0, r1
 801e69c:	4611      	mov	r1, r2
 801e69e:	2200      	movs	r2, #0
 801e6a0:	602a      	str	r2, [r5, #0]
 801e6a2:	461a      	mov	r2, r3
 801e6a4:	f7ec ffd9 	bl	800b65a <_write>
 801e6a8:	1c43      	adds	r3, r0, #1
 801e6aa:	d102      	bne.n	801e6b2 <_write_r+0x1e>
 801e6ac:	682b      	ldr	r3, [r5, #0]
 801e6ae:	b103      	cbz	r3, 801e6b2 <_write_r+0x1e>
 801e6b0:	6023      	str	r3, [r4, #0]
 801e6b2:	bd38      	pop	{r3, r4, r5, pc}
 801e6b4:	2000a1c4 	.word	0x2000a1c4

0801e6b8 <__errno>:
 801e6b8:	4b01      	ldr	r3, [pc, #4]	; (801e6c0 <__errno+0x8>)
 801e6ba:	6818      	ldr	r0, [r3, #0]
 801e6bc:	4770      	bx	lr
 801e6be:	bf00      	nop
 801e6c0:	200002f0 	.word	0x200002f0

0801e6c4 <__libc_init_array>:
 801e6c4:	b570      	push	{r4, r5, r6, lr}
 801e6c6:	4d0d      	ldr	r5, [pc, #52]	; (801e6fc <__libc_init_array+0x38>)
 801e6c8:	4c0d      	ldr	r4, [pc, #52]	; (801e700 <__libc_init_array+0x3c>)
 801e6ca:	1b64      	subs	r4, r4, r5
 801e6cc:	10a4      	asrs	r4, r4, #2
 801e6ce:	2600      	movs	r6, #0
 801e6d0:	42a6      	cmp	r6, r4
 801e6d2:	d109      	bne.n	801e6e8 <__libc_init_array+0x24>
 801e6d4:	4d0b      	ldr	r5, [pc, #44]	; (801e704 <__libc_init_array+0x40>)
 801e6d6:	4c0c      	ldr	r4, [pc, #48]	; (801e708 <__libc_init_array+0x44>)
 801e6d8:	f003 f8c8 	bl	802186c <_init>
 801e6dc:	1b64      	subs	r4, r4, r5
 801e6de:	10a4      	asrs	r4, r4, #2
 801e6e0:	2600      	movs	r6, #0
 801e6e2:	42a6      	cmp	r6, r4
 801e6e4:	d105      	bne.n	801e6f2 <__libc_init_array+0x2e>
 801e6e6:	bd70      	pop	{r4, r5, r6, pc}
 801e6e8:	f855 3b04 	ldr.w	r3, [r5], #4
 801e6ec:	4798      	blx	r3
 801e6ee:	3601      	adds	r6, #1
 801e6f0:	e7ee      	b.n	801e6d0 <__libc_init_array+0xc>
 801e6f2:	f855 3b04 	ldr.w	r3, [r5], #4
 801e6f6:	4798      	blx	r3
 801e6f8:	3601      	adds	r6, #1
 801e6fa:	e7f2      	b.n	801e6e2 <__libc_init_array+0x1e>
 801e6fc:	08022b44 	.word	0x08022b44
 801e700:	08022b44 	.word	0x08022b44
 801e704:	08022b44 	.word	0x08022b44
 801e708:	08022b48 	.word	0x08022b48

0801e70c <__retarget_lock_acquire_recursive>:
 801e70c:	4770      	bx	lr

0801e70e <__retarget_lock_release_recursive>:
 801e70e:	4770      	bx	lr

0801e710 <memcpy>:
 801e710:	440a      	add	r2, r1
 801e712:	4291      	cmp	r1, r2
 801e714:	f100 33ff 	add.w	r3, r0, #4294967295
 801e718:	d100      	bne.n	801e71c <memcpy+0xc>
 801e71a:	4770      	bx	lr
 801e71c:	b510      	push	{r4, lr}
 801e71e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e722:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e726:	4291      	cmp	r1, r2
 801e728:	d1f9      	bne.n	801e71e <memcpy+0xe>
 801e72a:	bd10      	pop	{r4, pc}
 801e72c:	0000      	movs	r0, r0
	...

0801e730 <nan>:
 801e730:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e738 <nan+0x8>
 801e734:	4770      	bx	lr
 801e736:	bf00      	nop
 801e738:	00000000 	.word	0x00000000
 801e73c:	7ff80000 	.word	0x7ff80000

0801e740 <nanf>:
 801e740:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801e748 <nanf+0x8>
 801e744:	4770      	bx	lr
 801e746:	bf00      	nop
 801e748:	7fc00000 	.word	0x7fc00000

0801e74c <quorem>:
 801e74c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e750:	6903      	ldr	r3, [r0, #16]
 801e752:	690c      	ldr	r4, [r1, #16]
 801e754:	42a3      	cmp	r3, r4
 801e756:	4607      	mov	r7, r0
 801e758:	db7e      	blt.n	801e858 <quorem+0x10c>
 801e75a:	3c01      	subs	r4, #1
 801e75c:	f101 0814 	add.w	r8, r1, #20
 801e760:	f100 0514 	add.w	r5, r0, #20
 801e764:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e768:	9301      	str	r3, [sp, #4]
 801e76a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e76e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e772:	3301      	adds	r3, #1
 801e774:	429a      	cmp	r2, r3
 801e776:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e77a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e77e:	fbb2 f6f3 	udiv	r6, r2, r3
 801e782:	d331      	bcc.n	801e7e8 <quorem+0x9c>
 801e784:	f04f 0e00 	mov.w	lr, #0
 801e788:	4640      	mov	r0, r8
 801e78a:	46ac      	mov	ip, r5
 801e78c:	46f2      	mov	sl, lr
 801e78e:	f850 2b04 	ldr.w	r2, [r0], #4
 801e792:	b293      	uxth	r3, r2
 801e794:	fb06 e303 	mla	r3, r6, r3, lr
 801e798:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e79c:	0c1a      	lsrs	r2, r3, #16
 801e79e:	b29b      	uxth	r3, r3
 801e7a0:	ebaa 0303 	sub.w	r3, sl, r3
 801e7a4:	f8dc a000 	ldr.w	sl, [ip]
 801e7a8:	fa13 f38a 	uxtah	r3, r3, sl
 801e7ac:	fb06 220e 	mla	r2, r6, lr, r2
 801e7b0:	9300      	str	r3, [sp, #0]
 801e7b2:	9b00      	ldr	r3, [sp, #0]
 801e7b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e7b8:	b292      	uxth	r2, r2
 801e7ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801e7be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e7c2:	f8bd 3000 	ldrh.w	r3, [sp]
 801e7c6:	4581      	cmp	r9, r0
 801e7c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e7cc:	f84c 3b04 	str.w	r3, [ip], #4
 801e7d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801e7d4:	d2db      	bcs.n	801e78e <quorem+0x42>
 801e7d6:	f855 300b 	ldr.w	r3, [r5, fp]
 801e7da:	b92b      	cbnz	r3, 801e7e8 <quorem+0x9c>
 801e7dc:	9b01      	ldr	r3, [sp, #4]
 801e7de:	3b04      	subs	r3, #4
 801e7e0:	429d      	cmp	r5, r3
 801e7e2:	461a      	mov	r2, r3
 801e7e4:	d32c      	bcc.n	801e840 <quorem+0xf4>
 801e7e6:	613c      	str	r4, [r7, #16]
 801e7e8:	4638      	mov	r0, r7
 801e7ea:	f001 fca7 	bl	802013c <__mcmp>
 801e7ee:	2800      	cmp	r0, #0
 801e7f0:	db22      	blt.n	801e838 <quorem+0xec>
 801e7f2:	3601      	adds	r6, #1
 801e7f4:	4629      	mov	r1, r5
 801e7f6:	2000      	movs	r0, #0
 801e7f8:	f858 2b04 	ldr.w	r2, [r8], #4
 801e7fc:	f8d1 c000 	ldr.w	ip, [r1]
 801e800:	b293      	uxth	r3, r2
 801e802:	1ac3      	subs	r3, r0, r3
 801e804:	0c12      	lsrs	r2, r2, #16
 801e806:	fa13 f38c 	uxtah	r3, r3, ip
 801e80a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801e80e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e812:	b29b      	uxth	r3, r3
 801e814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e818:	45c1      	cmp	r9, r8
 801e81a:	f841 3b04 	str.w	r3, [r1], #4
 801e81e:	ea4f 4022 	mov.w	r0, r2, asr #16
 801e822:	d2e9      	bcs.n	801e7f8 <quorem+0xac>
 801e824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e828:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e82c:	b922      	cbnz	r2, 801e838 <quorem+0xec>
 801e82e:	3b04      	subs	r3, #4
 801e830:	429d      	cmp	r5, r3
 801e832:	461a      	mov	r2, r3
 801e834:	d30a      	bcc.n	801e84c <quorem+0x100>
 801e836:	613c      	str	r4, [r7, #16]
 801e838:	4630      	mov	r0, r6
 801e83a:	b003      	add	sp, #12
 801e83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e840:	6812      	ldr	r2, [r2, #0]
 801e842:	3b04      	subs	r3, #4
 801e844:	2a00      	cmp	r2, #0
 801e846:	d1ce      	bne.n	801e7e6 <quorem+0x9a>
 801e848:	3c01      	subs	r4, #1
 801e84a:	e7c9      	b.n	801e7e0 <quorem+0x94>
 801e84c:	6812      	ldr	r2, [r2, #0]
 801e84e:	3b04      	subs	r3, #4
 801e850:	2a00      	cmp	r2, #0
 801e852:	d1f0      	bne.n	801e836 <quorem+0xea>
 801e854:	3c01      	subs	r4, #1
 801e856:	e7eb      	b.n	801e830 <quorem+0xe4>
 801e858:	2000      	movs	r0, #0
 801e85a:	e7ee      	b.n	801e83a <quorem+0xee>
 801e85c:	0000      	movs	r0, r0
	...

0801e860 <_dtoa_r>:
 801e860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e864:	ed2d 8b04 	vpush	{d8-d9}
 801e868:	69c5      	ldr	r5, [r0, #28]
 801e86a:	b093      	sub	sp, #76	; 0x4c
 801e86c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e870:	ec57 6b10 	vmov	r6, r7, d0
 801e874:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801e878:	9107      	str	r1, [sp, #28]
 801e87a:	4604      	mov	r4, r0
 801e87c:	920a      	str	r2, [sp, #40]	; 0x28
 801e87e:	930d      	str	r3, [sp, #52]	; 0x34
 801e880:	b975      	cbnz	r5, 801e8a0 <_dtoa_r+0x40>
 801e882:	2010      	movs	r0, #16
 801e884:	f7fd ff5c 	bl	801c740 <malloc>
 801e888:	4602      	mov	r2, r0
 801e88a:	61e0      	str	r0, [r4, #28]
 801e88c:	b920      	cbnz	r0, 801e898 <_dtoa_r+0x38>
 801e88e:	4bae      	ldr	r3, [pc, #696]	; (801eb48 <_dtoa_r+0x2e8>)
 801e890:	21ef      	movs	r1, #239	; 0xef
 801e892:	48ae      	ldr	r0, [pc, #696]	; (801eb4c <_dtoa_r+0x2ec>)
 801e894:	f002 fc88 	bl	80211a8 <__assert_func>
 801e898:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801e89c:	6005      	str	r5, [r0, #0]
 801e89e:	60c5      	str	r5, [r0, #12]
 801e8a0:	69e3      	ldr	r3, [r4, #28]
 801e8a2:	6819      	ldr	r1, [r3, #0]
 801e8a4:	b151      	cbz	r1, 801e8bc <_dtoa_r+0x5c>
 801e8a6:	685a      	ldr	r2, [r3, #4]
 801e8a8:	604a      	str	r2, [r1, #4]
 801e8aa:	2301      	movs	r3, #1
 801e8ac:	4093      	lsls	r3, r2
 801e8ae:	608b      	str	r3, [r1, #8]
 801e8b0:	4620      	mov	r0, r4
 801e8b2:	f001 f9bd 	bl	801fc30 <_Bfree>
 801e8b6:	69e3      	ldr	r3, [r4, #28]
 801e8b8:	2200      	movs	r2, #0
 801e8ba:	601a      	str	r2, [r3, #0]
 801e8bc:	1e3b      	subs	r3, r7, #0
 801e8be:	bfbb      	ittet	lt
 801e8c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801e8c4:	9303      	strlt	r3, [sp, #12]
 801e8c6:	2300      	movge	r3, #0
 801e8c8:	2201      	movlt	r2, #1
 801e8ca:	bfac      	ite	ge
 801e8cc:	f8c8 3000 	strge.w	r3, [r8]
 801e8d0:	f8c8 2000 	strlt.w	r2, [r8]
 801e8d4:	4b9e      	ldr	r3, [pc, #632]	; (801eb50 <_dtoa_r+0x2f0>)
 801e8d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801e8da:	ea33 0308 	bics.w	r3, r3, r8
 801e8de:	d11b      	bne.n	801e918 <_dtoa_r+0xb8>
 801e8e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e8e2:	f242 730f 	movw	r3, #9999	; 0x270f
 801e8e6:	6013      	str	r3, [r2, #0]
 801e8e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801e8ec:	4333      	orrs	r3, r6
 801e8ee:	f000 8593 	beq.w	801f418 <_dtoa_r+0xbb8>
 801e8f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e8f4:	b963      	cbnz	r3, 801e910 <_dtoa_r+0xb0>
 801e8f6:	4b97      	ldr	r3, [pc, #604]	; (801eb54 <_dtoa_r+0x2f4>)
 801e8f8:	e027      	b.n	801e94a <_dtoa_r+0xea>
 801e8fa:	4b97      	ldr	r3, [pc, #604]	; (801eb58 <_dtoa_r+0x2f8>)
 801e8fc:	9300      	str	r3, [sp, #0]
 801e8fe:	3308      	adds	r3, #8
 801e900:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e902:	6013      	str	r3, [r2, #0]
 801e904:	9800      	ldr	r0, [sp, #0]
 801e906:	b013      	add	sp, #76	; 0x4c
 801e908:	ecbd 8b04 	vpop	{d8-d9}
 801e90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e910:	4b90      	ldr	r3, [pc, #576]	; (801eb54 <_dtoa_r+0x2f4>)
 801e912:	9300      	str	r3, [sp, #0]
 801e914:	3303      	adds	r3, #3
 801e916:	e7f3      	b.n	801e900 <_dtoa_r+0xa0>
 801e918:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e91c:	2200      	movs	r2, #0
 801e91e:	ec51 0b17 	vmov	r0, r1, d7
 801e922:	eeb0 8a47 	vmov.f32	s16, s14
 801e926:	eef0 8a67 	vmov.f32	s17, s15
 801e92a:	2300      	movs	r3, #0
 801e92c:	f7e2 f8cc 	bl	8000ac8 <__aeabi_dcmpeq>
 801e930:	4681      	mov	r9, r0
 801e932:	b160      	cbz	r0, 801e94e <_dtoa_r+0xee>
 801e934:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e936:	2301      	movs	r3, #1
 801e938:	6013      	str	r3, [r2, #0]
 801e93a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	f000 8568 	beq.w	801f412 <_dtoa_r+0xbb2>
 801e942:	4b86      	ldr	r3, [pc, #536]	; (801eb5c <_dtoa_r+0x2fc>)
 801e944:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e946:	6013      	str	r3, [r2, #0]
 801e948:	3b01      	subs	r3, #1
 801e94a:	9300      	str	r3, [sp, #0]
 801e94c:	e7da      	b.n	801e904 <_dtoa_r+0xa4>
 801e94e:	aa10      	add	r2, sp, #64	; 0x40
 801e950:	a911      	add	r1, sp, #68	; 0x44
 801e952:	4620      	mov	r0, r4
 801e954:	eeb0 0a48 	vmov.f32	s0, s16
 801e958:	eef0 0a68 	vmov.f32	s1, s17
 801e95c:	f001 fd04 	bl	8020368 <__d2b>
 801e960:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801e964:	4682      	mov	sl, r0
 801e966:	2d00      	cmp	r5, #0
 801e968:	d07f      	beq.n	801ea6a <_dtoa_r+0x20a>
 801e96a:	ee18 3a90 	vmov	r3, s17
 801e96e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e972:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801e976:	ec51 0b18 	vmov	r0, r1, d8
 801e97a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e97e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801e982:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801e986:	4619      	mov	r1, r3
 801e988:	2200      	movs	r2, #0
 801e98a:	4b75      	ldr	r3, [pc, #468]	; (801eb60 <_dtoa_r+0x300>)
 801e98c:	f7e1 fc7c 	bl	8000288 <__aeabi_dsub>
 801e990:	a367      	add	r3, pc, #412	; (adr r3, 801eb30 <_dtoa_r+0x2d0>)
 801e992:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e996:	f7e1 fe2f 	bl	80005f8 <__aeabi_dmul>
 801e99a:	a367      	add	r3, pc, #412	; (adr r3, 801eb38 <_dtoa_r+0x2d8>)
 801e99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9a0:	f7e1 fc74 	bl	800028c <__adddf3>
 801e9a4:	4606      	mov	r6, r0
 801e9a6:	4628      	mov	r0, r5
 801e9a8:	460f      	mov	r7, r1
 801e9aa:	f7e1 fdbb 	bl	8000524 <__aeabi_i2d>
 801e9ae:	a364      	add	r3, pc, #400	; (adr r3, 801eb40 <_dtoa_r+0x2e0>)
 801e9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9b4:	f7e1 fe20 	bl	80005f8 <__aeabi_dmul>
 801e9b8:	4602      	mov	r2, r0
 801e9ba:	460b      	mov	r3, r1
 801e9bc:	4630      	mov	r0, r6
 801e9be:	4639      	mov	r1, r7
 801e9c0:	f7e1 fc64 	bl	800028c <__adddf3>
 801e9c4:	4606      	mov	r6, r0
 801e9c6:	460f      	mov	r7, r1
 801e9c8:	f7e2 f8c6 	bl	8000b58 <__aeabi_d2iz>
 801e9cc:	2200      	movs	r2, #0
 801e9ce:	4683      	mov	fp, r0
 801e9d0:	2300      	movs	r3, #0
 801e9d2:	4630      	mov	r0, r6
 801e9d4:	4639      	mov	r1, r7
 801e9d6:	f7e2 f881 	bl	8000adc <__aeabi_dcmplt>
 801e9da:	b148      	cbz	r0, 801e9f0 <_dtoa_r+0x190>
 801e9dc:	4658      	mov	r0, fp
 801e9de:	f7e1 fda1 	bl	8000524 <__aeabi_i2d>
 801e9e2:	4632      	mov	r2, r6
 801e9e4:	463b      	mov	r3, r7
 801e9e6:	f7e2 f86f 	bl	8000ac8 <__aeabi_dcmpeq>
 801e9ea:	b908      	cbnz	r0, 801e9f0 <_dtoa_r+0x190>
 801e9ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e9f0:	f1bb 0f16 	cmp.w	fp, #22
 801e9f4:	d857      	bhi.n	801eaa6 <_dtoa_r+0x246>
 801e9f6:	4b5b      	ldr	r3, [pc, #364]	; (801eb64 <_dtoa_r+0x304>)
 801e9f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801e9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea00:	ec51 0b18 	vmov	r0, r1, d8
 801ea04:	f7e2 f86a 	bl	8000adc <__aeabi_dcmplt>
 801ea08:	2800      	cmp	r0, #0
 801ea0a:	d04e      	beq.n	801eaaa <_dtoa_r+0x24a>
 801ea0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ea10:	2300      	movs	r3, #0
 801ea12:	930c      	str	r3, [sp, #48]	; 0x30
 801ea14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea16:	1b5b      	subs	r3, r3, r5
 801ea18:	1e5a      	subs	r2, r3, #1
 801ea1a:	bf45      	ittet	mi
 801ea1c:	f1c3 0301 	rsbmi	r3, r3, #1
 801ea20:	9305      	strmi	r3, [sp, #20]
 801ea22:	2300      	movpl	r3, #0
 801ea24:	2300      	movmi	r3, #0
 801ea26:	9206      	str	r2, [sp, #24]
 801ea28:	bf54      	ite	pl
 801ea2a:	9305      	strpl	r3, [sp, #20]
 801ea2c:	9306      	strmi	r3, [sp, #24]
 801ea2e:	f1bb 0f00 	cmp.w	fp, #0
 801ea32:	db3c      	blt.n	801eaae <_dtoa_r+0x24e>
 801ea34:	9b06      	ldr	r3, [sp, #24]
 801ea36:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801ea3a:	445b      	add	r3, fp
 801ea3c:	9306      	str	r3, [sp, #24]
 801ea3e:	2300      	movs	r3, #0
 801ea40:	9308      	str	r3, [sp, #32]
 801ea42:	9b07      	ldr	r3, [sp, #28]
 801ea44:	2b09      	cmp	r3, #9
 801ea46:	d868      	bhi.n	801eb1a <_dtoa_r+0x2ba>
 801ea48:	2b05      	cmp	r3, #5
 801ea4a:	bfc4      	itt	gt
 801ea4c:	3b04      	subgt	r3, #4
 801ea4e:	9307      	strgt	r3, [sp, #28]
 801ea50:	9b07      	ldr	r3, [sp, #28]
 801ea52:	f1a3 0302 	sub.w	r3, r3, #2
 801ea56:	bfcc      	ite	gt
 801ea58:	2500      	movgt	r5, #0
 801ea5a:	2501      	movle	r5, #1
 801ea5c:	2b03      	cmp	r3, #3
 801ea5e:	f200 8085 	bhi.w	801eb6c <_dtoa_r+0x30c>
 801ea62:	e8df f003 	tbb	[pc, r3]
 801ea66:	3b2e      	.short	0x3b2e
 801ea68:	5839      	.short	0x5839
 801ea6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801ea6e:	441d      	add	r5, r3
 801ea70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801ea74:	2b20      	cmp	r3, #32
 801ea76:	bfc1      	itttt	gt
 801ea78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ea7c:	fa08 f803 	lslgt.w	r8, r8, r3
 801ea80:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801ea84:	fa26 f303 	lsrgt.w	r3, r6, r3
 801ea88:	bfd6      	itet	le
 801ea8a:	f1c3 0320 	rsble	r3, r3, #32
 801ea8e:	ea48 0003 	orrgt.w	r0, r8, r3
 801ea92:	fa06 f003 	lslle.w	r0, r6, r3
 801ea96:	f7e1 fd35 	bl	8000504 <__aeabi_ui2d>
 801ea9a:	2201      	movs	r2, #1
 801ea9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801eaa0:	3d01      	subs	r5, #1
 801eaa2:	920e      	str	r2, [sp, #56]	; 0x38
 801eaa4:	e76f      	b.n	801e986 <_dtoa_r+0x126>
 801eaa6:	2301      	movs	r3, #1
 801eaa8:	e7b3      	b.n	801ea12 <_dtoa_r+0x1b2>
 801eaaa:	900c      	str	r0, [sp, #48]	; 0x30
 801eaac:	e7b2      	b.n	801ea14 <_dtoa_r+0x1b4>
 801eaae:	9b05      	ldr	r3, [sp, #20]
 801eab0:	eba3 030b 	sub.w	r3, r3, fp
 801eab4:	9305      	str	r3, [sp, #20]
 801eab6:	f1cb 0300 	rsb	r3, fp, #0
 801eaba:	9308      	str	r3, [sp, #32]
 801eabc:	2300      	movs	r3, #0
 801eabe:	930b      	str	r3, [sp, #44]	; 0x2c
 801eac0:	e7bf      	b.n	801ea42 <_dtoa_r+0x1e2>
 801eac2:	2300      	movs	r3, #0
 801eac4:	9309      	str	r3, [sp, #36]	; 0x24
 801eac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eac8:	2b00      	cmp	r3, #0
 801eaca:	dc52      	bgt.n	801eb72 <_dtoa_r+0x312>
 801eacc:	2301      	movs	r3, #1
 801eace:	9301      	str	r3, [sp, #4]
 801ead0:	9304      	str	r3, [sp, #16]
 801ead2:	461a      	mov	r2, r3
 801ead4:	920a      	str	r2, [sp, #40]	; 0x28
 801ead6:	e00b      	b.n	801eaf0 <_dtoa_r+0x290>
 801ead8:	2301      	movs	r3, #1
 801eada:	e7f3      	b.n	801eac4 <_dtoa_r+0x264>
 801eadc:	2300      	movs	r3, #0
 801eade:	9309      	str	r3, [sp, #36]	; 0x24
 801eae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eae2:	445b      	add	r3, fp
 801eae4:	9301      	str	r3, [sp, #4]
 801eae6:	3301      	adds	r3, #1
 801eae8:	2b01      	cmp	r3, #1
 801eaea:	9304      	str	r3, [sp, #16]
 801eaec:	bfb8      	it	lt
 801eaee:	2301      	movlt	r3, #1
 801eaf0:	69e0      	ldr	r0, [r4, #28]
 801eaf2:	2100      	movs	r1, #0
 801eaf4:	2204      	movs	r2, #4
 801eaf6:	f102 0614 	add.w	r6, r2, #20
 801eafa:	429e      	cmp	r6, r3
 801eafc:	d93d      	bls.n	801eb7a <_dtoa_r+0x31a>
 801eafe:	6041      	str	r1, [r0, #4]
 801eb00:	4620      	mov	r0, r4
 801eb02:	f001 f855 	bl	801fbb0 <_Balloc>
 801eb06:	9000      	str	r0, [sp, #0]
 801eb08:	2800      	cmp	r0, #0
 801eb0a:	d139      	bne.n	801eb80 <_dtoa_r+0x320>
 801eb0c:	4b16      	ldr	r3, [pc, #88]	; (801eb68 <_dtoa_r+0x308>)
 801eb0e:	4602      	mov	r2, r0
 801eb10:	f240 11af 	movw	r1, #431	; 0x1af
 801eb14:	e6bd      	b.n	801e892 <_dtoa_r+0x32>
 801eb16:	2301      	movs	r3, #1
 801eb18:	e7e1      	b.n	801eade <_dtoa_r+0x27e>
 801eb1a:	2501      	movs	r5, #1
 801eb1c:	2300      	movs	r3, #0
 801eb1e:	9307      	str	r3, [sp, #28]
 801eb20:	9509      	str	r5, [sp, #36]	; 0x24
 801eb22:	f04f 33ff 	mov.w	r3, #4294967295
 801eb26:	9301      	str	r3, [sp, #4]
 801eb28:	9304      	str	r3, [sp, #16]
 801eb2a:	2200      	movs	r2, #0
 801eb2c:	2312      	movs	r3, #18
 801eb2e:	e7d1      	b.n	801ead4 <_dtoa_r+0x274>
 801eb30:	636f4361 	.word	0x636f4361
 801eb34:	3fd287a7 	.word	0x3fd287a7
 801eb38:	8b60c8b3 	.word	0x8b60c8b3
 801eb3c:	3fc68a28 	.word	0x3fc68a28
 801eb40:	509f79fb 	.word	0x509f79fb
 801eb44:	3fd34413 	.word	0x3fd34413
 801eb48:	0802289d 	.word	0x0802289d
 801eb4c:	080228b4 	.word	0x080228b4
 801eb50:	7ff00000 	.word	0x7ff00000
 801eb54:	08022899 	.word	0x08022899
 801eb58:	08022890 	.word	0x08022890
 801eb5c:	08022afc 	.word	0x08022afc
 801eb60:	3ff80000 	.word	0x3ff80000
 801eb64:	08022a00 	.word	0x08022a00
 801eb68:	0802290c 	.word	0x0802290c
 801eb6c:	2301      	movs	r3, #1
 801eb6e:	9309      	str	r3, [sp, #36]	; 0x24
 801eb70:	e7d7      	b.n	801eb22 <_dtoa_r+0x2c2>
 801eb72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb74:	9301      	str	r3, [sp, #4]
 801eb76:	9304      	str	r3, [sp, #16]
 801eb78:	e7ba      	b.n	801eaf0 <_dtoa_r+0x290>
 801eb7a:	3101      	adds	r1, #1
 801eb7c:	0052      	lsls	r2, r2, #1
 801eb7e:	e7ba      	b.n	801eaf6 <_dtoa_r+0x296>
 801eb80:	69e3      	ldr	r3, [r4, #28]
 801eb82:	9a00      	ldr	r2, [sp, #0]
 801eb84:	601a      	str	r2, [r3, #0]
 801eb86:	9b04      	ldr	r3, [sp, #16]
 801eb88:	2b0e      	cmp	r3, #14
 801eb8a:	f200 80a8 	bhi.w	801ecde <_dtoa_r+0x47e>
 801eb8e:	2d00      	cmp	r5, #0
 801eb90:	f000 80a5 	beq.w	801ecde <_dtoa_r+0x47e>
 801eb94:	f1bb 0f00 	cmp.w	fp, #0
 801eb98:	dd38      	ble.n	801ec0c <_dtoa_r+0x3ac>
 801eb9a:	4bc0      	ldr	r3, [pc, #768]	; (801ee9c <_dtoa_r+0x63c>)
 801eb9c:	f00b 020f 	and.w	r2, fp, #15
 801eba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801eba4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801eba8:	e9d3 6700 	ldrd	r6, r7, [r3]
 801ebac:	ea4f 182b 	mov.w	r8, fp, asr #4
 801ebb0:	d019      	beq.n	801ebe6 <_dtoa_r+0x386>
 801ebb2:	4bbb      	ldr	r3, [pc, #748]	; (801eea0 <_dtoa_r+0x640>)
 801ebb4:	ec51 0b18 	vmov	r0, r1, d8
 801ebb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ebbc:	f7e1 fe46 	bl	800084c <__aeabi_ddiv>
 801ebc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ebc4:	f008 080f 	and.w	r8, r8, #15
 801ebc8:	2503      	movs	r5, #3
 801ebca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801eea0 <_dtoa_r+0x640>
 801ebce:	f1b8 0f00 	cmp.w	r8, #0
 801ebd2:	d10a      	bne.n	801ebea <_dtoa_r+0x38a>
 801ebd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ebd8:	4632      	mov	r2, r6
 801ebda:	463b      	mov	r3, r7
 801ebdc:	f7e1 fe36 	bl	800084c <__aeabi_ddiv>
 801ebe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ebe4:	e02b      	b.n	801ec3e <_dtoa_r+0x3de>
 801ebe6:	2502      	movs	r5, #2
 801ebe8:	e7ef      	b.n	801ebca <_dtoa_r+0x36a>
 801ebea:	f018 0f01 	tst.w	r8, #1
 801ebee:	d008      	beq.n	801ec02 <_dtoa_r+0x3a2>
 801ebf0:	4630      	mov	r0, r6
 801ebf2:	4639      	mov	r1, r7
 801ebf4:	e9d9 2300 	ldrd	r2, r3, [r9]
 801ebf8:	f7e1 fcfe 	bl	80005f8 <__aeabi_dmul>
 801ebfc:	3501      	adds	r5, #1
 801ebfe:	4606      	mov	r6, r0
 801ec00:	460f      	mov	r7, r1
 801ec02:	ea4f 0868 	mov.w	r8, r8, asr #1
 801ec06:	f109 0908 	add.w	r9, r9, #8
 801ec0a:	e7e0      	b.n	801ebce <_dtoa_r+0x36e>
 801ec0c:	f000 809f 	beq.w	801ed4e <_dtoa_r+0x4ee>
 801ec10:	f1cb 0600 	rsb	r6, fp, #0
 801ec14:	4ba1      	ldr	r3, [pc, #644]	; (801ee9c <_dtoa_r+0x63c>)
 801ec16:	4fa2      	ldr	r7, [pc, #648]	; (801eea0 <_dtoa_r+0x640>)
 801ec18:	f006 020f 	and.w	r2, r6, #15
 801ec1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ec20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec24:	ec51 0b18 	vmov	r0, r1, d8
 801ec28:	f7e1 fce6 	bl	80005f8 <__aeabi_dmul>
 801ec2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec30:	1136      	asrs	r6, r6, #4
 801ec32:	2300      	movs	r3, #0
 801ec34:	2502      	movs	r5, #2
 801ec36:	2e00      	cmp	r6, #0
 801ec38:	d17e      	bne.n	801ed38 <_dtoa_r+0x4d8>
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	d1d0      	bne.n	801ebe0 <_dtoa_r+0x380>
 801ec3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801ec44:	2b00      	cmp	r3, #0
 801ec46:	f000 8084 	beq.w	801ed52 <_dtoa_r+0x4f2>
 801ec4a:	4b96      	ldr	r3, [pc, #600]	; (801eea4 <_dtoa_r+0x644>)
 801ec4c:	2200      	movs	r2, #0
 801ec4e:	4640      	mov	r0, r8
 801ec50:	4649      	mov	r1, r9
 801ec52:	f7e1 ff43 	bl	8000adc <__aeabi_dcmplt>
 801ec56:	2800      	cmp	r0, #0
 801ec58:	d07b      	beq.n	801ed52 <_dtoa_r+0x4f2>
 801ec5a:	9b04      	ldr	r3, [sp, #16]
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	d078      	beq.n	801ed52 <_dtoa_r+0x4f2>
 801ec60:	9b01      	ldr	r3, [sp, #4]
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	dd39      	ble.n	801ecda <_dtoa_r+0x47a>
 801ec66:	4b90      	ldr	r3, [pc, #576]	; (801eea8 <_dtoa_r+0x648>)
 801ec68:	2200      	movs	r2, #0
 801ec6a:	4640      	mov	r0, r8
 801ec6c:	4649      	mov	r1, r9
 801ec6e:	f7e1 fcc3 	bl	80005f8 <__aeabi_dmul>
 801ec72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec76:	9e01      	ldr	r6, [sp, #4]
 801ec78:	f10b 37ff 	add.w	r7, fp, #4294967295
 801ec7c:	3501      	adds	r5, #1
 801ec7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801ec82:	4628      	mov	r0, r5
 801ec84:	f7e1 fc4e 	bl	8000524 <__aeabi_i2d>
 801ec88:	4642      	mov	r2, r8
 801ec8a:	464b      	mov	r3, r9
 801ec8c:	f7e1 fcb4 	bl	80005f8 <__aeabi_dmul>
 801ec90:	4b86      	ldr	r3, [pc, #536]	; (801eeac <_dtoa_r+0x64c>)
 801ec92:	2200      	movs	r2, #0
 801ec94:	f7e1 fafa 	bl	800028c <__adddf3>
 801ec98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801ec9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eca0:	9303      	str	r3, [sp, #12]
 801eca2:	2e00      	cmp	r6, #0
 801eca4:	d158      	bne.n	801ed58 <_dtoa_r+0x4f8>
 801eca6:	4b82      	ldr	r3, [pc, #520]	; (801eeb0 <_dtoa_r+0x650>)
 801eca8:	2200      	movs	r2, #0
 801ecaa:	4640      	mov	r0, r8
 801ecac:	4649      	mov	r1, r9
 801ecae:	f7e1 faeb 	bl	8000288 <__aeabi_dsub>
 801ecb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ecb6:	4680      	mov	r8, r0
 801ecb8:	4689      	mov	r9, r1
 801ecba:	f7e1 ff2d 	bl	8000b18 <__aeabi_dcmpgt>
 801ecbe:	2800      	cmp	r0, #0
 801ecc0:	f040 8296 	bne.w	801f1f0 <_dtoa_r+0x990>
 801ecc4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801ecc8:	4640      	mov	r0, r8
 801ecca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ecce:	4649      	mov	r1, r9
 801ecd0:	f7e1 ff04 	bl	8000adc <__aeabi_dcmplt>
 801ecd4:	2800      	cmp	r0, #0
 801ecd6:	f040 8289 	bne.w	801f1ec <_dtoa_r+0x98c>
 801ecda:	ed8d 8b02 	vstr	d8, [sp, #8]
 801ecde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	f2c0 814e 	blt.w	801ef82 <_dtoa_r+0x722>
 801ece6:	f1bb 0f0e 	cmp.w	fp, #14
 801ecea:	f300 814a 	bgt.w	801ef82 <_dtoa_r+0x722>
 801ecee:	4b6b      	ldr	r3, [pc, #428]	; (801ee9c <_dtoa_r+0x63c>)
 801ecf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ecf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ecf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ecfa:	2b00      	cmp	r3, #0
 801ecfc:	f280 80dc 	bge.w	801eeb8 <_dtoa_r+0x658>
 801ed00:	9b04      	ldr	r3, [sp, #16]
 801ed02:	2b00      	cmp	r3, #0
 801ed04:	f300 80d8 	bgt.w	801eeb8 <_dtoa_r+0x658>
 801ed08:	f040 826f 	bne.w	801f1ea <_dtoa_r+0x98a>
 801ed0c:	4b68      	ldr	r3, [pc, #416]	; (801eeb0 <_dtoa_r+0x650>)
 801ed0e:	2200      	movs	r2, #0
 801ed10:	4640      	mov	r0, r8
 801ed12:	4649      	mov	r1, r9
 801ed14:	f7e1 fc70 	bl	80005f8 <__aeabi_dmul>
 801ed18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ed1c:	f7e1 fef2 	bl	8000b04 <__aeabi_dcmpge>
 801ed20:	9e04      	ldr	r6, [sp, #16]
 801ed22:	4637      	mov	r7, r6
 801ed24:	2800      	cmp	r0, #0
 801ed26:	f040 8245 	bne.w	801f1b4 <_dtoa_r+0x954>
 801ed2a:	9d00      	ldr	r5, [sp, #0]
 801ed2c:	2331      	movs	r3, #49	; 0x31
 801ed2e:	f805 3b01 	strb.w	r3, [r5], #1
 801ed32:	f10b 0b01 	add.w	fp, fp, #1
 801ed36:	e241      	b.n	801f1bc <_dtoa_r+0x95c>
 801ed38:	07f2      	lsls	r2, r6, #31
 801ed3a:	d505      	bpl.n	801ed48 <_dtoa_r+0x4e8>
 801ed3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ed40:	f7e1 fc5a 	bl	80005f8 <__aeabi_dmul>
 801ed44:	3501      	adds	r5, #1
 801ed46:	2301      	movs	r3, #1
 801ed48:	1076      	asrs	r6, r6, #1
 801ed4a:	3708      	adds	r7, #8
 801ed4c:	e773      	b.n	801ec36 <_dtoa_r+0x3d6>
 801ed4e:	2502      	movs	r5, #2
 801ed50:	e775      	b.n	801ec3e <_dtoa_r+0x3de>
 801ed52:	9e04      	ldr	r6, [sp, #16]
 801ed54:	465f      	mov	r7, fp
 801ed56:	e792      	b.n	801ec7e <_dtoa_r+0x41e>
 801ed58:	9900      	ldr	r1, [sp, #0]
 801ed5a:	4b50      	ldr	r3, [pc, #320]	; (801ee9c <_dtoa_r+0x63c>)
 801ed5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ed60:	4431      	add	r1, r6
 801ed62:	9102      	str	r1, [sp, #8]
 801ed64:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ed66:	eeb0 9a47 	vmov.f32	s18, s14
 801ed6a:	eef0 9a67 	vmov.f32	s19, s15
 801ed6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801ed72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ed76:	2900      	cmp	r1, #0
 801ed78:	d044      	beq.n	801ee04 <_dtoa_r+0x5a4>
 801ed7a:	494e      	ldr	r1, [pc, #312]	; (801eeb4 <_dtoa_r+0x654>)
 801ed7c:	2000      	movs	r0, #0
 801ed7e:	f7e1 fd65 	bl	800084c <__aeabi_ddiv>
 801ed82:	ec53 2b19 	vmov	r2, r3, d9
 801ed86:	f7e1 fa7f 	bl	8000288 <__aeabi_dsub>
 801ed8a:	9d00      	ldr	r5, [sp, #0]
 801ed8c:	ec41 0b19 	vmov	d9, r0, r1
 801ed90:	4649      	mov	r1, r9
 801ed92:	4640      	mov	r0, r8
 801ed94:	f7e1 fee0 	bl	8000b58 <__aeabi_d2iz>
 801ed98:	4606      	mov	r6, r0
 801ed9a:	f7e1 fbc3 	bl	8000524 <__aeabi_i2d>
 801ed9e:	4602      	mov	r2, r0
 801eda0:	460b      	mov	r3, r1
 801eda2:	4640      	mov	r0, r8
 801eda4:	4649      	mov	r1, r9
 801eda6:	f7e1 fa6f 	bl	8000288 <__aeabi_dsub>
 801edaa:	3630      	adds	r6, #48	; 0x30
 801edac:	f805 6b01 	strb.w	r6, [r5], #1
 801edb0:	ec53 2b19 	vmov	r2, r3, d9
 801edb4:	4680      	mov	r8, r0
 801edb6:	4689      	mov	r9, r1
 801edb8:	f7e1 fe90 	bl	8000adc <__aeabi_dcmplt>
 801edbc:	2800      	cmp	r0, #0
 801edbe:	d164      	bne.n	801ee8a <_dtoa_r+0x62a>
 801edc0:	4642      	mov	r2, r8
 801edc2:	464b      	mov	r3, r9
 801edc4:	4937      	ldr	r1, [pc, #220]	; (801eea4 <_dtoa_r+0x644>)
 801edc6:	2000      	movs	r0, #0
 801edc8:	f7e1 fa5e 	bl	8000288 <__aeabi_dsub>
 801edcc:	ec53 2b19 	vmov	r2, r3, d9
 801edd0:	f7e1 fe84 	bl	8000adc <__aeabi_dcmplt>
 801edd4:	2800      	cmp	r0, #0
 801edd6:	f040 80b6 	bne.w	801ef46 <_dtoa_r+0x6e6>
 801edda:	9b02      	ldr	r3, [sp, #8]
 801eddc:	429d      	cmp	r5, r3
 801edde:	f43f af7c 	beq.w	801ecda <_dtoa_r+0x47a>
 801ede2:	4b31      	ldr	r3, [pc, #196]	; (801eea8 <_dtoa_r+0x648>)
 801ede4:	ec51 0b19 	vmov	r0, r1, d9
 801ede8:	2200      	movs	r2, #0
 801edea:	f7e1 fc05 	bl	80005f8 <__aeabi_dmul>
 801edee:	4b2e      	ldr	r3, [pc, #184]	; (801eea8 <_dtoa_r+0x648>)
 801edf0:	ec41 0b19 	vmov	d9, r0, r1
 801edf4:	2200      	movs	r2, #0
 801edf6:	4640      	mov	r0, r8
 801edf8:	4649      	mov	r1, r9
 801edfa:	f7e1 fbfd 	bl	80005f8 <__aeabi_dmul>
 801edfe:	4680      	mov	r8, r0
 801ee00:	4689      	mov	r9, r1
 801ee02:	e7c5      	b.n	801ed90 <_dtoa_r+0x530>
 801ee04:	ec51 0b17 	vmov	r0, r1, d7
 801ee08:	f7e1 fbf6 	bl	80005f8 <__aeabi_dmul>
 801ee0c:	9b02      	ldr	r3, [sp, #8]
 801ee0e:	9d00      	ldr	r5, [sp, #0]
 801ee10:	930f      	str	r3, [sp, #60]	; 0x3c
 801ee12:	ec41 0b19 	vmov	d9, r0, r1
 801ee16:	4649      	mov	r1, r9
 801ee18:	4640      	mov	r0, r8
 801ee1a:	f7e1 fe9d 	bl	8000b58 <__aeabi_d2iz>
 801ee1e:	4606      	mov	r6, r0
 801ee20:	f7e1 fb80 	bl	8000524 <__aeabi_i2d>
 801ee24:	3630      	adds	r6, #48	; 0x30
 801ee26:	4602      	mov	r2, r0
 801ee28:	460b      	mov	r3, r1
 801ee2a:	4640      	mov	r0, r8
 801ee2c:	4649      	mov	r1, r9
 801ee2e:	f7e1 fa2b 	bl	8000288 <__aeabi_dsub>
 801ee32:	f805 6b01 	strb.w	r6, [r5], #1
 801ee36:	9b02      	ldr	r3, [sp, #8]
 801ee38:	429d      	cmp	r5, r3
 801ee3a:	4680      	mov	r8, r0
 801ee3c:	4689      	mov	r9, r1
 801ee3e:	f04f 0200 	mov.w	r2, #0
 801ee42:	d124      	bne.n	801ee8e <_dtoa_r+0x62e>
 801ee44:	4b1b      	ldr	r3, [pc, #108]	; (801eeb4 <_dtoa_r+0x654>)
 801ee46:	ec51 0b19 	vmov	r0, r1, d9
 801ee4a:	f7e1 fa1f 	bl	800028c <__adddf3>
 801ee4e:	4602      	mov	r2, r0
 801ee50:	460b      	mov	r3, r1
 801ee52:	4640      	mov	r0, r8
 801ee54:	4649      	mov	r1, r9
 801ee56:	f7e1 fe5f 	bl	8000b18 <__aeabi_dcmpgt>
 801ee5a:	2800      	cmp	r0, #0
 801ee5c:	d173      	bne.n	801ef46 <_dtoa_r+0x6e6>
 801ee5e:	ec53 2b19 	vmov	r2, r3, d9
 801ee62:	4914      	ldr	r1, [pc, #80]	; (801eeb4 <_dtoa_r+0x654>)
 801ee64:	2000      	movs	r0, #0
 801ee66:	f7e1 fa0f 	bl	8000288 <__aeabi_dsub>
 801ee6a:	4602      	mov	r2, r0
 801ee6c:	460b      	mov	r3, r1
 801ee6e:	4640      	mov	r0, r8
 801ee70:	4649      	mov	r1, r9
 801ee72:	f7e1 fe33 	bl	8000adc <__aeabi_dcmplt>
 801ee76:	2800      	cmp	r0, #0
 801ee78:	f43f af2f 	beq.w	801ecda <_dtoa_r+0x47a>
 801ee7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ee7e:	1e6b      	subs	r3, r5, #1
 801ee80:	930f      	str	r3, [sp, #60]	; 0x3c
 801ee82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ee86:	2b30      	cmp	r3, #48	; 0x30
 801ee88:	d0f8      	beq.n	801ee7c <_dtoa_r+0x61c>
 801ee8a:	46bb      	mov	fp, r7
 801ee8c:	e04a      	b.n	801ef24 <_dtoa_r+0x6c4>
 801ee8e:	4b06      	ldr	r3, [pc, #24]	; (801eea8 <_dtoa_r+0x648>)
 801ee90:	f7e1 fbb2 	bl	80005f8 <__aeabi_dmul>
 801ee94:	4680      	mov	r8, r0
 801ee96:	4689      	mov	r9, r1
 801ee98:	e7bd      	b.n	801ee16 <_dtoa_r+0x5b6>
 801ee9a:	bf00      	nop
 801ee9c:	08022a00 	.word	0x08022a00
 801eea0:	080229d8 	.word	0x080229d8
 801eea4:	3ff00000 	.word	0x3ff00000
 801eea8:	40240000 	.word	0x40240000
 801eeac:	401c0000 	.word	0x401c0000
 801eeb0:	40140000 	.word	0x40140000
 801eeb4:	3fe00000 	.word	0x3fe00000
 801eeb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801eebc:	9d00      	ldr	r5, [sp, #0]
 801eebe:	4642      	mov	r2, r8
 801eec0:	464b      	mov	r3, r9
 801eec2:	4630      	mov	r0, r6
 801eec4:	4639      	mov	r1, r7
 801eec6:	f7e1 fcc1 	bl	800084c <__aeabi_ddiv>
 801eeca:	f7e1 fe45 	bl	8000b58 <__aeabi_d2iz>
 801eece:	9001      	str	r0, [sp, #4]
 801eed0:	f7e1 fb28 	bl	8000524 <__aeabi_i2d>
 801eed4:	4642      	mov	r2, r8
 801eed6:	464b      	mov	r3, r9
 801eed8:	f7e1 fb8e 	bl	80005f8 <__aeabi_dmul>
 801eedc:	4602      	mov	r2, r0
 801eede:	460b      	mov	r3, r1
 801eee0:	4630      	mov	r0, r6
 801eee2:	4639      	mov	r1, r7
 801eee4:	f7e1 f9d0 	bl	8000288 <__aeabi_dsub>
 801eee8:	9e01      	ldr	r6, [sp, #4]
 801eeea:	9f04      	ldr	r7, [sp, #16]
 801eeec:	3630      	adds	r6, #48	; 0x30
 801eeee:	f805 6b01 	strb.w	r6, [r5], #1
 801eef2:	9e00      	ldr	r6, [sp, #0]
 801eef4:	1bae      	subs	r6, r5, r6
 801eef6:	42b7      	cmp	r7, r6
 801eef8:	4602      	mov	r2, r0
 801eefa:	460b      	mov	r3, r1
 801eefc:	d134      	bne.n	801ef68 <_dtoa_r+0x708>
 801eefe:	f7e1 f9c5 	bl	800028c <__adddf3>
 801ef02:	4642      	mov	r2, r8
 801ef04:	464b      	mov	r3, r9
 801ef06:	4606      	mov	r6, r0
 801ef08:	460f      	mov	r7, r1
 801ef0a:	f7e1 fe05 	bl	8000b18 <__aeabi_dcmpgt>
 801ef0e:	b9c8      	cbnz	r0, 801ef44 <_dtoa_r+0x6e4>
 801ef10:	4642      	mov	r2, r8
 801ef12:	464b      	mov	r3, r9
 801ef14:	4630      	mov	r0, r6
 801ef16:	4639      	mov	r1, r7
 801ef18:	f7e1 fdd6 	bl	8000ac8 <__aeabi_dcmpeq>
 801ef1c:	b110      	cbz	r0, 801ef24 <_dtoa_r+0x6c4>
 801ef1e:	9b01      	ldr	r3, [sp, #4]
 801ef20:	07db      	lsls	r3, r3, #31
 801ef22:	d40f      	bmi.n	801ef44 <_dtoa_r+0x6e4>
 801ef24:	4651      	mov	r1, sl
 801ef26:	4620      	mov	r0, r4
 801ef28:	f000 fe82 	bl	801fc30 <_Bfree>
 801ef2c:	2300      	movs	r3, #0
 801ef2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ef30:	702b      	strb	r3, [r5, #0]
 801ef32:	f10b 0301 	add.w	r3, fp, #1
 801ef36:	6013      	str	r3, [r2, #0]
 801ef38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ef3a:	2b00      	cmp	r3, #0
 801ef3c:	f43f ace2 	beq.w	801e904 <_dtoa_r+0xa4>
 801ef40:	601d      	str	r5, [r3, #0]
 801ef42:	e4df      	b.n	801e904 <_dtoa_r+0xa4>
 801ef44:	465f      	mov	r7, fp
 801ef46:	462b      	mov	r3, r5
 801ef48:	461d      	mov	r5, r3
 801ef4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ef4e:	2a39      	cmp	r2, #57	; 0x39
 801ef50:	d106      	bne.n	801ef60 <_dtoa_r+0x700>
 801ef52:	9a00      	ldr	r2, [sp, #0]
 801ef54:	429a      	cmp	r2, r3
 801ef56:	d1f7      	bne.n	801ef48 <_dtoa_r+0x6e8>
 801ef58:	9900      	ldr	r1, [sp, #0]
 801ef5a:	2230      	movs	r2, #48	; 0x30
 801ef5c:	3701      	adds	r7, #1
 801ef5e:	700a      	strb	r2, [r1, #0]
 801ef60:	781a      	ldrb	r2, [r3, #0]
 801ef62:	3201      	adds	r2, #1
 801ef64:	701a      	strb	r2, [r3, #0]
 801ef66:	e790      	b.n	801ee8a <_dtoa_r+0x62a>
 801ef68:	4ba3      	ldr	r3, [pc, #652]	; (801f1f8 <_dtoa_r+0x998>)
 801ef6a:	2200      	movs	r2, #0
 801ef6c:	f7e1 fb44 	bl	80005f8 <__aeabi_dmul>
 801ef70:	2200      	movs	r2, #0
 801ef72:	2300      	movs	r3, #0
 801ef74:	4606      	mov	r6, r0
 801ef76:	460f      	mov	r7, r1
 801ef78:	f7e1 fda6 	bl	8000ac8 <__aeabi_dcmpeq>
 801ef7c:	2800      	cmp	r0, #0
 801ef7e:	d09e      	beq.n	801eebe <_dtoa_r+0x65e>
 801ef80:	e7d0      	b.n	801ef24 <_dtoa_r+0x6c4>
 801ef82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef84:	2a00      	cmp	r2, #0
 801ef86:	f000 80ca 	beq.w	801f11e <_dtoa_r+0x8be>
 801ef8a:	9a07      	ldr	r2, [sp, #28]
 801ef8c:	2a01      	cmp	r2, #1
 801ef8e:	f300 80ad 	bgt.w	801f0ec <_dtoa_r+0x88c>
 801ef92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ef94:	2a00      	cmp	r2, #0
 801ef96:	f000 80a5 	beq.w	801f0e4 <_dtoa_r+0x884>
 801ef9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ef9e:	9e08      	ldr	r6, [sp, #32]
 801efa0:	9d05      	ldr	r5, [sp, #20]
 801efa2:	9a05      	ldr	r2, [sp, #20]
 801efa4:	441a      	add	r2, r3
 801efa6:	9205      	str	r2, [sp, #20]
 801efa8:	9a06      	ldr	r2, [sp, #24]
 801efaa:	2101      	movs	r1, #1
 801efac:	441a      	add	r2, r3
 801efae:	4620      	mov	r0, r4
 801efb0:	9206      	str	r2, [sp, #24]
 801efb2:	f000 ff3d 	bl	801fe30 <__i2b>
 801efb6:	4607      	mov	r7, r0
 801efb8:	b165      	cbz	r5, 801efd4 <_dtoa_r+0x774>
 801efba:	9b06      	ldr	r3, [sp, #24]
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	dd09      	ble.n	801efd4 <_dtoa_r+0x774>
 801efc0:	42ab      	cmp	r3, r5
 801efc2:	9a05      	ldr	r2, [sp, #20]
 801efc4:	bfa8      	it	ge
 801efc6:	462b      	movge	r3, r5
 801efc8:	1ad2      	subs	r2, r2, r3
 801efca:	9205      	str	r2, [sp, #20]
 801efcc:	9a06      	ldr	r2, [sp, #24]
 801efce:	1aed      	subs	r5, r5, r3
 801efd0:	1ad3      	subs	r3, r2, r3
 801efd2:	9306      	str	r3, [sp, #24]
 801efd4:	9b08      	ldr	r3, [sp, #32]
 801efd6:	b1f3      	cbz	r3, 801f016 <_dtoa_r+0x7b6>
 801efd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801efda:	2b00      	cmp	r3, #0
 801efdc:	f000 80a3 	beq.w	801f126 <_dtoa_r+0x8c6>
 801efe0:	2e00      	cmp	r6, #0
 801efe2:	dd10      	ble.n	801f006 <_dtoa_r+0x7a6>
 801efe4:	4639      	mov	r1, r7
 801efe6:	4632      	mov	r2, r6
 801efe8:	4620      	mov	r0, r4
 801efea:	f000 ffe1 	bl	801ffb0 <__pow5mult>
 801efee:	4652      	mov	r2, sl
 801eff0:	4601      	mov	r1, r0
 801eff2:	4607      	mov	r7, r0
 801eff4:	4620      	mov	r0, r4
 801eff6:	f000 ff31 	bl	801fe5c <__multiply>
 801effa:	4651      	mov	r1, sl
 801effc:	4680      	mov	r8, r0
 801effe:	4620      	mov	r0, r4
 801f000:	f000 fe16 	bl	801fc30 <_Bfree>
 801f004:	46c2      	mov	sl, r8
 801f006:	9b08      	ldr	r3, [sp, #32]
 801f008:	1b9a      	subs	r2, r3, r6
 801f00a:	d004      	beq.n	801f016 <_dtoa_r+0x7b6>
 801f00c:	4651      	mov	r1, sl
 801f00e:	4620      	mov	r0, r4
 801f010:	f000 ffce 	bl	801ffb0 <__pow5mult>
 801f014:	4682      	mov	sl, r0
 801f016:	2101      	movs	r1, #1
 801f018:	4620      	mov	r0, r4
 801f01a:	f000 ff09 	bl	801fe30 <__i2b>
 801f01e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f020:	2b00      	cmp	r3, #0
 801f022:	4606      	mov	r6, r0
 801f024:	f340 8081 	ble.w	801f12a <_dtoa_r+0x8ca>
 801f028:	461a      	mov	r2, r3
 801f02a:	4601      	mov	r1, r0
 801f02c:	4620      	mov	r0, r4
 801f02e:	f000 ffbf 	bl	801ffb0 <__pow5mult>
 801f032:	9b07      	ldr	r3, [sp, #28]
 801f034:	2b01      	cmp	r3, #1
 801f036:	4606      	mov	r6, r0
 801f038:	dd7a      	ble.n	801f130 <_dtoa_r+0x8d0>
 801f03a:	f04f 0800 	mov.w	r8, #0
 801f03e:	6933      	ldr	r3, [r6, #16]
 801f040:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f044:	6918      	ldr	r0, [r3, #16]
 801f046:	f000 fea5 	bl	801fd94 <__hi0bits>
 801f04a:	f1c0 0020 	rsb	r0, r0, #32
 801f04e:	9b06      	ldr	r3, [sp, #24]
 801f050:	4418      	add	r0, r3
 801f052:	f010 001f 	ands.w	r0, r0, #31
 801f056:	f000 8094 	beq.w	801f182 <_dtoa_r+0x922>
 801f05a:	f1c0 0320 	rsb	r3, r0, #32
 801f05e:	2b04      	cmp	r3, #4
 801f060:	f340 8085 	ble.w	801f16e <_dtoa_r+0x90e>
 801f064:	9b05      	ldr	r3, [sp, #20]
 801f066:	f1c0 001c 	rsb	r0, r0, #28
 801f06a:	4403      	add	r3, r0
 801f06c:	9305      	str	r3, [sp, #20]
 801f06e:	9b06      	ldr	r3, [sp, #24]
 801f070:	4403      	add	r3, r0
 801f072:	4405      	add	r5, r0
 801f074:	9306      	str	r3, [sp, #24]
 801f076:	9b05      	ldr	r3, [sp, #20]
 801f078:	2b00      	cmp	r3, #0
 801f07a:	dd05      	ble.n	801f088 <_dtoa_r+0x828>
 801f07c:	4651      	mov	r1, sl
 801f07e:	461a      	mov	r2, r3
 801f080:	4620      	mov	r0, r4
 801f082:	f000 ffef 	bl	8020064 <__lshift>
 801f086:	4682      	mov	sl, r0
 801f088:	9b06      	ldr	r3, [sp, #24]
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	dd05      	ble.n	801f09a <_dtoa_r+0x83a>
 801f08e:	4631      	mov	r1, r6
 801f090:	461a      	mov	r2, r3
 801f092:	4620      	mov	r0, r4
 801f094:	f000 ffe6 	bl	8020064 <__lshift>
 801f098:	4606      	mov	r6, r0
 801f09a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	d072      	beq.n	801f186 <_dtoa_r+0x926>
 801f0a0:	4631      	mov	r1, r6
 801f0a2:	4650      	mov	r0, sl
 801f0a4:	f001 f84a 	bl	802013c <__mcmp>
 801f0a8:	2800      	cmp	r0, #0
 801f0aa:	da6c      	bge.n	801f186 <_dtoa_r+0x926>
 801f0ac:	2300      	movs	r3, #0
 801f0ae:	4651      	mov	r1, sl
 801f0b0:	220a      	movs	r2, #10
 801f0b2:	4620      	mov	r0, r4
 801f0b4:	f000 fdde 	bl	801fc74 <__multadd>
 801f0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f0be:	4682      	mov	sl, r0
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	f000 81b0 	beq.w	801f426 <_dtoa_r+0xbc6>
 801f0c6:	2300      	movs	r3, #0
 801f0c8:	4639      	mov	r1, r7
 801f0ca:	220a      	movs	r2, #10
 801f0cc:	4620      	mov	r0, r4
 801f0ce:	f000 fdd1 	bl	801fc74 <__multadd>
 801f0d2:	9b01      	ldr	r3, [sp, #4]
 801f0d4:	2b00      	cmp	r3, #0
 801f0d6:	4607      	mov	r7, r0
 801f0d8:	f300 8096 	bgt.w	801f208 <_dtoa_r+0x9a8>
 801f0dc:	9b07      	ldr	r3, [sp, #28]
 801f0de:	2b02      	cmp	r3, #2
 801f0e0:	dc59      	bgt.n	801f196 <_dtoa_r+0x936>
 801f0e2:	e091      	b.n	801f208 <_dtoa_r+0x9a8>
 801f0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f0e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f0ea:	e758      	b.n	801ef9e <_dtoa_r+0x73e>
 801f0ec:	9b04      	ldr	r3, [sp, #16]
 801f0ee:	1e5e      	subs	r6, r3, #1
 801f0f0:	9b08      	ldr	r3, [sp, #32]
 801f0f2:	42b3      	cmp	r3, r6
 801f0f4:	bfbf      	itttt	lt
 801f0f6:	9b08      	ldrlt	r3, [sp, #32]
 801f0f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801f0fa:	9608      	strlt	r6, [sp, #32]
 801f0fc:	1af3      	sublt	r3, r6, r3
 801f0fe:	bfb4      	ite	lt
 801f100:	18d2      	addlt	r2, r2, r3
 801f102:	1b9e      	subge	r6, r3, r6
 801f104:	9b04      	ldr	r3, [sp, #16]
 801f106:	bfbc      	itt	lt
 801f108:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801f10a:	2600      	movlt	r6, #0
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	bfb7      	itett	lt
 801f110:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801f114:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801f118:	1a9d      	sublt	r5, r3, r2
 801f11a:	2300      	movlt	r3, #0
 801f11c:	e741      	b.n	801efa2 <_dtoa_r+0x742>
 801f11e:	9e08      	ldr	r6, [sp, #32]
 801f120:	9d05      	ldr	r5, [sp, #20]
 801f122:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f124:	e748      	b.n	801efb8 <_dtoa_r+0x758>
 801f126:	9a08      	ldr	r2, [sp, #32]
 801f128:	e770      	b.n	801f00c <_dtoa_r+0x7ac>
 801f12a:	9b07      	ldr	r3, [sp, #28]
 801f12c:	2b01      	cmp	r3, #1
 801f12e:	dc19      	bgt.n	801f164 <_dtoa_r+0x904>
 801f130:	9b02      	ldr	r3, [sp, #8]
 801f132:	b9bb      	cbnz	r3, 801f164 <_dtoa_r+0x904>
 801f134:	9b03      	ldr	r3, [sp, #12]
 801f136:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f13a:	b99b      	cbnz	r3, 801f164 <_dtoa_r+0x904>
 801f13c:	9b03      	ldr	r3, [sp, #12]
 801f13e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f142:	0d1b      	lsrs	r3, r3, #20
 801f144:	051b      	lsls	r3, r3, #20
 801f146:	b183      	cbz	r3, 801f16a <_dtoa_r+0x90a>
 801f148:	9b05      	ldr	r3, [sp, #20]
 801f14a:	3301      	adds	r3, #1
 801f14c:	9305      	str	r3, [sp, #20]
 801f14e:	9b06      	ldr	r3, [sp, #24]
 801f150:	3301      	adds	r3, #1
 801f152:	9306      	str	r3, [sp, #24]
 801f154:	f04f 0801 	mov.w	r8, #1
 801f158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	f47f af6f 	bne.w	801f03e <_dtoa_r+0x7de>
 801f160:	2001      	movs	r0, #1
 801f162:	e774      	b.n	801f04e <_dtoa_r+0x7ee>
 801f164:	f04f 0800 	mov.w	r8, #0
 801f168:	e7f6      	b.n	801f158 <_dtoa_r+0x8f8>
 801f16a:	4698      	mov	r8, r3
 801f16c:	e7f4      	b.n	801f158 <_dtoa_r+0x8f8>
 801f16e:	d082      	beq.n	801f076 <_dtoa_r+0x816>
 801f170:	9a05      	ldr	r2, [sp, #20]
 801f172:	331c      	adds	r3, #28
 801f174:	441a      	add	r2, r3
 801f176:	9205      	str	r2, [sp, #20]
 801f178:	9a06      	ldr	r2, [sp, #24]
 801f17a:	441a      	add	r2, r3
 801f17c:	441d      	add	r5, r3
 801f17e:	9206      	str	r2, [sp, #24]
 801f180:	e779      	b.n	801f076 <_dtoa_r+0x816>
 801f182:	4603      	mov	r3, r0
 801f184:	e7f4      	b.n	801f170 <_dtoa_r+0x910>
 801f186:	9b04      	ldr	r3, [sp, #16]
 801f188:	2b00      	cmp	r3, #0
 801f18a:	dc37      	bgt.n	801f1fc <_dtoa_r+0x99c>
 801f18c:	9b07      	ldr	r3, [sp, #28]
 801f18e:	2b02      	cmp	r3, #2
 801f190:	dd34      	ble.n	801f1fc <_dtoa_r+0x99c>
 801f192:	9b04      	ldr	r3, [sp, #16]
 801f194:	9301      	str	r3, [sp, #4]
 801f196:	9b01      	ldr	r3, [sp, #4]
 801f198:	b963      	cbnz	r3, 801f1b4 <_dtoa_r+0x954>
 801f19a:	4631      	mov	r1, r6
 801f19c:	2205      	movs	r2, #5
 801f19e:	4620      	mov	r0, r4
 801f1a0:	f000 fd68 	bl	801fc74 <__multadd>
 801f1a4:	4601      	mov	r1, r0
 801f1a6:	4606      	mov	r6, r0
 801f1a8:	4650      	mov	r0, sl
 801f1aa:	f000 ffc7 	bl	802013c <__mcmp>
 801f1ae:	2800      	cmp	r0, #0
 801f1b0:	f73f adbb 	bgt.w	801ed2a <_dtoa_r+0x4ca>
 801f1b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f1b6:	9d00      	ldr	r5, [sp, #0]
 801f1b8:	ea6f 0b03 	mvn.w	fp, r3
 801f1bc:	f04f 0800 	mov.w	r8, #0
 801f1c0:	4631      	mov	r1, r6
 801f1c2:	4620      	mov	r0, r4
 801f1c4:	f000 fd34 	bl	801fc30 <_Bfree>
 801f1c8:	2f00      	cmp	r7, #0
 801f1ca:	f43f aeab 	beq.w	801ef24 <_dtoa_r+0x6c4>
 801f1ce:	f1b8 0f00 	cmp.w	r8, #0
 801f1d2:	d005      	beq.n	801f1e0 <_dtoa_r+0x980>
 801f1d4:	45b8      	cmp	r8, r7
 801f1d6:	d003      	beq.n	801f1e0 <_dtoa_r+0x980>
 801f1d8:	4641      	mov	r1, r8
 801f1da:	4620      	mov	r0, r4
 801f1dc:	f000 fd28 	bl	801fc30 <_Bfree>
 801f1e0:	4639      	mov	r1, r7
 801f1e2:	4620      	mov	r0, r4
 801f1e4:	f000 fd24 	bl	801fc30 <_Bfree>
 801f1e8:	e69c      	b.n	801ef24 <_dtoa_r+0x6c4>
 801f1ea:	2600      	movs	r6, #0
 801f1ec:	4637      	mov	r7, r6
 801f1ee:	e7e1      	b.n	801f1b4 <_dtoa_r+0x954>
 801f1f0:	46bb      	mov	fp, r7
 801f1f2:	4637      	mov	r7, r6
 801f1f4:	e599      	b.n	801ed2a <_dtoa_r+0x4ca>
 801f1f6:	bf00      	nop
 801f1f8:	40240000 	.word	0x40240000
 801f1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1fe:	2b00      	cmp	r3, #0
 801f200:	f000 80c8 	beq.w	801f394 <_dtoa_r+0xb34>
 801f204:	9b04      	ldr	r3, [sp, #16]
 801f206:	9301      	str	r3, [sp, #4]
 801f208:	2d00      	cmp	r5, #0
 801f20a:	dd05      	ble.n	801f218 <_dtoa_r+0x9b8>
 801f20c:	4639      	mov	r1, r7
 801f20e:	462a      	mov	r2, r5
 801f210:	4620      	mov	r0, r4
 801f212:	f000 ff27 	bl	8020064 <__lshift>
 801f216:	4607      	mov	r7, r0
 801f218:	f1b8 0f00 	cmp.w	r8, #0
 801f21c:	d05b      	beq.n	801f2d6 <_dtoa_r+0xa76>
 801f21e:	6879      	ldr	r1, [r7, #4]
 801f220:	4620      	mov	r0, r4
 801f222:	f000 fcc5 	bl	801fbb0 <_Balloc>
 801f226:	4605      	mov	r5, r0
 801f228:	b928      	cbnz	r0, 801f236 <_dtoa_r+0x9d6>
 801f22a:	4b83      	ldr	r3, [pc, #524]	; (801f438 <_dtoa_r+0xbd8>)
 801f22c:	4602      	mov	r2, r0
 801f22e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801f232:	f7ff bb2e 	b.w	801e892 <_dtoa_r+0x32>
 801f236:	693a      	ldr	r2, [r7, #16]
 801f238:	3202      	adds	r2, #2
 801f23a:	0092      	lsls	r2, r2, #2
 801f23c:	f107 010c 	add.w	r1, r7, #12
 801f240:	300c      	adds	r0, #12
 801f242:	f7ff fa65 	bl	801e710 <memcpy>
 801f246:	2201      	movs	r2, #1
 801f248:	4629      	mov	r1, r5
 801f24a:	4620      	mov	r0, r4
 801f24c:	f000 ff0a 	bl	8020064 <__lshift>
 801f250:	9b00      	ldr	r3, [sp, #0]
 801f252:	3301      	adds	r3, #1
 801f254:	9304      	str	r3, [sp, #16]
 801f256:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f25a:	4413      	add	r3, r2
 801f25c:	9308      	str	r3, [sp, #32]
 801f25e:	9b02      	ldr	r3, [sp, #8]
 801f260:	f003 0301 	and.w	r3, r3, #1
 801f264:	46b8      	mov	r8, r7
 801f266:	9306      	str	r3, [sp, #24]
 801f268:	4607      	mov	r7, r0
 801f26a:	9b04      	ldr	r3, [sp, #16]
 801f26c:	4631      	mov	r1, r6
 801f26e:	3b01      	subs	r3, #1
 801f270:	4650      	mov	r0, sl
 801f272:	9301      	str	r3, [sp, #4]
 801f274:	f7ff fa6a 	bl	801e74c <quorem>
 801f278:	4641      	mov	r1, r8
 801f27a:	9002      	str	r0, [sp, #8]
 801f27c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801f280:	4650      	mov	r0, sl
 801f282:	f000 ff5b 	bl	802013c <__mcmp>
 801f286:	463a      	mov	r2, r7
 801f288:	9005      	str	r0, [sp, #20]
 801f28a:	4631      	mov	r1, r6
 801f28c:	4620      	mov	r0, r4
 801f28e:	f000 ff71 	bl	8020174 <__mdiff>
 801f292:	68c2      	ldr	r2, [r0, #12]
 801f294:	4605      	mov	r5, r0
 801f296:	bb02      	cbnz	r2, 801f2da <_dtoa_r+0xa7a>
 801f298:	4601      	mov	r1, r0
 801f29a:	4650      	mov	r0, sl
 801f29c:	f000 ff4e 	bl	802013c <__mcmp>
 801f2a0:	4602      	mov	r2, r0
 801f2a2:	4629      	mov	r1, r5
 801f2a4:	4620      	mov	r0, r4
 801f2a6:	9209      	str	r2, [sp, #36]	; 0x24
 801f2a8:	f000 fcc2 	bl	801fc30 <_Bfree>
 801f2ac:	9b07      	ldr	r3, [sp, #28]
 801f2ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f2b0:	9d04      	ldr	r5, [sp, #16]
 801f2b2:	ea43 0102 	orr.w	r1, r3, r2
 801f2b6:	9b06      	ldr	r3, [sp, #24]
 801f2b8:	4319      	orrs	r1, r3
 801f2ba:	d110      	bne.n	801f2de <_dtoa_r+0xa7e>
 801f2bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801f2c0:	d029      	beq.n	801f316 <_dtoa_r+0xab6>
 801f2c2:	9b05      	ldr	r3, [sp, #20]
 801f2c4:	2b00      	cmp	r3, #0
 801f2c6:	dd02      	ble.n	801f2ce <_dtoa_r+0xa6e>
 801f2c8:	9b02      	ldr	r3, [sp, #8]
 801f2ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801f2ce:	9b01      	ldr	r3, [sp, #4]
 801f2d0:	f883 9000 	strb.w	r9, [r3]
 801f2d4:	e774      	b.n	801f1c0 <_dtoa_r+0x960>
 801f2d6:	4638      	mov	r0, r7
 801f2d8:	e7ba      	b.n	801f250 <_dtoa_r+0x9f0>
 801f2da:	2201      	movs	r2, #1
 801f2dc:	e7e1      	b.n	801f2a2 <_dtoa_r+0xa42>
 801f2de:	9b05      	ldr	r3, [sp, #20]
 801f2e0:	2b00      	cmp	r3, #0
 801f2e2:	db04      	blt.n	801f2ee <_dtoa_r+0xa8e>
 801f2e4:	9907      	ldr	r1, [sp, #28]
 801f2e6:	430b      	orrs	r3, r1
 801f2e8:	9906      	ldr	r1, [sp, #24]
 801f2ea:	430b      	orrs	r3, r1
 801f2ec:	d120      	bne.n	801f330 <_dtoa_r+0xad0>
 801f2ee:	2a00      	cmp	r2, #0
 801f2f0:	dded      	ble.n	801f2ce <_dtoa_r+0xa6e>
 801f2f2:	4651      	mov	r1, sl
 801f2f4:	2201      	movs	r2, #1
 801f2f6:	4620      	mov	r0, r4
 801f2f8:	f000 feb4 	bl	8020064 <__lshift>
 801f2fc:	4631      	mov	r1, r6
 801f2fe:	4682      	mov	sl, r0
 801f300:	f000 ff1c 	bl	802013c <__mcmp>
 801f304:	2800      	cmp	r0, #0
 801f306:	dc03      	bgt.n	801f310 <_dtoa_r+0xab0>
 801f308:	d1e1      	bne.n	801f2ce <_dtoa_r+0xa6e>
 801f30a:	f019 0f01 	tst.w	r9, #1
 801f30e:	d0de      	beq.n	801f2ce <_dtoa_r+0xa6e>
 801f310:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801f314:	d1d8      	bne.n	801f2c8 <_dtoa_r+0xa68>
 801f316:	9a01      	ldr	r2, [sp, #4]
 801f318:	2339      	movs	r3, #57	; 0x39
 801f31a:	7013      	strb	r3, [r2, #0]
 801f31c:	462b      	mov	r3, r5
 801f31e:	461d      	mov	r5, r3
 801f320:	3b01      	subs	r3, #1
 801f322:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f326:	2a39      	cmp	r2, #57	; 0x39
 801f328:	d06c      	beq.n	801f404 <_dtoa_r+0xba4>
 801f32a:	3201      	adds	r2, #1
 801f32c:	701a      	strb	r2, [r3, #0]
 801f32e:	e747      	b.n	801f1c0 <_dtoa_r+0x960>
 801f330:	2a00      	cmp	r2, #0
 801f332:	dd07      	ble.n	801f344 <_dtoa_r+0xae4>
 801f334:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801f338:	d0ed      	beq.n	801f316 <_dtoa_r+0xab6>
 801f33a:	9a01      	ldr	r2, [sp, #4]
 801f33c:	f109 0301 	add.w	r3, r9, #1
 801f340:	7013      	strb	r3, [r2, #0]
 801f342:	e73d      	b.n	801f1c0 <_dtoa_r+0x960>
 801f344:	9b04      	ldr	r3, [sp, #16]
 801f346:	9a08      	ldr	r2, [sp, #32]
 801f348:	f803 9c01 	strb.w	r9, [r3, #-1]
 801f34c:	4293      	cmp	r3, r2
 801f34e:	d043      	beq.n	801f3d8 <_dtoa_r+0xb78>
 801f350:	4651      	mov	r1, sl
 801f352:	2300      	movs	r3, #0
 801f354:	220a      	movs	r2, #10
 801f356:	4620      	mov	r0, r4
 801f358:	f000 fc8c 	bl	801fc74 <__multadd>
 801f35c:	45b8      	cmp	r8, r7
 801f35e:	4682      	mov	sl, r0
 801f360:	f04f 0300 	mov.w	r3, #0
 801f364:	f04f 020a 	mov.w	r2, #10
 801f368:	4641      	mov	r1, r8
 801f36a:	4620      	mov	r0, r4
 801f36c:	d107      	bne.n	801f37e <_dtoa_r+0xb1e>
 801f36e:	f000 fc81 	bl	801fc74 <__multadd>
 801f372:	4680      	mov	r8, r0
 801f374:	4607      	mov	r7, r0
 801f376:	9b04      	ldr	r3, [sp, #16]
 801f378:	3301      	adds	r3, #1
 801f37a:	9304      	str	r3, [sp, #16]
 801f37c:	e775      	b.n	801f26a <_dtoa_r+0xa0a>
 801f37e:	f000 fc79 	bl	801fc74 <__multadd>
 801f382:	4639      	mov	r1, r7
 801f384:	4680      	mov	r8, r0
 801f386:	2300      	movs	r3, #0
 801f388:	220a      	movs	r2, #10
 801f38a:	4620      	mov	r0, r4
 801f38c:	f000 fc72 	bl	801fc74 <__multadd>
 801f390:	4607      	mov	r7, r0
 801f392:	e7f0      	b.n	801f376 <_dtoa_r+0xb16>
 801f394:	9b04      	ldr	r3, [sp, #16]
 801f396:	9301      	str	r3, [sp, #4]
 801f398:	9d00      	ldr	r5, [sp, #0]
 801f39a:	4631      	mov	r1, r6
 801f39c:	4650      	mov	r0, sl
 801f39e:	f7ff f9d5 	bl	801e74c <quorem>
 801f3a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801f3a6:	9b00      	ldr	r3, [sp, #0]
 801f3a8:	f805 9b01 	strb.w	r9, [r5], #1
 801f3ac:	1aea      	subs	r2, r5, r3
 801f3ae:	9b01      	ldr	r3, [sp, #4]
 801f3b0:	4293      	cmp	r3, r2
 801f3b2:	dd07      	ble.n	801f3c4 <_dtoa_r+0xb64>
 801f3b4:	4651      	mov	r1, sl
 801f3b6:	2300      	movs	r3, #0
 801f3b8:	220a      	movs	r2, #10
 801f3ba:	4620      	mov	r0, r4
 801f3bc:	f000 fc5a 	bl	801fc74 <__multadd>
 801f3c0:	4682      	mov	sl, r0
 801f3c2:	e7ea      	b.n	801f39a <_dtoa_r+0xb3a>
 801f3c4:	9b01      	ldr	r3, [sp, #4]
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	bfc8      	it	gt
 801f3ca:	461d      	movgt	r5, r3
 801f3cc:	9b00      	ldr	r3, [sp, #0]
 801f3ce:	bfd8      	it	le
 801f3d0:	2501      	movle	r5, #1
 801f3d2:	441d      	add	r5, r3
 801f3d4:	f04f 0800 	mov.w	r8, #0
 801f3d8:	4651      	mov	r1, sl
 801f3da:	2201      	movs	r2, #1
 801f3dc:	4620      	mov	r0, r4
 801f3de:	f000 fe41 	bl	8020064 <__lshift>
 801f3e2:	4631      	mov	r1, r6
 801f3e4:	4682      	mov	sl, r0
 801f3e6:	f000 fea9 	bl	802013c <__mcmp>
 801f3ea:	2800      	cmp	r0, #0
 801f3ec:	dc96      	bgt.n	801f31c <_dtoa_r+0xabc>
 801f3ee:	d102      	bne.n	801f3f6 <_dtoa_r+0xb96>
 801f3f0:	f019 0f01 	tst.w	r9, #1
 801f3f4:	d192      	bne.n	801f31c <_dtoa_r+0xabc>
 801f3f6:	462b      	mov	r3, r5
 801f3f8:	461d      	mov	r5, r3
 801f3fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f3fe:	2a30      	cmp	r2, #48	; 0x30
 801f400:	d0fa      	beq.n	801f3f8 <_dtoa_r+0xb98>
 801f402:	e6dd      	b.n	801f1c0 <_dtoa_r+0x960>
 801f404:	9a00      	ldr	r2, [sp, #0]
 801f406:	429a      	cmp	r2, r3
 801f408:	d189      	bne.n	801f31e <_dtoa_r+0xabe>
 801f40a:	f10b 0b01 	add.w	fp, fp, #1
 801f40e:	2331      	movs	r3, #49	; 0x31
 801f410:	e796      	b.n	801f340 <_dtoa_r+0xae0>
 801f412:	4b0a      	ldr	r3, [pc, #40]	; (801f43c <_dtoa_r+0xbdc>)
 801f414:	f7ff ba99 	b.w	801e94a <_dtoa_r+0xea>
 801f418:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	f47f aa6d 	bne.w	801e8fa <_dtoa_r+0x9a>
 801f420:	4b07      	ldr	r3, [pc, #28]	; (801f440 <_dtoa_r+0xbe0>)
 801f422:	f7ff ba92 	b.w	801e94a <_dtoa_r+0xea>
 801f426:	9b01      	ldr	r3, [sp, #4]
 801f428:	2b00      	cmp	r3, #0
 801f42a:	dcb5      	bgt.n	801f398 <_dtoa_r+0xb38>
 801f42c:	9b07      	ldr	r3, [sp, #28]
 801f42e:	2b02      	cmp	r3, #2
 801f430:	f73f aeb1 	bgt.w	801f196 <_dtoa_r+0x936>
 801f434:	e7b0      	b.n	801f398 <_dtoa_r+0xb38>
 801f436:	bf00      	nop
 801f438:	0802290c 	.word	0x0802290c
 801f43c:	08022afb 	.word	0x08022afb
 801f440:	08022890 	.word	0x08022890

0801f444 <_free_r>:
 801f444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f446:	2900      	cmp	r1, #0
 801f448:	d044      	beq.n	801f4d4 <_free_r+0x90>
 801f44a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f44e:	9001      	str	r0, [sp, #4]
 801f450:	2b00      	cmp	r3, #0
 801f452:	f1a1 0404 	sub.w	r4, r1, #4
 801f456:	bfb8      	it	lt
 801f458:	18e4      	addlt	r4, r4, r3
 801f45a:	f7fd fa21 	bl	801c8a0 <__malloc_lock>
 801f45e:	4a1e      	ldr	r2, [pc, #120]	; (801f4d8 <_free_r+0x94>)
 801f460:	9801      	ldr	r0, [sp, #4]
 801f462:	6813      	ldr	r3, [r2, #0]
 801f464:	b933      	cbnz	r3, 801f474 <_free_r+0x30>
 801f466:	6063      	str	r3, [r4, #4]
 801f468:	6014      	str	r4, [r2, #0]
 801f46a:	b003      	add	sp, #12
 801f46c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f470:	f7fd ba1c 	b.w	801c8ac <__malloc_unlock>
 801f474:	42a3      	cmp	r3, r4
 801f476:	d908      	bls.n	801f48a <_free_r+0x46>
 801f478:	6825      	ldr	r5, [r4, #0]
 801f47a:	1961      	adds	r1, r4, r5
 801f47c:	428b      	cmp	r3, r1
 801f47e:	bf01      	itttt	eq
 801f480:	6819      	ldreq	r1, [r3, #0]
 801f482:	685b      	ldreq	r3, [r3, #4]
 801f484:	1949      	addeq	r1, r1, r5
 801f486:	6021      	streq	r1, [r4, #0]
 801f488:	e7ed      	b.n	801f466 <_free_r+0x22>
 801f48a:	461a      	mov	r2, r3
 801f48c:	685b      	ldr	r3, [r3, #4]
 801f48e:	b10b      	cbz	r3, 801f494 <_free_r+0x50>
 801f490:	42a3      	cmp	r3, r4
 801f492:	d9fa      	bls.n	801f48a <_free_r+0x46>
 801f494:	6811      	ldr	r1, [r2, #0]
 801f496:	1855      	adds	r5, r2, r1
 801f498:	42a5      	cmp	r5, r4
 801f49a:	d10b      	bne.n	801f4b4 <_free_r+0x70>
 801f49c:	6824      	ldr	r4, [r4, #0]
 801f49e:	4421      	add	r1, r4
 801f4a0:	1854      	adds	r4, r2, r1
 801f4a2:	42a3      	cmp	r3, r4
 801f4a4:	6011      	str	r1, [r2, #0]
 801f4a6:	d1e0      	bne.n	801f46a <_free_r+0x26>
 801f4a8:	681c      	ldr	r4, [r3, #0]
 801f4aa:	685b      	ldr	r3, [r3, #4]
 801f4ac:	6053      	str	r3, [r2, #4]
 801f4ae:	440c      	add	r4, r1
 801f4b0:	6014      	str	r4, [r2, #0]
 801f4b2:	e7da      	b.n	801f46a <_free_r+0x26>
 801f4b4:	d902      	bls.n	801f4bc <_free_r+0x78>
 801f4b6:	230c      	movs	r3, #12
 801f4b8:	6003      	str	r3, [r0, #0]
 801f4ba:	e7d6      	b.n	801f46a <_free_r+0x26>
 801f4bc:	6825      	ldr	r5, [r4, #0]
 801f4be:	1961      	adds	r1, r4, r5
 801f4c0:	428b      	cmp	r3, r1
 801f4c2:	bf04      	itt	eq
 801f4c4:	6819      	ldreq	r1, [r3, #0]
 801f4c6:	685b      	ldreq	r3, [r3, #4]
 801f4c8:	6063      	str	r3, [r4, #4]
 801f4ca:	bf04      	itt	eq
 801f4cc:	1949      	addeq	r1, r1, r5
 801f4ce:	6021      	streq	r1, [r4, #0]
 801f4d0:	6054      	str	r4, [r2, #4]
 801f4d2:	e7ca      	b.n	801f46a <_free_r+0x26>
 801f4d4:	b003      	add	sp, #12
 801f4d6:	bd30      	pop	{r4, r5, pc}
 801f4d8:	2000a080 	.word	0x2000a080

0801f4dc <rshift>:
 801f4dc:	6903      	ldr	r3, [r0, #16]
 801f4de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f4e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f4e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f4ea:	f100 0414 	add.w	r4, r0, #20
 801f4ee:	dd45      	ble.n	801f57c <rshift+0xa0>
 801f4f0:	f011 011f 	ands.w	r1, r1, #31
 801f4f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f4f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f4fc:	d10c      	bne.n	801f518 <rshift+0x3c>
 801f4fe:	f100 0710 	add.w	r7, r0, #16
 801f502:	4629      	mov	r1, r5
 801f504:	42b1      	cmp	r1, r6
 801f506:	d334      	bcc.n	801f572 <rshift+0x96>
 801f508:	1a9b      	subs	r3, r3, r2
 801f50a:	009b      	lsls	r3, r3, #2
 801f50c:	1eea      	subs	r2, r5, #3
 801f50e:	4296      	cmp	r6, r2
 801f510:	bf38      	it	cc
 801f512:	2300      	movcc	r3, #0
 801f514:	4423      	add	r3, r4
 801f516:	e015      	b.n	801f544 <rshift+0x68>
 801f518:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f51c:	f1c1 0820 	rsb	r8, r1, #32
 801f520:	40cf      	lsrs	r7, r1
 801f522:	f105 0e04 	add.w	lr, r5, #4
 801f526:	46a1      	mov	r9, r4
 801f528:	4576      	cmp	r6, lr
 801f52a:	46f4      	mov	ip, lr
 801f52c:	d815      	bhi.n	801f55a <rshift+0x7e>
 801f52e:	1a9a      	subs	r2, r3, r2
 801f530:	0092      	lsls	r2, r2, #2
 801f532:	3a04      	subs	r2, #4
 801f534:	3501      	adds	r5, #1
 801f536:	42ae      	cmp	r6, r5
 801f538:	bf38      	it	cc
 801f53a:	2200      	movcc	r2, #0
 801f53c:	18a3      	adds	r3, r4, r2
 801f53e:	50a7      	str	r7, [r4, r2]
 801f540:	b107      	cbz	r7, 801f544 <rshift+0x68>
 801f542:	3304      	adds	r3, #4
 801f544:	1b1a      	subs	r2, r3, r4
 801f546:	42a3      	cmp	r3, r4
 801f548:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f54c:	bf08      	it	eq
 801f54e:	2300      	moveq	r3, #0
 801f550:	6102      	str	r2, [r0, #16]
 801f552:	bf08      	it	eq
 801f554:	6143      	streq	r3, [r0, #20]
 801f556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f55a:	f8dc c000 	ldr.w	ip, [ip]
 801f55e:	fa0c fc08 	lsl.w	ip, ip, r8
 801f562:	ea4c 0707 	orr.w	r7, ip, r7
 801f566:	f849 7b04 	str.w	r7, [r9], #4
 801f56a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f56e:	40cf      	lsrs	r7, r1
 801f570:	e7da      	b.n	801f528 <rshift+0x4c>
 801f572:	f851 cb04 	ldr.w	ip, [r1], #4
 801f576:	f847 cf04 	str.w	ip, [r7, #4]!
 801f57a:	e7c3      	b.n	801f504 <rshift+0x28>
 801f57c:	4623      	mov	r3, r4
 801f57e:	e7e1      	b.n	801f544 <rshift+0x68>

0801f580 <__hexdig_fun>:
 801f580:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f584:	2b09      	cmp	r3, #9
 801f586:	d802      	bhi.n	801f58e <__hexdig_fun+0xe>
 801f588:	3820      	subs	r0, #32
 801f58a:	b2c0      	uxtb	r0, r0
 801f58c:	4770      	bx	lr
 801f58e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801f592:	2b05      	cmp	r3, #5
 801f594:	d801      	bhi.n	801f59a <__hexdig_fun+0x1a>
 801f596:	3847      	subs	r0, #71	; 0x47
 801f598:	e7f7      	b.n	801f58a <__hexdig_fun+0xa>
 801f59a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801f59e:	2b05      	cmp	r3, #5
 801f5a0:	d801      	bhi.n	801f5a6 <__hexdig_fun+0x26>
 801f5a2:	3827      	subs	r0, #39	; 0x27
 801f5a4:	e7f1      	b.n	801f58a <__hexdig_fun+0xa>
 801f5a6:	2000      	movs	r0, #0
 801f5a8:	4770      	bx	lr
	...

0801f5ac <__gethex>:
 801f5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5b0:	4617      	mov	r7, r2
 801f5b2:	680a      	ldr	r2, [r1, #0]
 801f5b4:	b085      	sub	sp, #20
 801f5b6:	f102 0b02 	add.w	fp, r2, #2
 801f5ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f5be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f5c2:	4681      	mov	r9, r0
 801f5c4:	468a      	mov	sl, r1
 801f5c6:	9302      	str	r3, [sp, #8]
 801f5c8:	32fe      	adds	r2, #254	; 0xfe
 801f5ca:	eb02 030b 	add.w	r3, r2, fp
 801f5ce:	46d8      	mov	r8, fp
 801f5d0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801f5d4:	9301      	str	r3, [sp, #4]
 801f5d6:	2830      	cmp	r0, #48	; 0x30
 801f5d8:	d0f7      	beq.n	801f5ca <__gethex+0x1e>
 801f5da:	f7ff ffd1 	bl	801f580 <__hexdig_fun>
 801f5de:	4604      	mov	r4, r0
 801f5e0:	2800      	cmp	r0, #0
 801f5e2:	d138      	bne.n	801f656 <__gethex+0xaa>
 801f5e4:	49a7      	ldr	r1, [pc, #668]	; (801f884 <__gethex+0x2d8>)
 801f5e6:	2201      	movs	r2, #1
 801f5e8:	4640      	mov	r0, r8
 801f5ea:	f7fe ffa2 	bl	801e532 <strncmp>
 801f5ee:	4606      	mov	r6, r0
 801f5f0:	2800      	cmp	r0, #0
 801f5f2:	d169      	bne.n	801f6c8 <__gethex+0x11c>
 801f5f4:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f5f8:	465d      	mov	r5, fp
 801f5fa:	f7ff ffc1 	bl	801f580 <__hexdig_fun>
 801f5fe:	2800      	cmp	r0, #0
 801f600:	d064      	beq.n	801f6cc <__gethex+0x120>
 801f602:	465a      	mov	r2, fp
 801f604:	7810      	ldrb	r0, [r2, #0]
 801f606:	2830      	cmp	r0, #48	; 0x30
 801f608:	4690      	mov	r8, r2
 801f60a:	f102 0201 	add.w	r2, r2, #1
 801f60e:	d0f9      	beq.n	801f604 <__gethex+0x58>
 801f610:	f7ff ffb6 	bl	801f580 <__hexdig_fun>
 801f614:	2301      	movs	r3, #1
 801f616:	fab0 f480 	clz	r4, r0
 801f61a:	0964      	lsrs	r4, r4, #5
 801f61c:	465e      	mov	r6, fp
 801f61e:	9301      	str	r3, [sp, #4]
 801f620:	4642      	mov	r2, r8
 801f622:	4615      	mov	r5, r2
 801f624:	3201      	adds	r2, #1
 801f626:	7828      	ldrb	r0, [r5, #0]
 801f628:	f7ff ffaa 	bl	801f580 <__hexdig_fun>
 801f62c:	2800      	cmp	r0, #0
 801f62e:	d1f8      	bne.n	801f622 <__gethex+0x76>
 801f630:	4994      	ldr	r1, [pc, #592]	; (801f884 <__gethex+0x2d8>)
 801f632:	2201      	movs	r2, #1
 801f634:	4628      	mov	r0, r5
 801f636:	f7fe ff7c 	bl	801e532 <strncmp>
 801f63a:	b978      	cbnz	r0, 801f65c <__gethex+0xb0>
 801f63c:	b946      	cbnz	r6, 801f650 <__gethex+0xa4>
 801f63e:	1c6e      	adds	r6, r5, #1
 801f640:	4632      	mov	r2, r6
 801f642:	4615      	mov	r5, r2
 801f644:	3201      	adds	r2, #1
 801f646:	7828      	ldrb	r0, [r5, #0]
 801f648:	f7ff ff9a 	bl	801f580 <__hexdig_fun>
 801f64c:	2800      	cmp	r0, #0
 801f64e:	d1f8      	bne.n	801f642 <__gethex+0x96>
 801f650:	1b73      	subs	r3, r6, r5
 801f652:	009e      	lsls	r6, r3, #2
 801f654:	e004      	b.n	801f660 <__gethex+0xb4>
 801f656:	2400      	movs	r4, #0
 801f658:	4626      	mov	r6, r4
 801f65a:	e7e1      	b.n	801f620 <__gethex+0x74>
 801f65c:	2e00      	cmp	r6, #0
 801f65e:	d1f7      	bne.n	801f650 <__gethex+0xa4>
 801f660:	782b      	ldrb	r3, [r5, #0]
 801f662:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f666:	2b50      	cmp	r3, #80	; 0x50
 801f668:	d13d      	bne.n	801f6e6 <__gethex+0x13a>
 801f66a:	786b      	ldrb	r3, [r5, #1]
 801f66c:	2b2b      	cmp	r3, #43	; 0x2b
 801f66e:	d02f      	beq.n	801f6d0 <__gethex+0x124>
 801f670:	2b2d      	cmp	r3, #45	; 0x2d
 801f672:	d031      	beq.n	801f6d8 <__gethex+0x12c>
 801f674:	1c69      	adds	r1, r5, #1
 801f676:	f04f 0b00 	mov.w	fp, #0
 801f67a:	7808      	ldrb	r0, [r1, #0]
 801f67c:	f7ff ff80 	bl	801f580 <__hexdig_fun>
 801f680:	1e42      	subs	r2, r0, #1
 801f682:	b2d2      	uxtb	r2, r2
 801f684:	2a18      	cmp	r2, #24
 801f686:	d82e      	bhi.n	801f6e6 <__gethex+0x13a>
 801f688:	f1a0 0210 	sub.w	r2, r0, #16
 801f68c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f690:	f7ff ff76 	bl	801f580 <__hexdig_fun>
 801f694:	f100 3cff 	add.w	ip, r0, #4294967295
 801f698:	fa5f fc8c 	uxtb.w	ip, ip
 801f69c:	f1bc 0f18 	cmp.w	ip, #24
 801f6a0:	d91d      	bls.n	801f6de <__gethex+0x132>
 801f6a2:	f1bb 0f00 	cmp.w	fp, #0
 801f6a6:	d000      	beq.n	801f6aa <__gethex+0xfe>
 801f6a8:	4252      	negs	r2, r2
 801f6aa:	4416      	add	r6, r2
 801f6ac:	f8ca 1000 	str.w	r1, [sl]
 801f6b0:	b1dc      	cbz	r4, 801f6ea <__gethex+0x13e>
 801f6b2:	9b01      	ldr	r3, [sp, #4]
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	bf14      	ite	ne
 801f6b8:	f04f 0800 	movne.w	r8, #0
 801f6bc:	f04f 0806 	moveq.w	r8, #6
 801f6c0:	4640      	mov	r0, r8
 801f6c2:	b005      	add	sp, #20
 801f6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6c8:	4645      	mov	r5, r8
 801f6ca:	4626      	mov	r6, r4
 801f6cc:	2401      	movs	r4, #1
 801f6ce:	e7c7      	b.n	801f660 <__gethex+0xb4>
 801f6d0:	f04f 0b00 	mov.w	fp, #0
 801f6d4:	1ca9      	adds	r1, r5, #2
 801f6d6:	e7d0      	b.n	801f67a <__gethex+0xce>
 801f6d8:	f04f 0b01 	mov.w	fp, #1
 801f6dc:	e7fa      	b.n	801f6d4 <__gethex+0x128>
 801f6de:	230a      	movs	r3, #10
 801f6e0:	fb03 0002 	mla	r0, r3, r2, r0
 801f6e4:	e7d0      	b.n	801f688 <__gethex+0xdc>
 801f6e6:	4629      	mov	r1, r5
 801f6e8:	e7e0      	b.n	801f6ac <__gethex+0x100>
 801f6ea:	eba5 0308 	sub.w	r3, r5, r8
 801f6ee:	3b01      	subs	r3, #1
 801f6f0:	4621      	mov	r1, r4
 801f6f2:	2b07      	cmp	r3, #7
 801f6f4:	dc0a      	bgt.n	801f70c <__gethex+0x160>
 801f6f6:	4648      	mov	r0, r9
 801f6f8:	f000 fa5a 	bl	801fbb0 <_Balloc>
 801f6fc:	4604      	mov	r4, r0
 801f6fe:	b940      	cbnz	r0, 801f712 <__gethex+0x166>
 801f700:	4b61      	ldr	r3, [pc, #388]	; (801f888 <__gethex+0x2dc>)
 801f702:	4602      	mov	r2, r0
 801f704:	21e4      	movs	r1, #228	; 0xe4
 801f706:	4861      	ldr	r0, [pc, #388]	; (801f88c <__gethex+0x2e0>)
 801f708:	f001 fd4e 	bl	80211a8 <__assert_func>
 801f70c:	3101      	adds	r1, #1
 801f70e:	105b      	asrs	r3, r3, #1
 801f710:	e7ef      	b.n	801f6f2 <__gethex+0x146>
 801f712:	f100 0a14 	add.w	sl, r0, #20
 801f716:	2300      	movs	r3, #0
 801f718:	495a      	ldr	r1, [pc, #360]	; (801f884 <__gethex+0x2d8>)
 801f71a:	f8cd a004 	str.w	sl, [sp, #4]
 801f71e:	469b      	mov	fp, r3
 801f720:	45a8      	cmp	r8, r5
 801f722:	d342      	bcc.n	801f7aa <__gethex+0x1fe>
 801f724:	9801      	ldr	r0, [sp, #4]
 801f726:	f840 bb04 	str.w	fp, [r0], #4
 801f72a:	eba0 000a 	sub.w	r0, r0, sl
 801f72e:	1080      	asrs	r0, r0, #2
 801f730:	6120      	str	r0, [r4, #16]
 801f732:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801f736:	4658      	mov	r0, fp
 801f738:	f000 fb2c 	bl	801fd94 <__hi0bits>
 801f73c:	683d      	ldr	r5, [r7, #0]
 801f73e:	eba8 0000 	sub.w	r0, r8, r0
 801f742:	42a8      	cmp	r0, r5
 801f744:	dd59      	ble.n	801f7fa <__gethex+0x24e>
 801f746:	eba0 0805 	sub.w	r8, r0, r5
 801f74a:	4641      	mov	r1, r8
 801f74c:	4620      	mov	r0, r4
 801f74e:	f000 febb 	bl	80204c8 <__any_on>
 801f752:	4683      	mov	fp, r0
 801f754:	b1b8      	cbz	r0, 801f786 <__gethex+0x1da>
 801f756:	f108 33ff 	add.w	r3, r8, #4294967295
 801f75a:	1159      	asrs	r1, r3, #5
 801f75c:	f003 021f 	and.w	r2, r3, #31
 801f760:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801f764:	f04f 0b01 	mov.w	fp, #1
 801f768:	fa0b f202 	lsl.w	r2, fp, r2
 801f76c:	420a      	tst	r2, r1
 801f76e:	d00a      	beq.n	801f786 <__gethex+0x1da>
 801f770:	455b      	cmp	r3, fp
 801f772:	dd06      	ble.n	801f782 <__gethex+0x1d6>
 801f774:	f1a8 0102 	sub.w	r1, r8, #2
 801f778:	4620      	mov	r0, r4
 801f77a:	f000 fea5 	bl	80204c8 <__any_on>
 801f77e:	2800      	cmp	r0, #0
 801f780:	d138      	bne.n	801f7f4 <__gethex+0x248>
 801f782:	f04f 0b02 	mov.w	fp, #2
 801f786:	4641      	mov	r1, r8
 801f788:	4620      	mov	r0, r4
 801f78a:	f7ff fea7 	bl	801f4dc <rshift>
 801f78e:	4446      	add	r6, r8
 801f790:	68bb      	ldr	r3, [r7, #8]
 801f792:	42b3      	cmp	r3, r6
 801f794:	da41      	bge.n	801f81a <__gethex+0x26e>
 801f796:	4621      	mov	r1, r4
 801f798:	4648      	mov	r0, r9
 801f79a:	f000 fa49 	bl	801fc30 <_Bfree>
 801f79e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f7a0:	2300      	movs	r3, #0
 801f7a2:	6013      	str	r3, [r2, #0]
 801f7a4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801f7a8:	e78a      	b.n	801f6c0 <__gethex+0x114>
 801f7aa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801f7ae:	2a2e      	cmp	r2, #46	; 0x2e
 801f7b0:	d014      	beq.n	801f7dc <__gethex+0x230>
 801f7b2:	2b20      	cmp	r3, #32
 801f7b4:	d106      	bne.n	801f7c4 <__gethex+0x218>
 801f7b6:	9b01      	ldr	r3, [sp, #4]
 801f7b8:	f843 bb04 	str.w	fp, [r3], #4
 801f7bc:	f04f 0b00 	mov.w	fp, #0
 801f7c0:	9301      	str	r3, [sp, #4]
 801f7c2:	465b      	mov	r3, fp
 801f7c4:	7828      	ldrb	r0, [r5, #0]
 801f7c6:	9303      	str	r3, [sp, #12]
 801f7c8:	f7ff feda 	bl	801f580 <__hexdig_fun>
 801f7cc:	9b03      	ldr	r3, [sp, #12]
 801f7ce:	f000 000f 	and.w	r0, r0, #15
 801f7d2:	4098      	lsls	r0, r3
 801f7d4:	ea4b 0b00 	orr.w	fp, fp, r0
 801f7d8:	3304      	adds	r3, #4
 801f7da:	e7a1      	b.n	801f720 <__gethex+0x174>
 801f7dc:	45a8      	cmp	r8, r5
 801f7de:	d8e8      	bhi.n	801f7b2 <__gethex+0x206>
 801f7e0:	2201      	movs	r2, #1
 801f7e2:	4628      	mov	r0, r5
 801f7e4:	9303      	str	r3, [sp, #12]
 801f7e6:	f7fe fea4 	bl	801e532 <strncmp>
 801f7ea:	4926      	ldr	r1, [pc, #152]	; (801f884 <__gethex+0x2d8>)
 801f7ec:	9b03      	ldr	r3, [sp, #12]
 801f7ee:	2800      	cmp	r0, #0
 801f7f0:	d1df      	bne.n	801f7b2 <__gethex+0x206>
 801f7f2:	e795      	b.n	801f720 <__gethex+0x174>
 801f7f4:	f04f 0b03 	mov.w	fp, #3
 801f7f8:	e7c5      	b.n	801f786 <__gethex+0x1da>
 801f7fa:	da0b      	bge.n	801f814 <__gethex+0x268>
 801f7fc:	eba5 0800 	sub.w	r8, r5, r0
 801f800:	4621      	mov	r1, r4
 801f802:	4642      	mov	r2, r8
 801f804:	4648      	mov	r0, r9
 801f806:	f000 fc2d 	bl	8020064 <__lshift>
 801f80a:	eba6 0608 	sub.w	r6, r6, r8
 801f80e:	4604      	mov	r4, r0
 801f810:	f100 0a14 	add.w	sl, r0, #20
 801f814:	f04f 0b00 	mov.w	fp, #0
 801f818:	e7ba      	b.n	801f790 <__gethex+0x1e4>
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	42b3      	cmp	r3, r6
 801f81e:	dd73      	ble.n	801f908 <__gethex+0x35c>
 801f820:	1b9e      	subs	r6, r3, r6
 801f822:	42b5      	cmp	r5, r6
 801f824:	dc34      	bgt.n	801f890 <__gethex+0x2e4>
 801f826:	68fb      	ldr	r3, [r7, #12]
 801f828:	2b02      	cmp	r3, #2
 801f82a:	d023      	beq.n	801f874 <__gethex+0x2c8>
 801f82c:	2b03      	cmp	r3, #3
 801f82e:	d025      	beq.n	801f87c <__gethex+0x2d0>
 801f830:	2b01      	cmp	r3, #1
 801f832:	d115      	bne.n	801f860 <__gethex+0x2b4>
 801f834:	42b5      	cmp	r5, r6
 801f836:	d113      	bne.n	801f860 <__gethex+0x2b4>
 801f838:	2d01      	cmp	r5, #1
 801f83a:	d10b      	bne.n	801f854 <__gethex+0x2a8>
 801f83c:	9a02      	ldr	r2, [sp, #8]
 801f83e:	687b      	ldr	r3, [r7, #4]
 801f840:	6013      	str	r3, [r2, #0]
 801f842:	2301      	movs	r3, #1
 801f844:	6123      	str	r3, [r4, #16]
 801f846:	f8ca 3000 	str.w	r3, [sl]
 801f84a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f84c:	f04f 0862 	mov.w	r8, #98	; 0x62
 801f850:	601c      	str	r4, [r3, #0]
 801f852:	e735      	b.n	801f6c0 <__gethex+0x114>
 801f854:	1e69      	subs	r1, r5, #1
 801f856:	4620      	mov	r0, r4
 801f858:	f000 fe36 	bl	80204c8 <__any_on>
 801f85c:	2800      	cmp	r0, #0
 801f85e:	d1ed      	bne.n	801f83c <__gethex+0x290>
 801f860:	4621      	mov	r1, r4
 801f862:	4648      	mov	r0, r9
 801f864:	f000 f9e4 	bl	801fc30 <_Bfree>
 801f868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f86a:	2300      	movs	r3, #0
 801f86c:	6013      	str	r3, [r2, #0]
 801f86e:	f04f 0850 	mov.w	r8, #80	; 0x50
 801f872:	e725      	b.n	801f6c0 <__gethex+0x114>
 801f874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f876:	2b00      	cmp	r3, #0
 801f878:	d1f2      	bne.n	801f860 <__gethex+0x2b4>
 801f87a:	e7df      	b.n	801f83c <__gethex+0x290>
 801f87c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f87e:	2b00      	cmp	r3, #0
 801f880:	d1dc      	bne.n	801f83c <__gethex+0x290>
 801f882:	e7ed      	b.n	801f860 <__gethex+0x2b4>
 801f884:	080226f8 	.word	0x080226f8
 801f888:	0802290c 	.word	0x0802290c
 801f88c:	0802291d 	.word	0x0802291d
 801f890:	f106 38ff 	add.w	r8, r6, #4294967295
 801f894:	f1bb 0f00 	cmp.w	fp, #0
 801f898:	d133      	bne.n	801f902 <__gethex+0x356>
 801f89a:	f1b8 0f00 	cmp.w	r8, #0
 801f89e:	d004      	beq.n	801f8aa <__gethex+0x2fe>
 801f8a0:	4641      	mov	r1, r8
 801f8a2:	4620      	mov	r0, r4
 801f8a4:	f000 fe10 	bl	80204c8 <__any_on>
 801f8a8:	4683      	mov	fp, r0
 801f8aa:	ea4f 1268 	mov.w	r2, r8, asr #5
 801f8ae:	2301      	movs	r3, #1
 801f8b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801f8b4:	f008 081f 	and.w	r8, r8, #31
 801f8b8:	fa03 f308 	lsl.w	r3, r3, r8
 801f8bc:	4213      	tst	r3, r2
 801f8be:	4631      	mov	r1, r6
 801f8c0:	4620      	mov	r0, r4
 801f8c2:	bf18      	it	ne
 801f8c4:	f04b 0b02 	orrne.w	fp, fp, #2
 801f8c8:	1bad      	subs	r5, r5, r6
 801f8ca:	f7ff fe07 	bl	801f4dc <rshift>
 801f8ce:	687e      	ldr	r6, [r7, #4]
 801f8d0:	f04f 0802 	mov.w	r8, #2
 801f8d4:	f1bb 0f00 	cmp.w	fp, #0
 801f8d8:	d04a      	beq.n	801f970 <__gethex+0x3c4>
 801f8da:	68fb      	ldr	r3, [r7, #12]
 801f8dc:	2b02      	cmp	r3, #2
 801f8de:	d016      	beq.n	801f90e <__gethex+0x362>
 801f8e0:	2b03      	cmp	r3, #3
 801f8e2:	d018      	beq.n	801f916 <__gethex+0x36a>
 801f8e4:	2b01      	cmp	r3, #1
 801f8e6:	d109      	bne.n	801f8fc <__gethex+0x350>
 801f8e8:	f01b 0f02 	tst.w	fp, #2
 801f8ec:	d006      	beq.n	801f8fc <__gethex+0x350>
 801f8ee:	f8da 3000 	ldr.w	r3, [sl]
 801f8f2:	ea4b 0b03 	orr.w	fp, fp, r3
 801f8f6:	f01b 0f01 	tst.w	fp, #1
 801f8fa:	d10f      	bne.n	801f91c <__gethex+0x370>
 801f8fc:	f048 0810 	orr.w	r8, r8, #16
 801f900:	e036      	b.n	801f970 <__gethex+0x3c4>
 801f902:	f04f 0b01 	mov.w	fp, #1
 801f906:	e7d0      	b.n	801f8aa <__gethex+0x2fe>
 801f908:	f04f 0801 	mov.w	r8, #1
 801f90c:	e7e2      	b.n	801f8d4 <__gethex+0x328>
 801f90e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f910:	f1c3 0301 	rsb	r3, r3, #1
 801f914:	930f      	str	r3, [sp, #60]	; 0x3c
 801f916:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f918:	2b00      	cmp	r3, #0
 801f91a:	d0ef      	beq.n	801f8fc <__gethex+0x350>
 801f91c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f920:	f104 0214 	add.w	r2, r4, #20
 801f924:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801f928:	9301      	str	r3, [sp, #4]
 801f92a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801f92e:	2300      	movs	r3, #0
 801f930:	4694      	mov	ip, r2
 801f932:	f852 1b04 	ldr.w	r1, [r2], #4
 801f936:	f1b1 3fff 	cmp.w	r1, #4294967295
 801f93a:	d01e      	beq.n	801f97a <__gethex+0x3ce>
 801f93c:	3101      	adds	r1, #1
 801f93e:	f8cc 1000 	str.w	r1, [ip]
 801f942:	f1b8 0f02 	cmp.w	r8, #2
 801f946:	f104 0214 	add.w	r2, r4, #20
 801f94a:	d13d      	bne.n	801f9c8 <__gethex+0x41c>
 801f94c:	683b      	ldr	r3, [r7, #0]
 801f94e:	3b01      	subs	r3, #1
 801f950:	42ab      	cmp	r3, r5
 801f952:	d10b      	bne.n	801f96c <__gethex+0x3c0>
 801f954:	1169      	asrs	r1, r5, #5
 801f956:	2301      	movs	r3, #1
 801f958:	f005 051f 	and.w	r5, r5, #31
 801f95c:	fa03 f505 	lsl.w	r5, r3, r5
 801f960:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f964:	421d      	tst	r5, r3
 801f966:	bf18      	it	ne
 801f968:	f04f 0801 	movne.w	r8, #1
 801f96c:	f048 0820 	orr.w	r8, r8, #32
 801f970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f972:	601c      	str	r4, [r3, #0]
 801f974:	9b02      	ldr	r3, [sp, #8]
 801f976:	601e      	str	r6, [r3, #0]
 801f978:	e6a2      	b.n	801f6c0 <__gethex+0x114>
 801f97a:	4290      	cmp	r0, r2
 801f97c:	f842 3c04 	str.w	r3, [r2, #-4]
 801f980:	d8d6      	bhi.n	801f930 <__gethex+0x384>
 801f982:	68a2      	ldr	r2, [r4, #8]
 801f984:	4593      	cmp	fp, r2
 801f986:	db17      	blt.n	801f9b8 <__gethex+0x40c>
 801f988:	6861      	ldr	r1, [r4, #4]
 801f98a:	4648      	mov	r0, r9
 801f98c:	3101      	adds	r1, #1
 801f98e:	f000 f90f 	bl	801fbb0 <_Balloc>
 801f992:	4682      	mov	sl, r0
 801f994:	b918      	cbnz	r0, 801f99e <__gethex+0x3f2>
 801f996:	4b1b      	ldr	r3, [pc, #108]	; (801fa04 <__gethex+0x458>)
 801f998:	4602      	mov	r2, r0
 801f99a:	2184      	movs	r1, #132	; 0x84
 801f99c:	e6b3      	b.n	801f706 <__gethex+0x15a>
 801f99e:	6922      	ldr	r2, [r4, #16]
 801f9a0:	3202      	adds	r2, #2
 801f9a2:	f104 010c 	add.w	r1, r4, #12
 801f9a6:	0092      	lsls	r2, r2, #2
 801f9a8:	300c      	adds	r0, #12
 801f9aa:	f7fe feb1 	bl	801e710 <memcpy>
 801f9ae:	4621      	mov	r1, r4
 801f9b0:	4648      	mov	r0, r9
 801f9b2:	f000 f93d 	bl	801fc30 <_Bfree>
 801f9b6:	4654      	mov	r4, sl
 801f9b8:	6922      	ldr	r2, [r4, #16]
 801f9ba:	1c51      	adds	r1, r2, #1
 801f9bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f9c0:	6121      	str	r1, [r4, #16]
 801f9c2:	2101      	movs	r1, #1
 801f9c4:	6151      	str	r1, [r2, #20]
 801f9c6:	e7bc      	b.n	801f942 <__gethex+0x396>
 801f9c8:	6921      	ldr	r1, [r4, #16]
 801f9ca:	4559      	cmp	r1, fp
 801f9cc:	dd0b      	ble.n	801f9e6 <__gethex+0x43a>
 801f9ce:	2101      	movs	r1, #1
 801f9d0:	4620      	mov	r0, r4
 801f9d2:	f7ff fd83 	bl	801f4dc <rshift>
 801f9d6:	68bb      	ldr	r3, [r7, #8]
 801f9d8:	3601      	adds	r6, #1
 801f9da:	42b3      	cmp	r3, r6
 801f9dc:	f6ff aedb 	blt.w	801f796 <__gethex+0x1ea>
 801f9e0:	f04f 0801 	mov.w	r8, #1
 801f9e4:	e7c2      	b.n	801f96c <__gethex+0x3c0>
 801f9e6:	f015 051f 	ands.w	r5, r5, #31
 801f9ea:	d0f9      	beq.n	801f9e0 <__gethex+0x434>
 801f9ec:	9b01      	ldr	r3, [sp, #4]
 801f9ee:	441a      	add	r2, r3
 801f9f0:	f1c5 0520 	rsb	r5, r5, #32
 801f9f4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801f9f8:	f000 f9cc 	bl	801fd94 <__hi0bits>
 801f9fc:	42a8      	cmp	r0, r5
 801f9fe:	dbe6      	blt.n	801f9ce <__gethex+0x422>
 801fa00:	e7ee      	b.n	801f9e0 <__gethex+0x434>
 801fa02:	bf00      	nop
 801fa04:	0802290c 	.word	0x0802290c

0801fa08 <L_shift>:
 801fa08:	f1c2 0208 	rsb	r2, r2, #8
 801fa0c:	0092      	lsls	r2, r2, #2
 801fa0e:	b570      	push	{r4, r5, r6, lr}
 801fa10:	f1c2 0620 	rsb	r6, r2, #32
 801fa14:	6843      	ldr	r3, [r0, #4]
 801fa16:	6804      	ldr	r4, [r0, #0]
 801fa18:	fa03 f506 	lsl.w	r5, r3, r6
 801fa1c:	432c      	orrs	r4, r5
 801fa1e:	40d3      	lsrs	r3, r2
 801fa20:	6004      	str	r4, [r0, #0]
 801fa22:	f840 3f04 	str.w	r3, [r0, #4]!
 801fa26:	4288      	cmp	r0, r1
 801fa28:	d3f4      	bcc.n	801fa14 <L_shift+0xc>
 801fa2a:	bd70      	pop	{r4, r5, r6, pc}

0801fa2c <__match>:
 801fa2c:	b530      	push	{r4, r5, lr}
 801fa2e:	6803      	ldr	r3, [r0, #0]
 801fa30:	3301      	adds	r3, #1
 801fa32:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fa36:	b914      	cbnz	r4, 801fa3e <__match+0x12>
 801fa38:	6003      	str	r3, [r0, #0]
 801fa3a:	2001      	movs	r0, #1
 801fa3c:	bd30      	pop	{r4, r5, pc}
 801fa3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fa42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801fa46:	2d19      	cmp	r5, #25
 801fa48:	bf98      	it	ls
 801fa4a:	3220      	addls	r2, #32
 801fa4c:	42a2      	cmp	r2, r4
 801fa4e:	d0f0      	beq.n	801fa32 <__match+0x6>
 801fa50:	2000      	movs	r0, #0
 801fa52:	e7f3      	b.n	801fa3c <__match+0x10>

0801fa54 <__hexnan>:
 801fa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa58:	680b      	ldr	r3, [r1, #0]
 801fa5a:	6801      	ldr	r1, [r0, #0]
 801fa5c:	115e      	asrs	r6, r3, #5
 801fa5e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801fa62:	f013 031f 	ands.w	r3, r3, #31
 801fa66:	b087      	sub	sp, #28
 801fa68:	bf18      	it	ne
 801fa6a:	3604      	addne	r6, #4
 801fa6c:	2500      	movs	r5, #0
 801fa6e:	1f37      	subs	r7, r6, #4
 801fa70:	4682      	mov	sl, r0
 801fa72:	4690      	mov	r8, r2
 801fa74:	9301      	str	r3, [sp, #4]
 801fa76:	f846 5c04 	str.w	r5, [r6, #-4]
 801fa7a:	46b9      	mov	r9, r7
 801fa7c:	463c      	mov	r4, r7
 801fa7e:	9502      	str	r5, [sp, #8]
 801fa80:	46ab      	mov	fp, r5
 801fa82:	784a      	ldrb	r2, [r1, #1]
 801fa84:	1c4b      	adds	r3, r1, #1
 801fa86:	9303      	str	r3, [sp, #12]
 801fa88:	b342      	cbz	r2, 801fadc <__hexnan+0x88>
 801fa8a:	4610      	mov	r0, r2
 801fa8c:	9105      	str	r1, [sp, #20]
 801fa8e:	9204      	str	r2, [sp, #16]
 801fa90:	f7ff fd76 	bl	801f580 <__hexdig_fun>
 801fa94:	2800      	cmp	r0, #0
 801fa96:	d14f      	bne.n	801fb38 <__hexnan+0xe4>
 801fa98:	9a04      	ldr	r2, [sp, #16]
 801fa9a:	9905      	ldr	r1, [sp, #20]
 801fa9c:	2a20      	cmp	r2, #32
 801fa9e:	d818      	bhi.n	801fad2 <__hexnan+0x7e>
 801faa0:	9b02      	ldr	r3, [sp, #8]
 801faa2:	459b      	cmp	fp, r3
 801faa4:	dd13      	ble.n	801face <__hexnan+0x7a>
 801faa6:	454c      	cmp	r4, r9
 801faa8:	d206      	bcs.n	801fab8 <__hexnan+0x64>
 801faaa:	2d07      	cmp	r5, #7
 801faac:	dc04      	bgt.n	801fab8 <__hexnan+0x64>
 801faae:	462a      	mov	r2, r5
 801fab0:	4649      	mov	r1, r9
 801fab2:	4620      	mov	r0, r4
 801fab4:	f7ff ffa8 	bl	801fa08 <L_shift>
 801fab8:	4544      	cmp	r4, r8
 801faba:	d950      	bls.n	801fb5e <__hexnan+0x10a>
 801fabc:	2300      	movs	r3, #0
 801fabe:	f1a4 0904 	sub.w	r9, r4, #4
 801fac2:	f844 3c04 	str.w	r3, [r4, #-4]
 801fac6:	f8cd b008 	str.w	fp, [sp, #8]
 801faca:	464c      	mov	r4, r9
 801facc:	461d      	mov	r5, r3
 801face:	9903      	ldr	r1, [sp, #12]
 801fad0:	e7d7      	b.n	801fa82 <__hexnan+0x2e>
 801fad2:	2a29      	cmp	r2, #41	; 0x29
 801fad4:	d155      	bne.n	801fb82 <__hexnan+0x12e>
 801fad6:	3102      	adds	r1, #2
 801fad8:	f8ca 1000 	str.w	r1, [sl]
 801fadc:	f1bb 0f00 	cmp.w	fp, #0
 801fae0:	d04f      	beq.n	801fb82 <__hexnan+0x12e>
 801fae2:	454c      	cmp	r4, r9
 801fae4:	d206      	bcs.n	801faf4 <__hexnan+0xa0>
 801fae6:	2d07      	cmp	r5, #7
 801fae8:	dc04      	bgt.n	801faf4 <__hexnan+0xa0>
 801faea:	462a      	mov	r2, r5
 801faec:	4649      	mov	r1, r9
 801faee:	4620      	mov	r0, r4
 801faf0:	f7ff ff8a 	bl	801fa08 <L_shift>
 801faf4:	4544      	cmp	r4, r8
 801faf6:	d934      	bls.n	801fb62 <__hexnan+0x10e>
 801faf8:	f1a8 0204 	sub.w	r2, r8, #4
 801fafc:	4623      	mov	r3, r4
 801fafe:	f853 1b04 	ldr.w	r1, [r3], #4
 801fb02:	f842 1f04 	str.w	r1, [r2, #4]!
 801fb06:	429f      	cmp	r7, r3
 801fb08:	d2f9      	bcs.n	801fafe <__hexnan+0xaa>
 801fb0a:	1b3b      	subs	r3, r7, r4
 801fb0c:	f023 0303 	bic.w	r3, r3, #3
 801fb10:	3304      	adds	r3, #4
 801fb12:	3e03      	subs	r6, #3
 801fb14:	3401      	adds	r4, #1
 801fb16:	42a6      	cmp	r6, r4
 801fb18:	bf38      	it	cc
 801fb1a:	2304      	movcc	r3, #4
 801fb1c:	4443      	add	r3, r8
 801fb1e:	2200      	movs	r2, #0
 801fb20:	f843 2b04 	str.w	r2, [r3], #4
 801fb24:	429f      	cmp	r7, r3
 801fb26:	d2fb      	bcs.n	801fb20 <__hexnan+0xcc>
 801fb28:	683b      	ldr	r3, [r7, #0]
 801fb2a:	b91b      	cbnz	r3, 801fb34 <__hexnan+0xe0>
 801fb2c:	4547      	cmp	r7, r8
 801fb2e:	d126      	bne.n	801fb7e <__hexnan+0x12a>
 801fb30:	2301      	movs	r3, #1
 801fb32:	603b      	str	r3, [r7, #0]
 801fb34:	2005      	movs	r0, #5
 801fb36:	e025      	b.n	801fb84 <__hexnan+0x130>
 801fb38:	3501      	adds	r5, #1
 801fb3a:	2d08      	cmp	r5, #8
 801fb3c:	f10b 0b01 	add.w	fp, fp, #1
 801fb40:	dd06      	ble.n	801fb50 <__hexnan+0xfc>
 801fb42:	4544      	cmp	r4, r8
 801fb44:	d9c3      	bls.n	801face <__hexnan+0x7a>
 801fb46:	2300      	movs	r3, #0
 801fb48:	f844 3c04 	str.w	r3, [r4, #-4]
 801fb4c:	2501      	movs	r5, #1
 801fb4e:	3c04      	subs	r4, #4
 801fb50:	6822      	ldr	r2, [r4, #0]
 801fb52:	f000 000f 	and.w	r0, r0, #15
 801fb56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801fb5a:	6020      	str	r0, [r4, #0]
 801fb5c:	e7b7      	b.n	801face <__hexnan+0x7a>
 801fb5e:	2508      	movs	r5, #8
 801fb60:	e7b5      	b.n	801face <__hexnan+0x7a>
 801fb62:	9b01      	ldr	r3, [sp, #4]
 801fb64:	2b00      	cmp	r3, #0
 801fb66:	d0df      	beq.n	801fb28 <__hexnan+0xd4>
 801fb68:	f1c3 0320 	rsb	r3, r3, #32
 801fb6c:	f04f 32ff 	mov.w	r2, #4294967295
 801fb70:	40da      	lsrs	r2, r3
 801fb72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801fb76:	4013      	ands	r3, r2
 801fb78:	f846 3c04 	str.w	r3, [r6, #-4]
 801fb7c:	e7d4      	b.n	801fb28 <__hexnan+0xd4>
 801fb7e:	3f04      	subs	r7, #4
 801fb80:	e7d2      	b.n	801fb28 <__hexnan+0xd4>
 801fb82:	2004      	movs	r0, #4
 801fb84:	b007      	add	sp, #28
 801fb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb8a <__ascii_mbtowc>:
 801fb8a:	b082      	sub	sp, #8
 801fb8c:	b901      	cbnz	r1, 801fb90 <__ascii_mbtowc+0x6>
 801fb8e:	a901      	add	r1, sp, #4
 801fb90:	b142      	cbz	r2, 801fba4 <__ascii_mbtowc+0x1a>
 801fb92:	b14b      	cbz	r3, 801fba8 <__ascii_mbtowc+0x1e>
 801fb94:	7813      	ldrb	r3, [r2, #0]
 801fb96:	600b      	str	r3, [r1, #0]
 801fb98:	7812      	ldrb	r2, [r2, #0]
 801fb9a:	1e10      	subs	r0, r2, #0
 801fb9c:	bf18      	it	ne
 801fb9e:	2001      	movne	r0, #1
 801fba0:	b002      	add	sp, #8
 801fba2:	4770      	bx	lr
 801fba4:	4610      	mov	r0, r2
 801fba6:	e7fb      	b.n	801fba0 <__ascii_mbtowc+0x16>
 801fba8:	f06f 0001 	mvn.w	r0, #1
 801fbac:	e7f8      	b.n	801fba0 <__ascii_mbtowc+0x16>
	...

0801fbb0 <_Balloc>:
 801fbb0:	b570      	push	{r4, r5, r6, lr}
 801fbb2:	69c6      	ldr	r6, [r0, #28]
 801fbb4:	4604      	mov	r4, r0
 801fbb6:	460d      	mov	r5, r1
 801fbb8:	b976      	cbnz	r6, 801fbd8 <_Balloc+0x28>
 801fbba:	2010      	movs	r0, #16
 801fbbc:	f7fc fdc0 	bl	801c740 <malloc>
 801fbc0:	4602      	mov	r2, r0
 801fbc2:	61e0      	str	r0, [r4, #28]
 801fbc4:	b920      	cbnz	r0, 801fbd0 <_Balloc+0x20>
 801fbc6:	4b18      	ldr	r3, [pc, #96]	; (801fc28 <_Balloc+0x78>)
 801fbc8:	4818      	ldr	r0, [pc, #96]	; (801fc2c <_Balloc+0x7c>)
 801fbca:	216b      	movs	r1, #107	; 0x6b
 801fbcc:	f001 faec 	bl	80211a8 <__assert_func>
 801fbd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fbd4:	6006      	str	r6, [r0, #0]
 801fbd6:	60c6      	str	r6, [r0, #12]
 801fbd8:	69e6      	ldr	r6, [r4, #28]
 801fbda:	68f3      	ldr	r3, [r6, #12]
 801fbdc:	b183      	cbz	r3, 801fc00 <_Balloc+0x50>
 801fbde:	69e3      	ldr	r3, [r4, #28]
 801fbe0:	68db      	ldr	r3, [r3, #12]
 801fbe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fbe6:	b9b8      	cbnz	r0, 801fc18 <_Balloc+0x68>
 801fbe8:	2101      	movs	r1, #1
 801fbea:	fa01 f605 	lsl.w	r6, r1, r5
 801fbee:	1d72      	adds	r2, r6, #5
 801fbf0:	0092      	lsls	r2, r2, #2
 801fbf2:	4620      	mov	r0, r4
 801fbf4:	f001 faf6 	bl	80211e4 <_calloc_r>
 801fbf8:	b160      	cbz	r0, 801fc14 <_Balloc+0x64>
 801fbfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fbfe:	e00e      	b.n	801fc1e <_Balloc+0x6e>
 801fc00:	2221      	movs	r2, #33	; 0x21
 801fc02:	2104      	movs	r1, #4
 801fc04:	4620      	mov	r0, r4
 801fc06:	f001 faed 	bl	80211e4 <_calloc_r>
 801fc0a:	69e3      	ldr	r3, [r4, #28]
 801fc0c:	60f0      	str	r0, [r6, #12]
 801fc0e:	68db      	ldr	r3, [r3, #12]
 801fc10:	2b00      	cmp	r3, #0
 801fc12:	d1e4      	bne.n	801fbde <_Balloc+0x2e>
 801fc14:	2000      	movs	r0, #0
 801fc16:	bd70      	pop	{r4, r5, r6, pc}
 801fc18:	6802      	ldr	r2, [r0, #0]
 801fc1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fc1e:	2300      	movs	r3, #0
 801fc20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fc24:	e7f7      	b.n	801fc16 <_Balloc+0x66>
 801fc26:	bf00      	nop
 801fc28:	0802289d 	.word	0x0802289d
 801fc2c:	0802297d 	.word	0x0802297d

0801fc30 <_Bfree>:
 801fc30:	b570      	push	{r4, r5, r6, lr}
 801fc32:	69c6      	ldr	r6, [r0, #28]
 801fc34:	4605      	mov	r5, r0
 801fc36:	460c      	mov	r4, r1
 801fc38:	b976      	cbnz	r6, 801fc58 <_Bfree+0x28>
 801fc3a:	2010      	movs	r0, #16
 801fc3c:	f7fc fd80 	bl	801c740 <malloc>
 801fc40:	4602      	mov	r2, r0
 801fc42:	61e8      	str	r0, [r5, #28]
 801fc44:	b920      	cbnz	r0, 801fc50 <_Bfree+0x20>
 801fc46:	4b09      	ldr	r3, [pc, #36]	; (801fc6c <_Bfree+0x3c>)
 801fc48:	4809      	ldr	r0, [pc, #36]	; (801fc70 <_Bfree+0x40>)
 801fc4a:	218f      	movs	r1, #143	; 0x8f
 801fc4c:	f001 faac 	bl	80211a8 <__assert_func>
 801fc50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fc54:	6006      	str	r6, [r0, #0]
 801fc56:	60c6      	str	r6, [r0, #12]
 801fc58:	b13c      	cbz	r4, 801fc6a <_Bfree+0x3a>
 801fc5a:	69eb      	ldr	r3, [r5, #28]
 801fc5c:	6862      	ldr	r2, [r4, #4]
 801fc5e:	68db      	ldr	r3, [r3, #12]
 801fc60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fc64:	6021      	str	r1, [r4, #0]
 801fc66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fc6a:	bd70      	pop	{r4, r5, r6, pc}
 801fc6c:	0802289d 	.word	0x0802289d
 801fc70:	0802297d 	.word	0x0802297d

0801fc74 <__multadd>:
 801fc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc78:	690d      	ldr	r5, [r1, #16]
 801fc7a:	4607      	mov	r7, r0
 801fc7c:	460c      	mov	r4, r1
 801fc7e:	461e      	mov	r6, r3
 801fc80:	f101 0c14 	add.w	ip, r1, #20
 801fc84:	2000      	movs	r0, #0
 801fc86:	f8dc 3000 	ldr.w	r3, [ip]
 801fc8a:	b299      	uxth	r1, r3
 801fc8c:	fb02 6101 	mla	r1, r2, r1, r6
 801fc90:	0c1e      	lsrs	r6, r3, #16
 801fc92:	0c0b      	lsrs	r3, r1, #16
 801fc94:	fb02 3306 	mla	r3, r2, r6, r3
 801fc98:	b289      	uxth	r1, r1
 801fc9a:	3001      	adds	r0, #1
 801fc9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801fca0:	4285      	cmp	r5, r0
 801fca2:	f84c 1b04 	str.w	r1, [ip], #4
 801fca6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801fcaa:	dcec      	bgt.n	801fc86 <__multadd+0x12>
 801fcac:	b30e      	cbz	r6, 801fcf2 <__multadd+0x7e>
 801fcae:	68a3      	ldr	r3, [r4, #8]
 801fcb0:	42ab      	cmp	r3, r5
 801fcb2:	dc19      	bgt.n	801fce8 <__multadd+0x74>
 801fcb4:	6861      	ldr	r1, [r4, #4]
 801fcb6:	4638      	mov	r0, r7
 801fcb8:	3101      	adds	r1, #1
 801fcba:	f7ff ff79 	bl	801fbb0 <_Balloc>
 801fcbe:	4680      	mov	r8, r0
 801fcc0:	b928      	cbnz	r0, 801fcce <__multadd+0x5a>
 801fcc2:	4602      	mov	r2, r0
 801fcc4:	4b0c      	ldr	r3, [pc, #48]	; (801fcf8 <__multadd+0x84>)
 801fcc6:	480d      	ldr	r0, [pc, #52]	; (801fcfc <__multadd+0x88>)
 801fcc8:	21ba      	movs	r1, #186	; 0xba
 801fcca:	f001 fa6d 	bl	80211a8 <__assert_func>
 801fcce:	6922      	ldr	r2, [r4, #16]
 801fcd0:	3202      	adds	r2, #2
 801fcd2:	f104 010c 	add.w	r1, r4, #12
 801fcd6:	0092      	lsls	r2, r2, #2
 801fcd8:	300c      	adds	r0, #12
 801fcda:	f7fe fd19 	bl	801e710 <memcpy>
 801fcde:	4621      	mov	r1, r4
 801fce0:	4638      	mov	r0, r7
 801fce2:	f7ff ffa5 	bl	801fc30 <_Bfree>
 801fce6:	4644      	mov	r4, r8
 801fce8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801fcec:	3501      	adds	r5, #1
 801fcee:	615e      	str	r6, [r3, #20]
 801fcf0:	6125      	str	r5, [r4, #16]
 801fcf2:	4620      	mov	r0, r4
 801fcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fcf8:	0802290c 	.word	0x0802290c
 801fcfc:	0802297d 	.word	0x0802297d

0801fd00 <__s2b>:
 801fd00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fd04:	460c      	mov	r4, r1
 801fd06:	4615      	mov	r5, r2
 801fd08:	461f      	mov	r7, r3
 801fd0a:	2209      	movs	r2, #9
 801fd0c:	3308      	adds	r3, #8
 801fd0e:	4606      	mov	r6, r0
 801fd10:	fb93 f3f2 	sdiv	r3, r3, r2
 801fd14:	2100      	movs	r1, #0
 801fd16:	2201      	movs	r2, #1
 801fd18:	429a      	cmp	r2, r3
 801fd1a:	db09      	blt.n	801fd30 <__s2b+0x30>
 801fd1c:	4630      	mov	r0, r6
 801fd1e:	f7ff ff47 	bl	801fbb0 <_Balloc>
 801fd22:	b940      	cbnz	r0, 801fd36 <__s2b+0x36>
 801fd24:	4602      	mov	r2, r0
 801fd26:	4b19      	ldr	r3, [pc, #100]	; (801fd8c <__s2b+0x8c>)
 801fd28:	4819      	ldr	r0, [pc, #100]	; (801fd90 <__s2b+0x90>)
 801fd2a:	21d3      	movs	r1, #211	; 0xd3
 801fd2c:	f001 fa3c 	bl	80211a8 <__assert_func>
 801fd30:	0052      	lsls	r2, r2, #1
 801fd32:	3101      	adds	r1, #1
 801fd34:	e7f0      	b.n	801fd18 <__s2b+0x18>
 801fd36:	9b08      	ldr	r3, [sp, #32]
 801fd38:	6143      	str	r3, [r0, #20]
 801fd3a:	2d09      	cmp	r5, #9
 801fd3c:	f04f 0301 	mov.w	r3, #1
 801fd40:	6103      	str	r3, [r0, #16]
 801fd42:	dd16      	ble.n	801fd72 <__s2b+0x72>
 801fd44:	f104 0909 	add.w	r9, r4, #9
 801fd48:	46c8      	mov	r8, r9
 801fd4a:	442c      	add	r4, r5
 801fd4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801fd50:	4601      	mov	r1, r0
 801fd52:	3b30      	subs	r3, #48	; 0x30
 801fd54:	220a      	movs	r2, #10
 801fd56:	4630      	mov	r0, r6
 801fd58:	f7ff ff8c 	bl	801fc74 <__multadd>
 801fd5c:	45a0      	cmp	r8, r4
 801fd5e:	d1f5      	bne.n	801fd4c <__s2b+0x4c>
 801fd60:	f1a5 0408 	sub.w	r4, r5, #8
 801fd64:	444c      	add	r4, r9
 801fd66:	1b2d      	subs	r5, r5, r4
 801fd68:	1963      	adds	r3, r4, r5
 801fd6a:	42bb      	cmp	r3, r7
 801fd6c:	db04      	blt.n	801fd78 <__s2b+0x78>
 801fd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fd72:	340a      	adds	r4, #10
 801fd74:	2509      	movs	r5, #9
 801fd76:	e7f6      	b.n	801fd66 <__s2b+0x66>
 801fd78:	f814 3b01 	ldrb.w	r3, [r4], #1
 801fd7c:	4601      	mov	r1, r0
 801fd7e:	3b30      	subs	r3, #48	; 0x30
 801fd80:	220a      	movs	r2, #10
 801fd82:	4630      	mov	r0, r6
 801fd84:	f7ff ff76 	bl	801fc74 <__multadd>
 801fd88:	e7ee      	b.n	801fd68 <__s2b+0x68>
 801fd8a:	bf00      	nop
 801fd8c:	0802290c 	.word	0x0802290c
 801fd90:	0802297d 	.word	0x0802297d

0801fd94 <__hi0bits>:
 801fd94:	0c03      	lsrs	r3, r0, #16
 801fd96:	041b      	lsls	r3, r3, #16
 801fd98:	b9d3      	cbnz	r3, 801fdd0 <__hi0bits+0x3c>
 801fd9a:	0400      	lsls	r0, r0, #16
 801fd9c:	2310      	movs	r3, #16
 801fd9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801fda2:	bf04      	itt	eq
 801fda4:	0200      	lsleq	r0, r0, #8
 801fda6:	3308      	addeq	r3, #8
 801fda8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801fdac:	bf04      	itt	eq
 801fdae:	0100      	lsleq	r0, r0, #4
 801fdb0:	3304      	addeq	r3, #4
 801fdb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801fdb6:	bf04      	itt	eq
 801fdb8:	0080      	lsleq	r0, r0, #2
 801fdba:	3302      	addeq	r3, #2
 801fdbc:	2800      	cmp	r0, #0
 801fdbe:	db05      	blt.n	801fdcc <__hi0bits+0x38>
 801fdc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801fdc4:	f103 0301 	add.w	r3, r3, #1
 801fdc8:	bf08      	it	eq
 801fdca:	2320      	moveq	r3, #32
 801fdcc:	4618      	mov	r0, r3
 801fdce:	4770      	bx	lr
 801fdd0:	2300      	movs	r3, #0
 801fdd2:	e7e4      	b.n	801fd9e <__hi0bits+0xa>

0801fdd4 <__lo0bits>:
 801fdd4:	6803      	ldr	r3, [r0, #0]
 801fdd6:	f013 0207 	ands.w	r2, r3, #7
 801fdda:	d00c      	beq.n	801fdf6 <__lo0bits+0x22>
 801fddc:	07d9      	lsls	r1, r3, #31
 801fdde:	d422      	bmi.n	801fe26 <__lo0bits+0x52>
 801fde0:	079a      	lsls	r2, r3, #30
 801fde2:	bf49      	itett	mi
 801fde4:	085b      	lsrmi	r3, r3, #1
 801fde6:	089b      	lsrpl	r3, r3, #2
 801fde8:	6003      	strmi	r3, [r0, #0]
 801fdea:	2201      	movmi	r2, #1
 801fdec:	bf5c      	itt	pl
 801fdee:	6003      	strpl	r3, [r0, #0]
 801fdf0:	2202      	movpl	r2, #2
 801fdf2:	4610      	mov	r0, r2
 801fdf4:	4770      	bx	lr
 801fdf6:	b299      	uxth	r1, r3
 801fdf8:	b909      	cbnz	r1, 801fdfe <__lo0bits+0x2a>
 801fdfa:	0c1b      	lsrs	r3, r3, #16
 801fdfc:	2210      	movs	r2, #16
 801fdfe:	b2d9      	uxtb	r1, r3
 801fe00:	b909      	cbnz	r1, 801fe06 <__lo0bits+0x32>
 801fe02:	3208      	adds	r2, #8
 801fe04:	0a1b      	lsrs	r3, r3, #8
 801fe06:	0719      	lsls	r1, r3, #28
 801fe08:	bf04      	itt	eq
 801fe0a:	091b      	lsreq	r3, r3, #4
 801fe0c:	3204      	addeq	r2, #4
 801fe0e:	0799      	lsls	r1, r3, #30
 801fe10:	bf04      	itt	eq
 801fe12:	089b      	lsreq	r3, r3, #2
 801fe14:	3202      	addeq	r2, #2
 801fe16:	07d9      	lsls	r1, r3, #31
 801fe18:	d403      	bmi.n	801fe22 <__lo0bits+0x4e>
 801fe1a:	085b      	lsrs	r3, r3, #1
 801fe1c:	f102 0201 	add.w	r2, r2, #1
 801fe20:	d003      	beq.n	801fe2a <__lo0bits+0x56>
 801fe22:	6003      	str	r3, [r0, #0]
 801fe24:	e7e5      	b.n	801fdf2 <__lo0bits+0x1e>
 801fe26:	2200      	movs	r2, #0
 801fe28:	e7e3      	b.n	801fdf2 <__lo0bits+0x1e>
 801fe2a:	2220      	movs	r2, #32
 801fe2c:	e7e1      	b.n	801fdf2 <__lo0bits+0x1e>
	...

0801fe30 <__i2b>:
 801fe30:	b510      	push	{r4, lr}
 801fe32:	460c      	mov	r4, r1
 801fe34:	2101      	movs	r1, #1
 801fe36:	f7ff febb 	bl	801fbb0 <_Balloc>
 801fe3a:	4602      	mov	r2, r0
 801fe3c:	b928      	cbnz	r0, 801fe4a <__i2b+0x1a>
 801fe3e:	4b05      	ldr	r3, [pc, #20]	; (801fe54 <__i2b+0x24>)
 801fe40:	4805      	ldr	r0, [pc, #20]	; (801fe58 <__i2b+0x28>)
 801fe42:	f240 1145 	movw	r1, #325	; 0x145
 801fe46:	f001 f9af 	bl	80211a8 <__assert_func>
 801fe4a:	2301      	movs	r3, #1
 801fe4c:	6144      	str	r4, [r0, #20]
 801fe4e:	6103      	str	r3, [r0, #16]
 801fe50:	bd10      	pop	{r4, pc}
 801fe52:	bf00      	nop
 801fe54:	0802290c 	.word	0x0802290c
 801fe58:	0802297d 	.word	0x0802297d

0801fe5c <__multiply>:
 801fe5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe60:	4691      	mov	r9, r2
 801fe62:	690a      	ldr	r2, [r1, #16]
 801fe64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801fe68:	429a      	cmp	r2, r3
 801fe6a:	bfb8      	it	lt
 801fe6c:	460b      	movlt	r3, r1
 801fe6e:	460c      	mov	r4, r1
 801fe70:	bfbc      	itt	lt
 801fe72:	464c      	movlt	r4, r9
 801fe74:	4699      	movlt	r9, r3
 801fe76:	6927      	ldr	r7, [r4, #16]
 801fe78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801fe7c:	68a3      	ldr	r3, [r4, #8]
 801fe7e:	6861      	ldr	r1, [r4, #4]
 801fe80:	eb07 060a 	add.w	r6, r7, sl
 801fe84:	42b3      	cmp	r3, r6
 801fe86:	b085      	sub	sp, #20
 801fe88:	bfb8      	it	lt
 801fe8a:	3101      	addlt	r1, #1
 801fe8c:	f7ff fe90 	bl	801fbb0 <_Balloc>
 801fe90:	b930      	cbnz	r0, 801fea0 <__multiply+0x44>
 801fe92:	4602      	mov	r2, r0
 801fe94:	4b44      	ldr	r3, [pc, #272]	; (801ffa8 <__multiply+0x14c>)
 801fe96:	4845      	ldr	r0, [pc, #276]	; (801ffac <__multiply+0x150>)
 801fe98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801fe9c:	f001 f984 	bl	80211a8 <__assert_func>
 801fea0:	f100 0514 	add.w	r5, r0, #20
 801fea4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801fea8:	462b      	mov	r3, r5
 801feaa:	2200      	movs	r2, #0
 801feac:	4543      	cmp	r3, r8
 801feae:	d321      	bcc.n	801fef4 <__multiply+0x98>
 801feb0:	f104 0314 	add.w	r3, r4, #20
 801feb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801feb8:	f109 0314 	add.w	r3, r9, #20
 801febc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801fec0:	9202      	str	r2, [sp, #8]
 801fec2:	1b3a      	subs	r2, r7, r4
 801fec4:	3a15      	subs	r2, #21
 801fec6:	f022 0203 	bic.w	r2, r2, #3
 801feca:	3204      	adds	r2, #4
 801fecc:	f104 0115 	add.w	r1, r4, #21
 801fed0:	428f      	cmp	r7, r1
 801fed2:	bf38      	it	cc
 801fed4:	2204      	movcc	r2, #4
 801fed6:	9201      	str	r2, [sp, #4]
 801fed8:	9a02      	ldr	r2, [sp, #8]
 801feda:	9303      	str	r3, [sp, #12]
 801fedc:	429a      	cmp	r2, r3
 801fede:	d80c      	bhi.n	801fefa <__multiply+0x9e>
 801fee0:	2e00      	cmp	r6, #0
 801fee2:	dd03      	ble.n	801feec <__multiply+0x90>
 801fee4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801fee8:	2b00      	cmp	r3, #0
 801feea:	d05b      	beq.n	801ffa4 <__multiply+0x148>
 801feec:	6106      	str	r6, [r0, #16]
 801feee:	b005      	add	sp, #20
 801fef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fef4:	f843 2b04 	str.w	r2, [r3], #4
 801fef8:	e7d8      	b.n	801feac <__multiply+0x50>
 801fefa:	f8b3 a000 	ldrh.w	sl, [r3]
 801fefe:	f1ba 0f00 	cmp.w	sl, #0
 801ff02:	d024      	beq.n	801ff4e <__multiply+0xf2>
 801ff04:	f104 0e14 	add.w	lr, r4, #20
 801ff08:	46a9      	mov	r9, r5
 801ff0a:	f04f 0c00 	mov.w	ip, #0
 801ff0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801ff12:	f8d9 1000 	ldr.w	r1, [r9]
 801ff16:	fa1f fb82 	uxth.w	fp, r2
 801ff1a:	b289      	uxth	r1, r1
 801ff1c:	fb0a 110b 	mla	r1, sl, fp, r1
 801ff20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801ff24:	f8d9 2000 	ldr.w	r2, [r9]
 801ff28:	4461      	add	r1, ip
 801ff2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ff2e:	fb0a c20b 	mla	r2, sl, fp, ip
 801ff32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ff36:	b289      	uxth	r1, r1
 801ff38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ff3c:	4577      	cmp	r7, lr
 801ff3e:	f849 1b04 	str.w	r1, [r9], #4
 801ff42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ff46:	d8e2      	bhi.n	801ff0e <__multiply+0xb2>
 801ff48:	9a01      	ldr	r2, [sp, #4]
 801ff4a:	f845 c002 	str.w	ip, [r5, r2]
 801ff4e:	9a03      	ldr	r2, [sp, #12]
 801ff50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ff54:	3304      	adds	r3, #4
 801ff56:	f1b9 0f00 	cmp.w	r9, #0
 801ff5a:	d021      	beq.n	801ffa0 <__multiply+0x144>
 801ff5c:	6829      	ldr	r1, [r5, #0]
 801ff5e:	f104 0c14 	add.w	ip, r4, #20
 801ff62:	46ae      	mov	lr, r5
 801ff64:	f04f 0a00 	mov.w	sl, #0
 801ff68:	f8bc b000 	ldrh.w	fp, [ip]
 801ff6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ff70:	fb09 220b 	mla	r2, r9, fp, r2
 801ff74:	4452      	add	r2, sl
 801ff76:	b289      	uxth	r1, r1
 801ff78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ff7c:	f84e 1b04 	str.w	r1, [lr], #4
 801ff80:	f85c 1b04 	ldr.w	r1, [ip], #4
 801ff84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ff88:	f8be 1000 	ldrh.w	r1, [lr]
 801ff8c:	fb09 110a 	mla	r1, r9, sl, r1
 801ff90:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801ff94:	4567      	cmp	r7, ip
 801ff96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ff9a:	d8e5      	bhi.n	801ff68 <__multiply+0x10c>
 801ff9c:	9a01      	ldr	r2, [sp, #4]
 801ff9e:	50a9      	str	r1, [r5, r2]
 801ffa0:	3504      	adds	r5, #4
 801ffa2:	e799      	b.n	801fed8 <__multiply+0x7c>
 801ffa4:	3e01      	subs	r6, #1
 801ffa6:	e79b      	b.n	801fee0 <__multiply+0x84>
 801ffa8:	0802290c 	.word	0x0802290c
 801ffac:	0802297d 	.word	0x0802297d

0801ffb0 <__pow5mult>:
 801ffb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ffb4:	4615      	mov	r5, r2
 801ffb6:	f012 0203 	ands.w	r2, r2, #3
 801ffba:	4606      	mov	r6, r0
 801ffbc:	460f      	mov	r7, r1
 801ffbe:	d007      	beq.n	801ffd0 <__pow5mult+0x20>
 801ffc0:	4c25      	ldr	r4, [pc, #148]	; (8020058 <__pow5mult+0xa8>)
 801ffc2:	3a01      	subs	r2, #1
 801ffc4:	2300      	movs	r3, #0
 801ffc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ffca:	f7ff fe53 	bl	801fc74 <__multadd>
 801ffce:	4607      	mov	r7, r0
 801ffd0:	10ad      	asrs	r5, r5, #2
 801ffd2:	d03d      	beq.n	8020050 <__pow5mult+0xa0>
 801ffd4:	69f4      	ldr	r4, [r6, #28]
 801ffd6:	b97c      	cbnz	r4, 801fff8 <__pow5mult+0x48>
 801ffd8:	2010      	movs	r0, #16
 801ffda:	f7fc fbb1 	bl	801c740 <malloc>
 801ffde:	4602      	mov	r2, r0
 801ffe0:	61f0      	str	r0, [r6, #28]
 801ffe2:	b928      	cbnz	r0, 801fff0 <__pow5mult+0x40>
 801ffe4:	4b1d      	ldr	r3, [pc, #116]	; (802005c <__pow5mult+0xac>)
 801ffe6:	481e      	ldr	r0, [pc, #120]	; (8020060 <__pow5mult+0xb0>)
 801ffe8:	f240 11b3 	movw	r1, #435	; 0x1b3
 801ffec:	f001 f8dc 	bl	80211a8 <__assert_func>
 801fff0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801fff4:	6004      	str	r4, [r0, #0]
 801fff6:	60c4      	str	r4, [r0, #12]
 801fff8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801fffc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020000:	b94c      	cbnz	r4, 8020016 <__pow5mult+0x66>
 8020002:	f240 2171 	movw	r1, #625	; 0x271
 8020006:	4630      	mov	r0, r6
 8020008:	f7ff ff12 	bl	801fe30 <__i2b>
 802000c:	2300      	movs	r3, #0
 802000e:	f8c8 0008 	str.w	r0, [r8, #8]
 8020012:	4604      	mov	r4, r0
 8020014:	6003      	str	r3, [r0, #0]
 8020016:	f04f 0900 	mov.w	r9, #0
 802001a:	07eb      	lsls	r3, r5, #31
 802001c:	d50a      	bpl.n	8020034 <__pow5mult+0x84>
 802001e:	4639      	mov	r1, r7
 8020020:	4622      	mov	r2, r4
 8020022:	4630      	mov	r0, r6
 8020024:	f7ff ff1a 	bl	801fe5c <__multiply>
 8020028:	4639      	mov	r1, r7
 802002a:	4680      	mov	r8, r0
 802002c:	4630      	mov	r0, r6
 802002e:	f7ff fdff 	bl	801fc30 <_Bfree>
 8020032:	4647      	mov	r7, r8
 8020034:	106d      	asrs	r5, r5, #1
 8020036:	d00b      	beq.n	8020050 <__pow5mult+0xa0>
 8020038:	6820      	ldr	r0, [r4, #0]
 802003a:	b938      	cbnz	r0, 802004c <__pow5mult+0x9c>
 802003c:	4622      	mov	r2, r4
 802003e:	4621      	mov	r1, r4
 8020040:	4630      	mov	r0, r6
 8020042:	f7ff ff0b 	bl	801fe5c <__multiply>
 8020046:	6020      	str	r0, [r4, #0]
 8020048:	f8c0 9000 	str.w	r9, [r0]
 802004c:	4604      	mov	r4, r0
 802004e:	e7e4      	b.n	802001a <__pow5mult+0x6a>
 8020050:	4638      	mov	r0, r7
 8020052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020056:	bf00      	nop
 8020058:	08022ac8 	.word	0x08022ac8
 802005c:	0802289d 	.word	0x0802289d
 8020060:	0802297d 	.word	0x0802297d

08020064 <__lshift>:
 8020064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020068:	460c      	mov	r4, r1
 802006a:	6849      	ldr	r1, [r1, #4]
 802006c:	6923      	ldr	r3, [r4, #16]
 802006e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020072:	68a3      	ldr	r3, [r4, #8]
 8020074:	4607      	mov	r7, r0
 8020076:	4691      	mov	r9, r2
 8020078:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802007c:	f108 0601 	add.w	r6, r8, #1
 8020080:	42b3      	cmp	r3, r6
 8020082:	db0b      	blt.n	802009c <__lshift+0x38>
 8020084:	4638      	mov	r0, r7
 8020086:	f7ff fd93 	bl	801fbb0 <_Balloc>
 802008a:	4605      	mov	r5, r0
 802008c:	b948      	cbnz	r0, 80200a2 <__lshift+0x3e>
 802008e:	4602      	mov	r2, r0
 8020090:	4b28      	ldr	r3, [pc, #160]	; (8020134 <__lshift+0xd0>)
 8020092:	4829      	ldr	r0, [pc, #164]	; (8020138 <__lshift+0xd4>)
 8020094:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8020098:	f001 f886 	bl	80211a8 <__assert_func>
 802009c:	3101      	adds	r1, #1
 802009e:	005b      	lsls	r3, r3, #1
 80200a0:	e7ee      	b.n	8020080 <__lshift+0x1c>
 80200a2:	2300      	movs	r3, #0
 80200a4:	f100 0114 	add.w	r1, r0, #20
 80200a8:	f100 0210 	add.w	r2, r0, #16
 80200ac:	4618      	mov	r0, r3
 80200ae:	4553      	cmp	r3, sl
 80200b0:	db33      	blt.n	802011a <__lshift+0xb6>
 80200b2:	6920      	ldr	r0, [r4, #16]
 80200b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80200b8:	f104 0314 	add.w	r3, r4, #20
 80200bc:	f019 091f 	ands.w	r9, r9, #31
 80200c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80200c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80200c8:	d02b      	beq.n	8020122 <__lshift+0xbe>
 80200ca:	f1c9 0e20 	rsb	lr, r9, #32
 80200ce:	468a      	mov	sl, r1
 80200d0:	2200      	movs	r2, #0
 80200d2:	6818      	ldr	r0, [r3, #0]
 80200d4:	fa00 f009 	lsl.w	r0, r0, r9
 80200d8:	4310      	orrs	r0, r2
 80200da:	f84a 0b04 	str.w	r0, [sl], #4
 80200de:	f853 2b04 	ldr.w	r2, [r3], #4
 80200e2:	459c      	cmp	ip, r3
 80200e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80200e8:	d8f3      	bhi.n	80200d2 <__lshift+0x6e>
 80200ea:	ebac 0304 	sub.w	r3, ip, r4
 80200ee:	3b15      	subs	r3, #21
 80200f0:	f023 0303 	bic.w	r3, r3, #3
 80200f4:	3304      	adds	r3, #4
 80200f6:	f104 0015 	add.w	r0, r4, #21
 80200fa:	4584      	cmp	ip, r0
 80200fc:	bf38      	it	cc
 80200fe:	2304      	movcc	r3, #4
 8020100:	50ca      	str	r2, [r1, r3]
 8020102:	b10a      	cbz	r2, 8020108 <__lshift+0xa4>
 8020104:	f108 0602 	add.w	r6, r8, #2
 8020108:	3e01      	subs	r6, #1
 802010a:	4638      	mov	r0, r7
 802010c:	612e      	str	r6, [r5, #16]
 802010e:	4621      	mov	r1, r4
 8020110:	f7ff fd8e 	bl	801fc30 <_Bfree>
 8020114:	4628      	mov	r0, r5
 8020116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802011a:	f842 0f04 	str.w	r0, [r2, #4]!
 802011e:	3301      	adds	r3, #1
 8020120:	e7c5      	b.n	80200ae <__lshift+0x4a>
 8020122:	3904      	subs	r1, #4
 8020124:	f853 2b04 	ldr.w	r2, [r3], #4
 8020128:	f841 2f04 	str.w	r2, [r1, #4]!
 802012c:	459c      	cmp	ip, r3
 802012e:	d8f9      	bhi.n	8020124 <__lshift+0xc0>
 8020130:	e7ea      	b.n	8020108 <__lshift+0xa4>
 8020132:	bf00      	nop
 8020134:	0802290c 	.word	0x0802290c
 8020138:	0802297d 	.word	0x0802297d

0802013c <__mcmp>:
 802013c:	b530      	push	{r4, r5, lr}
 802013e:	6902      	ldr	r2, [r0, #16]
 8020140:	690c      	ldr	r4, [r1, #16]
 8020142:	1b12      	subs	r2, r2, r4
 8020144:	d10e      	bne.n	8020164 <__mcmp+0x28>
 8020146:	f100 0314 	add.w	r3, r0, #20
 802014a:	3114      	adds	r1, #20
 802014c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8020150:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8020154:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8020158:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802015c:	42a5      	cmp	r5, r4
 802015e:	d003      	beq.n	8020168 <__mcmp+0x2c>
 8020160:	d305      	bcc.n	802016e <__mcmp+0x32>
 8020162:	2201      	movs	r2, #1
 8020164:	4610      	mov	r0, r2
 8020166:	bd30      	pop	{r4, r5, pc}
 8020168:	4283      	cmp	r3, r0
 802016a:	d3f3      	bcc.n	8020154 <__mcmp+0x18>
 802016c:	e7fa      	b.n	8020164 <__mcmp+0x28>
 802016e:	f04f 32ff 	mov.w	r2, #4294967295
 8020172:	e7f7      	b.n	8020164 <__mcmp+0x28>

08020174 <__mdiff>:
 8020174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020178:	460c      	mov	r4, r1
 802017a:	4606      	mov	r6, r0
 802017c:	4611      	mov	r1, r2
 802017e:	4620      	mov	r0, r4
 8020180:	4690      	mov	r8, r2
 8020182:	f7ff ffdb 	bl	802013c <__mcmp>
 8020186:	1e05      	subs	r5, r0, #0
 8020188:	d110      	bne.n	80201ac <__mdiff+0x38>
 802018a:	4629      	mov	r1, r5
 802018c:	4630      	mov	r0, r6
 802018e:	f7ff fd0f 	bl	801fbb0 <_Balloc>
 8020192:	b930      	cbnz	r0, 80201a2 <__mdiff+0x2e>
 8020194:	4b3a      	ldr	r3, [pc, #232]	; (8020280 <__mdiff+0x10c>)
 8020196:	4602      	mov	r2, r0
 8020198:	f240 2137 	movw	r1, #567	; 0x237
 802019c:	4839      	ldr	r0, [pc, #228]	; (8020284 <__mdiff+0x110>)
 802019e:	f001 f803 	bl	80211a8 <__assert_func>
 80201a2:	2301      	movs	r3, #1
 80201a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80201a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201ac:	bfa4      	itt	ge
 80201ae:	4643      	movge	r3, r8
 80201b0:	46a0      	movge	r8, r4
 80201b2:	4630      	mov	r0, r6
 80201b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80201b8:	bfa6      	itte	ge
 80201ba:	461c      	movge	r4, r3
 80201bc:	2500      	movge	r5, #0
 80201be:	2501      	movlt	r5, #1
 80201c0:	f7ff fcf6 	bl	801fbb0 <_Balloc>
 80201c4:	b920      	cbnz	r0, 80201d0 <__mdiff+0x5c>
 80201c6:	4b2e      	ldr	r3, [pc, #184]	; (8020280 <__mdiff+0x10c>)
 80201c8:	4602      	mov	r2, r0
 80201ca:	f240 2145 	movw	r1, #581	; 0x245
 80201ce:	e7e5      	b.n	802019c <__mdiff+0x28>
 80201d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80201d4:	6926      	ldr	r6, [r4, #16]
 80201d6:	60c5      	str	r5, [r0, #12]
 80201d8:	f104 0914 	add.w	r9, r4, #20
 80201dc:	f108 0514 	add.w	r5, r8, #20
 80201e0:	f100 0e14 	add.w	lr, r0, #20
 80201e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80201e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80201ec:	f108 0210 	add.w	r2, r8, #16
 80201f0:	46f2      	mov	sl, lr
 80201f2:	2100      	movs	r1, #0
 80201f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80201f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80201fc:	fa11 f88b 	uxtah	r8, r1, fp
 8020200:	b299      	uxth	r1, r3
 8020202:	0c1b      	lsrs	r3, r3, #16
 8020204:	eba8 0801 	sub.w	r8, r8, r1
 8020208:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802020c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8020210:	fa1f f888 	uxth.w	r8, r8
 8020214:	1419      	asrs	r1, r3, #16
 8020216:	454e      	cmp	r6, r9
 8020218:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802021c:	f84a 3b04 	str.w	r3, [sl], #4
 8020220:	d8e8      	bhi.n	80201f4 <__mdiff+0x80>
 8020222:	1b33      	subs	r3, r6, r4
 8020224:	3b15      	subs	r3, #21
 8020226:	f023 0303 	bic.w	r3, r3, #3
 802022a:	3304      	adds	r3, #4
 802022c:	3415      	adds	r4, #21
 802022e:	42a6      	cmp	r6, r4
 8020230:	bf38      	it	cc
 8020232:	2304      	movcc	r3, #4
 8020234:	441d      	add	r5, r3
 8020236:	4473      	add	r3, lr
 8020238:	469e      	mov	lr, r3
 802023a:	462e      	mov	r6, r5
 802023c:	4566      	cmp	r6, ip
 802023e:	d30e      	bcc.n	802025e <__mdiff+0xea>
 8020240:	f10c 0203 	add.w	r2, ip, #3
 8020244:	1b52      	subs	r2, r2, r5
 8020246:	f022 0203 	bic.w	r2, r2, #3
 802024a:	3d03      	subs	r5, #3
 802024c:	45ac      	cmp	ip, r5
 802024e:	bf38      	it	cc
 8020250:	2200      	movcc	r2, #0
 8020252:	4413      	add	r3, r2
 8020254:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8020258:	b17a      	cbz	r2, 802027a <__mdiff+0x106>
 802025a:	6107      	str	r7, [r0, #16]
 802025c:	e7a4      	b.n	80201a8 <__mdiff+0x34>
 802025e:	f856 8b04 	ldr.w	r8, [r6], #4
 8020262:	fa11 f288 	uxtah	r2, r1, r8
 8020266:	1414      	asrs	r4, r2, #16
 8020268:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802026c:	b292      	uxth	r2, r2
 802026e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8020272:	f84e 2b04 	str.w	r2, [lr], #4
 8020276:	1421      	asrs	r1, r4, #16
 8020278:	e7e0      	b.n	802023c <__mdiff+0xc8>
 802027a:	3f01      	subs	r7, #1
 802027c:	e7ea      	b.n	8020254 <__mdiff+0xe0>
 802027e:	bf00      	nop
 8020280:	0802290c 	.word	0x0802290c
 8020284:	0802297d 	.word	0x0802297d

08020288 <__ulp>:
 8020288:	b082      	sub	sp, #8
 802028a:	ed8d 0b00 	vstr	d0, [sp]
 802028e:	9a01      	ldr	r2, [sp, #4]
 8020290:	4b0f      	ldr	r3, [pc, #60]	; (80202d0 <__ulp+0x48>)
 8020292:	4013      	ands	r3, r2
 8020294:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8020298:	2b00      	cmp	r3, #0
 802029a:	dc08      	bgt.n	80202ae <__ulp+0x26>
 802029c:	425b      	negs	r3, r3
 802029e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80202a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80202a6:	da04      	bge.n	80202b2 <__ulp+0x2a>
 80202a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80202ac:	4113      	asrs	r3, r2
 80202ae:	2200      	movs	r2, #0
 80202b0:	e008      	b.n	80202c4 <__ulp+0x3c>
 80202b2:	f1a2 0314 	sub.w	r3, r2, #20
 80202b6:	2b1e      	cmp	r3, #30
 80202b8:	bfda      	itte	le
 80202ba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80202be:	40da      	lsrle	r2, r3
 80202c0:	2201      	movgt	r2, #1
 80202c2:	2300      	movs	r3, #0
 80202c4:	4619      	mov	r1, r3
 80202c6:	4610      	mov	r0, r2
 80202c8:	ec41 0b10 	vmov	d0, r0, r1
 80202cc:	b002      	add	sp, #8
 80202ce:	4770      	bx	lr
 80202d0:	7ff00000 	.word	0x7ff00000

080202d4 <__b2d>:
 80202d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202d8:	6906      	ldr	r6, [r0, #16]
 80202da:	f100 0814 	add.w	r8, r0, #20
 80202de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80202e2:	1f37      	subs	r7, r6, #4
 80202e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80202e8:	4610      	mov	r0, r2
 80202ea:	f7ff fd53 	bl	801fd94 <__hi0bits>
 80202ee:	f1c0 0320 	rsb	r3, r0, #32
 80202f2:	280a      	cmp	r0, #10
 80202f4:	600b      	str	r3, [r1, #0]
 80202f6:	491b      	ldr	r1, [pc, #108]	; (8020364 <__b2d+0x90>)
 80202f8:	dc15      	bgt.n	8020326 <__b2d+0x52>
 80202fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80202fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8020302:	45b8      	cmp	r8, r7
 8020304:	ea43 0501 	orr.w	r5, r3, r1
 8020308:	bf34      	ite	cc
 802030a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802030e:	2300      	movcs	r3, #0
 8020310:	3015      	adds	r0, #21
 8020312:	fa02 f000 	lsl.w	r0, r2, r0
 8020316:	fa23 f30c 	lsr.w	r3, r3, ip
 802031a:	4303      	orrs	r3, r0
 802031c:	461c      	mov	r4, r3
 802031e:	ec45 4b10 	vmov	d0, r4, r5
 8020322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020326:	45b8      	cmp	r8, r7
 8020328:	bf3a      	itte	cc
 802032a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802032e:	f1a6 0708 	subcc.w	r7, r6, #8
 8020332:	2300      	movcs	r3, #0
 8020334:	380b      	subs	r0, #11
 8020336:	d012      	beq.n	802035e <__b2d+0x8a>
 8020338:	f1c0 0120 	rsb	r1, r0, #32
 802033c:	fa23 f401 	lsr.w	r4, r3, r1
 8020340:	4082      	lsls	r2, r0
 8020342:	4322      	orrs	r2, r4
 8020344:	4547      	cmp	r7, r8
 8020346:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 802034a:	bf8c      	ite	hi
 802034c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8020350:	2200      	movls	r2, #0
 8020352:	4083      	lsls	r3, r0
 8020354:	40ca      	lsrs	r2, r1
 8020356:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802035a:	4313      	orrs	r3, r2
 802035c:	e7de      	b.n	802031c <__b2d+0x48>
 802035e:	ea42 0501 	orr.w	r5, r2, r1
 8020362:	e7db      	b.n	802031c <__b2d+0x48>
 8020364:	3ff00000 	.word	0x3ff00000

08020368 <__d2b>:
 8020368:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802036c:	460f      	mov	r7, r1
 802036e:	2101      	movs	r1, #1
 8020370:	ec59 8b10 	vmov	r8, r9, d0
 8020374:	4616      	mov	r6, r2
 8020376:	f7ff fc1b 	bl	801fbb0 <_Balloc>
 802037a:	4604      	mov	r4, r0
 802037c:	b930      	cbnz	r0, 802038c <__d2b+0x24>
 802037e:	4602      	mov	r2, r0
 8020380:	4b24      	ldr	r3, [pc, #144]	; (8020414 <__d2b+0xac>)
 8020382:	4825      	ldr	r0, [pc, #148]	; (8020418 <__d2b+0xb0>)
 8020384:	f240 310f 	movw	r1, #783	; 0x30f
 8020388:	f000 ff0e 	bl	80211a8 <__assert_func>
 802038c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020394:	bb2d      	cbnz	r5, 80203e2 <__d2b+0x7a>
 8020396:	9301      	str	r3, [sp, #4]
 8020398:	f1b8 0300 	subs.w	r3, r8, #0
 802039c:	d026      	beq.n	80203ec <__d2b+0x84>
 802039e:	4668      	mov	r0, sp
 80203a0:	9300      	str	r3, [sp, #0]
 80203a2:	f7ff fd17 	bl	801fdd4 <__lo0bits>
 80203a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80203aa:	b1e8      	cbz	r0, 80203e8 <__d2b+0x80>
 80203ac:	f1c0 0320 	rsb	r3, r0, #32
 80203b0:	fa02 f303 	lsl.w	r3, r2, r3
 80203b4:	430b      	orrs	r3, r1
 80203b6:	40c2      	lsrs	r2, r0
 80203b8:	6163      	str	r3, [r4, #20]
 80203ba:	9201      	str	r2, [sp, #4]
 80203bc:	9b01      	ldr	r3, [sp, #4]
 80203be:	61a3      	str	r3, [r4, #24]
 80203c0:	2b00      	cmp	r3, #0
 80203c2:	bf14      	ite	ne
 80203c4:	2202      	movne	r2, #2
 80203c6:	2201      	moveq	r2, #1
 80203c8:	6122      	str	r2, [r4, #16]
 80203ca:	b1bd      	cbz	r5, 80203fc <__d2b+0x94>
 80203cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80203d0:	4405      	add	r5, r0
 80203d2:	603d      	str	r5, [r7, #0]
 80203d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80203d8:	6030      	str	r0, [r6, #0]
 80203da:	4620      	mov	r0, r4
 80203dc:	b003      	add	sp, #12
 80203de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80203e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80203e6:	e7d6      	b.n	8020396 <__d2b+0x2e>
 80203e8:	6161      	str	r1, [r4, #20]
 80203ea:	e7e7      	b.n	80203bc <__d2b+0x54>
 80203ec:	a801      	add	r0, sp, #4
 80203ee:	f7ff fcf1 	bl	801fdd4 <__lo0bits>
 80203f2:	9b01      	ldr	r3, [sp, #4]
 80203f4:	6163      	str	r3, [r4, #20]
 80203f6:	3020      	adds	r0, #32
 80203f8:	2201      	movs	r2, #1
 80203fa:	e7e5      	b.n	80203c8 <__d2b+0x60>
 80203fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020400:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8020404:	6038      	str	r0, [r7, #0]
 8020406:	6918      	ldr	r0, [r3, #16]
 8020408:	f7ff fcc4 	bl	801fd94 <__hi0bits>
 802040c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020410:	e7e2      	b.n	80203d8 <__d2b+0x70>
 8020412:	bf00      	nop
 8020414:	0802290c 	.word	0x0802290c
 8020418:	0802297d 	.word	0x0802297d

0802041c <__ratio>:
 802041c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020420:	4688      	mov	r8, r1
 8020422:	4669      	mov	r1, sp
 8020424:	4681      	mov	r9, r0
 8020426:	f7ff ff55 	bl	80202d4 <__b2d>
 802042a:	a901      	add	r1, sp, #4
 802042c:	4640      	mov	r0, r8
 802042e:	ec55 4b10 	vmov	r4, r5, d0
 8020432:	f7ff ff4f 	bl	80202d4 <__b2d>
 8020436:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802043a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802043e:	eba3 0c02 	sub.w	ip, r3, r2
 8020442:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020446:	1a9b      	subs	r3, r3, r2
 8020448:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802044c:	ec51 0b10 	vmov	r0, r1, d0
 8020450:	2b00      	cmp	r3, #0
 8020452:	bfd6      	itet	le
 8020454:	460a      	movle	r2, r1
 8020456:	462a      	movgt	r2, r5
 8020458:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802045c:	468b      	mov	fp, r1
 802045e:	462f      	mov	r7, r5
 8020460:	bfd4      	ite	le
 8020462:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8020466:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802046a:	4620      	mov	r0, r4
 802046c:	ee10 2a10 	vmov	r2, s0
 8020470:	465b      	mov	r3, fp
 8020472:	4639      	mov	r1, r7
 8020474:	f7e0 f9ea 	bl	800084c <__aeabi_ddiv>
 8020478:	ec41 0b10 	vmov	d0, r0, r1
 802047c:	b003      	add	sp, #12
 802047e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020482 <__copybits>:
 8020482:	3901      	subs	r1, #1
 8020484:	b570      	push	{r4, r5, r6, lr}
 8020486:	1149      	asrs	r1, r1, #5
 8020488:	6914      	ldr	r4, [r2, #16]
 802048a:	3101      	adds	r1, #1
 802048c:	f102 0314 	add.w	r3, r2, #20
 8020490:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8020494:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8020498:	1f05      	subs	r5, r0, #4
 802049a:	42a3      	cmp	r3, r4
 802049c:	d30c      	bcc.n	80204b8 <__copybits+0x36>
 802049e:	1aa3      	subs	r3, r4, r2
 80204a0:	3b11      	subs	r3, #17
 80204a2:	f023 0303 	bic.w	r3, r3, #3
 80204a6:	3211      	adds	r2, #17
 80204a8:	42a2      	cmp	r2, r4
 80204aa:	bf88      	it	hi
 80204ac:	2300      	movhi	r3, #0
 80204ae:	4418      	add	r0, r3
 80204b0:	2300      	movs	r3, #0
 80204b2:	4288      	cmp	r0, r1
 80204b4:	d305      	bcc.n	80204c2 <__copybits+0x40>
 80204b6:	bd70      	pop	{r4, r5, r6, pc}
 80204b8:	f853 6b04 	ldr.w	r6, [r3], #4
 80204bc:	f845 6f04 	str.w	r6, [r5, #4]!
 80204c0:	e7eb      	b.n	802049a <__copybits+0x18>
 80204c2:	f840 3b04 	str.w	r3, [r0], #4
 80204c6:	e7f4      	b.n	80204b2 <__copybits+0x30>

080204c8 <__any_on>:
 80204c8:	f100 0214 	add.w	r2, r0, #20
 80204cc:	6900      	ldr	r0, [r0, #16]
 80204ce:	114b      	asrs	r3, r1, #5
 80204d0:	4298      	cmp	r0, r3
 80204d2:	b510      	push	{r4, lr}
 80204d4:	db11      	blt.n	80204fa <__any_on+0x32>
 80204d6:	dd0a      	ble.n	80204ee <__any_on+0x26>
 80204d8:	f011 011f 	ands.w	r1, r1, #31
 80204dc:	d007      	beq.n	80204ee <__any_on+0x26>
 80204de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80204e2:	fa24 f001 	lsr.w	r0, r4, r1
 80204e6:	fa00 f101 	lsl.w	r1, r0, r1
 80204ea:	428c      	cmp	r4, r1
 80204ec:	d10b      	bne.n	8020506 <__any_on+0x3e>
 80204ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80204f2:	4293      	cmp	r3, r2
 80204f4:	d803      	bhi.n	80204fe <__any_on+0x36>
 80204f6:	2000      	movs	r0, #0
 80204f8:	bd10      	pop	{r4, pc}
 80204fa:	4603      	mov	r3, r0
 80204fc:	e7f7      	b.n	80204ee <__any_on+0x26>
 80204fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020502:	2900      	cmp	r1, #0
 8020504:	d0f5      	beq.n	80204f2 <__any_on+0x2a>
 8020506:	2001      	movs	r0, #1
 8020508:	e7f6      	b.n	80204f8 <__any_on+0x30>

0802050a <_malloc_usable_size_r>:
 802050a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802050e:	1f18      	subs	r0, r3, #4
 8020510:	2b00      	cmp	r3, #0
 8020512:	bfbc      	itt	lt
 8020514:	580b      	ldrlt	r3, [r1, r0]
 8020516:	18c0      	addlt	r0, r0, r3
 8020518:	4770      	bx	lr
	...

0802051c <_strtol_l.constprop.0>:
 802051c:	2b01      	cmp	r3, #1
 802051e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020522:	d001      	beq.n	8020528 <_strtol_l.constprop.0+0xc>
 8020524:	2b24      	cmp	r3, #36	; 0x24
 8020526:	d906      	bls.n	8020536 <_strtol_l.constprop.0+0x1a>
 8020528:	f7fe f8c6 	bl	801e6b8 <__errno>
 802052c:	2316      	movs	r3, #22
 802052e:	6003      	str	r3, [r0, #0]
 8020530:	2000      	movs	r0, #0
 8020532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020536:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 802061c <_strtol_l.constprop.0+0x100>
 802053a:	460d      	mov	r5, r1
 802053c:	462e      	mov	r6, r5
 802053e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020542:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8020546:	f017 0708 	ands.w	r7, r7, #8
 802054a:	d1f7      	bne.n	802053c <_strtol_l.constprop.0+0x20>
 802054c:	2c2d      	cmp	r4, #45	; 0x2d
 802054e:	d132      	bne.n	80205b6 <_strtol_l.constprop.0+0x9a>
 8020550:	782c      	ldrb	r4, [r5, #0]
 8020552:	2701      	movs	r7, #1
 8020554:	1cb5      	adds	r5, r6, #2
 8020556:	2b00      	cmp	r3, #0
 8020558:	d05b      	beq.n	8020612 <_strtol_l.constprop.0+0xf6>
 802055a:	2b10      	cmp	r3, #16
 802055c:	d109      	bne.n	8020572 <_strtol_l.constprop.0+0x56>
 802055e:	2c30      	cmp	r4, #48	; 0x30
 8020560:	d107      	bne.n	8020572 <_strtol_l.constprop.0+0x56>
 8020562:	782c      	ldrb	r4, [r5, #0]
 8020564:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020568:	2c58      	cmp	r4, #88	; 0x58
 802056a:	d14d      	bne.n	8020608 <_strtol_l.constprop.0+0xec>
 802056c:	786c      	ldrb	r4, [r5, #1]
 802056e:	2310      	movs	r3, #16
 8020570:	3502      	adds	r5, #2
 8020572:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8020576:	f108 38ff 	add.w	r8, r8, #4294967295
 802057a:	f04f 0e00 	mov.w	lr, #0
 802057e:	fbb8 f9f3 	udiv	r9, r8, r3
 8020582:	4676      	mov	r6, lr
 8020584:	fb03 8a19 	mls	sl, r3, r9, r8
 8020588:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802058c:	f1bc 0f09 	cmp.w	ip, #9
 8020590:	d816      	bhi.n	80205c0 <_strtol_l.constprop.0+0xa4>
 8020592:	4664      	mov	r4, ip
 8020594:	42a3      	cmp	r3, r4
 8020596:	dd24      	ble.n	80205e2 <_strtol_l.constprop.0+0xc6>
 8020598:	f1be 3fff 	cmp.w	lr, #4294967295
 802059c:	d008      	beq.n	80205b0 <_strtol_l.constprop.0+0x94>
 802059e:	45b1      	cmp	r9, r6
 80205a0:	d31c      	bcc.n	80205dc <_strtol_l.constprop.0+0xc0>
 80205a2:	d101      	bne.n	80205a8 <_strtol_l.constprop.0+0x8c>
 80205a4:	45a2      	cmp	sl, r4
 80205a6:	db19      	blt.n	80205dc <_strtol_l.constprop.0+0xc0>
 80205a8:	fb06 4603 	mla	r6, r6, r3, r4
 80205ac:	f04f 0e01 	mov.w	lr, #1
 80205b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80205b4:	e7e8      	b.n	8020588 <_strtol_l.constprop.0+0x6c>
 80205b6:	2c2b      	cmp	r4, #43	; 0x2b
 80205b8:	bf04      	itt	eq
 80205ba:	782c      	ldrbeq	r4, [r5, #0]
 80205bc:	1cb5      	addeq	r5, r6, #2
 80205be:	e7ca      	b.n	8020556 <_strtol_l.constprop.0+0x3a>
 80205c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80205c4:	f1bc 0f19 	cmp.w	ip, #25
 80205c8:	d801      	bhi.n	80205ce <_strtol_l.constprop.0+0xb2>
 80205ca:	3c37      	subs	r4, #55	; 0x37
 80205cc:	e7e2      	b.n	8020594 <_strtol_l.constprop.0+0x78>
 80205ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80205d2:	f1bc 0f19 	cmp.w	ip, #25
 80205d6:	d804      	bhi.n	80205e2 <_strtol_l.constprop.0+0xc6>
 80205d8:	3c57      	subs	r4, #87	; 0x57
 80205da:	e7db      	b.n	8020594 <_strtol_l.constprop.0+0x78>
 80205dc:	f04f 3eff 	mov.w	lr, #4294967295
 80205e0:	e7e6      	b.n	80205b0 <_strtol_l.constprop.0+0x94>
 80205e2:	f1be 3fff 	cmp.w	lr, #4294967295
 80205e6:	d105      	bne.n	80205f4 <_strtol_l.constprop.0+0xd8>
 80205e8:	2322      	movs	r3, #34	; 0x22
 80205ea:	6003      	str	r3, [r0, #0]
 80205ec:	4646      	mov	r6, r8
 80205ee:	b942      	cbnz	r2, 8020602 <_strtol_l.constprop.0+0xe6>
 80205f0:	4630      	mov	r0, r6
 80205f2:	e79e      	b.n	8020532 <_strtol_l.constprop.0+0x16>
 80205f4:	b107      	cbz	r7, 80205f8 <_strtol_l.constprop.0+0xdc>
 80205f6:	4276      	negs	r6, r6
 80205f8:	2a00      	cmp	r2, #0
 80205fa:	d0f9      	beq.n	80205f0 <_strtol_l.constprop.0+0xd4>
 80205fc:	f1be 0f00 	cmp.w	lr, #0
 8020600:	d000      	beq.n	8020604 <_strtol_l.constprop.0+0xe8>
 8020602:	1e69      	subs	r1, r5, #1
 8020604:	6011      	str	r1, [r2, #0]
 8020606:	e7f3      	b.n	80205f0 <_strtol_l.constprop.0+0xd4>
 8020608:	2430      	movs	r4, #48	; 0x30
 802060a:	2b00      	cmp	r3, #0
 802060c:	d1b1      	bne.n	8020572 <_strtol_l.constprop.0+0x56>
 802060e:	2308      	movs	r3, #8
 8020610:	e7af      	b.n	8020572 <_strtol_l.constprop.0+0x56>
 8020612:	2c30      	cmp	r4, #48	; 0x30
 8020614:	d0a5      	beq.n	8020562 <_strtol_l.constprop.0+0x46>
 8020616:	230a      	movs	r3, #10
 8020618:	e7ab      	b.n	8020572 <_strtol_l.constprop.0+0x56>
 802061a:	bf00      	nop
 802061c:	08022751 	.word	0x08022751

08020620 <_strtol_r>:
 8020620:	f7ff bf7c 	b.w	802051c <_strtol_l.constprop.0>

08020624 <__ascii_wctomb>:
 8020624:	b149      	cbz	r1, 802063a <__ascii_wctomb+0x16>
 8020626:	2aff      	cmp	r2, #255	; 0xff
 8020628:	bf85      	ittet	hi
 802062a:	238a      	movhi	r3, #138	; 0x8a
 802062c:	6003      	strhi	r3, [r0, #0]
 802062e:	700a      	strbls	r2, [r1, #0]
 8020630:	f04f 30ff 	movhi.w	r0, #4294967295
 8020634:	bf98      	it	ls
 8020636:	2001      	movls	r0, #1
 8020638:	4770      	bx	lr
 802063a:	4608      	mov	r0, r1
 802063c:	4770      	bx	lr

0802063e <__ssputs_r>:
 802063e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020642:	688e      	ldr	r6, [r1, #8]
 8020644:	461f      	mov	r7, r3
 8020646:	42be      	cmp	r6, r7
 8020648:	680b      	ldr	r3, [r1, #0]
 802064a:	4682      	mov	sl, r0
 802064c:	460c      	mov	r4, r1
 802064e:	4690      	mov	r8, r2
 8020650:	d82c      	bhi.n	80206ac <__ssputs_r+0x6e>
 8020652:	898a      	ldrh	r2, [r1, #12]
 8020654:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020658:	d026      	beq.n	80206a8 <__ssputs_r+0x6a>
 802065a:	6965      	ldr	r5, [r4, #20]
 802065c:	6909      	ldr	r1, [r1, #16]
 802065e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020662:	eba3 0901 	sub.w	r9, r3, r1
 8020666:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802066a:	1c7b      	adds	r3, r7, #1
 802066c:	444b      	add	r3, r9
 802066e:	106d      	asrs	r5, r5, #1
 8020670:	429d      	cmp	r5, r3
 8020672:	bf38      	it	cc
 8020674:	461d      	movcc	r5, r3
 8020676:	0553      	lsls	r3, r2, #21
 8020678:	d527      	bpl.n	80206ca <__ssputs_r+0x8c>
 802067a:	4629      	mov	r1, r5
 802067c:	f7fc f890 	bl	801c7a0 <_malloc_r>
 8020680:	4606      	mov	r6, r0
 8020682:	b360      	cbz	r0, 80206de <__ssputs_r+0xa0>
 8020684:	6921      	ldr	r1, [r4, #16]
 8020686:	464a      	mov	r2, r9
 8020688:	f7fe f842 	bl	801e710 <memcpy>
 802068c:	89a3      	ldrh	r3, [r4, #12]
 802068e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020696:	81a3      	strh	r3, [r4, #12]
 8020698:	6126      	str	r6, [r4, #16]
 802069a:	6165      	str	r5, [r4, #20]
 802069c:	444e      	add	r6, r9
 802069e:	eba5 0509 	sub.w	r5, r5, r9
 80206a2:	6026      	str	r6, [r4, #0]
 80206a4:	60a5      	str	r5, [r4, #8]
 80206a6:	463e      	mov	r6, r7
 80206a8:	42be      	cmp	r6, r7
 80206aa:	d900      	bls.n	80206ae <__ssputs_r+0x70>
 80206ac:	463e      	mov	r6, r7
 80206ae:	6820      	ldr	r0, [r4, #0]
 80206b0:	4632      	mov	r2, r6
 80206b2:	4641      	mov	r1, r8
 80206b4:	f000 fd5d 	bl	8021172 <memmove>
 80206b8:	68a3      	ldr	r3, [r4, #8]
 80206ba:	1b9b      	subs	r3, r3, r6
 80206bc:	60a3      	str	r3, [r4, #8]
 80206be:	6823      	ldr	r3, [r4, #0]
 80206c0:	4433      	add	r3, r6
 80206c2:	6023      	str	r3, [r4, #0]
 80206c4:	2000      	movs	r0, #0
 80206c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80206ca:	462a      	mov	r2, r5
 80206cc:	f7fc f8fc 	bl	801c8c8 <_realloc_r>
 80206d0:	4606      	mov	r6, r0
 80206d2:	2800      	cmp	r0, #0
 80206d4:	d1e0      	bne.n	8020698 <__ssputs_r+0x5a>
 80206d6:	6921      	ldr	r1, [r4, #16]
 80206d8:	4650      	mov	r0, sl
 80206da:	f7fe feb3 	bl	801f444 <_free_r>
 80206de:	230c      	movs	r3, #12
 80206e0:	f8ca 3000 	str.w	r3, [sl]
 80206e4:	89a3      	ldrh	r3, [r4, #12]
 80206e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80206ea:	81a3      	strh	r3, [r4, #12]
 80206ec:	f04f 30ff 	mov.w	r0, #4294967295
 80206f0:	e7e9      	b.n	80206c6 <__ssputs_r+0x88>
	...

080206f4 <_svfiprintf_r>:
 80206f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206f8:	4698      	mov	r8, r3
 80206fa:	898b      	ldrh	r3, [r1, #12]
 80206fc:	061b      	lsls	r3, r3, #24
 80206fe:	b09d      	sub	sp, #116	; 0x74
 8020700:	4607      	mov	r7, r0
 8020702:	460d      	mov	r5, r1
 8020704:	4614      	mov	r4, r2
 8020706:	d50e      	bpl.n	8020726 <_svfiprintf_r+0x32>
 8020708:	690b      	ldr	r3, [r1, #16]
 802070a:	b963      	cbnz	r3, 8020726 <_svfiprintf_r+0x32>
 802070c:	2140      	movs	r1, #64	; 0x40
 802070e:	f7fc f847 	bl	801c7a0 <_malloc_r>
 8020712:	6028      	str	r0, [r5, #0]
 8020714:	6128      	str	r0, [r5, #16]
 8020716:	b920      	cbnz	r0, 8020722 <_svfiprintf_r+0x2e>
 8020718:	230c      	movs	r3, #12
 802071a:	603b      	str	r3, [r7, #0]
 802071c:	f04f 30ff 	mov.w	r0, #4294967295
 8020720:	e0d0      	b.n	80208c4 <_svfiprintf_r+0x1d0>
 8020722:	2340      	movs	r3, #64	; 0x40
 8020724:	616b      	str	r3, [r5, #20]
 8020726:	2300      	movs	r3, #0
 8020728:	9309      	str	r3, [sp, #36]	; 0x24
 802072a:	2320      	movs	r3, #32
 802072c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020730:	f8cd 800c 	str.w	r8, [sp, #12]
 8020734:	2330      	movs	r3, #48	; 0x30
 8020736:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80208dc <_svfiprintf_r+0x1e8>
 802073a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802073e:	f04f 0901 	mov.w	r9, #1
 8020742:	4623      	mov	r3, r4
 8020744:	469a      	mov	sl, r3
 8020746:	f813 2b01 	ldrb.w	r2, [r3], #1
 802074a:	b10a      	cbz	r2, 8020750 <_svfiprintf_r+0x5c>
 802074c:	2a25      	cmp	r2, #37	; 0x25
 802074e:	d1f9      	bne.n	8020744 <_svfiprintf_r+0x50>
 8020750:	ebba 0b04 	subs.w	fp, sl, r4
 8020754:	d00b      	beq.n	802076e <_svfiprintf_r+0x7a>
 8020756:	465b      	mov	r3, fp
 8020758:	4622      	mov	r2, r4
 802075a:	4629      	mov	r1, r5
 802075c:	4638      	mov	r0, r7
 802075e:	f7ff ff6e 	bl	802063e <__ssputs_r>
 8020762:	3001      	adds	r0, #1
 8020764:	f000 80a9 	beq.w	80208ba <_svfiprintf_r+0x1c6>
 8020768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802076a:	445a      	add	r2, fp
 802076c:	9209      	str	r2, [sp, #36]	; 0x24
 802076e:	f89a 3000 	ldrb.w	r3, [sl]
 8020772:	2b00      	cmp	r3, #0
 8020774:	f000 80a1 	beq.w	80208ba <_svfiprintf_r+0x1c6>
 8020778:	2300      	movs	r3, #0
 802077a:	f04f 32ff 	mov.w	r2, #4294967295
 802077e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020782:	f10a 0a01 	add.w	sl, sl, #1
 8020786:	9304      	str	r3, [sp, #16]
 8020788:	9307      	str	r3, [sp, #28]
 802078a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802078e:	931a      	str	r3, [sp, #104]	; 0x68
 8020790:	4654      	mov	r4, sl
 8020792:	2205      	movs	r2, #5
 8020794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020798:	4850      	ldr	r0, [pc, #320]	; (80208dc <_svfiprintf_r+0x1e8>)
 802079a:	f7df fd19 	bl	80001d0 <memchr>
 802079e:	9a04      	ldr	r2, [sp, #16]
 80207a0:	b9d8      	cbnz	r0, 80207da <_svfiprintf_r+0xe6>
 80207a2:	06d0      	lsls	r0, r2, #27
 80207a4:	bf44      	itt	mi
 80207a6:	2320      	movmi	r3, #32
 80207a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80207ac:	0711      	lsls	r1, r2, #28
 80207ae:	bf44      	itt	mi
 80207b0:	232b      	movmi	r3, #43	; 0x2b
 80207b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80207b6:	f89a 3000 	ldrb.w	r3, [sl]
 80207ba:	2b2a      	cmp	r3, #42	; 0x2a
 80207bc:	d015      	beq.n	80207ea <_svfiprintf_r+0xf6>
 80207be:	9a07      	ldr	r2, [sp, #28]
 80207c0:	4654      	mov	r4, sl
 80207c2:	2000      	movs	r0, #0
 80207c4:	f04f 0c0a 	mov.w	ip, #10
 80207c8:	4621      	mov	r1, r4
 80207ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80207ce:	3b30      	subs	r3, #48	; 0x30
 80207d0:	2b09      	cmp	r3, #9
 80207d2:	d94d      	bls.n	8020870 <_svfiprintf_r+0x17c>
 80207d4:	b1b0      	cbz	r0, 8020804 <_svfiprintf_r+0x110>
 80207d6:	9207      	str	r2, [sp, #28]
 80207d8:	e014      	b.n	8020804 <_svfiprintf_r+0x110>
 80207da:	eba0 0308 	sub.w	r3, r0, r8
 80207de:	fa09 f303 	lsl.w	r3, r9, r3
 80207e2:	4313      	orrs	r3, r2
 80207e4:	9304      	str	r3, [sp, #16]
 80207e6:	46a2      	mov	sl, r4
 80207e8:	e7d2      	b.n	8020790 <_svfiprintf_r+0x9c>
 80207ea:	9b03      	ldr	r3, [sp, #12]
 80207ec:	1d19      	adds	r1, r3, #4
 80207ee:	681b      	ldr	r3, [r3, #0]
 80207f0:	9103      	str	r1, [sp, #12]
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	bfbb      	ittet	lt
 80207f6:	425b      	neglt	r3, r3
 80207f8:	f042 0202 	orrlt.w	r2, r2, #2
 80207fc:	9307      	strge	r3, [sp, #28]
 80207fe:	9307      	strlt	r3, [sp, #28]
 8020800:	bfb8      	it	lt
 8020802:	9204      	strlt	r2, [sp, #16]
 8020804:	7823      	ldrb	r3, [r4, #0]
 8020806:	2b2e      	cmp	r3, #46	; 0x2e
 8020808:	d10c      	bne.n	8020824 <_svfiprintf_r+0x130>
 802080a:	7863      	ldrb	r3, [r4, #1]
 802080c:	2b2a      	cmp	r3, #42	; 0x2a
 802080e:	d134      	bne.n	802087a <_svfiprintf_r+0x186>
 8020810:	9b03      	ldr	r3, [sp, #12]
 8020812:	1d1a      	adds	r2, r3, #4
 8020814:	681b      	ldr	r3, [r3, #0]
 8020816:	9203      	str	r2, [sp, #12]
 8020818:	2b00      	cmp	r3, #0
 802081a:	bfb8      	it	lt
 802081c:	f04f 33ff 	movlt.w	r3, #4294967295
 8020820:	3402      	adds	r4, #2
 8020822:	9305      	str	r3, [sp, #20]
 8020824:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80208ec <_svfiprintf_r+0x1f8>
 8020828:	7821      	ldrb	r1, [r4, #0]
 802082a:	2203      	movs	r2, #3
 802082c:	4650      	mov	r0, sl
 802082e:	f7df fccf 	bl	80001d0 <memchr>
 8020832:	b138      	cbz	r0, 8020844 <_svfiprintf_r+0x150>
 8020834:	9b04      	ldr	r3, [sp, #16]
 8020836:	eba0 000a 	sub.w	r0, r0, sl
 802083a:	2240      	movs	r2, #64	; 0x40
 802083c:	4082      	lsls	r2, r0
 802083e:	4313      	orrs	r3, r2
 8020840:	3401      	adds	r4, #1
 8020842:	9304      	str	r3, [sp, #16]
 8020844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020848:	4825      	ldr	r0, [pc, #148]	; (80208e0 <_svfiprintf_r+0x1ec>)
 802084a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802084e:	2206      	movs	r2, #6
 8020850:	f7df fcbe 	bl	80001d0 <memchr>
 8020854:	2800      	cmp	r0, #0
 8020856:	d038      	beq.n	80208ca <_svfiprintf_r+0x1d6>
 8020858:	4b22      	ldr	r3, [pc, #136]	; (80208e4 <_svfiprintf_r+0x1f0>)
 802085a:	bb1b      	cbnz	r3, 80208a4 <_svfiprintf_r+0x1b0>
 802085c:	9b03      	ldr	r3, [sp, #12]
 802085e:	3307      	adds	r3, #7
 8020860:	f023 0307 	bic.w	r3, r3, #7
 8020864:	3308      	adds	r3, #8
 8020866:	9303      	str	r3, [sp, #12]
 8020868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802086a:	4433      	add	r3, r6
 802086c:	9309      	str	r3, [sp, #36]	; 0x24
 802086e:	e768      	b.n	8020742 <_svfiprintf_r+0x4e>
 8020870:	fb0c 3202 	mla	r2, ip, r2, r3
 8020874:	460c      	mov	r4, r1
 8020876:	2001      	movs	r0, #1
 8020878:	e7a6      	b.n	80207c8 <_svfiprintf_r+0xd4>
 802087a:	2300      	movs	r3, #0
 802087c:	3401      	adds	r4, #1
 802087e:	9305      	str	r3, [sp, #20]
 8020880:	4619      	mov	r1, r3
 8020882:	f04f 0c0a 	mov.w	ip, #10
 8020886:	4620      	mov	r0, r4
 8020888:	f810 2b01 	ldrb.w	r2, [r0], #1
 802088c:	3a30      	subs	r2, #48	; 0x30
 802088e:	2a09      	cmp	r2, #9
 8020890:	d903      	bls.n	802089a <_svfiprintf_r+0x1a6>
 8020892:	2b00      	cmp	r3, #0
 8020894:	d0c6      	beq.n	8020824 <_svfiprintf_r+0x130>
 8020896:	9105      	str	r1, [sp, #20]
 8020898:	e7c4      	b.n	8020824 <_svfiprintf_r+0x130>
 802089a:	fb0c 2101 	mla	r1, ip, r1, r2
 802089e:	4604      	mov	r4, r0
 80208a0:	2301      	movs	r3, #1
 80208a2:	e7f0      	b.n	8020886 <_svfiprintf_r+0x192>
 80208a4:	ab03      	add	r3, sp, #12
 80208a6:	9300      	str	r3, [sp, #0]
 80208a8:	462a      	mov	r2, r5
 80208aa:	4b0f      	ldr	r3, [pc, #60]	; (80208e8 <_svfiprintf_r+0x1f4>)
 80208ac:	a904      	add	r1, sp, #16
 80208ae:	4638      	mov	r0, r7
 80208b0:	f7fc feec 	bl	801d68c <_printf_float>
 80208b4:	1c42      	adds	r2, r0, #1
 80208b6:	4606      	mov	r6, r0
 80208b8:	d1d6      	bne.n	8020868 <_svfiprintf_r+0x174>
 80208ba:	89ab      	ldrh	r3, [r5, #12]
 80208bc:	065b      	lsls	r3, r3, #25
 80208be:	f53f af2d 	bmi.w	802071c <_svfiprintf_r+0x28>
 80208c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80208c4:	b01d      	add	sp, #116	; 0x74
 80208c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80208ca:	ab03      	add	r3, sp, #12
 80208cc:	9300      	str	r3, [sp, #0]
 80208ce:	462a      	mov	r2, r5
 80208d0:	4b05      	ldr	r3, [pc, #20]	; (80208e8 <_svfiprintf_r+0x1f4>)
 80208d2:	a904      	add	r1, sp, #16
 80208d4:	4638      	mov	r0, r7
 80208d6:	f7fd f97d 	bl	801dbd4 <_printf_i>
 80208da:	e7eb      	b.n	80208b4 <_svfiprintf_r+0x1c0>
 80208dc:	08022ad4 	.word	0x08022ad4
 80208e0:	08022ade 	.word	0x08022ade
 80208e4:	0801d68d 	.word	0x0801d68d
 80208e8:	0802063f 	.word	0x0802063f
 80208ec:	08022ada 	.word	0x08022ada

080208f0 <_sungetc_r>:
 80208f0:	b538      	push	{r3, r4, r5, lr}
 80208f2:	1c4b      	adds	r3, r1, #1
 80208f4:	4614      	mov	r4, r2
 80208f6:	d103      	bne.n	8020900 <_sungetc_r+0x10>
 80208f8:	f04f 35ff 	mov.w	r5, #4294967295
 80208fc:	4628      	mov	r0, r5
 80208fe:	bd38      	pop	{r3, r4, r5, pc}
 8020900:	8993      	ldrh	r3, [r2, #12]
 8020902:	f023 0320 	bic.w	r3, r3, #32
 8020906:	8193      	strh	r3, [r2, #12]
 8020908:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802090a:	6852      	ldr	r2, [r2, #4]
 802090c:	b2cd      	uxtb	r5, r1
 802090e:	b18b      	cbz	r3, 8020934 <_sungetc_r+0x44>
 8020910:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020912:	4293      	cmp	r3, r2
 8020914:	dd08      	ble.n	8020928 <_sungetc_r+0x38>
 8020916:	6823      	ldr	r3, [r4, #0]
 8020918:	1e5a      	subs	r2, r3, #1
 802091a:	6022      	str	r2, [r4, #0]
 802091c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020920:	6863      	ldr	r3, [r4, #4]
 8020922:	3301      	adds	r3, #1
 8020924:	6063      	str	r3, [r4, #4]
 8020926:	e7e9      	b.n	80208fc <_sungetc_r+0xc>
 8020928:	4621      	mov	r1, r4
 802092a:	f000 fbe8 	bl	80210fe <__submore>
 802092e:	2800      	cmp	r0, #0
 8020930:	d0f1      	beq.n	8020916 <_sungetc_r+0x26>
 8020932:	e7e1      	b.n	80208f8 <_sungetc_r+0x8>
 8020934:	6921      	ldr	r1, [r4, #16]
 8020936:	6823      	ldr	r3, [r4, #0]
 8020938:	b151      	cbz	r1, 8020950 <_sungetc_r+0x60>
 802093a:	4299      	cmp	r1, r3
 802093c:	d208      	bcs.n	8020950 <_sungetc_r+0x60>
 802093e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020942:	42a9      	cmp	r1, r5
 8020944:	d104      	bne.n	8020950 <_sungetc_r+0x60>
 8020946:	3b01      	subs	r3, #1
 8020948:	3201      	adds	r2, #1
 802094a:	6023      	str	r3, [r4, #0]
 802094c:	6062      	str	r2, [r4, #4]
 802094e:	e7d5      	b.n	80208fc <_sungetc_r+0xc>
 8020950:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8020954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020958:	6363      	str	r3, [r4, #52]	; 0x34
 802095a:	2303      	movs	r3, #3
 802095c:	63a3      	str	r3, [r4, #56]	; 0x38
 802095e:	4623      	mov	r3, r4
 8020960:	f803 5f46 	strb.w	r5, [r3, #70]!
 8020964:	6023      	str	r3, [r4, #0]
 8020966:	2301      	movs	r3, #1
 8020968:	e7dc      	b.n	8020924 <_sungetc_r+0x34>

0802096a <__ssrefill_r>:
 802096a:	b510      	push	{r4, lr}
 802096c:	460c      	mov	r4, r1
 802096e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020970:	b169      	cbz	r1, 802098e <__ssrefill_r+0x24>
 8020972:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020976:	4299      	cmp	r1, r3
 8020978:	d001      	beq.n	802097e <__ssrefill_r+0x14>
 802097a:	f7fe fd63 	bl	801f444 <_free_r>
 802097e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020980:	6063      	str	r3, [r4, #4]
 8020982:	2000      	movs	r0, #0
 8020984:	6360      	str	r0, [r4, #52]	; 0x34
 8020986:	b113      	cbz	r3, 802098e <__ssrefill_r+0x24>
 8020988:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802098a:	6023      	str	r3, [r4, #0]
 802098c:	bd10      	pop	{r4, pc}
 802098e:	6923      	ldr	r3, [r4, #16]
 8020990:	6023      	str	r3, [r4, #0]
 8020992:	2300      	movs	r3, #0
 8020994:	6063      	str	r3, [r4, #4]
 8020996:	89a3      	ldrh	r3, [r4, #12]
 8020998:	f043 0320 	orr.w	r3, r3, #32
 802099c:	81a3      	strh	r3, [r4, #12]
 802099e:	f04f 30ff 	mov.w	r0, #4294967295
 80209a2:	e7f3      	b.n	802098c <__ssrefill_r+0x22>

080209a4 <__ssvfiscanf_r>:
 80209a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80209a8:	460c      	mov	r4, r1
 80209aa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80209ae:	2100      	movs	r1, #0
 80209b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80209b4:	49a6      	ldr	r1, [pc, #664]	; (8020c50 <__ssvfiscanf_r+0x2ac>)
 80209b6:	91a0      	str	r1, [sp, #640]	; 0x280
 80209b8:	f10d 0804 	add.w	r8, sp, #4
 80209bc:	49a5      	ldr	r1, [pc, #660]	; (8020c54 <__ssvfiscanf_r+0x2b0>)
 80209be:	4fa6      	ldr	r7, [pc, #664]	; (8020c58 <__ssvfiscanf_r+0x2b4>)
 80209c0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8020c5c <__ssvfiscanf_r+0x2b8>
 80209c4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80209c8:	4606      	mov	r6, r0
 80209ca:	91a1      	str	r1, [sp, #644]	; 0x284
 80209cc:	9300      	str	r3, [sp, #0]
 80209ce:	7813      	ldrb	r3, [r2, #0]
 80209d0:	2b00      	cmp	r3, #0
 80209d2:	f000 815a 	beq.w	8020c8a <__ssvfiscanf_r+0x2e6>
 80209d6:	5cf9      	ldrb	r1, [r7, r3]
 80209d8:	f011 0108 	ands.w	r1, r1, #8
 80209dc:	f102 0501 	add.w	r5, r2, #1
 80209e0:	d019      	beq.n	8020a16 <__ssvfiscanf_r+0x72>
 80209e2:	6863      	ldr	r3, [r4, #4]
 80209e4:	2b00      	cmp	r3, #0
 80209e6:	dd0f      	ble.n	8020a08 <__ssvfiscanf_r+0x64>
 80209e8:	6823      	ldr	r3, [r4, #0]
 80209ea:	781a      	ldrb	r2, [r3, #0]
 80209ec:	5cba      	ldrb	r2, [r7, r2]
 80209ee:	0712      	lsls	r2, r2, #28
 80209f0:	d401      	bmi.n	80209f6 <__ssvfiscanf_r+0x52>
 80209f2:	462a      	mov	r2, r5
 80209f4:	e7eb      	b.n	80209ce <__ssvfiscanf_r+0x2a>
 80209f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80209f8:	3201      	adds	r2, #1
 80209fa:	9245      	str	r2, [sp, #276]	; 0x114
 80209fc:	6862      	ldr	r2, [r4, #4]
 80209fe:	3301      	adds	r3, #1
 8020a00:	3a01      	subs	r2, #1
 8020a02:	6062      	str	r2, [r4, #4]
 8020a04:	6023      	str	r3, [r4, #0]
 8020a06:	e7ec      	b.n	80209e2 <__ssvfiscanf_r+0x3e>
 8020a08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020a0a:	4621      	mov	r1, r4
 8020a0c:	4630      	mov	r0, r6
 8020a0e:	4798      	blx	r3
 8020a10:	2800      	cmp	r0, #0
 8020a12:	d0e9      	beq.n	80209e8 <__ssvfiscanf_r+0x44>
 8020a14:	e7ed      	b.n	80209f2 <__ssvfiscanf_r+0x4e>
 8020a16:	2b25      	cmp	r3, #37	; 0x25
 8020a18:	d012      	beq.n	8020a40 <__ssvfiscanf_r+0x9c>
 8020a1a:	469a      	mov	sl, r3
 8020a1c:	6863      	ldr	r3, [r4, #4]
 8020a1e:	2b00      	cmp	r3, #0
 8020a20:	f340 8091 	ble.w	8020b46 <__ssvfiscanf_r+0x1a2>
 8020a24:	6822      	ldr	r2, [r4, #0]
 8020a26:	7813      	ldrb	r3, [r2, #0]
 8020a28:	4553      	cmp	r3, sl
 8020a2a:	f040 812e 	bne.w	8020c8a <__ssvfiscanf_r+0x2e6>
 8020a2e:	6863      	ldr	r3, [r4, #4]
 8020a30:	3b01      	subs	r3, #1
 8020a32:	6063      	str	r3, [r4, #4]
 8020a34:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020a36:	3201      	adds	r2, #1
 8020a38:	3301      	adds	r3, #1
 8020a3a:	6022      	str	r2, [r4, #0]
 8020a3c:	9345      	str	r3, [sp, #276]	; 0x114
 8020a3e:	e7d8      	b.n	80209f2 <__ssvfiscanf_r+0x4e>
 8020a40:	9141      	str	r1, [sp, #260]	; 0x104
 8020a42:	9143      	str	r1, [sp, #268]	; 0x10c
 8020a44:	7853      	ldrb	r3, [r2, #1]
 8020a46:	2b2a      	cmp	r3, #42	; 0x2a
 8020a48:	bf02      	ittt	eq
 8020a4a:	2310      	moveq	r3, #16
 8020a4c:	1c95      	addeq	r5, r2, #2
 8020a4e:	9341      	streq	r3, [sp, #260]	; 0x104
 8020a50:	220a      	movs	r2, #10
 8020a52:	46aa      	mov	sl, r5
 8020a54:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8020a58:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8020a5c:	2b09      	cmp	r3, #9
 8020a5e:	d91c      	bls.n	8020a9a <__ssvfiscanf_r+0xf6>
 8020a60:	487e      	ldr	r0, [pc, #504]	; (8020c5c <__ssvfiscanf_r+0x2b8>)
 8020a62:	2203      	movs	r2, #3
 8020a64:	f7df fbb4 	bl	80001d0 <memchr>
 8020a68:	b138      	cbz	r0, 8020a7a <__ssvfiscanf_r+0xd6>
 8020a6a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020a6c:	eba0 0009 	sub.w	r0, r0, r9
 8020a70:	2301      	movs	r3, #1
 8020a72:	4083      	lsls	r3, r0
 8020a74:	4313      	orrs	r3, r2
 8020a76:	9341      	str	r3, [sp, #260]	; 0x104
 8020a78:	4655      	mov	r5, sl
 8020a7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020a7e:	2b78      	cmp	r3, #120	; 0x78
 8020a80:	d806      	bhi.n	8020a90 <__ssvfiscanf_r+0xec>
 8020a82:	2b57      	cmp	r3, #87	; 0x57
 8020a84:	d810      	bhi.n	8020aa8 <__ssvfiscanf_r+0x104>
 8020a86:	2b25      	cmp	r3, #37	; 0x25
 8020a88:	d0c7      	beq.n	8020a1a <__ssvfiscanf_r+0x76>
 8020a8a:	d857      	bhi.n	8020b3c <__ssvfiscanf_r+0x198>
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	d065      	beq.n	8020b5c <__ssvfiscanf_r+0x1b8>
 8020a90:	2303      	movs	r3, #3
 8020a92:	9347      	str	r3, [sp, #284]	; 0x11c
 8020a94:	230a      	movs	r3, #10
 8020a96:	9342      	str	r3, [sp, #264]	; 0x108
 8020a98:	e076      	b.n	8020b88 <__ssvfiscanf_r+0x1e4>
 8020a9a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020a9c:	fb02 1103 	mla	r1, r2, r3, r1
 8020aa0:	3930      	subs	r1, #48	; 0x30
 8020aa2:	9143      	str	r1, [sp, #268]	; 0x10c
 8020aa4:	4655      	mov	r5, sl
 8020aa6:	e7d4      	b.n	8020a52 <__ssvfiscanf_r+0xae>
 8020aa8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8020aac:	2a20      	cmp	r2, #32
 8020aae:	d8ef      	bhi.n	8020a90 <__ssvfiscanf_r+0xec>
 8020ab0:	a101      	add	r1, pc, #4	; (adr r1, 8020ab8 <__ssvfiscanf_r+0x114>)
 8020ab2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8020ab6:	bf00      	nop
 8020ab8:	08020b6b 	.word	0x08020b6b
 8020abc:	08020a91 	.word	0x08020a91
 8020ac0:	08020a91 	.word	0x08020a91
 8020ac4:	08020bc9 	.word	0x08020bc9
 8020ac8:	08020a91 	.word	0x08020a91
 8020acc:	08020a91 	.word	0x08020a91
 8020ad0:	08020a91 	.word	0x08020a91
 8020ad4:	08020a91 	.word	0x08020a91
 8020ad8:	08020a91 	.word	0x08020a91
 8020adc:	08020a91 	.word	0x08020a91
 8020ae0:	08020a91 	.word	0x08020a91
 8020ae4:	08020bdf 	.word	0x08020bdf
 8020ae8:	08020bc5 	.word	0x08020bc5
 8020aec:	08020b43 	.word	0x08020b43
 8020af0:	08020b43 	.word	0x08020b43
 8020af4:	08020b43 	.word	0x08020b43
 8020af8:	08020a91 	.word	0x08020a91
 8020afc:	08020b81 	.word	0x08020b81
 8020b00:	08020a91 	.word	0x08020a91
 8020b04:	08020a91 	.word	0x08020a91
 8020b08:	08020a91 	.word	0x08020a91
 8020b0c:	08020a91 	.word	0x08020a91
 8020b10:	08020bef 	.word	0x08020bef
 8020b14:	08020bbd 	.word	0x08020bbd
 8020b18:	08020b63 	.word	0x08020b63
 8020b1c:	08020a91 	.word	0x08020a91
 8020b20:	08020a91 	.word	0x08020a91
 8020b24:	08020beb 	.word	0x08020beb
 8020b28:	08020a91 	.word	0x08020a91
 8020b2c:	08020bc5 	.word	0x08020bc5
 8020b30:	08020a91 	.word	0x08020a91
 8020b34:	08020a91 	.word	0x08020a91
 8020b38:	08020b6b 	.word	0x08020b6b
 8020b3c:	3b45      	subs	r3, #69	; 0x45
 8020b3e:	2b02      	cmp	r3, #2
 8020b40:	d8a6      	bhi.n	8020a90 <__ssvfiscanf_r+0xec>
 8020b42:	2305      	movs	r3, #5
 8020b44:	e01f      	b.n	8020b86 <__ssvfiscanf_r+0x1e2>
 8020b46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020b48:	4621      	mov	r1, r4
 8020b4a:	4630      	mov	r0, r6
 8020b4c:	4798      	blx	r3
 8020b4e:	2800      	cmp	r0, #0
 8020b50:	f43f af68 	beq.w	8020a24 <__ssvfiscanf_r+0x80>
 8020b54:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020b56:	2800      	cmp	r0, #0
 8020b58:	f040 808d 	bne.w	8020c76 <__ssvfiscanf_r+0x2d2>
 8020b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8020b60:	e08f      	b.n	8020c82 <__ssvfiscanf_r+0x2de>
 8020b62:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020b64:	f042 0220 	orr.w	r2, r2, #32
 8020b68:	9241      	str	r2, [sp, #260]	; 0x104
 8020b6a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020b70:	9241      	str	r2, [sp, #260]	; 0x104
 8020b72:	2210      	movs	r2, #16
 8020b74:	2b6f      	cmp	r3, #111	; 0x6f
 8020b76:	9242      	str	r2, [sp, #264]	; 0x108
 8020b78:	bf34      	ite	cc
 8020b7a:	2303      	movcc	r3, #3
 8020b7c:	2304      	movcs	r3, #4
 8020b7e:	e002      	b.n	8020b86 <__ssvfiscanf_r+0x1e2>
 8020b80:	2300      	movs	r3, #0
 8020b82:	9342      	str	r3, [sp, #264]	; 0x108
 8020b84:	2303      	movs	r3, #3
 8020b86:	9347      	str	r3, [sp, #284]	; 0x11c
 8020b88:	6863      	ldr	r3, [r4, #4]
 8020b8a:	2b00      	cmp	r3, #0
 8020b8c:	dd3d      	ble.n	8020c0a <__ssvfiscanf_r+0x266>
 8020b8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020b90:	0659      	lsls	r1, r3, #25
 8020b92:	d404      	bmi.n	8020b9e <__ssvfiscanf_r+0x1fa>
 8020b94:	6823      	ldr	r3, [r4, #0]
 8020b96:	781a      	ldrb	r2, [r3, #0]
 8020b98:	5cba      	ldrb	r2, [r7, r2]
 8020b9a:	0712      	lsls	r2, r2, #28
 8020b9c:	d43c      	bmi.n	8020c18 <__ssvfiscanf_r+0x274>
 8020b9e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8020ba0:	2b02      	cmp	r3, #2
 8020ba2:	dc4b      	bgt.n	8020c3c <__ssvfiscanf_r+0x298>
 8020ba4:	466b      	mov	r3, sp
 8020ba6:	4622      	mov	r2, r4
 8020ba8:	a941      	add	r1, sp, #260	; 0x104
 8020baa:	4630      	mov	r0, r6
 8020bac:	f000 f872 	bl	8020c94 <_scanf_chars>
 8020bb0:	2801      	cmp	r0, #1
 8020bb2:	d06a      	beq.n	8020c8a <__ssvfiscanf_r+0x2e6>
 8020bb4:	2802      	cmp	r0, #2
 8020bb6:	f47f af1c 	bne.w	80209f2 <__ssvfiscanf_r+0x4e>
 8020bba:	e7cb      	b.n	8020b54 <__ssvfiscanf_r+0x1b0>
 8020bbc:	2308      	movs	r3, #8
 8020bbe:	9342      	str	r3, [sp, #264]	; 0x108
 8020bc0:	2304      	movs	r3, #4
 8020bc2:	e7e0      	b.n	8020b86 <__ssvfiscanf_r+0x1e2>
 8020bc4:	220a      	movs	r2, #10
 8020bc6:	e7d5      	b.n	8020b74 <__ssvfiscanf_r+0x1d0>
 8020bc8:	4629      	mov	r1, r5
 8020bca:	4640      	mov	r0, r8
 8020bcc:	f000 fa5e 	bl	802108c <__sccl>
 8020bd0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020bd6:	9341      	str	r3, [sp, #260]	; 0x104
 8020bd8:	4605      	mov	r5, r0
 8020bda:	2301      	movs	r3, #1
 8020bdc:	e7d3      	b.n	8020b86 <__ssvfiscanf_r+0x1e2>
 8020bde:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020be4:	9341      	str	r3, [sp, #260]	; 0x104
 8020be6:	2300      	movs	r3, #0
 8020be8:	e7cd      	b.n	8020b86 <__ssvfiscanf_r+0x1e2>
 8020bea:	2302      	movs	r3, #2
 8020bec:	e7cb      	b.n	8020b86 <__ssvfiscanf_r+0x1e2>
 8020bee:	9841      	ldr	r0, [sp, #260]	; 0x104
 8020bf0:	06c3      	lsls	r3, r0, #27
 8020bf2:	f53f aefe 	bmi.w	80209f2 <__ssvfiscanf_r+0x4e>
 8020bf6:	9b00      	ldr	r3, [sp, #0]
 8020bf8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020bfa:	1d19      	adds	r1, r3, #4
 8020bfc:	9100      	str	r1, [sp, #0]
 8020bfe:	681b      	ldr	r3, [r3, #0]
 8020c00:	07c0      	lsls	r0, r0, #31
 8020c02:	bf4c      	ite	mi
 8020c04:	801a      	strhmi	r2, [r3, #0]
 8020c06:	601a      	strpl	r2, [r3, #0]
 8020c08:	e6f3      	b.n	80209f2 <__ssvfiscanf_r+0x4e>
 8020c0a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020c0c:	4621      	mov	r1, r4
 8020c0e:	4630      	mov	r0, r6
 8020c10:	4798      	blx	r3
 8020c12:	2800      	cmp	r0, #0
 8020c14:	d0bb      	beq.n	8020b8e <__ssvfiscanf_r+0x1ea>
 8020c16:	e79d      	b.n	8020b54 <__ssvfiscanf_r+0x1b0>
 8020c18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020c1a:	3201      	adds	r2, #1
 8020c1c:	9245      	str	r2, [sp, #276]	; 0x114
 8020c1e:	6862      	ldr	r2, [r4, #4]
 8020c20:	3a01      	subs	r2, #1
 8020c22:	2a00      	cmp	r2, #0
 8020c24:	6062      	str	r2, [r4, #4]
 8020c26:	dd02      	ble.n	8020c2e <__ssvfiscanf_r+0x28a>
 8020c28:	3301      	adds	r3, #1
 8020c2a:	6023      	str	r3, [r4, #0]
 8020c2c:	e7b2      	b.n	8020b94 <__ssvfiscanf_r+0x1f0>
 8020c2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020c30:	4621      	mov	r1, r4
 8020c32:	4630      	mov	r0, r6
 8020c34:	4798      	blx	r3
 8020c36:	2800      	cmp	r0, #0
 8020c38:	d0ac      	beq.n	8020b94 <__ssvfiscanf_r+0x1f0>
 8020c3a:	e78b      	b.n	8020b54 <__ssvfiscanf_r+0x1b0>
 8020c3c:	2b04      	cmp	r3, #4
 8020c3e:	dc0f      	bgt.n	8020c60 <__ssvfiscanf_r+0x2bc>
 8020c40:	466b      	mov	r3, sp
 8020c42:	4622      	mov	r2, r4
 8020c44:	a941      	add	r1, sp, #260	; 0x104
 8020c46:	4630      	mov	r0, r6
 8020c48:	f000 f87e 	bl	8020d48 <_scanf_i>
 8020c4c:	e7b0      	b.n	8020bb0 <__ssvfiscanf_r+0x20c>
 8020c4e:	bf00      	nop
 8020c50:	080208f1 	.word	0x080208f1
 8020c54:	0802096b 	.word	0x0802096b
 8020c58:	08022751 	.word	0x08022751
 8020c5c:	08022ada 	.word	0x08022ada
 8020c60:	4b0b      	ldr	r3, [pc, #44]	; (8020c90 <__ssvfiscanf_r+0x2ec>)
 8020c62:	2b00      	cmp	r3, #0
 8020c64:	f43f aec5 	beq.w	80209f2 <__ssvfiscanf_r+0x4e>
 8020c68:	466b      	mov	r3, sp
 8020c6a:	4622      	mov	r2, r4
 8020c6c:	a941      	add	r1, sp, #260	; 0x104
 8020c6e:	4630      	mov	r0, r6
 8020c70:	f7fd f8d2 	bl	801de18 <_scanf_float>
 8020c74:	e79c      	b.n	8020bb0 <__ssvfiscanf_r+0x20c>
 8020c76:	89a3      	ldrh	r3, [r4, #12]
 8020c78:	f013 0f40 	tst.w	r3, #64	; 0x40
 8020c7c:	bf18      	it	ne
 8020c7e:	f04f 30ff 	movne.w	r0, #4294967295
 8020c82:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8020c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c8a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020c8c:	e7f9      	b.n	8020c82 <__ssvfiscanf_r+0x2de>
 8020c8e:	bf00      	nop
 8020c90:	0801de19 	.word	0x0801de19

08020c94 <_scanf_chars>:
 8020c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020c98:	4615      	mov	r5, r2
 8020c9a:	688a      	ldr	r2, [r1, #8]
 8020c9c:	4680      	mov	r8, r0
 8020c9e:	460c      	mov	r4, r1
 8020ca0:	b932      	cbnz	r2, 8020cb0 <_scanf_chars+0x1c>
 8020ca2:	698a      	ldr	r2, [r1, #24]
 8020ca4:	2a00      	cmp	r2, #0
 8020ca6:	bf0c      	ite	eq
 8020ca8:	2201      	moveq	r2, #1
 8020caa:	f04f 32ff 	movne.w	r2, #4294967295
 8020cae:	608a      	str	r2, [r1, #8]
 8020cb0:	6822      	ldr	r2, [r4, #0]
 8020cb2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8020d44 <_scanf_chars+0xb0>
 8020cb6:	06d1      	lsls	r1, r2, #27
 8020cb8:	bf5f      	itttt	pl
 8020cba:	681a      	ldrpl	r2, [r3, #0]
 8020cbc:	1d11      	addpl	r1, r2, #4
 8020cbe:	6019      	strpl	r1, [r3, #0]
 8020cc0:	6816      	ldrpl	r6, [r2, #0]
 8020cc2:	2700      	movs	r7, #0
 8020cc4:	69a0      	ldr	r0, [r4, #24]
 8020cc6:	b188      	cbz	r0, 8020cec <_scanf_chars+0x58>
 8020cc8:	2801      	cmp	r0, #1
 8020cca:	d107      	bne.n	8020cdc <_scanf_chars+0x48>
 8020ccc:	682a      	ldr	r2, [r5, #0]
 8020cce:	7811      	ldrb	r1, [r2, #0]
 8020cd0:	6962      	ldr	r2, [r4, #20]
 8020cd2:	5c52      	ldrb	r2, [r2, r1]
 8020cd4:	b952      	cbnz	r2, 8020cec <_scanf_chars+0x58>
 8020cd6:	2f00      	cmp	r7, #0
 8020cd8:	d031      	beq.n	8020d3e <_scanf_chars+0xaa>
 8020cda:	e022      	b.n	8020d22 <_scanf_chars+0x8e>
 8020cdc:	2802      	cmp	r0, #2
 8020cde:	d120      	bne.n	8020d22 <_scanf_chars+0x8e>
 8020ce0:	682b      	ldr	r3, [r5, #0]
 8020ce2:	781b      	ldrb	r3, [r3, #0]
 8020ce4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8020ce8:	071b      	lsls	r3, r3, #28
 8020cea:	d41a      	bmi.n	8020d22 <_scanf_chars+0x8e>
 8020cec:	6823      	ldr	r3, [r4, #0]
 8020cee:	06da      	lsls	r2, r3, #27
 8020cf0:	bf5e      	ittt	pl
 8020cf2:	682b      	ldrpl	r3, [r5, #0]
 8020cf4:	781b      	ldrbpl	r3, [r3, #0]
 8020cf6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8020cfa:	682a      	ldr	r2, [r5, #0]
 8020cfc:	686b      	ldr	r3, [r5, #4]
 8020cfe:	3201      	adds	r2, #1
 8020d00:	602a      	str	r2, [r5, #0]
 8020d02:	68a2      	ldr	r2, [r4, #8]
 8020d04:	3b01      	subs	r3, #1
 8020d06:	3a01      	subs	r2, #1
 8020d08:	606b      	str	r3, [r5, #4]
 8020d0a:	3701      	adds	r7, #1
 8020d0c:	60a2      	str	r2, [r4, #8]
 8020d0e:	b142      	cbz	r2, 8020d22 <_scanf_chars+0x8e>
 8020d10:	2b00      	cmp	r3, #0
 8020d12:	dcd7      	bgt.n	8020cc4 <_scanf_chars+0x30>
 8020d14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020d18:	4629      	mov	r1, r5
 8020d1a:	4640      	mov	r0, r8
 8020d1c:	4798      	blx	r3
 8020d1e:	2800      	cmp	r0, #0
 8020d20:	d0d0      	beq.n	8020cc4 <_scanf_chars+0x30>
 8020d22:	6823      	ldr	r3, [r4, #0]
 8020d24:	f013 0310 	ands.w	r3, r3, #16
 8020d28:	d105      	bne.n	8020d36 <_scanf_chars+0xa2>
 8020d2a:	68e2      	ldr	r2, [r4, #12]
 8020d2c:	3201      	adds	r2, #1
 8020d2e:	60e2      	str	r2, [r4, #12]
 8020d30:	69a2      	ldr	r2, [r4, #24]
 8020d32:	b102      	cbz	r2, 8020d36 <_scanf_chars+0xa2>
 8020d34:	7033      	strb	r3, [r6, #0]
 8020d36:	6923      	ldr	r3, [r4, #16]
 8020d38:	443b      	add	r3, r7
 8020d3a:	6123      	str	r3, [r4, #16]
 8020d3c:	2000      	movs	r0, #0
 8020d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020d42:	bf00      	nop
 8020d44:	08022751 	.word	0x08022751

08020d48 <_scanf_i>:
 8020d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d4c:	4698      	mov	r8, r3
 8020d4e:	4b74      	ldr	r3, [pc, #464]	; (8020f20 <_scanf_i+0x1d8>)
 8020d50:	460c      	mov	r4, r1
 8020d52:	4682      	mov	sl, r0
 8020d54:	4616      	mov	r6, r2
 8020d56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020d5a:	b087      	sub	sp, #28
 8020d5c:	ab03      	add	r3, sp, #12
 8020d5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8020d62:	4b70      	ldr	r3, [pc, #448]	; (8020f24 <_scanf_i+0x1dc>)
 8020d64:	69a1      	ldr	r1, [r4, #24]
 8020d66:	4a70      	ldr	r2, [pc, #448]	; (8020f28 <_scanf_i+0x1e0>)
 8020d68:	2903      	cmp	r1, #3
 8020d6a:	bf18      	it	ne
 8020d6c:	461a      	movne	r2, r3
 8020d6e:	68a3      	ldr	r3, [r4, #8]
 8020d70:	9201      	str	r2, [sp, #4]
 8020d72:	1e5a      	subs	r2, r3, #1
 8020d74:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020d78:	bf88      	it	hi
 8020d7a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8020d7e:	4627      	mov	r7, r4
 8020d80:	bf82      	ittt	hi
 8020d82:	eb03 0905 	addhi.w	r9, r3, r5
 8020d86:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020d8a:	60a3      	strhi	r3, [r4, #8]
 8020d8c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8020d90:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8020d94:	bf98      	it	ls
 8020d96:	f04f 0900 	movls.w	r9, #0
 8020d9a:	6023      	str	r3, [r4, #0]
 8020d9c:	463d      	mov	r5, r7
 8020d9e:	f04f 0b00 	mov.w	fp, #0
 8020da2:	6831      	ldr	r1, [r6, #0]
 8020da4:	ab03      	add	r3, sp, #12
 8020da6:	7809      	ldrb	r1, [r1, #0]
 8020da8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8020dac:	2202      	movs	r2, #2
 8020dae:	f7df fa0f 	bl	80001d0 <memchr>
 8020db2:	b328      	cbz	r0, 8020e00 <_scanf_i+0xb8>
 8020db4:	f1bb 0f01 	cmp.w	fp, #1
 8020db8:	d159      	bne.n	8020e6e <_scanf_i+0x126>
 8020dba:	6862      	ldr	r2, [r4, #4]
 8020dbc:	b92a      	cbnz	r2, 8020dca <_scanf_i+0x82>
 8020dbe:	6822      	ldr	r2, [r4, #0]
 8020dc0:	2308      	movs	r3, #8
 8020dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020dc6:	6063      	str	r3, [r4, #4]
 8020dc8:	6022      	str	r2, [r4, #0]
 8020dca:	6822      	ldr	r2, [r4, #0]
 8020dcc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8020dd0:	6022      	str	r2, [r4, #0]
 8020dd2:	68a2      	ldr	r2, [r4, #8]
 8020dd4:	1e51      	subs	r1, r2, #1
 8020dd6:	60a1      	str	r1, [r4, #8]
 8020dd8:	b192      	cbz	r2, 8020e00 <_scanf_i+0xb8>
 8020dda:	6832      	ldr	r2, [r6, #0]
 8020ddc:	1c51      	adds	r1, r2, #1
 8020dde:	6031      	str	r1, [r6, #0]
 8020de0:	7812      	ldrb	r2, [r2, #0]
 8020de2:	f805 2b01 	strb.w	r2, [r5], #1
 8020de6:	6872      	ldr	r2, [r6, #4]
 8020de8:	3a01      	subs	r2, #1
 8020dea:	2a00      	cmp	r2, #0
 8020dec:	6072      	str	r2, [r6, #4]
 8020dee:	dc07      	bgt.n	8020e00 <_scanf_i+0xb8>
 8020df0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8020df4:	4631      	mov	r1, r6
 8020df6:	4650      	mov	r0, sl
 8020df8:	4790      	blx	r2
 8020dfa:	2800      	cmp	r0, #0
 8020dfc:	f040 8085 	bne.w	8020f0a <_scanf_i+0x1c2>
 8020e00:	f10b 0b01 	add.w	fp, fp, #1
 8020e04:	f1bb 0f03 	cmp.w	fp, #3
 8020e08:	d1cb      	bne.n	8020da2 <_scanf_i+0x5a>
 8020e0a:	6863      	ldr	r3, [r4, #4]
 8020e0c:	b90b      	cbnz	r3, 8020e12 <_scanf_i+0xca>
 8020e0e:	230a      	movs	r3, #10
 8020e10:	6063      	str	r3, [r4, #4]
 8020e12:	6863      	ldr	r3, [r4, #4]
 8020e14:	4945      	ldr	r1, [pc, #276]	; (8020f2c <_scanf_i+0x1e4>)
 8020e16:	6960      	ldr	r0, [r4, #20]
 8020e18:	1ac9      	subs	r1, r1, r3
 8020e1a:	f000 f937 	bl	802108c <__sccl>
 8020e1e:	f04f 0b00 	mov.w	fp, #0
 8020e22:	68a3      	ldr	r3, [r4, #8]
 8020e24:	6822      	ldr	r2, [r4, #0]
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	d03d      	beq.n	8020ea6 <_scanf_i+0x15e>
 8020e2a:	6831      	ldr	r1, [r6, #0]
 8020e2c:	6960      	ldr	r0, [r4, #20]
 8020e2e:	f891 c000 	ldrb.w	ip, [r1]
 8020e32:	f810 000c 	ldrb.w	r0, [r0, ip]
 8020e36:	2800      	cmp	r0, #0
 8020e38:	d035      	beq.n	8020ea6 <_scanf_i+0x15e>
 8020e3a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8020e3e:	d124      	bne.n	8020e8a <_scanf_i+0x142>
 8020e40:	0510      	lsls	r0, r2, #20
 8020e42:	d522      	bpl.n	8020e8a <_scanf_i+0x142>
 8020e44:	f10b 0b01 	add.w	fp, fp, #1
 8020e48:	f1b9 0f00 	cmp.w	r9, #0
 8020e4c:	d003      	beq.n	8020e56 <_scanf_i+0x10e>
 8020e4e:	3301      	adds	r3, #1
 8020e50:	f109 39ff 	add.w	r9, r9, #4294967295
 8020e54:	60a3      	str	r3, [r4, #8]
 8020e56:	6873      	ldr	r3, [r6, #4]
 8020e58:	3b01      	subs	r3, #1
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	6073      	str	r3, [r6, #4]
 8020e5e:	dd1b      	ble.n	8020e98 <_scanf_i+0x150>
 8020e60:	6833      	ldr	r3, [r6, #0]
 8020e62:	3301      	adds	r3, #1
 8020e64:	6033      	str	r3, [r6, #0]
 8020e66:	68a3      	ldr	r3, [r4, #8]
 8020e68:	3b01      	subs	r3, #1
 8020e6a:	60a3      	str	r3, [r4, #8]
 8020e6c:	e7d9      	b.n	8020e22 <_scanf_i+0xda>
 8020e6e:	f1bb 0f02 	cmp.w	fp, #2
 8020e72:	d1ae      	bne.n	8020dd2 <_scanf_i+0x8a>
 8020e74:	6822      	ldr	r2, [r4, #0]
 8020e76:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8020e7a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8020e7e:	d1bf      	bne.n	8020e00 <_scanf_i+0xb8>
 8020e80:	2310      	movs	r3, #16
 8020e82:	6063      	str	r3, [r4, #4]
 8020e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020e88:	e7a2      	b.n	8020dd0 <_scanf_i+0x88>
 8020e8a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8020e8e:	6022      	str	r2, [r4, #0]
 8020e90:	780b      	ldrb	r3, [r1, #0]
 8020e92:	f805 3b01 	strb.w	r3, [r5], #1
 8020e96:	e7de      	b.n	8020e56 <_scanf_i+0x10e>
 8020e98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020e9c:	4631      	mov	r1, r6
 8020e9e:	4650      	mov	r0, sl
 8020ea0:	4798      	blx	r3
 8020ea2:	2800      	cmp	r0, #0
 8020ea4:	d0df      	beq.n	8020e66 <_scanf_i+0x11e>
 8020ea6:	6823      	ldr	r3, [r4, #0]
 8020ea8:	05d9      	lsls	r1, r3, #23
 8020eaa:	d50d      	bpl.n	8020ec8 <_scanf_i+0x180>
 8020eac:	42bd      	cmp	r5, r7
 8020eae:	d909      	bls.n	8020ec4 <_scanf_i+0x17c>
 8020eb0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020eb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020eb8:	4632      	mov	r2, r6
 8020eba:	4650      	mov	r0, sl
 8020ebc:	4798      	blx	r3
 8020ebe:	f105 39ff 	add.w	r9, r5, #4294967295
 8020ec2:	464d      	mov	r5, r9
 8020ec4:	42bd      	cmp	r5, r7
 8020ec6:	d028      	beq.n	8020f1a <_scanf_i+0x1d2>
 8020ec8:	6822      	ldr	r2, [r4, #0]
 8020eca:	f012 0210 	ands.w	r2, r2, #16
 8020ece:	d113      	bne.n	8020ef8 <_scanf_i+0x1b0>
 8020ed0:	702a      	strb	r2, [r5, #0]
 8020ed2:	6863      	ldr	r3, [r4, #4]
 8020ed4:	9e01      	ldr	r6, [sp, #4]
 8020ed6:	4639      	mov	r1, r7
 8020ed8:	4650      	mov	r0, sl
 8020eda:	47b0      	blx	r6
 8020edc:	f8d8 3000 	ldr.w	r3, [r8]
 8020ee0:	6821      	ldr	r1, [r4, #0]
 8020ee2:	1d1a      	adds	r2, r3, #4
 8020ee4:	f8c8 2000 	str.w	r2, [r8]
 8020ee8:	f011 0f20 	tst.w	r1, #32
 8020eec:	681b      	ldr	r3, [r3, #0]
 8020eee:	d00f      	beq.n	8020f10 <_scanf_i+0x1c8>
 8020ef0:	6018      	str	r0, [r3, #0]
 8020ef2:	68e3      	ldr	r3, [r4, #12]
 8020ef4:	3301      	adds	r3, #1
 8020ef6:	60e3      	str	r3, [r4, #12]
 8020ef8:	6923      	ldr	r3, [r4, #16]
 8020efa:	1bed      	subs	r5, r5, r7
 8020efc:	445d      	add	r5, fp
 8020efe:	442b      	add	r3, r5
 8020f00:	6123      	str	r3, [r4, #16]
 8020f02:	2000      	movs	r0, #0
 8020f04:	b007      	add	sp, #28
 8020f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f0a:	f04f 0b00 	mov.w	fp, #0
 8020f0e:	e7ca      	b.n	8020ea6 <_scanf_i+0x15e>
 8020f10:	07ca      	lsls	r2, r1, #31
 8020f12:	bf4c      	ite	mi
 8020f14:	8018      	strhmi	r0, [r3, #0]
 8020f16:	6018      	strpl	r0, [r3, #0]
 8020f18:	e7eb      	b.n	8020ef2 <_scanf_i+0x1aa>
 8020f1a:	2001      	movs	r0, #1
 8020f1c:	e7f2      	b.n	8020f04 <_scanf_i+0x1bc>
 8020f1e:	bf00      	nop
 8020f20:	080222d4 	.word	0x080222d4
 8020f24:	080212f5 	.word	0x080212f5
 8020f28:	08020621 	.word	0x08020621
 8020f2c:	08022af5 	.word	0x08022af5

08020f30 <__sflush_r>:
 8020f30:	898a      	ldrh	r2, [r1, #12]
 8020f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020f36:	4605      	mov	r5, r0
 8020f38:	0710      	lsls	r0, r2, #28
 8020f3a:	460c      	mov	r4, r1
 8020f3c:	d458      	bmi.n	8020ff0 <__sflush_r+0xc0>
 8020f3e:	684b      	ldr	r3, [r1, #4]
 8020f40:	2b00      	cmp	r3, #0
 8020f42:	dc05      	bgt.n	8020f50 <__sflush_r+0x20>
 8020f44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020f46:	2b00      	cmp	r3, #0
 8020f48:	dc02      	bgt.n	8020f50 <__sflush_r+0x20>
 8020f4a:	2000      	movs	r0, #0
 8020f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020f52:	2e00      	cmp	r6, #0
 8020f54:	d0f9      	beq.n	8020f4a <__sflush_r+0x1a>
 8020f56:	2300      	movs	r3, #0
 8020f58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020f5c:	682f      	ldr	r7, [r5, #0]
 8020f5e:	6a21      	ldr	r1, [r4, #32]
 8020f60:	602b      	str	r3, [r5, #0]
 8020f62:	d032      	beq.n	8020fca <__sflush_r+0x9a>
 8020f64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020f66:	89a3      	ldrh	r3, [r4, #12]
 8020f68:	075a      	lsls	r2, r3, #29
 8020f6a:	d505      	bpl.n	8020f78 <__sflush_r+0x48>
 8020f6c:	6863      	ldr	r3, [r4, #4]
 8020f6e:	1ac0      	subs	r0, r0, r3
 8020f70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020f72:	b10b      	cbz	r3, 8020f78 <__sflush_r+0x48>
 8020f74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020f76:	1ac0      	subs	r0, r0, r3
 8020f78:	2300      	movs	r3, #0
 8020f7a:	4602      	mov	r2, r0
 8020f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020f7e:	6a21      	ldr	r1, [r4, #32]
 8020f80:	4628      	mov	r0, r5
 8020f82:	47b0      	blx	r6
 8020f84:	1c43      	adds	r3, r0, #1
 8020f86:	89a3      	ldrh	r3, [r4, #12]
 8020f88:	d106      	bne.n	8020f98 <__sflush_r+0x68>
 8020f8a:	6829      	ldr	r1, [r5, #0]
 8020f8c:	291d      	cmp	r1, #29
 8020f8e:	d82b      	bhi.n	8020fe8 <__sflush_r+0xb8>
 8020f90:	4a29      	ldr	r2, [pc, #164]	; (8021038 <__sflush_r+0x108>)
 8020f92:	410a      	asrs	r2, r1
 8020f94:	07d6      	lsls	r6, r2, #31
 8020f96:	d427      	bmi.n	8020fe8 <__sflush_r+0xb8>
 8020f98:	2200      	movs	r2, #0
 8020f9a:	6062      	str	r2, [r4, #4]
 8020f9c:	04d9      	lsls	r1, r3, #19
 8020f9e:	6922      	ldr	r2, [r4, #16]
 8020fa0:	6022      	str	r2, [r4, #0]
 8020fa2:	d504      	bpl.n	8020fae <__sflush_r+0x7e>
 8020fa4:	1c42      	adds	r2, r0, #1
 8020fa6:	d101      	bne.n	8020fac <__sflush_r+0x7c>
 8020fa8:	682b      	ldr	r3, [r5, #0]
 8020faa:	b903      	cbnz	r3, 8020fae <__sflush_r+0x7e>
 8020fac:	6560      	str	r0, [r4, #84]	; 0x54
 8020fae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020fb0:	602f      	str	r7, [r5, #0]
 8020fb2:	2900      	cmp	r1, #0
 8020fb4:	d0c9      	beq.n	8020f4a <__sflush_r+0x1a>
 8020fb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020fba:	4299      	cmp	r1, r3
 8020fbc:	d002      	beq.n	8020fc4 <__sflush_r+0x94>
 8020fbe:	4628      	mov	r0, r5
 8020fc0:	f7fe fa40 	bl	801f444 <_free_r>
 8020fc4:	2000      	movs	r0, #0
 8020fc6:	6360      	str	r0, [r4, #52]	; 0x34
 8020fc8:	e7c0      	b.n	8020f4c <__sflush_r+0x1c>
 8020fca:	2301      	movs	r3, #1
 8020fcc:	4628      	mov	r0, r5
 8020fce:	47b0      	blx	r6
 8020fd0:	1c41      	adds	r1, r0, #1
 8020fd2:	d1c8      	bne.n	8020f66 <__sflush_r+0x36>
 8020fd4:	682b      	ldr	r3, [r5, #0]
 8020fd6:	2b00      	cmp	r3, #0
 8020fd8:	d0c5      	beq.n	8020f66 <__sflush_r+0x36>
 8020fda:	2b1d      	cmp	r3, #29
 8020fdc:	d001      	beq.n	8020fe2 <__sflush_r+0xb2>
 8020fde:	2b16      	cmp	r3, #22
 8020fe0:	d101      	bne.n	8020fe6 <__sflush_r+0xb6>
 8020fe2:	602f      	str	r7, [r5, #0]
 8020fe4:	e7b1      	b.n	8020f4a <__sflush_r+0x1a>
 8020fe6:	89a3      	ldrh	r3, [r4, #12]
 8020fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020fec:	81a3      	strh	r3, [r4, #12]
 8020fee:	e7ad      	b.n	8020f4c <__sflush_r+0x1c>
 8020ff0:	690f      	ldr	r7, [r1, #16]
 8020ff2:	2f00      	cmp	r7, #0
 8020ff4:	d0a9      	beq.n	8020f4a <__sflush_r+0x1a>
 8020ff6:	0793      	lsls	r3, r2, #30
 8020ff8:	680e      	ldr	r6, [r1, #0]
 8020ffa:	bf08      	it	eq
 8020ffc:	694b      	ldreq	r3, [r1, #20]
 8020ffe:	600f      	str	r7, [r1, #0]
 8021000:	bf18      	it	ne
 8021002:	2300      	movne	r3, #0
 8021004:	eba6 0807 	sub.w	r8, r6, r7
 8021008:	608b      	str	r3, [r1, #8]
 802100a:	f1b8 0f00 	cmp.w	r8, #0
 802100e:	dd9c      	ble.n	8020f4a <__sflush_r+0x1a>
 8021010:	6a21      	ldr	r1, [r4, #32]
 8021012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021014:	4643      	mov	r3, r8
 8021016:	463a      	mov	r2, r7
 8021018:	4628      	mov	r0, r5
 802101a:	47b0      	blx	r6
 802101c:	2800      	cmp	r0, #0
 802101e:	dc06      	bgt.n	802102e <__sflush_r+0xfe>
 8021020:	89a3      	ldrh	r3, [r4, #12]
 8021022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021026:	81a3      	strh	r3, [r4, #12]
 8021028:	f04f 30ff 	mov.w	r0, #4294967295
 802102c:	e78e      	b.n	8020f4c <__sflush_r+0x1c>
 802102e:	4407      	add	r7, r0
 8021030:	eba8 0800 	sub.w	r8, r8, r0
 8021034:	e7e9      	b.n	802100a <__sflush_r+0xda>
 8021036:	bf00      	nop
 8021038:	dfbffffe 	.word	0xdfbffffe

0802103c <_fflush_r>:
 802103c:	b538      	push	{r3, r4, r5, lr}
 802103e:	690b      	ldr	r3, [r1, #16]
 8021040:	4605      	mov	r5, r0
 8021042:	460c      	mov	r4, r1
 8021044:	b913      	cbnz	r3, 802104c <_fflush_r+0x10>
 8021046:	2500      	movs	r5, #0
 8021048:	4628      	mov	r0, r5
 802104a:	bd38      	pop	{r3, r4, r5, pc}
 802104c:	b118      	cbz	r0, 8021056 <_fflush_r+0x1a>
 802104e:	6a03      	ldr	r3, [r0, #32]
 8021050:	b90b      	cbnz	r3, 8021056 <_fflush_r+0x1a>
 8021052:	f7fd f96b 	bl	801e32c <__sinit>
 8021056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802105a:	2b00      	cmp	r3, #0
 802105c:	d0f3      	beq.n	8021046 <_fflush_r+0xa>
 802105e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021060:	07d0      	lsls	r0, r2, #31
 8021062:	d404      	bmi.n	802106e <_fflush_r+0x32>
 8021064:	0599      	lsls	r1, r3, #22
 8021066:	d402      	bmi.n	802106e <_fflush_r+0x32>
 8021068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802106a:	f7fd fb4f 	bl	801e70c <__retarget_lock_acquire_recursive>
 802106e:	4628      	mov	r0, r5
 8021070:	4621      	mov	r1, r4
 8021072:	f7ff ff5d 	bl	8020f30 <__sflush_r>
 8021076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021078:	07da      	lsls	r2, r3, #31
 802107a:	4605      	mov	r5, r0
 802107c:	d4e4      	bmi.n	8021048 <_fflush_r+0xc>
 802107e:	89a3      	ldrh	r3, [r4, #12]
 8021080:	059b      	lsls	r3, r3, #22
 8021082:	d4e1      	bmi.n	8021048 <_fflush_r+0xc>
 8021084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021086:	f7fd fb42 	bl	801e70e <__retarget_lock_release_recursive>
 802108a:	e7dd      	b.n	8021048 <_fflush_r+0xc>

0802108c <__sccl>:
 802108c:	b570      	push	{r4, r5, r6, lr}
 802108e:	780b      	ldrb	r3, [r1, #0]
 8021090:	4604      	mov	r4, r0
 8021092:	2b5e      	cmp	r3, #94	; 0x5e
 8021094:	bf0b      	itete	eq
 8021096:	784b      	ldrbeq	r3, [r1, #1]
 8021098:	1c4a      	addne	r2, r1, #1
 802109a:	1c8a      	addeq	r2, r1, #2
 802109c:	2100      	movne	r1, #0
 802109e:	bf08      	it	eq
 80210a0:	2101      	moveq	r1, #1
 80210a2:	3801      	subs	r0, #1
 80210a4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80210a8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80210ac:	42a8      	cmp	r0, r5
 80210ae:	d1fb      	bne.n	80210a8 <__sccl+0x1c>
 80210b0:	b90b      	cbnz	r3, 80210b6 <__sccl+0x2a>
 80210b2:	1e50      	subs	r0, r2, #1
 80210b4:	bd70      	pop	{r4, r5, r6, pc}
 80210b6:	f081 0101 	eor.w	r1, r1, #1
 80210ba:	54e1      	strb	r1, [r4, r3]
 80210bc:	4610      	mov	r0, r2
 80210be:	4602      	mov	r2, r0
 80210c0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80210c4:	2d2d      	cmp	r5, #45	; 0x2d
 80210c6:	d005      	beq.n	80210d4 <__sccl+0x48>
 80210c8:	2d5d      	cmp	r5, #93	; 0x5d
 80210ca:	d016      	beq.n	80210fa <__sccl+0x6e>
 80210cc:	2d00      	cmp	r5, #0
 80210ce:	d0f1      	beq.n	80210b4 <__sccl+0x28>
 80210d0:	462b      	mov	r3, r5
 80210d2:	e7f2      	b.n	80210ba <__sccl+0x2e>
 80210d4:	7846      	ldrb	r6, [r0, #1]
 80210d6:	2e5d      	cmp	r6, #93	; 0x5d
 80210d8:	d0fa      	beq.n	80210d0 <__sccl+0x44>
 80210da:	42b3      	cmp	r3, r6
 80210dc:	dcf8      	bgt.n	80210d0 <__sccl+0x44>
 80210de:	3002      	adds	r0, #2
 80210e0:	461a      	mov	r2, r3
 80210e2:	3201      	adds	r2, #1
 80210e4:	4296      	cmp	r6, r2
 80210e6:	54a1      	strb	r1, [r4, r2]
 80210e8:	dcfb      	bgt.n	80210e2 <__sccl+0x56>
 80210ea:	1af2      	subs	r2, r6, r3
 80210ec:	3a01      	subs	r2, #1
 80210ee:	1c5d      	adds	r5, r3, #1
 80210f0:	42b3      	cmp	r3, r6
 80210f2:	bfa8      	it	ge
 80210f4:	2200      	movge	r2, #0
 80210f6:	18ab      	adds	r3, r5, r2
 80210f8:	e7e1      	b.n	80210be <__sccl+0x32>
 80210fa:	4610      	mov	r0, r2
 80210fc:	e7da      	b.n	80210b4 <__sccl+0x28>

080210fe <__submore>:
 80210fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021102:	460c      	mov	r4, r1
 8021104:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021106:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802110a:	4299      	cmp	r1, r3
 802110c:	d11d      	bne.n	802114a <__submore+0x4c>
 802110e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021112:	f7fb fb45 	bl	801c7a0 <_malloc_r>
 8021116:	b918      	cbnz	r0, 8021120 <__submore+0x22>
 8021118:	f04f 30ff 	mov.w	r0, #4294967295
 802111c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021124:	63a3      	str	r3, [r4, #56]	; 0x38
 8021126:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802112a:	6360      	str	r0, [r4, #52]	; 0x34
 802112c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8021130:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8021134:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8021138:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802113c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8021140:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8021144:	6020      	str	r0, [r4, #0]
 8021146:	2000      	movs	r0, #0
 8021148:	e7e8      	b.n	802111c <__submore+0x1e>
 802114a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802114c:	0077      	lsls	r7, r6, #1
 802114e:	463a      	mov	r2, r7
 8021150:	f7fb fbba 	bl	801c8c8 <_realloc_r>
 8021154:	4605      	mov	r5, r0
 8021156:	2800      	cmp	r0, #0
 8021158:	d0de      	beq.n	8021118 <__submore+0x1a>
 802115a:	eb00 0806 	add.w	r8, r0, r6
 802115e:	4601      	mov	r1, r0
 8021160:	4632      	mov	r2, r6
 8021162:	4640      	mov	r0, r8
 8021164:	f7fd fad4 	bl	801e710 <memcpy>
 8021168:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802116c:	f8c4 8000 	str.w	r8, [r4]
 8021170:	e7e9      	b.n	8021146 <__submore+0x48>

08021172 <memmove>:
 8021172:	4288      	cmp	r0, r1
 8021174:	b510      	push	{r4, lr}
 8021176:	eb01 0402 	add.w	r4, r1, r2
 802117a:	d902      	bls.n	8021182 <memmove+0x10>
 802117c:	4284      	cmp	r4, r0
 802117e:	4623      	mov	r3, r4
 8021180:	d807      	bhi.n	8021192 <memmove+0x20>
 8021182:	1e43      	subs	r3, r0, #1
 8021184:	42a1      	cmp	r1, r4
 8021186:	d008      	beq.n	802119a <memmove+0x28>
 8021188:	f811 2b01 	ldrb.w	r2, [r1], #1
 802118c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021190:	e7f8      	b.n	8021184 <memmove+0x12>
 8021192:	4402      	add	r2, r0
 8021194:	4601      	mov	r1, r0
 8021196:	428a      	cmp	r2, r1
 8021198:	d100      	bne.n	802119c <memmove+0x2a>
 802119a:	bd10      	pop	{r4, pc}
 802119c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80211a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80211a4:	e7f7      	b.n	8021196 <memmove+0x24>
	...

080211a8 <__assert_func>:
 80211a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80211aa:	4614      	mov	r4, r2
 80211ac:	461a      	mov	r2, r3
 80211ae:	4b09      	ldr	r3, [pc, #36]	; (80211d4 <__assert_func+0x2c>)
 80211b0:	681b      	ldr	r3, [r3, #0]
 80211b2:	4605      	mov	r5, r0
 80211b4:	68d8      	ldr	r0, [r3, #12]
 80211b6:	b14c      	cbz	r4, 80211cc <__assert_func+0x24>
 80211b8:	4b07      	ldr	r3, [pc, #28]	; (80211d8 <__assert_func+0x30>)
 80211ba:	9100      	str	r1, [sp, #0]
 80211bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80211c0:	4906      	ldr	r1, [pc, #24]	; (80211dc <__assert_func+0x34>)
 80211c2:	462b      	mov	r3, r5
 80211c4:	f000 f898 	bl	80212f8 <fiprintf>
 80211c8:	f000 f8a8 	bl	802131c <abort>
 80211cc:	4b04      	ldr	r3, [pc, #16]	; (80211e0 <__assert_func+0x38>)
 80211ce:	461c      	mov	r4, r3
 80211d0:	e7f3      	b.n	80211ba <__assert_func+0x12>
 80211d2:	bf00      	nop
 80211d4:	200002f0 	.word	0x200002f0
 80211d8:	08022b00 	.word	0x08022b00
 80211dc:	08022b0d 	.word	0x08022b0d
 80211e0:	08022b3b 	.word	0x08022b3b

080211e4 <_calloc_r>:
 80211e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80211e6:	fba1 2402 	umull	r2, r4, r1, r2
 80211ea:	b94c      	cbnz	r4, 8021200 <_calloc_r+0x1c>
 80211ec:	4611      	mov	r1, r2
 80211ee:	9201      	str	r2, [sp, #4]
 80211f0:	f7fb fad6 	bl	801c7a0 <_malloc_r>
 80211f4:	9a01      	ldr	r2, [sp, #4]
 80211f6:	4605      	mov	r5, r0
 80211f8:	b930      	cbnz	r0, 8021208 <_calloc_r+0x24>
 80211fa:	4628      	mov	r0, r5
 80211fc:	b003      	add	sp, #12
 80211fe:	bd30      	pop	{r4, r5, pc}
 8021200:	220c      	movs	r2, #12
 8021202:	6002      	str	r2, [r0, #0]
 8021204:	2500      	movs	r5, #0
 8021206:	e7f8      	b.n	80211fa <_calloc_r+0x16>
 8021208:	4621      	mov	r1, r4
 802120a:	f7fd f98a 	bl	801e522 <memset>
 802120e:	e7f4      	b.n	80211fa <_calloc_r+0x16>

08021210 <_strtoul_l.constprop.0>:
 8021210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021214:	4f36      	ldr	r7, [pc, #216]	; (80212f0 <_strtoul_l.constprop.0+0xe0>)
 8021216:	4686      	mov	lr, r0
 8021218:	460d      	mov	r5, r1
 802121a:	4628      	mov	r0, r5
 802121c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021220:	5d3e      	ldrb	r6, [r7, r4]
 8021222:	f016 0608 	ands.w	r6, r6, #8
 8021226:	d1f8      	bne.n	802121a <_strtoul_l.constprop.0+0xa>
 8021228:	2c2d      	cmp	r4, #45	; 0x2d
 802122a:	d130      	bne.n	802128e <_strtoul_l.constprop.0+0x7e>
 802122c:	782c      	ldrb	r4, [r5, #0]
 802122e:	2601      	movs	r6, #1
 8021230:	1c85      	adds	r5, r0, #2
 8021232:	2b00      	cmp	r3, #0
 8021234:	d057      	beq.n	80212e6 <_strtoul_l.constprop.0+0xd6>
 8021236:	2b10      	cmp	r3, #16
 8021238:	d109      	bne.n	802124e <_strtoul_l.constprop.0+0x3e>
 802123a:	2c30      	cmp	r4, #48	; 0x30
 802123c:	d107      	bne.n	802124e <_strtoul_l.constprop.0+0x3e>
 802123e:	7828      	ldrb	r0, [r5, #0]
 8021240:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8021244:	2858      	cmp	r0, #88	; 0x58
 8021246:	d149      	bne.n	80212dc <_strtoul_l.constprop.0+0xcc>
 8021248:	786c      	ldrb	r4, [r5, #1]
 802124a:	2310      	movs	r3, #16
 802124c:	3502      	adds	r5, #2
 802124e:	f04f 38ff 	mov.w	r8, #4294967295
 8021252:	2700      	movs	r7, #0
 8021254:	fbb8 f8f3 	udiv	r8, r8, r3
 8021258:	fb03 f908 	mul.w	r9, r3, r8
 802125c:	ea6f 0909 	mvn.w	r9, r9
 8021260:	4638      	mov	r0, r7
 8021262:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8021266:	f1bc 0f09 	cmp.w	ip, #9
 802126a:	d815      	bhi.n	8021298 <_strtoul_l.constprop.0+0x88>
 802126c:	4664      	mov	r4, ip
 802126e:	42a3      	cmp	r3, r4
 8021270:	dd23      	ble.n	80212ba <_strtoul_l.constprop.0+0xaa>
 8021272:	f1b7 3fff 	cmp.w	r7, #4294967295
 8021276:	d007      	beq.n	8021288 <_strtoul_l.constprop.0+0x78>
 8021278:	4580      	cmp	r8, r0
 802127a:	d31b      	bcc.n	80212b4 <_strtoul_l.constprop.0+0xa4>
 802127c:	d101      	bne.n	8021282 <_strtoul_l.constprop.0+0x72>
 802127e:	45a1      	cmp	r9, r4
 8021280:	db18      	blt.n	80212b4 <_strtoul_l.constprop.0+0xa4>
 8021282:	fb00 4003 	mla	r0, r0, r3, r4
 8021286:	2701      	movs	r7, #1
 8021288:	f815 4b01 	ldrb.w	r4, [r5], #1
 802128c:	e7e9      	b.n	8021262 <_strtoul_l.constprop.0+0x52>
 802128e:	2c2b      	cmp	r4, #43	; 0x2b
 8021290:	bf04      	itt	eq
 8021292:	782c      	ldrbeq	r4, [r5, #0]
 8021294:	1c85      	addeq	r5, r0, #2
 8021296:	e7cc      	b.n	8021232 <_strtoul_l.constprop.0+0x22>
 8021298:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802129c:	f1bc 0f19 	cmp.w	ip, #25
 80212a0:	d801      	bhi.n	80212a6 <_strtoul_l.constprop.0+0x96>
 80212a2:	3c37      	subs	r4, #55	; 0x37
 80212a4:	e7e3      	b.n	802126e <_strtoul_l.constprop.0+0x5e>
 80212a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80212aa:	f1bc 0f19 	cmp.w	ip, #25
 80212ae:	d804      	bhi.n	80212ba <_strtoul_l.constprop.0+0xaa>
 80212b0:	3c57      	subs	r4, #87	; 0x57
 80212b2:	e7dc      	b.n	802126e <_strtoul_l.constprop.0+0x5e>
 80212b4:	f04f 37ff 	mov.w	r7, #4294967295
 80212b8:	e7e6      	b.n	8021288 <_strtoul_l.constprop.0+0x78>
 80212ba:	1c7b      	adds	r3, r7, #1
 80212bc:	d106      	bne.n	80212cc <_strtoul_l.constprop.0+0xbc>
 80212be:	2322      	movs	r3, #34	; 0x22
 80212c0:	f8ce 3000 	str.w	r3, [lr]
 80212c4:	4638      	mov	r0, r7
 80212c6:	b932      	cbnz	r2, 80212d6 <_strtoul_l.constprop.0+0xc6>
 80212c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80212cc:	b106      	cbz	r6, 80212d0 <_strtoul_l.constprop.0+0xc0>
 80212ce:	4240      	negs	r0, r0
 80212d0:	2a00      	cmp	r2, #0
 80212d2:	d0f9      	beq.n	80212c8 <_strtoul_l.constprop.0+0xb8>
 80212d4:	b107      	cbz	r7, 80212d8 <_strtoul_l.constprop.0+0xc8>
 80212d6:	1e69      	subs	r1, r5, #1
 80212d8:	6011      	str	r1, [r2, #0]
 80212da:	e7f5      	b.n	80212c8 <_strtoul_l.constprop.0+0xb8>
 80212dc:	2430      	movs	r4, #48	; 0x30
 80212de:	2b00      	cmp	r3, #0
 80212e0:	d1b5      	bne.n	802124e <_strtoul_l.constprop.0+0x3e>
 80212e2:	2308      	movs	r3, #8
 80212e4:	e7b3      	b.n	802124e <_strtoul_l.constprop.0+0x3e>
 80212e6:	2c30      	cmp	r4, #48	; 0x30
 80212e8:	d0a9      	beq.n	802123e <_strtoul_l.constprop.0+0x2e>
 80212ea:	230a      	movs	r3, #10
 80212ec:	e7af      	b.n	802124e <_strtoul_l.constprop.0+0x3e>
 80212ee:	bf00      	nop
 80212f0:	08022751 	.word	0x08022751

080212f4 <_strtoul_r>:
 80212f4:	f7ff bf8c 	b.w	8021210 <_strtoul_l.constprop.0>

080212f8 <fiprintf>:
 80212f8:	b40e      	push	{r1, r2, r3}
 80212fa:	b503      	push	{r0, r1, lr}
 80212fc:	4601      	mov	r1, r0
 80212fe:	ab03      	add	r3, sp, #12
 8021300:	4805      	ldr	r0, [pc, #20]	; (8021318 <fiprintf+0x20>)
 8021302:	f853 2b04 	ldr.w	r2, [r3], #4
 8021306:	6800      	ldr	r0, [r0, #0]
 8021308:	9301      	str	r3, [sp, #4]
 802130a:	f000 f837 	bl	802137c <_vfiprintf_r>
 802130e:	b002      	add	sp, #8
 8021310:	f85d eb04 	ldr.w	lr, [sp], #4
 8021314:	b003      	add	sp, #12
 8021316:	4770      	bx	lr
 8021318:	200002f0 	.word	0x200002f0

0802131c <abort>:
 802131c:	b508      	push	{r3, lr}
 802131e:	2006      	movs	r0, #6
 8021320:	f000 fa04 	bl	802172c <raise>
 8021324:	2001      	movs	r0, #1
 8021326:	f7ea f971 	bl	800b60c <_exit>

0802132a <__sfputc_r>:
 802132a:	6893      	ldr	r3, [r2, #8]
 802132c:	3b01      	subs	r3, #1
 802132e:	2b00      	cmp	r3, #0
 8021330:	b410      	push	{r4}
 8021332:	6093      	str	r3, [r2, #8]
 8021334:	da08      	bge.n	8021348 <__sfputc_r+0x1e>
 8021336:	6994      	ldr	r4, [r2, #24]
 8021338:	42a3      	cmp	r3, r4
 802133a:	db01      	blt.n	8021340 <__sfputc_r+0x16>
 802133c:	290a      	cmp	r1, #10
 802133e:	d103      	bne.n	8021348 <__sfputc_r+0x1e>
 8021340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021344:	f000 b934 	b.w	80215b0 <__swbuf_r>
 8021348:	6813      	ldr	r3, [r2, #0]
 802134a:	1c58      	adds	r0, r3, #1
 802134c:	6010      	str	r0, [r2, #0]
 802134e:	7019      	strb	r1, [r3, #0]
 8021350:	4608      	mov	r0, r1
 8021352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021356:	4770      	bx	lr

08021358 <__sfputs_r>:
 8021358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802135a:	4606      	mov	r6, r0
 802135c:	460f      	mov	r7, r1
 802135e:	4614      	mov	r4, r2
 8021360:	18d5      	adds	r5, r2, r3
 8021362:	42ac      	cmp	r4, r5
 8021364:	d101      	bne.n	802136a <__sfputs_r+0x12>
 8021366:	2000      	movs	r0, #0
 8021368:	e007      	b.n	802137a <__sfputs_r+0x22>
 802136a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802136e:	463a      	mov	r2, r7
 8021370:	4630      	mov	r0, r6
 8021372:	f7ff ffda 	bl	802132a <__sfputc_r>
 8021376:	1c43      	adds	r3, r0, #1
 8021378:	d1f3      	bne.n	8021362 <__sfputs_r+0xa>
 802137a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802137c <_vfiprintf_r>:
 802137c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021380:	460d      	mov	r5, r1
 8021382:	b09d      	sub	sp, #116	; 0x74
 8021384:	4614      	mov	r4, r2
 8021386:	4698      	mov	r8, r3
 8021388:	4606      	mov	r6, r0
 802138a:	b118      	cbz	r0, 8021394 <_vfiprintf_r+0x18>
 802138c:	6a03      	ldr	r3, [r0, #32]
 802138e:	b90b      	cbnz	r3, 8021394 <_vfiprintf_r+0x18>
 8021390:	f7fc ffcc 	bl	801e32c <__sinit>
 8021394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021396:	07d9      	lsls	r1, r3, #31
 8021398:	d405      	bmi.n	80213a6 <_vfiprintf_r+0x2a>
 802139a:	89ab      	ldrh	r3, [r5, #12]
 802139c:	059a      	lsls	r2, r3, #22
 802139e:	d402      	bmi.n	80213a6 <_vfiprintf_r+0x2a>
 80213a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80213a2:	f7fd f9b3 	bl	801e70c <__retarget_lock_acquire_recursive>
 80213a6:	89ab      	ldrh	r3, [r5, #12]
 80213a8:	071b      	lsls	r3, r3, #28
 80213aa:	d501      	bpl.n	80213b0 <_vfiprintf_r+0x34>
 80213ac:	692b      	ldr	r3, [r5, #16]
 80213ae:	b99b      	cbnz	r3, 80213d8 <_vfiprintf_r+0x5c>
 80213b0:	4629      	mov	r1, r5
 80213b2:	4630      	mov	r0, r6
 80213b4:	f000 f93a 	bl	802162c <__swsetup_r>
 80213b8:	b170      	cbz	r0, 80213d8 <_vfiprintf_r+0x5c>
 80213ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80213bc:	07dc      	lsls	r4, r3, #31
 80213be:	d504      	bpl.n	80213ca <_vfiprintf_r+0x4e>
 80213c0:	f04f 30ff 	mov.w	r0, #4294967295
 80213c4:	b01d      	add	sp, #116	; 0x74
 80213c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213ca:	89ab      	ldrh	r3, [r5, #12]
 80213cc:	0598      	lsls	r0, r3, #22
 80213ce:	d4f7      	bmi.n	80213c0 <_vfiprintf_r+0x44>
 80213d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80213d2:	f7fd f99c 	bl	801e70e <__retarget_lock_release_recursive>
 80213d6:	e7f3      	b.n	80213c0 <_vfiprintf_r+0x44>
 80213d8:	2300      	movs	r3, #0
 80213da:	9309      	str	r3, [sp, #36]	; 0x24
 80213dc:	2320      	movs	r3, #32
 80213de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80213e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80213e6:	2330      	movs	r3, #48	; 0x30
 80213e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 802159c <_vfiprintf_r+0x220>
 80213ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80213f0:	f04f 0901 	mov.w	r9, #1
 80213f4:	4623      	mov	r3, r4
 80213f6:	469a      	mov	sl, r3
 80213f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80213fc:	b10a      	cbz	r2, 8021402 <_vfiprintf_r+0x86>
 80213fe:	2a25      	cmp	r2, #37	; 0x25
 8021400:	d1f9      	bne.n	80213f6 <_vfiprintf_r+0x7a>
 8021402:	ebba 0b04 	subs.w	fp, sl, r4
 8021406:	d00b      	beq.n	8021420 <_vfiprintf_r+0xa4>
 8021408:	465b      	mov	r3, fp
 802140a:	4622      	mov	r2, r4
 802140c:	4629      	mov	r1, r5
 802140e:	4630      	mov	r0, r6
 8021410:	f7ff ffa2 	bl	8021358 <__sfputs_r>
 8021414:	3001      	adds	r0, #1
 8021416:	f000 80a9 	beq.w	802156c <_vfiprintf_r+0x1f0>
 802141a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802141c:	445a      	add	r2, fp
 802141e:	9209      	str	r2, [sp, #36]	; 0x24
 8021420:	f89a 3000 	ldrb.w	r3, [sl]
 8021424:	2b00      	cmp	r3, #0
 8021426:	f000 80a1 	beq.w	802156c <_vfiprintf_r+0x1f0>
 802142a:	2300      	movs	r3, #0
 802142c:	f04f 32ff 	mov.w	r2, #4294967295
 8021430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021434:	f10a 0a01 	add.w	sl, sl, #1
 8021438:	9304      	str	r3, [sp, #16]
 802143a:	9307      	str	r3, [sp, #28]
 802143c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021440:	931a      	str	r3, [sp, #104]	; 0x68
 8021442:	4654      	mov	r4, sl
 8021444:	2205      	movs	r2, #5
 8021446:	f814 1b01 	ldrb.w	r1, [r4], #1
 802144a:	4854      	ldr	r0, [pc, #336]	; (802159c <_vfiprintf_r+0x220>)
 802144c:	f7de fec0 	bl	80001d0 <memchr>
 8021450:	9a04      	ldr	r2, [sp, #16]
 8021452:	b9d8      	cbnz	r0, 802148c <_vfiprintf_r+0x110>
 8021454:	06d1      	lsls	r1, r2, #27
 8021456:	bf44      	itt	mi
 8021458:	2320      	movmi	r3, #32
 802145a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802145e:	0713      	lsls	r3, r2, #28
 8021460:	bf44      	itt	mi
 8021462:	232b      	movmi	r3, #43	; 0x2b
 8021464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021468:	f89a 3000 	ldrb.w	r3, [sl]
 802146c:	2b2a      	cmp	r3, #42	; 0x2a
 802146e:	d015      	beq.n	802149c <_vfiprintf_r+0x120>
 8021470:	9a07      	ldr	r2, [sp, #28]
 8021472:	4654      	mov	r4, sl
 8021474:	2000      	movs	r0, #0
 8021476:	f04f 0c0a 	mov.w	ip, #10
 802147a:	4621      	mov	r1, r4
 802147c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021480:	3b30      	subs	r3, #48	; 0x30
 8021482:	2b09      	cmp	r3, #9
 8021484:	d94d      	bls.n	8021522 <_vfiprintf_r+0x1a6>
 8021486:	b1b0      	cbz	r0, 80214b6 <_vfiprintf_r+0x13a>
 8021488:	9207      	str	r2, [sp, #28]
 802148a:	e014      	b.n	80214b6 <_vfiprintf_r+0x13a>
 802148c:	eba0 0308 	sub.w	r3, r0, r8
 8021490:	fa09 f303 	lsl.w	r3, r9, r3
 8021494:	4313      	orrs	r3, r2
 8021496:	9304      	str	r3, [sp, #16]
 8021498:	46a2      	mov	sl, r4
 802149a:	e7d2      	b.n	8021442 <_vfiprintf_r+0xc6>
 802149c:	9b03      	ldr	r3, [sp, #12]
 802149e:	1d19      	adds	r1, r3, #4
 80214a0:	681b      	ldr	r3, [r3, #0]
 80214a2:	9103      	str	r1, [sp, #12]
 80214a4:	2b00      	cmp	r3, #0
 80214a6:	bfbb      	ittet	lt
 80214a8:	425b      	neglt	r3, r3
 80214aa:	f042 0202 	orrlt.w	r2, r2, #2
 80214ae:	9307      	strge	r3, [sp, #28]
 80214b0:	9307      	strlt	r3, [sp, #28]
 80214b2:	bfb8      	it	lt
 80214b4:	9204      	strlt	r2, [sp, #16]
 80214b6:	7823      	ldrb	r3, [r4, #0]
 80214b8:	2b2e      	cmp	r3, #46	; 0x2e
 80214ba:	d10c      	bne.n	80214d6 <_vfiprintf_r+0x15a>
 80214bc:	7863      	ldrb	r3, [r4, #1]
 80214be:	2b2a      	cmp	r3, #42	; 0x2a
 80214c0:	d134      	bne.n	802152c <_vfiprintf_r+0x1b0>
 80214c2:	9b03      	ldr	r3, [sp, #12]
 80214c4:	1d1a      	adds	r2, r3, #4
 80214c6:	681b      	ldr	r3, [r3, #0]
 80214c8:	9203      	str	r2, [sp, #12]
 80214ca:	2b00      	cmp	r3, #0
 80214cc:	bfb8      	it	lt
 80214ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80214d2:	3402      	adds	r4, #2
 80214d4:	9305      	str	r3, [sp, #20]
 80214d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80215ac <_vfiprintf_r+0x230>
 80214da:	7821      	ldrb	r1, [r4, #0]
 80214dc:	2203      	movs	r2, #3
 80214de:	4650      	mov	r0, sl
 80214e0:	f7de fe76 	bl	80001d0 <memchr>
 80214e4:	b138      	cbz	r0, 80214f6 <_vfiprintf_r+0x17a>
 80214e6:	9b04      	ldr	r3, [sp, #16]
 80214e8:	eba0 000a 	sub.w	r0, r0, sl
 80214ec:	2240      	movs	r2, #64	; 0x40
 80214ee:	4082      	lsls	r2, r0
 80214f0:	4313      	orrs	r3, r2
 80214f2:	3401      	adds	r4, #1
 80214f4:	9304      	str	r3, [sp, #16]
 80214f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80214fa:	4829      	ldr	r0, [pc, #164]	; (80215a0 <_vfiprintf_r+0x224>)
 80214fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021500:	2206      	movs	r2, #6
 8021502:	f7de fe65 	bl	80001d0 <memchr>
 8021506:	2800      	cmp	r0, #0
 8021508:	d03f      	beq.n	802158a <_vfiprintf_r+0x20e>
 802150a:	4b26      	ldr	r3, [pc, #152]	; (80215a4 <_vfiprintf_r+0x228>)
 802150c:	bb1b      	cbnz	r3, 8021556 <_vfiprintf_r+0x1da>
 802150e:	9b03      	ldr	r3, [sp, #12]
 8021510:	3307      	adds	r3, #7
 8021512:	f023 0307 	bic.w	r3, r3, #7
 8021516:	3308      	adds	r3, #8
 8021518:	9303      	str	r3, [sp, #12]
 802151a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802151c:	443b      	add	r3, r7
 802151e:	9309      	str	r3, [sp, #36]	; 0x24
 8021520:	e768      	b.n	80213f4 <_vfiprintf_r+0x78>
 8021522:	fb0c 3202 	mla	r2, ip, r2, r3
 8021526:	460c      	mov	r4, r1
 8021528:	2001      	movs	r0, #1
 802152a:	e7a6      	b.n	802147a <_vfiprintf_r+0xfe>
 802152c:	2300      	movs	r3, #0
 802152e:	3401      	adds	r4, #1
 8021530:	9305      	str	r3, [sp, #20]
 8021532:	4619      	mov	r1, r3
 8021534:	f04f 0c0a 	mov.w	ip, #10
 8021538:	4620      	mov	r0, r4
 802153a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802153e:	3a30      	subs	r2, #48	; 0x30
 8021540:	2a09      	cmp	r2, #9
 8021542:	d903      	bls.n	802154c <_vfiprintf_r+0x1d0>
 8021544:	2b00      	cmp	r3, #0
 8021546:	d0c6      	beq.n	80214d6 <_vfiprintf_r+0x15a>
 8021548:	9105      	str	r1, [sp, #20]
 802154a:	e7c4      	b.n	80214d6 <_vfiprintf_r+0x15a>
 802154c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021550:	4604      	mov	r4, r0
 8021552:	2301      	movs	r3, #1
 8021554:	e7f0      	b.n	8021538 <_vfiprintf_r+0x1bc>
 8021556:	ab03      	add	r3, sp, #12
 8021558:	9300      	str	r3, [sp, #0]
 802155a:	462a      	mov	r2, r5
 802155c:	4b12      	ldr	r3, [pc, #72]	; (80215a8 <_vfiprintf_r+0x22c>)
 802155e:	a904      	add	r1, sp, #16
 8021560:	4630      	mov	r0, r6
 8021562:	f7fc f893 	bl	801d68c <_printf_float>
 8021566:	4607      	mov	r7, r0
 8021568:	1c78      	adds	r0, r7, #1
 802156a:	d1d6      	bne.n	802151a <_vfiprintf_r+0x19e>
 802156c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802156e:	07d9      	lsls	r1, r3, #31
 8021570:	d405      	bmi.n	802157e <_vfiprintf_r+0x202>
 8021572:	89ab      	ldrh	r3, [r5, #12]
 8021574:	059a      	lsls	r2, r3, #22
 8021576:	d402      	bmi.n	802157e <_vfiprintf_r+0x202>
 8021578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802157a:	f7fd f8c8 	bl	801e70e <__retarget_lock_release_recursive>
 802157e:	89ab      	ldrh	r3, [r5, #12]
 8021580:	065b      	lsls	r3, r3, #25
 8021582:	f53f af1d 	bmi.w	80213c0 <_vfiprintf_r+0x44>
 8021586:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021588:	e71c      	b.n	80213c4 <_vfiprintf_r+0x48>
 802158a:	ab03      	add	r3, sp, #12
 802158c:	9300      	str	r3, [sp, #0]
 802158e:	462a      	mov	r2, r5
 8021590:	4b05      	ldr	r3, [pc, #20]	; (80215a8 <_vfiprintf_r+0x22c>)
 8021592:	a904      	add	r1, sp, #16
 8021594:	4630      	mov	r0, r6
 8021596:	f7fc fb1d 	bl	801dbd4 <_printf_i>
 802159a:	e7e4      	b.n	8021566 <_vfiprintf_r+0x1ea>
 802159c:	08022ad4 	.word	0x08022ad4
 80215a0:	08022ade 	.word	0x08022ade
 80215a4:	0801d68d 	.word	0x0801d68d
 80215a8:	08021359 	.word	0x08021359
 80215ac:	08022ada 	.word	0x08022ada

080215b0 <__swbuf_r>:
 80215b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80215b2:	460e      	mov	r6, r1
 80215b4:	4614      	mov	r4, r2
 80215b6:	4605      	mov	r5, r0
 80215b8:	b118      	cbz	r0, 80215c2 <__swbuf_r+0x12>
 80215ba:	6a03      	ldr	r3, [r0, #32]
 80215bc:	b90b      	cbnz	r3, 80215c2 <__swbuf_r+0x12>
 80215be:	f7fc feb5 	bl	801e32c <__sinit>
 80215c2:	69a3      	ldr	r3, [r4, #24]
 80215c4:	60a3      	str	r3, [r4, #8]
 80215c6:	89a3      	ldrh	r3, [r4, #12]
 80215c8:	071a      	lsls	r2, r3, #28
 80215ca:	d525      	bpl.n	8021618 <__swbuf_r+0x68>
 80215cc:	6923      	ldr	r3, [r4, #16]
 80215ce:	b31b      	cbz	r3, 8021618 <__swbuf_r+0x68>
 80215d0:	6823      	ldr	r3, [r4, #0]
 80215d2:	6922      	ldr	r2, [r4, #16]
 80215d4:	1a98      	subs	r0, r3, r2
 80215d6:	6963      	ldr	r3, [r4, #20]
 80215d8:	b2f6      	uxtb	r6, r6
 80215da:	4283      	cmp	r3, r0
 80215dc:	4637      	mov	r7, r6
 80215de:	dc04      	bgt.n	80215ea <__swbuf_r+0x3a>
 80215e0:	4621      	mov	r1, r4
 80215e2:	4628      	mov	r0, r5
 80215e4:	f7ff fd2a 	bl	802103c <_fflush_r>
 80215e8:	b9e0      	cbnz	r0, 8021624 <__swbuf_r+0x74>
 80215ea:	68a3      	ldr	r3, [r4, #8]
 80215ec:	3b01      	subs	r3, #1
 80215ee:	60a3      	str	r3, [r4, #8]
 80215f0:	6823      	ldr	r3, [r4, #0]
 80215f2:	1c5a      	adds	r2, r3, #1
 80215f4:	6022      	str	r2, [r4, #0]
 80215f6:	701e      	strb	r6, [r3, #0]
 80215f8:	6962      	ldr	r2, [r4, #20]
 80215fa:	1c43      	adds	r3, r0, #1
 80215fc:	429a      	cmp	r2, r3
 80215fe:	d004      	beq.n	802160a <__swbuf_r+0x5a>
 8021600:	89a3      	ldrh	r3, [r4, #12]
 8021602:	07db      	lsls	r3, r3, #31
 8021604:	d506      	bpl.n	8021614 <__swbuf_r+0x64>
 8021606:	2e0a      	cmp	r6, #10
 8021608:	d104      	bne.n	8021614 <__swbuf_r+0x64>
 802160a:	4621      	mov	r1, r4
 802160c:	4628      	mov	r0, r5
 802160e:	f7ff fd15 	bl	802103c <_fflush_r>
 8021612:	b938      	cbnz	r0, 8021624 <__swbuf_r+0x74>
 8021614:	4638      	mov	r0, r7
 8021616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021618:	4621      	mov	r1, r4
 802161a:	4628      	mov	r0, r5
 802161c:	f000 f806 	bl	802162c <__swsetup_r>
 8021620:	2800      	cmp	r0, #0
 8021622:	d0d5      	beq.n	80215d0 <__swbuf_r+0x20>
 8021624:	f04f 37ff 	mov.w	r7, #4294967295
 8021628:	e7f4      	b.n	8021614 <__swbuf_r+0x64>
	...

0802162c <__swsetup_r>:
 802162c:	b538      	push	{r3, r4, r5, lr}
 802162e:	4b2a      	ldr	r3, [pc, #168]	; (80216d8 <__swsetup_r+0xac>)
 8021630:	4605      	mov	r5, r0
 8021632:	6818      	ldr	r0, [r3, #0]
 8021634:	460c      	mov	r4, r1
 8021636:	b118      	cbz	r0, 8021640 <__swsetup_r+0x14>
 8021638:	6a03      	ldr	r3, [r0, #32]
 802163a:	b90b      	cbnz	r3, 8021640 <__swsetup_r+0x14>
 802163c:	f7fc fe76 	bl	801e32c <__sinit>
 8021640:	89a3      	ldrh	r3, [r4, #12]
 8021642:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021646:	0718      	lsls	r0, r3, #28
 8021648:	d422      	bmi.n	8021690 <__swsetup_r+0x64>
 802164a:	06d9      	lsls	r1, r3, #27
 802164c:	d407      	bmi.n	802165e <__swsetup_r+0x32>
 802164e:	2309      	movs	r3, #9
 8021650:	602b      	str	r3, [r5, #0]
 8021652:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021656:	81a3      	strh	r3, [r4, #12]
 8021658:	f04f 30ff 	mov.w	r0, #4294967295
 802165c:	e034      	b.n	80216c8 <__swsetup_r+0x9c>
 802165e:	0758      	lsls	r0, r3, #29
 8021660:	d512      	bpl.n	8021688 <__swsetup_r+0x5c>
 8021662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021664:	b141      	cbz	r1, 8021678 <__swsetup_r+0x4c>
 8021666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802166a:	4299      	cmp	r1, r3
 802166c:	d002      	beq.n	8021674 <__swsetup_r+0x48>
 802166e:	4628      	mov	r0, r5
 8021670:	f7fd fee8 	bl	801f444 <_free_r>
 8021674:	2300      	movs	r3, #0
 8021676:	6363      	str	r3, [r4, #52]	; 0x34
 8021678:	89a3      	ldrh	r3, [r4, #12]
 802167a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802167e:	81a3      	strh	r3, [r4, #12]
 8021680:	2300      	movs	r3, #0
 8021682:	6063      	str	r3, [r4, #4]
 8021684:	6923      	ldr	r3, [r4, #16]
 8021686:	6023      	str	r3, [r4, #0]
 8021688:	89a3      	ldrh	r3, [r4, #12]
 802168a:	f043 0308 	orr.w	r3, r3, #8
 802168e:	81a3      	strh	r3, [r4, #12]
 8021690:	6923      	ldr	r3, [r4, #16]
 8021692:	b94b      	cbnz	r3, 80216a8 <__swsetup_r+0x7c>
 8021694:	89a3      	ldrh	r3, [r4, #12]
 8021696:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802169a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802169e:	d003      	beq.n	80216a8 <__swsetup_r+0x7c>
 80216a0:	4621      	mov	r1, r4
 80216a2:	4628      	mov	r0, r5
 80216a4:	f000 f884 	bl	80217b0 <__smakebuf_r>
 80216a8:	89a0      	ldrh	r0, [r4, #12]
 80216aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80216ae:	f010 0301 	ands.w	r3, r0, #1
 80216b2:	d00a      	beq.n	80216ca <__swsetup_r+0x9e>
 80216b4:	2300      	movs	r3, #0
 80216b6:	60a3      	str	r3, [r4, #8]
 80216b8:	6963      	ldr	r3, [r4, #20]
 80216ba:	425b      	negs	r3, r3
 80216bc:	61a3      	str	r3, [r4, #24]
 80216be:	6923      	ldr	r3, [r4, #16]
 80216c0:	b943      	cbnz	r3, 80216d4 <__swsetup_r+0xa8>
 80216c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80216c6:	d1c4      	bne.n	8021652 <__swsetup_r+0x26>
 80216c8:	bd38      	pop	{r3, r4, r5, pc}
 80216ca:	0781      	lsls	r1, r0, #30
 80216cc:	bf58      	it	pl
 80216ce:	6963      	ldrpl	r3, [r4, #20]
 80216d0:	60a3      	str	r3, [r4, #8]
 80216d2:	e7f4      	b.n	80216be <__swsetup_r+0x92>
 80216d4:	2000      	movs	r0, #0
 80216d6:	e7f7      	b.n	80216c8 <__swsetup_r+0x9c>
 80216d8:	200002f0 	.word	0x200002f0

080216dc <_raise_r>:
 80216dc:	291f      	cmp	r1, #31
 80216de:	b538      	push	{r3, r4, r5, lr}
 80216e0:	4604      	mov	r4, r0
 80216e2:	460d      	mov	r5, r1
 80216e4:	d904      	bls.n	80216f0 <_raise_r+0x14>
 80216e6:	2316      	movs	r3, #22
 80216e8:	6003      	str	r3, [r0, #0]
 80216ea:	f04f 30ff 	mov.w	r0, #4294967295
 80216ee:	bd38      	pop	{r3, r4, r5, pc}
 80216f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80216f2:	b112      	cbz	r2, 80216fa <_raise_r+0x1e>
 80216f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80216f8:	b94b      	cbnz	r3, 802170e <_raise_r+0x32>
 80216fa:	4620      	mov	r0, r4
 80216fc:	f000 f830 	bl	8021760 <_getpid_r>
 8021700:	462a      	mov	r2, r5
 8021702:	4601      	mov	r1, r0
 8021704:	4620      	mov	r0, r4
 8021706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802170a:	f000 b817 	b.w	802173c <_kill_r>
 802170e:	2b01      	cmp	r3, #1
 8021710:	d00a      	beq.n	8021728 <_raise_r+0x4c>
 8021712:	1c59      	adds	r1, r3, #1
 8021714:	d103      	bne.n	802171e <_raise_r+0x42>
 8021716:	2316      	movs	r3, #22
 8021718:	6003      	str	r3, [r0, #0]
 802171a:	2001      	movs	r0, #1
 802171c:	e7e7      	b.n	80216ee <_raise_r+0x12>
 802171e:	2400      	movs	r4, #0
 8021720:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021724:	4628      	mov	r0, r5
 8021726:	4798      	blx	r3
 8021728:	2000      	movs	r0, #0
 802172a:	e7e0      	b.n	80216ee <_raise_r+0x12>

0802172c <raise>:
 802172c:	4b02      	ldr	r3, [pc, #8]	; (8021738 <raise+0xc>)
 802172e:	4601      	mov	r1, r0
 8021730:	6818      	ldr	r0, [r3, #0]
 8021732:	f7ff bfd3 	b.w	80216dc <_raise_r>
 8021736:	bf00      	nop
 8021738:	200002f0 	.word	0x200002f0

0802173c <_kill_r>:
 802173c:	b538      	push	{r3, r4, r5, lr}
 802173e:	4d07      	ldr	r5, [pc, #28]	; (802175c <_kill_r+0x20>)
 8021740:	2300      	movs	r3, #0
 8021742:	4604      	mov	r4, r0
 8021744:	4608      	mov	r0, r1
 8021746:	4611      	mov	r1, r2
 8021748:	602b      	str	r3, [r5, #0]
 802174a:	f7e9 ff4f 	bl	800b5ec <_kill>
 802174e:	1c43      	adds	r3, r0, #1
 8021750:	d102      	bne.n	8021758 <_kill_r+0x1c>
 8021752:	682b      	ldr	r3, [r5, #0]
 8021754:	b103      	cbz	r3, 8021758 <_kill_r+0x1c>
 8021756:	6023      	str	r3, [r4, #0]
 8021758:	bd38      	pop	{r3, r4, r5, pc}
 802175a:	bf00      	nop
 802175c:	2000a1c4 	.word	0x2000a1c4

08021760 <_getpid_r>:
 8021760:	f7e9 bf3c 	b.w	800b5dc <_getpid>

08021764 <__swhatbuf_r>:
 8021764:	b570      	push	{r4, r5, r6, lr}
 8021766:	460c      	mov	r4, r1
 8021768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802176c:	2900      	cmp	r1, #0
 802176e:	b096      	sub	sp, #88	; 0x58
 8021770:	4615      	mov	r5, r2
 8021772:	461e      	mov	r6, r3
 8021774:	da0d      	bge.n	8021792 <__swhatbuf_r+0x2e>
 8021776:	89a3      	ldrh	r3, [r4, #12]
 8021778:	f013 0f80 	tst.w	r3, #128	; 0x80
 802177c:	f04f 0100 	mov.w	r1, #0
 8021780:	bf0c      	ite	eq
 8021782:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8021786:	2340      	movne	r3, #64	; 0x40
 8021788:	2000      	movs	r0, #0
 802178a:	6031      	str	r1, [r6, #0]
 802178c:	602b      	str	r3, [r5, #0]
 802178e:	b016      	add	sp, #88	; 0x58
 8021790:	bd70      	pop	{r4, r5, r6, pc}
 8021792:	466a      	mov	r2, sp
 8021794:	f000 f848 	bl	8021828 <_fstat_r>
 8021798:	2800      	cmp	r0, #0
 802179a:	dbec      	blt.n	8021776 <__swhatbuf_r+0x12>
 802179c:	9901      	ldr	r1, [sp, #4]
 802179e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80217a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80217a6:	4259      	negs	r1, r3
 80217a8:	4159      	adcs	r1, r3
 80217aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80217ae:	e7eb      	b.n	8021788 <__swhatbuf_r+0x24>

080217b0 <__smakebuf_r>:
 80217b0:	898b      	ldrh	r3, [r1, #12]
 80217b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80217b4:	079d      	lsls	r5, r3, #30
 80217b6:	4606      	mov	r6, r0
 80217b8:	460c      	mov	r4, r1
 80217ba:	d507      	bpl.n	80217cc <__smakebuf_r+0x1c>
 80217bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80217c0:	6023      	str	r3, [r4, #0]
 80217c2:	6123      	str	r3, [r4, #16]
 80217c4:	2301      	movs	r3, #1
 80217c6:	6163      	str	r3, [r4, #20]
 80217c8:	b002      	add	sp, #8
 80217ca:	bd70      	pop	{r4, r5, r6, pc}
 80217cc:	ab01      	add	r3, sp, #4
 80217ce:	466a      	mov	r2, sp
 80217d0:	f7ff ffc8 	bl	8021764 <__swhatbuf_r>
 80217d4:	9900      	ldr	r1, [sp, #0]
 80217d6:	4605      	mov	r5, r0
 80217d8:	4630      	mov	r0, r6
 80217da:	f7fa ffe1 	bl	801c7a0 <_malloc_r>
 80217de:	b948      	cbnz	r0, 80217f4 <__smakebuf_r+0x44>
 80217e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80217e4:	059a      	lsls	r2, r3, #22
 80217e6:	d4ef      	bmi.n	80217c8 <__smakebuf_r+0x18>
 80217e8:	f023 0303 	bic.w	r3, r3, #3
 80217ec:	f043 0302 	orr.w	r3, r3, #2
 80217f0:	81a3      	strh	r3, [r4, #12]
 80217f2:	e7e3      	b.n	80217bc <__smakebuf_r+0xc>
 80217f4:	89a3      	ldrh	r3, [r4, #12]
 80217f6:	6020      	str	r0, [r4, #0]
 80217f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80217fc:	81a3      	strh	r3, [r4, #12]
 80217fe:	9b00      	ldr	r3, [sp, #0]
 8021800:	6163      	str	r3, [r4, #20]
 8021802:	9b01      	ldr	r3, [sp, #4]
 8021804:	6120      	str	r0, [r4, #16]
 8021806:	b15b      	cbz	r3, 8021820 <__smakebuf_r+0x70>
 8021808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802180c:	4630      	mov	r0, r6
 802180e:	f000 f81d 	bl	802184c <_isatty_r>
 8021812:	b128      	cbz	r0, 8021820 <__smakebuf_r+0x70>
 8021814:	89a3      	ldrh	r3, [r4, #12]
 8021816:	f023 0303 	bic.w	r3, r3, #3
 802181a:	f043 0301 	orr.w	r3, r3, #1
 802181e:	81a3      	strh	r3, [r4, #12]
 8021820:	89a3      	ldrh	r3, [r4, #12]
 8021822:	431d      	orrs	r5, r3
 8021824:	81a5      	strh	r5, [r4, #12]
 8021826:	e7cf      	b.n	80217c8 <__smakebuf_r+0x18>

08021828 <_fstat_r>:
 8021828:	b538      	push	{r3, r4, r5, lr}
 802182a:	4d07      	ldr	r5, [pc, #28]	; (8021848 <_fstat_r+0x20>)
 802182c:	2300      	movs	r3, #0
 802182e:	4604      	mov	r4, r0
 8021830:	4608      	mov	r0, r1
 8021832:	4611      	mov	r1, r2
 8021834:	602b      	str	r3, [r5, #0]
 8021836:	f7e9 ff38 	bl	800b6aa <_fstat>
 802183a:	1c43      	adds	r3, r0, #1
 802183c:	d102      	bne.n	8021844 <_fstat_r+0x1c>
 802183e:	682b      	ldr	r3, [r5, #0]
 8021840:	b103      	cbz	r3, 8021844 <_fstat_r+0x1c>
 8021842:	6023      	str	r3, [r4, #0]
 8021844:	bd38      	pop	{r3, r4, r5, pc}
 8021846:	bf00      	nop
 8021848:	2000a1c4 	.word	0x2000a1c4

0802184c <_isatty_r>:
 802184c:	b538      	push	{r3, r4, r5, lr}
 802184e:	4d06      	ldr	r5, [pc, #24]	; (8021868 <_isatty_r+0x1c>)
 8021850:	2300      	movs	r3, #0
 8021852:	4604      	mov	r4, r0
 8021854:	4608      	mov	r0, r1
 8021856:	602b      	str	r3, [r5, #0]
 8021858:	f7e9 ff37 	bl	800b6ca <_isatty>
 802185c:	1c43      	adds	r3, r0, #1
 802185e:	d102      	bne.n	8021866 <_isatty_r+0x1a>
 8021860:	682b      	ldr	r3, [r5, #0]
 8021862:	b103      	cbz	r3, 8021866 <_isatty_r+0x1a>
 8021864:	6023      	str	r3, [r4, #0]
 8021866:	bd38      	pop	{r3, r4, r5, pc}
 8021868:	2000a1c4 	.word	0x2000a1c4

0802186c <_init>:
 802186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802186e:	bf00      	nop
 8021870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021872:	bc08      	pop	{r3}
 8021874:	469e      	mov	lr, r3
 8021876:	4770      	bx	lr

08021878 <_fini>:
 8021878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802187a:	bf00      	nop
 802187c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802187e:	bc08      	pop	{r3}
 8021880:	469e      	mov	lr, r3
 8021882:	4770      	bx	lr
